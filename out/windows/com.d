module windows.com;

public import windows.core;
public import windows.automation : BSTR, IDispatch, IErrorLog, IPropertyBag, ITypeInfo, VARIANT;
public import windows.componentservices : IEventObjectCollection;
public import windows.controls : PROPSHEETHEADERA_V2, PROPSHEETHEADERW_V2;
public import windows.displaydevices : POINT, POINTL, RECT, RECTL, SIZE;
public import windows.gdi : HBITMAP, HCURSOR, HDC, HFONT, HICON, HPALETTE, HRGN, LOGPALETTE, TEXTMETRICW;
public import windows.menusandresources : HACCEL, HMENU;
public import windows.security : TRUSTEE_A, TRUSTEE_W;
public import windows.shell : SOFTDISTINFO, UNDOCK_REASON;
public import windows.structuredstorage : IStorage, IStream;
public import windows.systemservices : BOOL, CY, HANDLE, HINSTANCE, IServiceProvider, LARGE_INTEGER, LRESULT,
                                       SECURITY_ATTRIBUTES, ULARGE_INTEGER, uCLSSPEC, userHBITMAP, userHENHMETAFILE,
                                       userHGLOBAL, userHMETAFILEPICT, userHPALETTE;
public import windows.winrt : IInspectable;
public import windows.winsock : BLOB;
public import windows.windowsandmessaging : HWND, LPARAM, MSG, OPENFILENAMEA, OPENFILENAMEW, WPARAM;
public import windows.windowsprogramming : FILETIME, IXMLElement, SYSTEMTIME;

extern(Windows):


// Enums


enum : int
{
    MEMCTX_TASK      = 0x00000001,
    MEMCTX_SHARED    = 0x00000002,
    MEMCTX_MACSYSTEM = 0x00000003,
    MEMCTX_UNKNOWN   = 0xffffffff,
    MEMCTX_SAME      = 0xfffffffe,
}
alias MEMCTX = int;

enum : int
{
    CLSCTX_INPROC_SERVER          = 0x00000001,
    CLSCTX_INPROC_HANDLER         = 0x00000002,
    CLSCTX_LOCAL_SERVER           = 0x00000004,
    CLSCTX_INPROC_SERVER16        = 0x00000008,
    CLSCTX_REMOTE_SERVER          = 0x00000010,
    CLSCTX_INPROC_HANDLER16       = 0x00000020,
    CLSCTX_RESERVED1              = 0x00000040,
    CLSCTX_RESERVED2              = 0x00000080,
    CLSCTX_RESERVED3              = 0x00000100,
    CLSCTX_RESERVED4              = 0x00000200,
    CLSCTX_NO_CODE_DOWNLOAD       = 0x00000400,
    CLSCTX_RESERVED5              = 0x00000800,
    CLSCTX_NO_CUSTOM_MARSHAL      = 0x00001000,
    CLSCTX_ENABLE_CODE_DOWNLOAD   = 0x00002000,
    CLSCTX_NO_FAILURE_LOG         = 0x00004000,
    CLSCTX_DISABLE_AAA            = 0x00008000,
    CLSCTX_ENABLE_AAA             = 0x00010000,
    CLSCTX_FROM_DEFAULT_CONTEXT   = 0x00020000,
    CLSCTX_ACTIVATE_X86_SERVER    = 0x00040000,
    CLSCTX_ACTIVATE_32_BIT_SERVER = 0x00040000,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 0x00080000,
    CLSCTX_ENABLE_CLOAKING        = 0x00100000,
    CLSCTX_APPCONTAINER           = 0x00400000,
    CLSCTX_ACTIVATE_AAA_AS_IU     = 0x00800000,
    CLSCTX_RESERVED6              = 0x01000000,
    CLSCTX_ACTIVATE_ARM32_SERVER  = 0x02000000,
    CLSCTX_PS_DLL                 = 0x80000000,
}
alias CLSCTX = int;

enum : int
{
    MSHLFLAGS_NORMAL      = 0x00000000,
    MSHLFLAGS_TABLESTRONG = 0x00000001,
    MSHLFLAGS_TABLEWEAK   = 0x00000002,
    MSHLFLAGS_NOPING      = 0x00000004,
    MSHLFLAGS_RESERVED1   = 0x00000008,
    MSHLFLAGS_RESERVED2   = 0x00000010,
    MSHLFLAGS_RESERVED3   = 0x00000020,
    MSHLFLAGS_RESERVED4   = 0x00000040,
}
alias MSHLFLAGS = int;

enum : int
{
    MSHCTX_LOCAL            = 0x00000000,
    MSHCTX_NOSHAREDMEM      = 0x00000001,
    MSHCTX_DIFFERENTMACHINE = 0x00000002,
    MSHCTX_INPROC           = 0x00000003,
    MSHCTX_CROSSCTX         = 0x00000004,
    MSHCTX_RESERVED1        = 0x00000005,
}
alias MSHCTX = int;

enum : int
{
    REGCLS_SINGLEUSE      = 0x00000000,
    REGCLS_MULTIPLEUSE    = 0x00000001,
    REGCLS_MULTI_SEPARATE = 0x00000002,
    REGCLS_SUSPENDED      = 0x00000004,
    REGCLS_SURROGATE      = 0x00000008,
    REGCLS_AGILE          = 0x00000010,
}
alias REGCLS = int;

enum : int
{
    COINITBASE_MULTITHREADED = 0x00000000,
}
alias COINITBASE = int;

enum : int
{
    EXTCONN_STRONG   = 0x00000001,
    EXTCONN_WEAK     = 0x00000002,
    EXTCONN_CALLABLE = 0x00000004,
}
alias EXTCONN = int;

enum : int
{
    EOAC_NONE              = 0x00000000,
    EOAC_MUTUAL_AUTH       = 0x00000001,
    EOAC_STATIC_CLOAKING   = 0x00000020,
    EOAC_DYNAMIC_CLOAKING  = 0x00000040,
    EOAC_ANY_AUTHORITY     = 0x00000080,
    EOAC_MAKE_FULLSIC      = 0x00000100,
    EOAC_DEFAULT           = 0x00000800,
    EOAC_SECURE_REFS       = 0x00000002,
    EOAC_ACCESS_CONTROL    = 0x00000004,
    EOAC_APPID             = 0x00000008,
    EOAC_DYNAMIC           = 0x00000010,
    EOAC_REQUIRE_FULLSIC   = 0x00000200,
    EOAC_AUTO_IMPERSONATE  = 0x00000400,
    EOAC_DISABLE_AAA       = 0x00001000,
    EOAC_NO_CUSTOM_MARSHAL = 0x00002000,
    EOAC_RESERVED1         = 0x00004000,
}
alias EOLE_AUTHENTICATION_CAPABILITIES = int;

enum : int
{
    COMBND_RPCTIMEOUT      = 0x00000001,
    COMBND_SERVER_LOCALITY = 0x00000002,
    COMBND_RESERVED1       = 0x00000004,
    COMBND_RESERVED2       = 0x00000005,
    COMBND_RESERVED3       = 0x00000008,
    COMBND_RESERVED4       = 0x00000010,
}
alias RPCOPT_PROPERTIES = int;

enum : int
{
    SERVER_LOCALITY_PROCESS_LOCAL = 0x00000000,
    SERVER_LOCALITY_MACHINE_LOCAL = 0x00000001,
    SERVER_LOCALITY_REMOTE        = 0x00000002,
}
alias RPCOPT_SERVER_LOCALITY_VALUES = int;

enum : int
{
    COMGLB_EXCEPTION_HANDLING     = 0x00000001,
    COMGLB_APPID                  = 0x00000002,
    COMGLB_RPC_THREADPOOL_SETTING = 0x00000003,
    COMGLB_RO_SETTINGS            = 0x00000004,
    COMGLB_UNMARSHALING_POLICY    = 0x00000005,
    COMGLB_PROPERTIES_RESERVED1   = 0x00000006,
    COMGLB_PROPERTIES_RESERVED2   = 0x00000007,
    COMGLB_PROPERTIES_RESERVED3   = 0x00000008,
}
alias GLOBALOPT_PROPERTIES = int;

enum : int
{
    COMGLB_EXCEPTION_HANDLE             = 0x00000000,
    COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 0x00000001,
    COMGLB_EXCEPTION_DONOT_HANDLE       = 0x00000001,
    COMGLB_EXCEPTION_DONOT_HANDLE_ANY   = 0x00000002,
}
alias GLOBALOPT_EH_VALUES = int;

enum : int
{
    COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0x00000000,
    COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 0x00000001,
}
alias GLOBALOPT_RPCTP_VALUES = int;

enum : int
{
    COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES                    = 0x00000001,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES       = 0x00000002,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 0x00000004,
    COMGLB_FAST_RUNDOWN                                           = 0x00000008,
    COMGLB_RESERVED1                                              = 0x00000010,
    COMGLB_RESERVED2                                              = 0x00000020,
    COMGLB_RESERVED3                                              = 0x00000040,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES    = 0x00000080,
    COMGLB_RESERVED4                                              = 0x00000100,
    COMGLB_RESERVED5                                              = 0x00000200,
    COMGLB_RESERVED6                                              = 0x00000400,
}
alias GLOBALOPT_RO_FLAGS = int;

enum : int
{
    COMGLB_UNMARSHALING_POLICY_NORMAL = 0x00000000,
    COMGLB_UNMARSHALING_POLICY_STRONG = 0x00000001,
    COMGLB_UNMARSHALING_POLICY_HYBRID = 0x00000002,
}
alias GLOBALOPT_UNMARSHALING_POLICY_VALUES = int;

enum : int
{
    DCOM_NONE          = 0x00000000,
    DCOM_CALL_COMPLETE = 0x00000001,
    DCOM_CALL_CANCELED = 0x00000002,
}
alias DCOM_CALL_STATE = int;

enum : int
{
    APTTYPEQUALIFIER_NONE               = 0x00000000,
    APTTYPEQUALIFIER_IMPLICIT_MTA       = 0x00000001,
    APTTYPEQUALIFIER_NA_ON_MTA          = 0x00000002,
    APTTYPEQUALIFIER_NA_ON_STA          = 0x00000003,
    APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 0x00000004,
    APTTYPEQUALIFIER_NA_ON_MAINSTA      = 0x00000005,
    APTTYPEQUALIFIER_APPLICATION_STA    = 0x00000006,
    APTTYPEQUALIFIER_RESERVED_1         = 0x00000007,
}
alias APTTYPEQUALIFIER = int;

enum : int
{
    APTTYPE_CURRENT = 0xffffffff,
    APTTYPE_STA     = 0x00000000,
    APTTYPE_MTA     = 0x00000001,
    APTTYPE_NA      = 0x00000002,
    APTTYPE_MAINSTA = 0x00000003,
}
alias APTTYPE = int;

enum : int
{
    THDTYPE_BLOCKMESSAGES   = 0x00000000,
    THDTYPE_PROCESSMESSAGES = 0x00000001,
}
alias THDTYPE = int;

enum : int
{
    CO_MARSHALING_SOURCE_IS_APP_CONTAINER       = 0x00000000,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1  = 0x80000000,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2  = 0x80000001,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3  = 0x80000002,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4  = 0x80000003,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5  = 0x80000004,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6  = 0x80000005,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7  = 0x80000006,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8  = 0x80000007,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9  = 0x80000008,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = 0x80000009,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = 0x8000000a,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = 0x8000000b,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = 0x8000000c,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = 0x8000000d,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = 0x8000000e,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = 0x8000000f,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = 0x80000010,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = 0x80000011,
}
alias CO_MARSHALING_CONTEXT_ATTRIBUTES = int;

enum : int
{
    SMEXF_SERVER  = 0x00000001,
    SMEXF_HANDLER = 0x00000002,
}
alias STDMSHLFLAGS = int;

enum : int
{
    COWAIT_DEFAULT                  = 0x00000000,
    COWAIT_WAITALL                  = 0x00000001,
    COWAIT_ALERTABLE                = 0x00000002,
    COWAIT_INPUTAVAILABLE           = 0x00000004,
    COWAIT_DISPATCH_CALLS           = 0x00000008,
    COWAIT_DISPATCH_WINDOW_MESSAGES = 0x00000010,
}
alias COWAIT_FLAGS = int;

enum : int
{
    CWMO_DEFAULT                  = 0x00000000,
    CWMO_DISPATCH_CALLS           = 0x00000001,
    CWMO_DISPATCH_WINDOW_MESSAGES = 0x00000002,
}
alias CWMO_FLAGS = int;

enum : int
{
    BIND_MAYBOTHERUSER     = 0x00000001,
    BIND_JUSTTESTEXISTENCE = 0x00000002,
}
alias BIND_FLAGS = int;

enum : int
{
    MKSYS_NONE             = 0x00000000,
    MKSYS_GENERICCOMPOSITE = 0x00000001,
    MKSYS_FILEMONIKER      = 0x00000002,
    MKSYS_ANTIMONIKER      = 0x00000003,
    MKSYS_ITEMMONIKER      = 0x00000004,
    MKSYS_POINTERMONIKER   = 0x00000005,
    MKSYS_CLASSMONIKER     = 0x00000007,
    MKSYS_OBJREFMONIKER    = 0x00000008,
    MKSYS_SESSIONMONIKER   = 0x00000009,
    MKSYS_LUAMONIKER       = 0x0000000a,
}
alias MKSYS = int;

enum : int
{
    MKRREDUCE_ONE         = 0x00030000,
    MKRREDUCE_TOUSER      = 0x00020000,
    MKRREDUCE_THROUGHUSER = 0x00010000,
    MKRREDUCE_ALL         = 0x00000000,
}
alias MKREDUCE = int;

enum : int
{
    ADVF_NODATA            = 0x00000001,
    ADVF_PRIMEFIRST        = 0x00000002,
    ADVF_ONLYONCE          = 0x00000004,
    ADVF_DATAONSTOP        = 0x00000040,
    ADVFCACHE_NOHANDLER    = 0x00000008,
    ADVFCACHE_FORCEBUILTIN = 0x00000010,
    ADVFCACHE_ONSAVE       = 0x00000020,
}
alias ADVF = int;

enum : int
{
    TYMED_HGLOBAL  = 0x00000001,
    TYMED_FILE     = 0x00000002,
    TYMED_ISTREAM  = 0x00000004,
    TYMED_ISTORAGE = 0x00000008,
    TYMED_GDI      = 0x00000010,
    TYMED_MFPICT   = 0x00000020,
    TYMED_ENHMF    = 0x00000040,
    TYMED_NULL     = 0x00000000,
}
alias TYMED = int;

enum : int
{
    DATADIR_GET = 0x00000001,
    DATADIR_SET = 0x00000002,
}
alias DATADIR = int;

enum : int
{
    CALLTYPE_TOPLEVEL             = 0x00000001,
    CALLTYPE_NESTED               = 0x00000002,
    CALLTYPE_ASYNC                = 0x00000003,
    CALLTYPE_TOPLEVEL_CALLPENDING = 0x00000004,
    CALLTYPE_ASYNC_CALLPENDING    = 0x00000005,
}
alias CALLTYPE = int;

enum : int
{
    SERVERCALL_ISHANDLED  = 0x00000000,
    SERVERCALL_REJECTED   = 0x00000001,
    SERVERCALL_RETRYLATER = 0x00000002,
}
alias SERVERCALL = int;

enum : int
{
    PENDINGTYPE_TOPLEVEL = 0x00000001,
    PENDINGTYPE_NESTED   = 0x00000002,
}
alias PENDINGTYPE = int;

enum : int
{
    PENDINGMSG_CANCELCALL     = 0x00000000,
    PENDINGMSG_WAITNOPROCESS  = 0x00000001,
    PENDINGMSG_WAITDEFPROCESS = 0x00000002,
}
alias PENDINGMSG = int;

enum ApplicationType : int
{
    ServerApplication  = 0x00000000,
    LibraryApplication = 0x00000001,
}

enum ShutdownType : int
{
    IdleShutdown   = 0x00000000,
    ForcedShutdown = 0x00000001,
}

enum : int
{
    DISCARDCACHE_SAVEIFDIRTY = 0x00000000,
    DISCARDCACHE_NOSAVE      = 0x00000001,
}
alias DISCARDCACHE = int;

enum : int
{
    OLEGETMONIKER_ONLYIFTHERE = 0x00000001,
    OLEGETMONIKER_FORCEASSIGN = 0x00000002,
    OLEGETMONIKER_UNASSIGN    = 0x00000003,
    OLEGETMONIKER_TEMPFORUSER = 0x00000004,
}
alias OLEGETMONIKER = int;

enum : int
{
    OLEWHICHMK_CONTAINER = 0x00000001,
    OLEWHICHMK_OBJREL    = 0x00000002,
    OLEWHICHMK_OBJFULL   = 0x00000003,
}
alias OLEWHICHMK = int;

enum : int
{
    USERCLASSTYPE_FULL    = 0x00000001,
    USERCLASSTYPE_SHORT   = 0x00000002,
    USERCLASSTYPE_APPNAME = 0x00000003,
}
alias USERCLASSTYPE = int;

enum : int
{
    OLEMISC_RECOMPOSEONRESIZE            = 0x00000001,
    OLEMISC_ONLYICONIC                   = 0x00000002,
    OLEMISC_INSERTNOTREPLACE             = 0x00000004,
    OLEMISC_STATIC                       = 0x00000008,
    OLEMISC_CANTLINKINSIDE               = 0x00000010,
    OLEMISC_CANLINKBYOLE1                = 0x00000020,
    OLEMISC_ISLINKOBJECT                 = 0x00000040,
    OLEMISC_INSIDEOUT                    = 0x00000080,
    OLEMISC_ACTIVATEWHENVISIBLE          = 0x00000100,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x00000200,
    OLEMISC_INVISIBLEATRUNTIME           = 0x00000400,
    OLEMISC_ALWAYSRUN                    = 0x00000800,
    OLEMISC_ACTSLIKEBUTTON               = 0x00001000,
    OLEMISC_ACTSLIKELABEL                = 0x00002000,
    OLEMISC_NOUIACTIVATE                 = 0x00004000,
    OLEMISC_ALIGNABLE                    = 0x00008000,
    OLEMISC_SIMPLEFRAME                  = 0x00010000,
    OLEMISC_SETCLIENTSITEFIRST           = 0x00020000,
    OLEMISC_IMEMODE                      = 0x00040000,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE    = 0x00080000,
    OLEMISC_WANTSTOMENUMERGE             = 0x00100000,
    OLEMISC_SUPPORTSMULTILEVELUNDO       = 0x00200000,
}
alias OLEMISC = int;

enum : int
{
    OLECLOSE_SAVEIFDIRTY = 0x00000000,
    OLECLOSE_NOSAVE      = 0x00000001,
    OLECLOSE_PROMPTSAVE  = 0x00000002,
}
alias OLECLOSE = int;

enum : int
{
    OLERENDER_NONE   = 0x00000000,
    OLERENDER_DRAW   = 0x00000001,
    OLERENDER_FORMAT = 0x00000002,
    OLERENDER_ASIS   = 0x00000003,
}
alias OLERENDER = int;

enum : int
{
    OLEUPDATE_ALWAYS = 0x00000001,
    OLEUPDATE_ONCALL = 0x00000003,
}
alias OLEUPDATE = int;

enum : int
{
    OLELINKBIND_EVENIFCLASSDIFF = 0x00000001,
}
alias OLELINKBIND = int;

enum : int
{
    BINDSPEED_INDEFINITE = 0x00000001,
    BINDSPEED_MODERATE   = 0x00000002,
    BINDSPEED_IMMEDIATE  = 0x00000003,
}
alias BINDSPEED = int;

enum : int
{
    OLECONTF_EMBEDDINGS    = 0x00000001,
    OLECONTF_LINKS         = 0x00000002,
    OLECONTF_OTHERS        = 0x00000004,
    OLECONTF_ONLYUSER      = 0x00000008,
    OLECONTF_ONLYIFRUNNING = 0x00000010,
}
alias OLECONTF = int;

enum : int
{
    OLEVERBATTRIB_NEVERDIRTIES    = 0x00000001,
    OLEVERBATTRIB_ONCONTAINERMENU = 0x00000002,
}
alias OLEVERBATTRIB = int;

enum IEObjectType : int
{
    IE_EPM_OBJECT_EVENT          = 0x00000000,
    IE_EPM_OBJECT_MUTEX          = 0x00000001,
    IE_EPM_OBJECT_SEMAPHORE      = 0x00000002,
    IE_EPM_OBJECT_SHARED_MEMORY  = 0x00000003,
    IE_EPM_OBJECT_WAITABLE_TIMER = 0x00000004,
    IE_EPM_OBJECT_FILE           = 0x00000005,
    IE_EPM_OBJECT_NAMED_PIPE     = 0x00000006,
    IE_EPM_OBJECT_REGISTRY       = 0x00000007,
}

enum : int
{
    MIMETYPEPROP        = 0x00000000,
    USE_SRC_URL         = 0x00000001,
    CLASSIDPROP         = 0x00000002,
    TRUSTEDDOWNLOADPROP = 0x00000003,
    POPUPLEVELPROP      = 0x00000004,
}
alias MONIKERPROPERTY = int;

enum : int
{
    BINDVERB_GET       = 0x00000000,
    BINDVERB_POST      = 0x00000001,
    BINDVERB_PUT       = 0x00000002,
    BINDVERB_CUSTOM    = 0x00000003,
    BINDVERB_RESERVED1 = 0x00000004,
}
alias BINDVERB = int;

enum : int
{
    BINDINFOF_URLENCODESTGMEDDATA = 0x00000001,
    BINDINFOF_URLENCODEDEXTRAINFO = 0x00000002,
}
alias BINDINFOF = int;

enum : int
{
    BINDF_ASYNCHRONOUS             = 0x00000001,
    BINDF_ASYNCSTORAGE             = 0x00000002,
    BINDF_NOPROGRESSIVERENDERING   = 0x00000004,
    BINDF_OFFLINEOPERATION         = 0x00000008,
    BINDF_GETNEWESTVERSION         = 0x00000010,
    BINDF_NOWRITECACHE             = 0x00000020,
    BINDF_NEEDFILE                 = 0x00000040,
    BINDF_PULLDATA                 = 0x00000080,
    BINDF_IGNORESECURITYPROBLEM    = 0x00000100,
    BINDF_RESYNCHRONIZE            = 0x00000200,
    BINDF_HYPERLINK                = 0x00000400,
    BINDF_NO_UI                    = 0x00000800,
    BINDF_SILENTOPERATION          = 0x00001000,
    BINDF_PRAGMA_NO_CACHE          = 0x00002000,
    BINDF_GETCLASSOBJECT           = 0x00004000,
    BINDF_RESERVED_1               = 0x00008000,
    BINDF_FREE_THREADED            = 0x00010000,
    BINDF_DIRECT_READ              = 0x00020000,
    BINDF_FORMS_SUBMIT             = 0x00040000,
    BINDF_GETFROMCACHE_IF_NET_FAIL = 0x00080000,
    BINDF_FROMURLMON               = 0x00100000,
    BINDF_FWD_BACK                 = 0x00200000,
    BINDF_PREFERDEFAULTHANDLER     = 0x00400000,
    BINDF_ENFORCERESTRICTED        = 0x00800000,
    BINDF_RESERVED_2               = 0x80000000,
    BINDF_RESERVED_3               = 0x01000000,
    BINDF_RESERVED_4               = 0x02000000,
    BINDF_RESERVED_5               = 0x04000000,
    BINDF_RESERVED_6               = 0x08000000,
    BINDF_RESERVED_7               = 0x40000000,
    BINDF_RESERVED_8               = 0x20000000,
}
alias BINDF = int;

enum : int
{
    URL_ENCODING_NONE         = 0x00000000,
    URL_ENCODING_ENABLE_UTF8  = 0x10000000,
    URL_ENCODING_DISABLE_UTF8 = 0x20000000,
}
alias URL_ENCODING = int;

enum : int
{
    BINDINFO_OPTIONS_WININETFLAG              = 0x00010000,
    BINDINFO_OPTIONS_ENABLE_UTF8              = 0x00020000,
    BINDINFO_OPTIONS_DISABLE_UTF8             = 0x00040000,
    BINDINFO_OPTIONS_USE_IE_ENCODING          = 0x00080000,
    BINDINFO_OPTIONS_BINDTOOBJECT             = 0x00100000,
    BINDINFO_OPTIONS_SECURITYOPTOUT           = 0x00200000,
    BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN      = 0x00400000,
    BINDINFO_OPTIONS_USEBINDSTRINGCREDS       = 0x00800000,
    BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x01000000,
    BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE    = 0x02000000,
    BINDINFO_WPC_DOWNLOADBLOCKED              = 0x08000000,
    BINDINFO_WPC_LOGGING_ENABLED              = 0x10000000,
    BINDINFO_OPTIONS_ALLOWCONNECTDATA         = 0x20000000,
    BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS     = 0x40000000,
    BINDINFO_OPTIONS_SHDOCVW_NAVIGATE         = 0x80000000,
}
alias BINDINFO_OPTIONS = int;

enum : int
{
    BSCF_FIRSTDATANOTIFICATION        = 0x00000001,
    BSCF_INTERMEDIATEDATANOTIFICATION = 0x00000002,
    BSCF_LASTDATANOTIFICATION         = 0x00000004,
    BSCF_DATAFULLYAVAILABLE           = 0x00000008,
    BSCF_AVAILABLEDATASIZEUNKNOWN     = 0x00000010,
    BSCF_SKIPDRAINDATAFORFILEURLS     = 0x00000020,
    BSCF_64BITLENGTHDOWNLOAD          = 0x00000040,
}
alias BSCF = int;

enum : int
{
    BINDSTATUS_FINDINGRESOURCE            = 0x00000001,
    BINDSTATUS_CONNECTING                 = 0x00000002,
    BINDSTATUS_REDIRECTING                = 0x00000003,
    BINDSTATUS_BEGINDOWNLOADDATA          = 0x00000004,
    BINDSTATUS_DOWNLOADINGDATA            = 0x00000005,
    BINDSTATUS_ENDDOWNLOADDATA            = 0x00000006,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS    = 0x00000007,
    BINDSTATUS_INSTALLINGCOMPONENTS       = 0x00000008,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS      = 0x00000009,
    BINDSTATUS_USINGCACHEDCOPY            = 0x0000000a,
    BINDSTATUS_SENDINGREQUEST             = 0x0000000b,
    BINDSTATUS_CLASSIDAVAILABLE           = 0x0000000c,
    BINDSTATUS_MIMETYPEAVAILABLE          = 0x0000000d,
    BINDSTATUS_CACHEFILENAMEAVAILABLE     = 0x0000000e,
    BINDSTATUS_BEGINSYNCOPERATION         = 0x0000000f,
    BINDSTATUS_ENDSYNCOPERATION           = 0x00000010,
    BINDSTATUS_BEGINUPLOADDATA            = 0x00000011,
    BINDSTATUS_UPLOADINGDATA              = 0x00000012,
    BINDSTATUS_ENDUPLOADDATA              = 0x00000013,
    BINDSTATUS_PROTOCOLCLASSID            = 0x00000014,
    BINDSTATUS_ENCODING                   = 0x00000015,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE  = 0x00000016,
    BINDSTATUS_CLASSINSTALLLOCATION       = 0x00000017,
    BINDSTATUS_DECODING                   = 0x00000018,
    BINDSTATUS_LOADINGMIMEHANDLER         = 0x00000019,
    BINDSTATUS_CONTENTDISPOSITIONATTACH   = 0x0000001a,
    BINDSTATUS_FILTERREPORTMIMETYPE       = 0x0000001b,
    BINDSTATUS_CLSIDCANINSTANTIATE        = 0x0000001c,
    BINDSTATUS_IUNKNOWNAVAILABLE          = 0x0000001d,
    BINDSTATUS_DIRECTBIND                 = 0x0000001e,
    BINDSTATUS_RAWMIMETYPE                = 0x0000001f,
    BINDSTATUS_PROXYDETECTING             = 0x00000020,
    BINDSTATUS_ACCEPTRANGES               = 0x00000021,
    BINDSTATUS_COOKIE_SENT                = 0x00000022,
    BINDSTATUS_COMPACT_POLICY_RECEIVED    = 0x00000023,
    BINDSTATUS_COOKIE_SUPPRESSED          = 0x00000024,
    BINDSTATUS_COOKIE_STATE_UNKNOWN       = 0x00000025,
    BINDSTATUS_COOKIE_STATE_ACCEPT        = 0x00000026,
    BINDSTATUS_COOKIE_STATE_REJECT        = 0x00000027,
    BINDSTATUS_COOKIE_STATE_PROMPT        = 0x00000028,
    BINDSTATUS_COOKIE_STATE_LEASH         = 0x00000029,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE     = 0x0000002a,
    BINDSTATUS_POLICY_HREF                = 0x0000002b,
    BINDSTATUS_P3P_HEADER                 = 0x0000002c,
    BINDSTATUS_SESSION_COOKIE_RECEIVED    = 0x0000002d,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 0x0000002e,
    BINDSTATUS_SESSION_COOKIES_ALLOWED    = 0x0000002f,
    BINDSTATUS_CACHECONTROL               = 0x00000030,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME = 0x00000031,
    BINDSTATUS_MIMETEXTPLAINMISMATCH      = 0x00000032,
    BINDSTATUS_PUBLISHERAVAILABLE         = 0x00000033,
    BINDSTATUS_DISPLAYNAMEAVAILABLE       = 0x00000034,
    BINDSTATUS_SSLUX_NAVBLOCKED           = 0x00000035,
    BINDSTATUS_SERVER_MIMETYPEAVAILABLE   = 0x00000036,
    BINDSTATUS_SNIFFED_CLASSIDAVAILABLE   = 0x00000037,
    BINDSTATUS_64BIT_PROGRESS             = 0x00000038,
    BINDSTATUS_LAST                       = 0x00000038,
    BINDSTATUS_RESERVED_0                 = 0x00000039,
    BINDSTATUS_RESERVED_1                 = 0x0000003a,
    BINDSTATUS_RESERVED_2                 = 0x0000003b,
    BINDSTATUS_RESERVED_3                 = 0x0000003c,
    BINDSTATUS_RESERVED_4                 = 0x0000003d,
    BINDSTATUS_RESERVED_5                 = 0x0000003e,
    BINDSTATUS_RESERVED_6                 = 0x0000003f,
    BINDSTATUS_RESERVED_7                 = 0x00000040,
    BINDSTATUS_RESERVED_8                 = 0x00000041,
    BINDSTATUS_RESERVED_9                 = 0x00000042,
    BINDSTATUS_RESERVED_A                 = 0x00000043,
    BINDSTATUS_RESERVED_B                 = 0x00000044,
    BINDSTATUS_RESERVED_C                 = 0x00000045,
    BINDSTATUS_RESERVED_D                 = 0x00000046,
    BINDSTATUS_RESERVED_E                 = 0x00000047,
    BINDSTATUS_RESERVED_F                 = 0x00000048,
    BINDSTATUS_RESERVED_10                = 0x00000049,
    BINDSTATUS_RESERVED_11                = 0x0000004a,
    BINDSTATUS_RESERVED_12                = 0x0000004b,
    BINDSTATUS_RESERVED_13                = 0x0000004c,
    BINDSTATUS_LAST_PRIVATE               = 0x0000004c,
}
alias BINDSTATUS = int;

enum : int
{
    BINDF2_DISABLEBASICOVERHTTP              = 0x00000001,
    BINDF2_DISABLEAUTOCOOKIEHANDLING         = 0x00000002,
    BINDF2_READ_DATA_GREATER_THAN_4GB        = 0x00000004,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 0x00000008,
    BINDF2_SETDOWNLOADMODE                   = 0x00000020,
    BINDF2_DISABLE_HTTP_REDIRECT_CACHING     = 0x00000040,
    BINDF2_KEEP_CALLBACK_MODULE_LOADED       = 0x00000080,
    BINDF2_ALLOW_PROXY_CRED_PROMPT           = 0x00000100,
    BINDF2_RESERVED_17                       = 0x00000200,
    BINDF2_RESERVED_16                       = 0x00000400,
    BINDF2_RESERVED_15                       = 0x00000800,
    BINDF2_RESERVED_14                       = 0x00001000,
    BINDF2_RESERVED_13                       = 0x00002000,
    BINDF2_RESERVED_12                       = 0x00004000,
    BINDF2_RESERVED_11                       = 0x00008000,
    BINDF2_RESERVED_10                       = 0x00010000,
    BINDF2_RESERVED_F                        = 0x00020000,
    BINDF2_RESERVED_E                        = 0x00040000,
    BINDF2_RESERVED_D                        = 0x00080000,
    BINDF2_RESERVED_C                        = 0x00100000,
    BINDF2_RESERVED_B                        = 0x00200000,
    BINDF2_RESERVED_A                        = 0x00400000,
    BINDF2_RESERVED_9                        = 0x00800000,
    BINDF2_RESERVED_8                        = 0x01000000,
    BINDF2_RESERVED_7                        = 0x02000000,
    BINDF2_RESERVED_6                        = 0x04000000,
    BINDF2_RESERVED_5                        = 0x08000000,
    BINDF2_RESERVED_4                        = 0x10000000,
    BINDF2_RESERVED_3                        = 0x20000000,
    BINDF2_RESERVED_2                        = 0x40000000,
    BINDF2_RESERVED_1                        = 0x80000000,
}
alias BINDF2 = int;

enum : int
{
    AUTHENTICATEF_PROXY = 0x00000001,
    AUTHENTICATEF_BASIC = 0x00000002,
    AUTHENTICATEF_HTTP  = 0x00000004,
}
alias AUTHENTICATEF = int;

enum : int
{
    CIP_DISK_FULL                            = 0x00000000,
    CIP_ACCESS_DENIED                        = 0x00000001,
    CIP_NEWER_VERSION_EXISTS                 = 0x00000002,
    CIP_OLDER_VERSION_EXISTS                 = 0x00000003,
    CIP_NAME_CONFLICT                        = 0x00000004,
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x00000005,
    CIP_EXE_SELF_REGISTERATION_TIMEOUT       = 0x00000006,
    CIP_UNSAFE_TO_ABORT                      = 0x00000007,
    CIP_NEED_REBOOT                          = 0x00000008,
    CIP_NEED_REBOOT_UI_PERMISSION            = 0x00000009,
}
alias CIP_STATUS = int;

enum : int
{
    Uri_PROPERTY_ABSOLUTE_URI   = 0x00000000,
    Uri_PROPERTY_STRING_START   = 0x00000000,
    Uri_PROPERTY_AUTHORITY      = 0x00000001,
    Uri_PROPERTY_DISPLAY_URI    = 0x00000002,
    Uri_PROPERTY_DOMAIN         = 0x00000003,
    Uri_PROPERTY_EXTENSION      = 0x00000004,
    Uri_PROPERTY_FRAGMENT       = 0x00000005,
    Uri_PROPERTY_HOST           = 0x00000006,
    Uri_PROPERTY_PASSWORD       = 0x00000007,
    Uri_PROPERTY_PATH           = 0x00000008,
    Uri_PROPERTY_PATH_AND_QUERY = 0x00000009,
    Uri_PROPERTY_QUERY          = 0x0000000a,
    Uri_PROPERTY_RAW_URI        = 0x0000000b,
    Uri_PROPERTY_SCHEME_NAME    = 0x0000000c,
    Uri_PROPERTY_USER_INFO      = 0x0000000d,
    Uri_PROPERTY_USER_NAME      = 0x0000000e,
    Uri_PROPERTY_STRING_LAST    = 0x0000000e,
    Uri_PROPERTY_HOST_TYPE      = 0x0000000f,
    Uri_PROPERTY_DWORD_START    = 0x0000000f,
    Uri_PROPERTY_PORT           = 0x00000010,
    Uri_PROPERTY_SCHEME         = 0x00000011,
    Uri_PROPERTY_ZONE           = 0x00000012,
    Uri_PROPERTY_DWORD_LAST     = 0x00000012,
}
alias Uri_PROPERTY = int;

enum : int
{
    Uri_HOST_UNKNOWN = 0x00000000,
    Uri_HOST_DNS     = 0x00000001,
    Uri_HOST_IPV4    = 0x00000002,
    Uri_HOST_IPV6    = 0x00000003,
    Uri_HOST_IDN     = 0x00000004,
}
alias Uri_HOST_TYPE = int;

enum : int
{
    BINDSTRING_HEADERS               = 0x00000001,
    BINDSTRING_ACCEPT_MIMES          = 0x00000002,
    BINDSTRING_EXTRA_URL             = 0x00000003,
    BINDSTRING_LANGUAGE              = 0x00000004,
    BINDSTRING_USERNAME              = 0x00000005,
    BINDSTRING_PASSWORD              = 0x00000006,
    BINDSTRING_UA_PIXELS             = 0x00000007,
    BINDSTRING_UA_COLOR              = 0x00000008,
    BINDSTRING_OS                    = 0x00000009,
    BINDSTRING_USER_AGENT            = 0x0000000a,
    BINDSTRING_ACCEPT_ENCODINGS      = 0x0000000b,
    BINDSTRING_POST_COOKIE           = 0x0000000c,
    BINDSTRING_POST_DATA_MIME        = 0x0000000d,
    BINDSTRING_URL                   = 0x0000000e,
    BINDSTRING_IID                   = 0x0000000f,
    BINDSTRING_FLAG_BIND_TO_OBJECT   = 0x00000010,
    BINDSTRING_PTR_BIND_CONTEXT      = 0x00000011,
    BINDSTRING_XDR_ORIGIN            = 0x00000012,
    BINDSTRING_DOWNLOADPATH          = 0x00000013,
    BINDSTRING_ROOTDOC_URL           = 0x00000014,
    BINDSTRING_INITIAL_FILENAME      = 0x00000015,
    BINDSTRING_PROXY_USERNAME        = 0x00000016,
    BINDSTRING_PROXY_PASSWORD        = 0x00000017,
    BINDSTRING_ENTERPRISE_ID         = 0x00000018,
    BINDSTRING_DOC_URL               = 0x00000019,
    BINDSTRING_SAMESITE_COOKIE_LEVEL = 0x0000001a,
}
alias BINDSTRING = int;

enum : int
{
    PI_PARSE_URL            = 0x00000001,
    PI_FILTER_MODE          = 0x00000002,
    PI_FORCE_ASYNC          = 0x00000004,
    PI_USE_WORKERTHREAD     = 0x00000008,
    PI_MIMEVERIFICATION     = 0x00000010,
    PI_CLSIDLOOKUP          = 0x00000020,
    PI_DATAPROGRESS         = 0x00000040,
    PI_SYNCHRONOUS          = 0x00000080,
    PI_APARTMENTTHREADED    = 0x00000100,
    PI_CLASSINSTALL         = 0x00000200,
    PI_PASSONBINDCTX        = 0x00002000,
    PI_NOMIMEHANDLER        = 0x00008000,
    PI_LOADAPPDIRECT        = 0x00004000,
    PD_FORCE_SWITCH         = 0x00010000,
    PI_PREFERDEFAULTHANDLER = 0x00020000,
}
alias PI_FLAGS = int;

enum : int
{
    OIBDG_APARTMENTTHREADED = 0x00000100,
    OIBDG_DATAONLY          = 0x00001000,
}
alias OIBDG_FLAGS = int;

enum : int
{
    PARSE_CANONICALIZE       = 0x00000001,
    PARSE_FRIENDLY           = 0x00000002,
    PARSE_SECURITY_URL       = 0x00000003,
    PARSE_ROOTDOCUMENT       = 0x00000004,
    PARSE_DOCUMENT           = 0x00000005,
    PARSE_ANCHOR             = 0x00000006,
    PARSE_ENCODE_IS_UNESCAPE = 0x00000007,
    PARSE_DECODE_IS_ESCAPE   = 0x00000008,
    PARSE_PATH_FROM_URL      = 0x00000009,
    PARSE_URL_FROM_PATH      = 0x0000000a,
    PARSE_MIME               = 0x0000000b,
    PARSE_SERVER             = 0x0000000c,
    PARSE_SCHEMA             = 0x0000000d,
    PARSE_SITE               = 0x0000000e,
    PARSE_DOMAIN             = 0x0000000f,
    PARSE_LOCATION           = 0x00000010,
    PARSE_SECURITY_DOMAIN    = 0x00000011,
    PARSE_ESCAPE             = 0x00000012,
    PARSE_UNESCAPE           = 0x00000013,
}
alias PARSEACTION = int;

enum : int
{
    PSU_DEFAULT           = 0x00000001,
    PSU_SECURITY_URL_ONLY = 0x00000002,
}
alias PSUACTION = int;

enum : int
{
    QUERY_EXPIRATION_DATE              = 0x00000001,
    QUERY_TIME_OF_LAST_CHANGE          = 0x00000002,
    QUERY_CONTENT_ENCODING             = 0x00000003,
    QUERY_CONTENT_TYPE                 = 0x00000004,
    QUERY_REFRESH                      = 0x00000005,
    QUERY_RECOMBINE                    = 0x00000006,
    QUERY_CAN_NAVIGATE                 = 0x00000007,
    QUERY_USES_NETWORK                 = 0x00000008,
    QUERY_IS_CACHED                    = 0x00000009,
    QUERY_IS_INSTALLEDENTRY            = 0x0000000a,
    QUERY_IS_CACHED_OR_MAPPED          = 0x0000000b,
    QUERY_USES_CACHE                   = 0x0000000c,
    QUERY_IS_SECURE                    = 0x0000000d,
    QUERY_IS_SAFE                      = 0x0000000e,
    QUERY_USES_HISTORYFOLDER           = 0x0000000f,
    QUERY_IS_CACHED_AND_USABLE_OFFLINE = 0x00000010,
}
alias QUERYOPTION = int;

enum : int
{
    FEATURE_OBJECT_CACHING                 = 0x00000000,
    FEATURE_ZONE_ELEVATION                 = 0x00000001,
    FEATURE_MIME_HANDLING                  = 0x00000002,
    FEATURE_MIME_SNIFFING                  = 0x00000003,
    FEATURE_WINDOW_RESTRICTIONS            = 0x00000004,
    FEATURE_WEBOC_POPUPMANAGEMENT          = 0x00000005,
    FEATURE_BEHAVIORS                      = 0x00000006,
    FEATURE_DISABLE_MK_PROTOCOL            = 0x00000007,
    FEATURE_LOCALMACHINE_LOCKDOWN          = 0x00000008,
    FEATURE_SECURITYBAND                   = 0x00000009,
    FEATURE_RESTRICT_ACTIVEXINSTALL        = 0x0000000a,
    FEATURE_VALIDATE_NAVIGATE_URL          = 0x0000000b,
    FEATURE_RESTRICT_FILEDOWNLOAD          = 0x0000000c,
    FEATURE_ADDON_MANAGEMENT               = 0x0000000d,
    FEATURE_PROTOCOL_LOCKDOWN              = 0x0000000e,
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 0x0000000f,
    FEATURE_SAFE_BINDTOOBJECT              = 0x00000010,
    FEATURE_UNC_SAVEDFILECHECK             = 0x00000011,
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 0x00000012,
    FEATURE_TABBED_BROWSING                = 0x00000013,
    FEATURE_SSLUX                          = 0x00000014,
    FEATURE_DISABLE_NAVIGATION_SOUNDS      = 0x00000015,
    FEATURE_DISABLE_LEGACY_COMPRESSION     = 0x00000016,
    FEATURE_FORCE_ADDR_AND_STATUS          = 0x00000017,
    FEATURE_XMLHTTP                        = 0x00000018,
    FEATURE_DISABLE_TELNET_PROTOCOL        = 0x00000019,
    FEATURE_FEEDS                          = 0x0000001a,
    FEATURE_BLOCK_INPUT_PROMPTS            = 0x0000001b,
    FEATURE_ENTRY_COUNT                    = 0x0000001c,
}
alias INTERNETFEATURELIST = int;

enum : int
{
    PUAF_DEFAULT                      = 0x00000000,
    PUAF_NOUI                         = 0x00000001,
    PUAF_ISFILE                       = 0x00000002,
    PUAF_WARN_IF_DENIED               = 0x00000004,
    PUAF_FORCEUI_FOREGROUND           = 0x00000008,
    PUAF_CHECK_TIFS                   = 0x00000010,
    PUAF_DONTCHECKBOXINDIALOG         = 0x00000020,
    PUAF_TRUSTED                      = 0x00000040,
    PUAF_ACCEPT_WILDCARD_SCHEME       = 0x00000080,
    PUAF_ENFORCERESTRICTED            = 0x00000100,
    PUAF_NOSAVEDFILECHECK             = 0x00000200,
    PUAF_REQUIRESAVEDFILECHECK        = 0x00000400,
    PUAF_DONT_USE_CACHE               = 0x00001000,
    PUAF_RESERVED1                    = 0x00002000,
    PUAF_RESERVED2                    = 0x00004000,
    PUAF_LMZ_UNLOCKED                 = 0x00010000,
    PUAF_LMZ_LOCKED                   = 0x00020000,
    PUAF_DEFAULTZONEPOL               = 0x00040000,
    PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x00080000,
    PUAF_NOUIIFLOCKED                 = 0x00100000,
    PUAF_DRAGPROTOCOLCHECK            = 0x00200000,
}
alias PUAF = int;

enum : int
{
    PUAFOUT_DEFAULT          = 0x00000000,
    PUAFOUT_ISLOCKZONEPOLICY = 0x00000001,
}
alias PUAFOUT = int;

enum : int
{
    SZM_CREATE = 0x00000000,
    SZM_DELETE = 0x00000001,
}
alias SZM_FLAGS = int;

enum : int
{
    URLZONE_INVALID        = 0xffffffff,
    URLZONE_PREDEFINED_MIN = 0x00000000,
    URLZONE_LOCAL_MACHINE  = 0x00000000,
    URLZONE_INTRANET       = 0x00000001,
    URLZONE_TRUSTED        = 0x00000002,
    URLZONE_INTERNET       = 0x00000003,
    URLZONE_UNTRUSTED      = 0x00000004,
    URLZONE_PREDEFINED_MAX = 0x000003e7,
    URLZONE_USER_MIN       = 0x000003e8,
    URLZONE_USER_MAX       = 0x00002710,
}
alias URLZONE = int;

enum : int
{
    URLTEMPLATE_CUSTOM         = 0x00000000,
    URLTEMPLATE_PREDEFINED_MIN = 0x00010000,
    URLTEMPLATE_LOW            = 0x00010000,
    URLTEMPLATE_MEDLOW         = 0x00010500,
    URLTEMPLATE_MEDIUM         = 0x00011000,
    URLTEMPLATE_MEDHIGH        = 0x00011500,
    URLTEMPLATE_HIGH           = 0x00012000,
    URLTEMPLATE_PREDEFINED_MAX = 0x00020000,
}
alias URLTEMPLATE = int;

enum : int
{
    MAX_ZONE_PATH        = 0x00000104,
    MAX_ZONE_DESCRIPTION = 0x000000c8,
}
alias __MIDL_IInternetZoneManager_0001 = int;

enum : int
{
    ZAFLAGS_CUSTOM_EDIT              = 0x00000001,
    ZAFLAGS_ADD_SITES                = 0x00000002,
    ZAFLAGS_REQUIRE_VERIFICATION     = 0x00000004,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE   = 0x00000008,
    ZAFLAGS_INCLUDE_INTRANET_SITES   = 0x00000010,
    ZAFLAGS_NO_UI                    = 0x00000020,
    ZAFLAGS_SUPPORTS_VERIFICATION    = 0x00000040,
    ZAFLAGS_UNC_AS_INTRANET          = 0x00000080,
    ZAFLAGS_DETECT_INTRANET          = 0x00000100,
    ZAFLAGS_USE_LOCKED_ZONES         = 0x00010000,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x00020000,
    ZAFLAGS_NO_CACHE                 = 0x00040000,
}
alias ZAFLAGS = int;

enum : int
{
    URLZONEREG_DEFAULT = 0x00000000,
    URLZONEREG_HKLM    = 0x00000001,
    URLZONEREG_HKCU    = 0x00000002,
}
alias URLZONEREG = int;

enum : int
{
    BINDHANDLETYPES_APPCACHE   = 0x00000000,
    BINDHANDLETYPES_DEPENDENCY = 0x00000001,
    BINDHANDLETYPES_COUNT      = 0x00000002,
}
alias BINDHANDLETYPES = int;

enum : int
{
    UAS_NORMAL         = 0x00000000,
    UAS_BLOCKED        = 0x00000001,
    UAS_NOPARENTENABLE = 0x00000002,
    UAS_MASK           = 0x00000003,
}
alias UASFLAGS = int;

enum : int
{
    GUIDKIND_DEFAULT_SOURCE_DISP_IID = 0x00000001,
}
alias GUIDKIND = int;

enum : int
{
    CTRLINFO_EATS_RETURN = 0x00000001,
    CTRLINFO_EATS_ESCAPE = 0x00000002,
}
alias CTRLINFO = int;

enum : int
{
    XFORMCOORDS_POSITION            = 0x00000001,
    XFORMCOORDS_SIZE                = 0x00000002,
    XFORMCOORDS_HIMETRICTOCONTAINER = 0x00000004,
    XFORMCOORDS_CONTAINERTOHIMETRIC = 0x00000008,
    XFORMCOORDS_EVENTCOMPAT         = 0x00000010,
}
alias XFORMCOORDS = int;

enum : int
{
    PROPPAGESTATUS_DIRTY    = 0x00000001,
    PROPPAGESTATUS_VALIDATE = 0x00000002,
    PROPPAGESTATUS_CLEAN    = 0x00000004,
}
alias PROPPAGESTATUS = int;

enum PictureAttributes : int
{
    PICTURE_SCALABLE    = 0x00000001,
    PICTURE_TRANSPARENT = 0x00000002,
}

enum : int
{
    ACTIVATE_WINDOWLESS = 0x00000001,
}
alias ACTIVATEFLAGS = int;

enum : int
{
    OLEDC_NODRAW     = 0x00000001,
    OLEDC_PAINTBKGND = 0x00000002,
    OLEDC_OFFSCREEN  = 0x00000004,
}
alias OLEDCFLAGS = int;

enum : int
{
    VIEWSTATUS_OPAQUE              = 0x00000001,
    VIEWSTATUS_SOLIDBKGND          = 0x00000002,
    VIEWSTATUS_DVASPECTOPAQUE      = 0x00000004,
    VIEWSTATUS_DVASPECTTRANSPARENT = 0x00000008,
    VIEWSTATUS_SURFACE             = 0x00000010,
    VIEWSTATUS_3DSURFACE           = 0x00000020,
}
alias VIEWSTATUS = int;

enum : int
{
    HITRESULT_OUTSIDE     = 0x00000000,
    HITRESULT_TRANSPARENT = 0x00000001,
    HITRESULT_CLOSE       = 0x00000002,
    HITRESULT_HIT         = 0x00000003,
}
alias HITRESULT = int;

enum : int
{
    DVASPECT_OPAQUE      = 0x00000010,
    DVASPECT_TRANSPARENT = 0x00000020,
}
alias DVASPECT2 = int;

enum ExtentMode : int
{
    DVEXTENT_CONTENT  = 0x00000000,
    DVEXTENT_INTEGRAL = 0x00000001,
}

enum AspectInfoFlag : int
{
    DVASPECTINFOFLAG_CANOPTIMIZE = 0x00000001,
}

enum : int
{
    POINTERINACTIVE_ACTIVATEONENTRY   = 0x00000001,
    POINTERINACTIVE_DEACTIVATEONLEAVE = 0x00000002,
    POINTERINACTIVE_ACTIVATEONDRAG    = 0x00000004,
}
alias POINTERINACTIVE = int;

enum : int
{
    PROPBAG2_TYPE_UNDEFINED = 0x00000000,
    PROPBAG2_TYPE_DATA      = 0x00000001,
    PROPBAG2_TYPE_URL       = 0x00000002,
    PROPBAG2_TYPE_OBJECT    = 0x00000003,
    PROPBAG2_TYPE_STREAM    = 0x00000004,
    PROPBAG2_TYPE_STORAGE   = 0x00000005,
    PROPBAG2_TYPE_MONIKER   = 0x00000006,
}
alias PROPBAG2_TYPE = int;

enum : int
{
    QACONTAINER_SHOWHATCHING      = 0x00000001,
    QACONTAINER_SHOWGRABHANDLES   = 0x00000002,
    QACONTAINER_USERMODE          = 0x00000004,
    QACONTAINER_DISPLAYASDEFAULT  = 0x00000008,
    QACONTAINER_UIDEAD            = 0x00000010,
    QACONTAINER_AUTOCLIP          = 0x00000020,
    QACONTAINER_MESSAGEREFLECT    = 0x00000040,
    QACONTAINER_SUPPORTSMNEMONICS = 0x00000080,
}
alias QACONTAINERFLAGS = int;

enum : int
{
    triUnchecked = 0x00000000,
    triChecked   = 0x00000001,
    triGray      = 0x00000002,
}
alias OLE_TRISTATE = int;

enum : int
{
    DOCMISC_CANCREATEMULTIPLEVIEWS   = 0x00000001,
    DOCMISC_SUPPORTCOMPLEXRECTANGLES = 0x00000002,
    DOCMISC_CANTOPENEDIT             = 0x00000004,
    DOCMISC_NOFILESUPPORT            = 0x00000008,
}
alias DOCMISC = int;

enum : int
{
    PRINTFLAG_MAYBOTHERUSER        = 0x00000001,
    PRINTFLAG_PROMPTUSER           = 0x00000002,
    PRINTFLAG_USERMAYCHANGEPRINTER = 0x00000004,
    PRINTFLAG_RECOMPOSETODEVICE    = 0x00000008,
    PRINTFLAG_DONTACTUALLYPRINT    = 0x00000010,
    PRINTFLAG_FORCEPROPERTIES      = 0x00000020,
    PRINTFLAG_PRINTTOFILE          = 0x00000040,
}
alias __MIDL_IPrint_0001 = int;

enum : int
{
    OLECMDF_SUPPORTED         = 0x00000001,
    OLECMDF_ENABLED           = 0x00000002,
    OLECMDF_LATCHED           = 0x00000004,
    OLECMDF_NINCHED           = 0x00000008,
    OLECMDF_INVISIBLE         = 0x00000010,
    OLECMDF_DEFHIDEONCTXTMENU = 0x00000020,
}
alias OLECMDF = int;

enum : int
{
    OLECMDTEXTF_NONE   = 0x00000000,
    OLECMDTEXTF_NAME   = 0x00000001,
    OLECMDTEXTF_STATUS = 0x00000002,
}
alias OLECMDTEXTF = int;

enum : int
{
    OLECMDEXECOPT_DODEFAULT      = 0x00000000,
    OLECMDEXECOPT_PROMPTUSER     = 0x00000001,
    OLECMDEXECOPT_DONTPROMPTUSER = 0x00000002,
    OLECMDEXECOPT_SHOWHELP       = 0x00000003,
}
alias OLECMDEXECOPT = int;

enum : int
{
    OLECMDID_OPEN                           = 0x00000001,
    OLECMDID_NEW                            = 0x00000002,
    OLECMDID_SAVE                           = 0x00000003,
    OLECMDID_SAVEAS                         = 0x00000004,
    OLECMDID_SAVECOPYAS                     = 0x00000005,
    OLECMDID_PRINT                          = 0x00000006,
    OLECMDID_PRINTPREVIEW                   = 0x00000007,
    OLECMDID_PAGESETUP                      = 0x00000008,
    OLECMDID_SPELL                          = 0x00000009,
    OLECMDID_PROPERTIES                     = 0x0000000a,
    OLECMDID_CUT                            = 0x0000000b,
    OLECMDID_COPY                           = 0x0000000c,
    OLECMDID_PASTE                          = 0x0000000d,
    OLECMDID_PASTESPECIAL                   = 0x0000000e,
    OLECMDID_UNDO                           = 0x0000000f,
    OLECMDID_REDO                           = 0x00000010,
    OLECMDID_SELECTALL                      = 0x00000011,
    OLECMDID_CLEARSELECTION                 = 0x00000012,
    OLECMDID_ZOOM                           = 0x00000013,
    OLECMDID_GETZOOMRANGE                   = 0x00000014,
    OLECMDID_UPDATECOMMANDS                 = 0x00000015,
    OLECMDID_REFRESH                        = 0x00000016,
    OLECMDID_STOP                           = 0x00000017,
    OLECMDID_HIDETOOLBARS                   = 0x00000018,
    OLECMDID_SETPROGRESSMAX                 = 0x00000019,
    OLECMDID_SETPROGRESSPOS                 = 0x0000001a,
    OLECMDID_SETPROGRESSTEXT                = 0x0000001b,
    OLECMDID_SETTITLE                       = 0x0000001c,
    OLECMDID_SETDOWNLOADSTATE               = 0x0000001d,
    OLECMDID_STOPDOWNLOAD                   = 0x0000001e,
    OLECMDID_ONTOOLBARACTIVATED             = 0x0000001f,
    OLECMDID_FIND                           = 0x00000020,
    OLECMDID_DELETE                         = 0x00000021,
    OLECMDID_HTTPEQUIV                      = 0x00000022,
    OLECMDID_HTTPEQUIV_DONE                 = 0x00000023,
    OLECMDID_ENABLE_INTERACTION             = 0x00000024,
    OLECMDID_ONUNLOAD                       = 0x00000025,
    OLECMDID_PROPERTYBAG2                   = 0x00000026,
    OLECMDID_PREREFRESH                     = 0x00000027,
    OLECMDID_SHOWSCRIPTERROR                = 0x00000028,
    OLECMDID_SHOWMESSAGE                    = 0x00000029,
    OLECMDID_SHOWFIND                       = 0x0000002a,
    OLECMDID_SHOWPAGESETUP                  = 0x0000002b,
    OLECMDID_SHOWPRINT                      = 0x0000002c,
    OLECMDID_CLOSE                          = 0x0000002d,
    OLECMDID_ALLOWUILESSSAVEAS              = 0x0000002e,
    OLECMDID_DONTDOWNLOADCSS                = 0x0000002f,
    OLECMDID_UPDATEPAGESTATUS               = 0x00000030,
    OLECMDID_PRINT2                         = 0x00000031,
    OLECMDID_PRINTPREVIEW2                  = 0x00000032,
    OLECMDID_SETPRINTTEMPLATE               = 0x00000033,
    OLECMDID_GETPRINTTEMPLATE               = 0x00000034,
    OLECMDID_PAGEACTIONBLOCKED              = 0x00000037,
    OLECMDID_PAGEACTIONUIQUERY              = 0x00000038,
    OLECMDID_FOCUSVIEWCONTROLS              = 0x00000039,
    OLECMDID_FOCUSVIEWCONTROLSQUERY         = 0x0000003a,
    OLECMDID_SHOWPAGEACTIONMENU             = 0x0000003b,
    OLECMDID_ADDTRAVELENTRY                 = 0x0000003c,
    OLECMDID_UPDATETRAVELENTRY              = 0x0000003d,
    OLECMDID_UPDATEBACKFORWARDSTATE         = 0x0000003e,
    OLECMDID_OPTICAL_ZOOM                   = 0x0000003f,
    OLECMDID_OPTICAL_GETZOOMRANGE           = 0x00000040,
    OLECMDID_WINDOWSTATECHANGED             = 0x00000041,
    OLECMDID_ACTIVEXINSTALLSCOPE            = 0x00000042,
    OLECMDID_UPDATETRAVELENTRY_DATARECOVERY = 0x00000043,
    OLECMDID_SHOWTASKDLG                    = 0x00000044,
    OLECMDID_POPSTATEEVENT                  = 0x00000045,
    OLECMDID_VIEWPORT_MODE                  = 0x00000046,
    OLECMDID_LAYOUT_VIEWPORT_WIDTH          = 0x00000047,
    OLECMDID_VISUAL_VIEWPORT_EXCLUDE_BOTTOM = 0x00000048,
    OLECMDID_USER_OPTICAL_ZOOM              = 0x00000049,
    OLECMDID_PAGEAVAILABLE                  = 0x0000004a,
    OLECMDID_GETUSERSCALABLE                = 0x0000004b,
    OLECMDID_UPDATE_CARET                   = 0x0000004c,
    OLECMDID_ENABLE_VISIBILITY              = 0x0000004d,
    OLECMDID_MEDIA_PLAYBACK                 = 0x0000004e,
    OLECMDID_SETFAVICON                     = 0x0000004f,
    OLECMDID_SET_HOST_FULLSCREENMODE        = 0x00000050,
    OLECMDID_EXITFULLSCREEN                 = 0x00000051,
    OLECMDID_SCROLLCOMPLETE                 = 0x00000052,
    OLECMDID_ONBEFOREUNLOAD                 = 0x00000053,
    OLECMDID_SHOWMESSAGE_BLOCKABLE          = 0x00000054,
    OLECMDID_SHOWTASKDLG_BLOCKABLE          = 0x00000055,
}
alias OLECMDID = int;

enum : int
{
    MEDIAPLAYBACK_RESUME              = 0x00000000,
    MEDIAPLAYBACK_PAUSE               = 0x00000001,
    MEDIAPLAYBACK_PAUSE_AND_SUSPEND   = 0x00000002,
    MEDIAPLAYBACK_RESUME_FROM_SUSPEND = 0x00000003,
}
alias MEDIAPLAYBACK_STATE = int;

enum : int
{
    IGNOREMIME_PROMPT = 0x00000001,
    IGNOREMIME_TEXT   = 0x00000002,
}
alias IGNOREMIME = int;

enum : int
{
    WPCSETTING_LOGGING_ENABLED      = 0x00000001,
    WPCSETTING_FILEDOWNLOAD_BLOCKED = 0x00000002,
}
alias WPCSETTING = int;

enum : int
{
    OLECMDIDF_REFRESH_NORMAL                              = 0x00000000,
    OLECMDIDF_REFRESH_IFEXPIRED                           = 0x00000001,
    OLECMDIDF_REFRESH_CONTINUE                            = 0x00000002,
    OLECMDIDF_REFRESH_COMPLETELY                          = 0x00000003,
    OLECMDIDF_REFRESH_NO_CACHE                            = 0x00000004,
    OLECMDIDF_REFRESH_RELOAD                              = 0x00000005,
    OLECMDIDF_REFRESH_LEVELMASK                           = 0x000000ff,
    OLECMDIDF_REFRESH_CLEARUSERINPUT                      = 0x00001000,
    OLECMDIDF_REFRESH_PROMPTIFOFFLINE                     = 0x00002000,
    OLECMDIDF_REFRESH_THROUGHSCRIPT                       = 0x00004000,
    OLECMDIDF_REFRESH_SKIPBEFOREUNLOADEVENT               = 0x00008000,
    OLECMDIDF_REFRESH_PAGEACTION_ACTIVEXINSTALL           = 0x00010000,
    OLECMDIDF_REFRESH_PAGEACTION_FILEDOWNLOAD             = 0x00020000,
    OLECMDIDF_REFRESH_PAGEACTION_LOCALMACHINE             = 0x00040000,
    OLECMDIDF_REFRESH_PAGEACTION_POPUPWINDOW              = 0x00080000,
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNLOCALMACHINE = 0x00100000,
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNTRUSTED      = 0x00200000,
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTRANET     = 0x00400000,
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNINTERNET     = 0x00800000,
    OLECMDIDF_REFRESH_PAGEACTION_PROTLOCKDOWNRESTRICTED   = 0x01000000,
    OLECMDIDF_REFRESH_PAGEACTION_MIXEDCONTENT             = 0x02000000,
    OLECMDIDF_REFRESH_PAGEACTION_INVALID_CERT             = 0x04000000,
    OLECMDIDF_REFRESH_PAGEACTION_ALLOW_VERSION            = 0x08000000,
}
alias OLECMDID_REFRESHFLAG = int;

enum : int
{
    OLECMDIDF_PAGEACTION_FILEDOWNLOAD                       = 0x00000001,
    OLECMDIDF_PAGEACTION_ACTIVEXINSTALL                     = 0x00000002,
    OLECMDIDF_PAGEACTION_ACTIVEXTRUSTFAIL                   = 0x00000004,
    OLECMDIDF_PAGEACTION_ACTIVEXUSERDISABLE                 = 0x00000008,
    OLECMDIDF_PAGEACTION_ACTIVEXDISALLOW                    = 0x00000010,
    OLECMDIDF_PAGEACTION_ACTIVEXUNSAFE                      = 0x00000020,
    OLECMDIDF_PAGEACTION_POPUPWINDOW                        = 0x00000040,
    OLECMDIDF_PAGEACTION_LOCALMACHINE                       = 0x00000080,
    OLECMDIDF_PAGEACTION_MIMETEXTPLAIN                      = 0x00000100,
    OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE                     = 0x00000200,
    OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXINSTALL      = 0x00000200,
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNLOCALMACHINE           = 0x00000400,
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNTRUSTED                = 0x00000800,
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTRANET               = 0x00001000,
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNINTERNET               = 0x00002000,
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNRESTRICTED             = 0x00004000,
    OLECMDIDF_PAGEACTION_PROTLOCKDOWNDENY                   = 0x00008000,
    OLECMDIDF_PAGEACTION_POPUPALLOWED                       = 0x00010000,
    OLECMDIDF_PAGEACTION_SCRIPTPROMPT                       = 0x00020000,
    OLECMDIDF_PAGEACTION_ACTIVEXUSERAPPROVAL                = 0x00040000,
    OLECMDIDF_PAGEACTION_MIXEDCONTENT                       = 0x00080000,
    OLECMDIDF_PAGEACTION_INVALID_CERT                       = 0x00100000,
    OLECMDIDF_PAGEACTION_INTRANETZONEREQUEST                = 0x00200000,
    OLECMDIDF_PAGEACTION_XSSFILTERED                        = 0x00400000,
    OLECMDIDF_PAGEACTION_SPOOFABLEIDNHOST                   = 0x00800000,
    OLECMDIDF_PAGEACTION_ACTIVEX_EPM_INCOMPATIBLE           = 0x01000000,
    OLECMDIDF_PAGEACTION_SCRIPTNAVIGATE_ACTIVEXUSERAPPROVAL = 0x02000000,
    OLECMDIDF_PAGEACTION_WPCBLOCKED                         = 0x04000000,
    OLECMDIDF_PAGEACTION_WPCBLOCKED_ACTIVEX                 = 0x08000000,
    OLECMDIDF_PAGEACTION_EXTENSION_COMPAT_BLOCKED           = 0x10000000,
    OLECMDIDF_PAGEACTION_NORESETACTIVEX                     = 0x20000000,
    OLECMDIDF_PAGEACTION_GENERIC_STATE                      = 0x40000000,
    OLECMDIDF_PAGEACTION_RESET                              = 0x80000000,
}
alias OLECMDID_PAGEACTIONFLAG = int;

enum : int
{
    OLECMDIDF_BROWSERSTATE_EXTENSIONSOFF     = 0x00000001,
    OLECMDIDF_BROWSERSTATE_IESECURITY        = 0x00000002,
    OLECMDIDF_BROWSERSTATE_PROTECTEDMODE_OFF = 0x00000004,
    OLECMDIDF_BROWSERSTATE_RESET             = 0x00000008,
    OLECMDIDF_BROWSERSTATE_REQUIRESACTIVEX   = 0x00000010,
    OLECMDIDF_BROWSERSTATE_DESKTOPHTMLDIALOG = 0x00000020,
    OLECMDIDF_BROWSERSTATE_BLOCKEDVERSION    = 0x00000040,
}
alias OLECMDID_BROWSERSTATEFLAG = int;

enum : int
{
    OLECMDIDF_OPTICAL_ZOOM_NOPERSIST       = 0x00000001,
    OLECMDIDF_OPTICAL_ZOOM_NOLAYOUT        = 0x00000010,
    OLECMDIDF_OPTICAL_ZOOM_NOTRANSIENT     = 0x00000020,
    OLECMDIDF_OPTICAL_ZOOM_RELOADFORNEWTAB = 0x00000040,
}
alias OLECMDID_OPTICAL_ZOOMFLAG = int;

enum : int
{
    PAGEACTION_UI_DEFAULT  = 0x00000000,
    PAGEACTION_UI_MODAL    = 0x00000001,
    PAGEACTION_UI_MODELESS = 0x00000002,
    PAGEACTION_UI_SILENT   = 0x00000003,
}
alias PAGEACTION_UI = int;

enum : int
{
    OLECMDIDF_WINDOWSTATE_USERVISIBLE       = 0x00000001,
    OLECMDIDF_WINDOWSTATE_ENABLED           = 0x00000002,
    OLECMDIDF_WINDOWSTATE_USERVISIBLE_VALID = 0x00010000,
    OLECMDIDF_WINDOWSTATE_ENABLED_VALID     = 0x00020000,
}
alias OLECMDID_WINDOWSTATE_FLAG = int;

enum : int
{
    OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH          = 0x00000001,
    OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM       = 0x00000002,
    OLECMDIDF_VIEWPORTMODE_FIXED_LAYOUT_WIDTH_VALID    = 0x00010000,
    OLECMDIDF_VIEWPORTMODE_EXCLUDE_VISUAL_BOTTOM_VALID = 0x00020000,
}
alias OLECMDID_VIEWPORT_MODE_FLAG = int;

enum : int
{
    OLEUIPASTE_ENABLEICON  = 0x00000800,
    OLEUIPASTE_PASTEONLY   = 0x00000000,
    OLEUIPASTE_PASTE       = 0x00000200,
    OLEUIPASTE_LINKANYTYPE = 0x00000400,
    OLEUIPASTE_LINKTYPE1   = 0x00000001,
    OLEUIPASTE_LINKTYPE2   = 0x00000002,
    OLEUIPASTE_LINKTYPE3   = 0x00000004,
    OLEUIPASTE_LINKTYPE4   = 0x00000008,
    OLEUIPASTE_LINKTYPE5   = 0x00000010,
    OLEUIPASTE_LINKTYPE6   = 0x00000020,
    OLEUIPASTE_LINKTYPE7   = 0x00000040,
    OLEUIPASTE_LINKTYPE8   = 0x00000080,
}
alias OLEUIPASTEFLAG = int;

enum : int
{
    CALLFRAME_COPY_NESTED      = 0x00000001,
    CALLFRAME_COPY_INDEPENDENT = 0x00000002,
}
alias CALLFRAME_COPY = int;

enum : int
{
    CALLFRAME_FREE_NONE      = 0x00000000,
    CALLFRAME_FREE_IN        = 0x00000001,
    CALLFRAME_FREE_INOUT     = 0x00000002,
    CALLFRAME_FREE_OUT       = 0x00000004,
    CALLFRAME_FREE_TOP_INOUT = 0x00000008,
    CALLFRAME_FREE_TOP_OUT   = 0x00000010,
    CALLFRAME_FREE_ALL       = 0x0000001f,
}
alias CALLFRAME_FREE = int;

enum : int
{
    CALLFRAME_NULL_NONE  = 0x00000000,
    CALLFRAME_NULL_INOUT = 0x00000002,
    CALLFRAME_NULL_OUT   = 0x00000004,
    CALLFRAME_NULL_ALL   = 0x00000006,
}
alias CALLFRAME_NULL = int;

enum : int
{
    CALLFRAME_WALK_IN    = 0x00000001,
    CALLFRAME_WALK_INOUT = 0x00000002,
    CALLFRAME_WALK_OUT   = 0x00000004,
}
alias CALLFRAME_WALK = int;

enum : int
{
    RECORD_READING_POLICY_FORWARD  = 0x00000001,
    RECORD_READING_POLICY_BACKWARD = 0x00000002,
    RECORD_READING_POLICY_RANDOM   = 0x00000003,
}
alias RECORD_READING_POLICY = int;

enum : int
{
    DVASPECT_CONTENT   = 0x00000001,
    DVASPECT_THUMBNAIL = 0x00000002,
    DVASPECT_ICON      = 0x00000004,
    DVASPECT_DOCPRINT  = 0x00000008,
}
alias DVASPECT = int;

enum : int
{
    TYSPEC_CLSID       = 0x00000000,
    TYSPEC_FILEEXT     = 0x00000001,
    TYSPEC_MIMETYPE    = 0x00000002,
    TYSPEC_FILENAME    = 0x00000003,
    TYSPEC_PROGID      = 0x00000004,
    TYSPEC_PACKAGENAME = 0x00000005,
    TYSPEC_OBJECTID    = 0x00000006,
}
alias TYSPEC = int;

enum : int
{
    EOC_NewObject      = 0x00000000,
    EOC_ModifiedObject = 0x00000001,
    EOC_DeletedObject  = 0x00000002,
}
alias EOC_ChangeType = int;

enum : int
{
    COINIT_APARTMENTTHREADED = 0x00000002,
    COINIT_MULTITHREADED     = 0x00000000,
    COINIT_DISABLE_OLE1DDE   = 0x00000004,
    COINIT_SPEED_OVER_MEMORY = 0x00000008,
}
alias COINIT = int;

enum : int
{
    SD_LAUNCHPERMISSIONS  = 0x00000000,
    SD_ACCESSPERMISSIONS  = 0x00000001,
    SD_LAUNCHRESTRICTIONS = 0x00000002,
    SD_ACCESSRESTRICTIONS = 0x00000003,
}
alias COMSD = int;

// Callbacks

alias LPFNGETCLASSOBJECT = HRESULT function(const(GUID)* param0, const(GUID)* param1, void** param2);
alias LPFNCANUNLOADNOW = HRESULT function();
alias LPFNOLEUIHOOK = uint function(HWND param0, uint param1, WPARAM param2, LPARAM param3);
alias PFNCONTEXTCALL = HRESULT function(ComCallData* pParam);

// Structs


struct COAUTHIDENTITY
{
    ushort* User;
    uint    UserLength;
    ushort* Domain;
    uint    DomainLength;
    ushort* Password;
    uint    PasswordLength;
    uint    Flags;
}

struct COAUTHINFO
{
    uint            dwAuthnSvc;
    uint            dwAuthzSvc;
    const(wchar)*   pwszServerPrincName;
    uint            dwAuthnLevel;
    uint            dwImpersonationLevel;
    COAUTHIDENTITY* pAuthIdentityData;
    uint            dwCapabilities;
}

struct BYTE_BLOB
{
    uint     clSize;
    ubyte[1] abData;
}

struct WORD_BLOB
{
    uint      clSize;
    ushort[1] asData;
}

struct DWORD_BLOB
{
    uint    clSize;
    uint[1] alData;
}

struct FLAGGED_BYTE_BLOB
{
    uint     fFlags;
    uint     clSize;
    ubyte[1] abData;
}

struct FLAGGED_WORD_BLOB
{
    uint      fFlags;
    uint      clSize;
    ushort[1] asData;
}

struct BYTE_SIZEDARR
{
    uint   clSize;
    ubyte* pData;
}

struct SHORT_SIZEDARR
{
    uint    clSize;
    ushort* pData;
}

struct LONG_SIZEDARR
{
    uint  clSize;
    uint* pData;
}

struct HYPER_SIZEDARR
{
    uint  clSize;
    long* pData;
}

struct IEnumContextProps
{
}

struct IContext
{
}

struct IObjContext
{
}

struct COSERVERINFO
{
    uint          dwReserved1;
    const(wchar)* pwszName;
    COAUTHINFO*   pAuthInfo;
    uint          dwReserved2;
}

struct MULTI_QI
{
    const(GUID)* pIID;
    IUnknown     pItf;
    HRESULT      hr;
}

struct RPCOLEMESSAGE
{
    void*    reserved1;
    uint     dataRepresentation;
    void*    Buffer;
    uint     cbBuffer;
    uint     iMethod;
    void[5]* reserved2;
    uint     rpcFlags;
}

struct SChannelHookCallInfo
{
    GUID  iid;
    uint  cbSize;
    GUID  uCausality;
    uint  dwServerPid;
    uint  iMethod;
    void* pObject;
}

struct SOLE_AUTHENTICATION_SERVICE
{
    uint    dwAuthnSvc;
    uint    dwAuthzSvc;
    ushort* pPrincipalName;
    HRESULT hr;
}

struct SOLE_AUTHENTICATION_INFO
{
    uint  dwAuthnSvc;
    uint  dwAuthzSvc;
    void* pAuthInfo;
}

struct SOLE_AUTHENTICATION_LIST
{
    uint cAuthInfo;
    SOLE_AUTHENTICATION_INFO* aAuthInfo;
}

struct CO_MTA_USAGE_COOKIE__
{
    int unused;
}

struct CO_DEVICE_CATALOG_COOKIE__
{
    int unused;
}

struct BIND_OPTS
{
    uint cbStruct;
    uint grfFlags;
    uint grfMode;
    uint dwTickCountDeadline;
}

struct BIND_OPTS2
{
    BIND_OPTS     __AnonymousBase_objidl_L8451_C36;
    uint          dwTrackFlags;
    uint          dwClassContext;
    uint          locale;
    COSERVERINFO* pServerInfo;
}

struct BIND_OPTS3
{
    BIND_OPTS2 __AnonymousBase_objidl_L8475_C36;
    HWND       hwnd;
}

struct DVTARGETDEVICE
{
    uint     tdSize;
    ushort   tdDriverNameOffset;
    ushort   tdDeviceNameOffset;
    ushort   tdPortNameOffset;
    ushort   tdExtDevmodeOffset;
    ubyte[1] tdData;
}

struct FORMATETC
{
    ushort          cfFormat;
    DVTARGETDEVICE* ptd;
    uint            dwAspect;
    int             lindex;
    uint            tymed;
}

struct STATDATA
{
    FORMATETC   formatetc;
    uint        advf;
    IAdviseSink pAdvSink;
    uint        dwConnection;
}

struct RemSTGMEDIUM
{
    uint     tymed;
    uint     dwHandleType;
    uint     pData;
    uint     pUnkForRelease;
    uint     cbData;
    ubyte[1] data;
}

struct STGMEDIUM
{
    uint     tymed;
    union
    {
        HBITMAP   hBitmap;
        void*     hMetaFilePict;
        ptrdiff_t hEnhMetaFile;
        ptrdiff_t hGlobal;
        ushort*   lpszFileName;
        IStream   pstm;
        IStorage  pstg;
    }
    IUnknown pUnkForRelease;
}

struct GDI_OBJECT
{
    uint ObjectType;
    union u
    {
        userHBITMAP*  hBitmap;
        userHPALETTE* hPalette;
        userHGLOBAL*  hGeneric;
    }
}

struct userSTGMEDIUM
{
    IUnknown pUnkForRelease;
}

struct userFLAG_STGMEDIUM
{
    int           ContextFlags;
    int           fPassOwnership;
    userSTGMEDIUM Stgmed;
}

struct FLAG_STGMEDIUM
{
    int       ContextFlags;
    int       fPassOwnership;
    STGMEDIUM Stgmed;
}

struct INTERFACEINFO
{
    IUnknown pUnk;
    GUID     iid;
    ushort   wMethod;
}

struct OBJECTDESCRIPTOR
{
    uint   cbSize;
    GUID   clsid;
    uint   dwDrawAspect;
    SIZE   sizel;
    POINTL pointl;
    uint   dwStatus;
    uint   dwFullUserTypeName;
    uint   dwSrcOfCopy;
}

struct OIFI
{
    uint   cb;
    BOOL   fMDIApp;
    HWND   hwndFrame;
    HACCEL haccel;
    uint   cAccelEntries;
}

struct OleMenuGroupWidths
{
    int[6] width;
}

struct OLEVERB
{
    int     lVerb;
    ushort* lpszVerbName;
    uint    fuFlags;
    uint    grfAttribs;
}

struct BINDINFO
{
    uint                cbSize;
    const(wchar)*       szExtraInfo;
    STGMEDIUM           stgmedData;
    uint                grfBindInfoF;
    uint                dwBindVerb;
    const(wchar)*       szCustomVerb;
    uint                cbstgmedData;
    uint                dwOptions;
    uint                dwOptionsFlags;
    uint                dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    GUID                iid;
    IUnknown            pUnk;
    uint                dwReserved;
}

struct REMSECURITY_ATTRIBUTES
{
    uint nLength;
    uint lpSecurityDescriptor;
    BOOL bInheritHandle;
}

struct RemBINDINFO
{
    uint          cbSize;
    const(wchar)* szExtraInfo;
    uint          grfBindInfoF;
    uint          dwBindVerb;
    const(wchar)* szCustomVerb;
    uint          cbstgmedData;
    uint          dwOptions;
    uint          dwOptionsFlags;
    uint          dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    GUID          iid;
    IUnknown      pUnk;
    uint          dwReserved;
}

struct RemFORMATETC
{
    uint cfFormat;
    uint ptd;
    uint dwAspect;
    int  lindex;
    uint tymed;
}

struct AUTHENTICATEINFO
{
    uint dwFlags;
    uint dwReserved;
}

struct PROTOCOLDATA
{
    uint  grfFlags;
    uint  dwState;
    void* pData;
    uint  cbData;
}

struct StartParam
{
    GUID     iid;
    IBindCtx pIBindCtx;
    IUnknown pItf;
}

struct ZONEATTRIBUTES
{
    uint        cbSize;
    ushort[260] szDisplayName;
    ushort[200] szDescription;
    ushort[260] szIconPath;
    uint        dwTemplateMinLevel;
    uint        dwTemplateRecommended;
    uint        dwTemplateCurrentLevel;
    uint        dwFlags;
}

struct CODEBASEHOLD
{
    uint          cbSize;
    const(wchar)* szDistUnit;
    const(wchar)* szCodeBase;
    uint          dwVersionMS;
    uint          dwVersionLS;
    uint          dwStyle;
}

struct PROTOCOLFILTERDATA
{
    uint              cbSize;
    IInternetProtocolSink pProtocolSink;
    IInternetProtocol pProtocol;
    IUnknown          pUnk;
    uint              dwFilterFlags;
}

struct DATAINFO
{
    uint ulTotalSize;
    uint ulavrPacketSize;
    uint ulConnectSpeed;
    uint ulProcessorSpeed;
}

struct HIT_LOGGING_INFO
{
    uint         dwStructSize;
    const(char)* lpszLoggedUrlName;
    SYSTEMTIME   StartTime;
    SYSTEMTIME   EndTime;
    const(char)* lpszExtendedInfo;
}

struct CONFIRMSAFETY
{
    GUID     clsid;
    IUnknown pUnk;
    uint     dwFlags;
}

struct PROTOCOL_ARGUMENT
{
    const(wchar)* szMethod;
    const(wchar)* szTargetUrl;
}

struct OLESTREAMVTBL
{
    ptrdiff_t Get;
    ptrdiff_t Put;
}

struct OLESTREAM
{
    OLESTREAMVTBL* lpstbl;
}

struct CONNECTDATA
{
    IUnknown pUnk;
    uint     dwCookie;
}

struct LICINFO
{
    int  cbLicInfo;
    BOOL fRuntimeKeyAvail;
    BOOL fLicVerified;
}

struct CONTROLINFO
{
    uint   cb;
    HACCEL hAccel;
    ushort cAccel;
    uint   dwFlags;
}

struct POINTF
{
    float x;
    float y;
}

struct PROPPAGEINFO
{
    uint    cb;
    ushort* pszTitle;
    SIZE    size;
    ushort* pszDocString;
    ushort* pszHelpFile;
    uint    dwHelpContext;
}

struct CAUUID
{
    uint  cElems;
    GUID* pElems;
}

struct ExtentInfo
{
    uint cb;
    uint dwExtentMode;
    SIZE sizelProposed;
}

struct AspectInfo
{
    uint cb;
    uint dwFlags;
}

struct CALPOLESTR
{
    uint     cElems;
    ushort** pElems;
}

struct CADWORD
{
    uint  cElems;
    uint* pElems;
}

struct PROPBAG2
{
    uint    dwType;
    ushort  vt;
    ushort  cfType;
    uint    dwHint;
    ushort* pstrName;
    GUID    clsid;
}

struct QACONTAINER
{
    uint                cbSize;
    IOleClientSite      pClientSite;
    IAdviseSinkEx       pAdviseSink;
    IPropertyNotifySink pPropertyNotifySink;
    IUnknown            pUnkEventSink;
    uint                dwAmbientFlags;
    uint                colorFore;
    uint                colorBack;
    IFont               pFont;
    IOleUndoManager     pUndoMgr;
    uint                dwAppearance;
    int                 lcid;
    HPALETTE            hpal;
    IBindHost           pBindHost;
    IOleControlSite     pOleControlSite;
    IServiceProvider    pServiceProvider;
}

struct QACONTROL
{
    uint cbSize;
    uint dwMiscStatus;
    uint dwViewStatus;
    uint dwEventCookie;
    uint dwPropNotifyCookie;
    uint dwPointerActivationPolicy;
}

struct OCPFIPARAMS
{
    uint      cbStructSize;
    HWND      hWndOwner;
    int       x;
    int       y;
    ushort*   lpszCaption;
    uint      cObjects;
    IUnknown* lplpUnk;
    uint      cPages;
    GUID*     lpPages;
    uint      lcid;
    int       dispidInitialProperty;
}

struct FONTDESC
{
    uint    cbSizeofstruct;
    ushort* lpstrName;
    CY      cySize;
    short   sWeight;
    short   sCharset;
    BOOL    fItalic;
    BOOL    fUnderline;
    BOOL    fStrikethrough;
}

struct PICTDESC
{
    uint cbSizeofstruct;
    uint picType;
    union
    {
        struct bmp
        {
            HBITMAP  hbitmap;
            HPALETTE hpal;
        }
        struct wmf
        {
            ptrdiff_t hmeta;
            int       xExt;
            int       yExt;
        }
        struct icon
        {
            HICON hicon;
        }
        struct emf
        {
            ptrdiff_t hemf;
        }
    }
}

struct PAGERANGE
{
    int nFromPage;
    int nToPage;
}

struct PAGESET
{
    uint         cbStruct;
    BOOL         fOddPages;
    BOOL         fEvenPages;
    uint         cPageRange;
    PAGERANGE[1] rgPages;
}

struct OLECMD
{
    uint cmdID;
    uint cmdf;
}

struct OLECMDTEXT
{
    uint      cmdtextf;
    uint      cwActual;
    uint      cwBuf;
    ushort[1] rgwz;
}

struct OLEUIINSERTOBJECTW
{
    uint           cbStruct;
    uint           dwFlags;
    HWND           hWndOwner;
    const(wchar)*  lpszCaption;
    LPFNOLEUIHOOK  lpfnHook;
    LPARAM         lCustData;
    HINSTANCE      hInstance;
    const(wchar)*  lpszTemplate;
    ptrdiff_t      hResource;
    GUID           clsid;
    const(wchar)*  lpszFile;
    uint           cchFile;
    uint           cClsidExclude;
    GUID*          lpClsidExclude;
    GUID           iid;
    uint           oleRender;
    FORMATETC*     lpFormatEtc;
    IOleClientSite lpIOleClientSite;
    IStorage       lpIStorage;
    void**         ppvObj;
    int            sc;
    ptrdiff_t      hMetaPict;
}

struct OLEUIINSERTOBJECTA
{
    uint           cbStruct;
    uint           dwFlags;
    HWND           hWndOwner;
    const(char)*   lpszCaption;
    LPFNOLEUIHOOK  lpfnHook;
    LPARAM         lCustData;
    HINSTANCE      hInstance;
    const(char)*   lpszTemplate;
    ptrdiff_t      hResource;
    GUID           clsid;
    const(char)*   lpszFile;
    uint           cchFile;
    uint           cClsidExclude;
    GUID*          lpClsidExclude;
    GUID           iid;
    uint           oleRender;
    FORMATETC*     lpFormatEtc;
    IOleClientSite lpIOleClientSite;
    IStorage       lpIStorage;
    void**         ppvObj;
    int            sc;
    ptrdiff_t      hMetaPict;
}

struct OLEUIPASTEENTRYW
{
    FORMATETC     fmtetc;
    const(wchar)* lpstrFormatName;
    const(wchar)* lpstrResultText;
    uint          dwFlags;
    uint          dwScratchSpace;
}

struct OLEUIPASTEENTRYA
{
    FORMATETC    fmtetc;
    const(char)* lpstrFormatName;
    const(char)* lpstrResultText;
    uint         dwFlags;
    uint         dwScratchSpace;
}

struct OLEUIPASTESPECIALW
{
    uint              cbStruct;
    uint              dwFlags;
    HWND              hWndOwner;
    const(wchar)*     lpszCaption;
    LPFNOLEUIHOOK     lpfnHook;
    LPARAM            lCustData;
    HINSTANCE         hInstance;
    const(wchar)*     lpszTemplate;
    ptrdiff_t         hResource;
    IDataObject       lpSrcDataObj;
    OLEUIPASTEENTRYW* arrPasteEntries;
    int               cPasteEntries;
    uint*             arrLinkTypes;
    int               cLinkTypes;
    uint              cClsidExclude;
    GUID*             lpClsidExclude;
    int               nSelectedIndex;
    BOOL              fLink;
    ptrdiff_t         hMetaPict;
    SIZE              sizel;
}

struct OLEUIPASTESPECIALA
{
    uint              cbStruct;
    uint              dwFlags;
    HWND              hWndOwner;
    const(char)*      lpszCaption;
    LPFNOLEUIHOOK     lpfnHook;
    LPARAM            lCustData;
    HINSTANCE         hInstance;
    const(char)*      lpszTemplate;
    ptrdiff_t         hResource;
    IDataObject       lpSrcDataObj;
    OLEUIPASTEENTRYA* arrPasteEntries;
    int               cPasteEntries;
    uint*             arrLinkTypes;
    int               cLinkTypes;
    uint              cClsidExclude;
    GUID*             lpClsidExclude;
    int               nSelectedIndex;
    BOOL              fLink;
    ptrdiff_t         hMetaPict;
    SIZE              sizel;
}

struct OLEUIEDITLINKSW
{
    uint                 cbStruct;
    uint                 dwFlags;
    HWND                 hWndOwner;
    const(wchar)*        lpszCaption;
    LPFNOLEUIHOOK        lpfnHook;
    LPARAM               lCustData;
    HINSTANCE            hInstance;
    const(wchar)*        lpszTemplate;
    ptrdiff_t            hResource;
    IOleUILinkContainerW lpOleUILinkContainer;
}

struct OLEUIEDITLINKSA
{
    uint                 cbStruct;
    uint                 dwFlags;
    HWND                 hWndOwner;
    const(char)*         lpszCaption;
    LPFNOLEUIHOOK        lpfnHook;
    LPARAM               lCustData;
    HINSTANCE            hInstance;
    const(char)*         lpszTemplate;
    ptrdiff_t            hResource;
    IOleUILinkContainerA lpOleUILinkContainer;
}

struct OLEUICHANGEICONW
{
    uint          cbStruct;
    uint          dwFlags;
    HWND          hWndOwner;
    const(wchar)* lpszCaption;
    LPFNOLEUIHOOK lpfnHook;
    LPARAM        lCustData;
    HINSTANCE     hInstance;
    const(wchar)* lpszTemplate;
    ptrdiff_t     hResource;
    ptrdiff_t     hMetaPict;
    GUID          clsid;
    ushort[260]   szIconExe;
    int           cchIconExe;
}

struct OLEUICHANGEICONA
{
    uint          cbStruct;
    uint          dwFlags;
    HWND          hWndOwner;
    const(char)*  lpszCaption;
    LPFNOLEUIHOOK lpfnHook;
    LPARAM        lCustData;
    HINSTANCE     hInstance;
    const(char)*  lpszTemplate;
    ptrdiff_t     hResource;
    ptrdiff_t     hMetaPict;
    GUID          clsid;
    byte[260]     szIconExe;
    int           cchIconExe;
}

struct OLEUICONVERTW
{
    uint          cbStruct;
    uint          dwFlags;
    HWND          hWndOwner;
    const(wchar)* lpszCaption;
    LPFNOLEUIHOOK lpfnHook;
    LPARAM        lCustData;
    HINSTANCE     hInstance;
    const(wchar)* lpszTemplate;
    ptrdiff_t     hResource;
    GUID          clsid;
    GUID          clsidConvertDefault;
    GUID          clsidActivateDefault;
    GUID          clsidNew;
    uint          dvAspect;
    ushort        wFormat;
    BOOL          fIsLinkedObject;
    ptrdiff_t     hMetaPict;
    const(wchar)* lpszUserType;
    BOOL          fObjectsIconChanged;
    const(wchar)* lpszDefLabel;
    uint          cClsidExclude;
    GUID*         lpClsidExclude;
}

struct OLEUICONVERTA
{
    uint          cbStruct;
    uint          dwFlags;
    HWND          hWndOwner;
    const(char)*  lpszCaption;
    LPFNOLEUIHOOK lpfnHook;
    LPARAM        lCustData;
    HINSTANCE     hInstance;
    const(char)*  lpszTemplate;
    ptrdiff_t     hResource;
    GUID          clsid;
    GUID          clsidConvertDefault;
    GUID          clsidActivateDefault;
    GUID          clsidNew;
    uint          dvAspect;
    ushort        wFormat;
    BOOL          fIsLinkedObject;
    ptrdiff_t     hMetaPict;
    const(char)*  lpszUserType;
    BOOL          fObjectsIconChanged;
    const(char)*  lpszDefLabel;
    uint          cClsidExclude;
    GUID*         lpClsidExclude;
}

struct OLEUIBUSYW
{
    uint          cbStruct;
    uint          dwFlags;
    HWND          hWndOwner;
    const(wchar)* lpszCaption;
    LPFNOLEUIHOOK lpfnHook;
    LPARAM        lCustData;
    HINSTANCE     hInstance;
    const(wchar)* lpszTemplate;
    ptrdiff_t     hResource;
    ptrdiff_t     hTask;
    HWND*         lphWndDialog;
}

struct OLEUIBUSYA
{
    uint          cbStruct;
    uint          dwFlags;
    HWND          hWndOwner;
    const(char)*  lpszCaption;
    LPFNOLEUIHOOK lpfnHook;
    LPARAM        lCustData;
    HINSTANCE     hInstance;
    const(char)*  lpszTemplate;
    ptrdiff_t     hResource;
    ptrdiff_t     hTask;
    HWND*         lphWndDialog;
}

struct OLEUICHANGESOURCEW
{
    uint                 cbStruct;
    uint                 dwFlags;
    HWND                 hWndOwner;
    const(wchar)*        lpszCaption;
    LPFNOLEUIHOOK        lpfnHook;
    LPARAM               lCustData;
    HINSTANCE            hInstance;
    const(wchar)*        lpszTemplate;
    ptrdiff_t            hResource;
    OPENFILENAMEW*       lpOFN;
    uint[4]              dwReserved1;
    IOleUILinkContainerW lpOleUILinkContainer;
    uint                 dwLink;
    const(wchar)*        lpszDisplayName;
    uint                 nFileLength;
    const(wchar)*        lpszFrom;
    const(wchar)*        lpszTo;
}

struct OLEUICHANGESOURCEA
{
    uint                 cbStruct;
    uint                 dwFlags;
    HWND                 hWndOwner;
    const(char)*         lpszCaption;
    LPFNOLEUIHOOK        lpfnHook;
    LPARAM               lCustData;
    HINSTANCE            hInstance;
    const(char)*         lpszTemplate;
    ptrdiff_t            hResource;
    OPENFILENAMEA*       lpOFN;
    uint[4]              dwReserved1;
    IOleUILinkContainerA lpOleUILinkContainer;
    uint                 dwLink;
    const(char)*         lpszDisplayName;
    uint                 nFileLength;
    const(char)*         lpszFrom;
    const(char)*         lpszTo;
}

struct OLEUIGNRLPROPSW
{
    uint               cbStruct;
    uint               dwFlags;
    uint[2]            dwReserved1;
    LPFNOLEUIHOOK      lpfnHook;
    LPARAM             lCustData;
    uint[3]            dwReserved2;
    OLEUIOBJECTPROPSW* lpOP;
}

struct OLEUIGNRLPROPSA
{
    uint               cbStruct;
    uint               dwFlags;
    uint[2]            dwReserved1;
    LPFNOLEUIHOOK      lpfnHook;
    LPARAM             lCustData;
    uint[3]            dwReserved2;
    OLEUIOBJECTPROPSA* lpOP;
}

struct OLEUIVIEWPROPSW
{
    uint               cbStruct;
    uint               dwFlags;
    uint[2]            dwReserved1;
    LPFNOLEUIHOOK      lpfnHook;
    LPARAM             lCustData;
    uint[3]            dwReserved2;
    OLEUIOBJECTPROPSW* lpOP;
    int                nScaleMin;
    int                nScaleMax;
}

struct OLEUIVIEWPROPSA
{
    uint               cbStruct;
    uint               dwFlags;
    uint[2]            dwReserved1;
    LPFNOLEUIHOOK      lpfnHook;
    LPARAM             lCustData;
    uint[3]            dwReserved2;
    OLEUIOBJECTPROPSA* lpOP;
    int                nScaleMin;
    int                nScaleMax;
}

struct OLEUILINKPROPSW
{
    uint               cbStruct;
    uint               dwFlags;
    uint[2]            dwReserved1;
    LPFNOLEUIHOOK      lpfnHook;
    LPARAM             lCustData;
    uint[3]            dwReserved2;
    OLEUIOBJECTPROPSW* lpOP;
}

struct OLEUILINKPROPSA
{
    uint               cbStruct;
    uint               dwFlags;
    uint[2]            dwReserved1;
    LPFNOLEUIHOOK      lpfnHook;
    LPARAM             lCustData;
    uint[3]            dwReserved2;
    OLEUIOBJECTPROPSA* lpOP;
}

struct OLEUIOBJECTPROPSW
{
    uint                 cbStruct;
    uint                 dwFlags;
    PROPSHEETHEADERW_V2* lpPS;
    uint                 dwObject;
    IOleUIObjInfoW       lpObjInfo;
    uint                 dwLink;
    IOleUILinkInfoW      lpLinkInfo;
    OLEUIGNRLPROPSW*     lpGP;
    OLEUIVIEWPROPSW*     lpVP;
    OLEUILINKPROPSW*     lpLP;
}

struct OLEUIOBJECTPROPSA
{
    uint                 cbStruct;
    uint                 dwFlags;
    PROPSHEETHEADERA_V2* lpPS;
    uint                 dwObject;
    IOleUIObjInfoA       lpObjInfo;
    uint                 dwLink;
    IOleUILinkInfoA      lpLinkInfo;
    OLEUIGNRLPROPSA*     lpGP;
    OLEUIVIEWPROPSA*     lpVP;
    OLEUILINKPROPSA*     lpLP;
}

struct CALLFRAMEINFO
{
    uint iMethod;
    BOOL fHasInValues;
    BOOL fHasInOutValues;
    BOOL fHasOutValues;
    BOOL fDerivesFromIDispatch;
    int  cInInterfacesMax;
    int  cInOutInterfacesMax;
    int  cOutInterfacesMax;
    int  cTopLevelInInterfaces;
    GUID iid;
    uint cMethod;
    uint cParams;
}

struct CALLFRAMEPARAMINFO
{
    ubyte fIn;
    ubyte fOut;
    uint  stackOffset;
    uint  cbParam;
}

struct CALLFRAME_MARSHALCONTEXT
{
    ubyte    fIn;
    uint     dwDestContext;
    void*    pvDestContext;
    IUnknown punkReserved;
    GUID     guidTransferSyntax;
}

struct CATEGORYINFO
{
    GUID        catid;
    uint        lcid;
    ushort[128] szDescription;
}

struct ComCallData
{
    uint  dwDispid;
    uint  dwReserved;
    void* pUserDefined;
}

alias HRESULT = int;

struct CSPLATFORM
{
    uint dwPlatformId;
    uint dwVersionHi;
    uint dwVersionLo;
    uint dwProcessorArch;
}

struct QUERYCONTEXT
{
    uint       dwContext;
    CSPLATFORM Platform;
    uint       Locale;
    uint       dwVersionHi;
    uint       dwVersionLo;
}

struct ACTRL_ACCESS_ENTRYA
{
    TRUSTEE_A    Trustee;
    uint         fAccessFlags;
    uint         Access;
    uint         ProvSpecificAccess;
    uint         Inheritance;
    const(char)* lpInheritProperty;
}

struct ACTRL_ACCESS_ENTRYW
{
    TRUSTEE_W     Trustee;
    uint          fAccessFlags;
    uint          Access;
    uint          ProvSpecificAccess;
    uint          Inheritance;
    const(wchar)* lpInheritProperty;
}

struct ACTRL_ACCESS_ENTRY_LISTA
{
    uint                 cEntries;
    ACTRL_ACCESS_ENTRYA* pAccessList;
}

struct ACTRL_ACCESS_ENTRY_LISTW
{
    uint                 cEntries;
    ACTRL_ACCESS_ENTRYW* pAccessList;
}

struct ACTRL_PROPERTY_ENTRYA
{
    const(char)* lpProperty;
    ACTRL_ACCESS_ENTRY_LISTA* pAccessEntryList;
    uint         fListFlags;
}

struct ACTRL_PROPERTY_ENTRYW
{
    const(wchar)* lpProperty;
    ACTRL_ACCESS_ENTRY_LISTW* pAccessEntryList;
    uint          fListFlags;
}

struct ACTRL_ACCESSA
{
    uint cEntries;
    ACTRL_PROPERTY_ENTRYA* pPropertyAccessList;
}

struct ACTRL_ACCESSW
{
    uint cEntries;
    ACTRL_PROPERTY_ENTRYW* pPropertyAccessList;
}

// Functions

@DllImport("OLE32")
HRESULT CoGetMalloc(uint dwMemContext, IMalloc* ppMalloc);

@DllImport("OLE32")
void CoUninitialize();

@DllImport("OLE32")
uint CoGetCurrentProcess();

@DllImport("OLE32")
HRESULT CoInitializeEx(void* pvReserved, uint dwCoInit);

@DllImport("OLE32")
HRESULT CoGetCallerTID(uint* lpdwTID);

@DllImport("OLE32")
HRESULT CoGetCurrentLogicalThreadId(GUID* pguid);

@DllImport("OLE32")
HRESULT CoGetContextToken(size_t* pToken);

@DllImport("OLE32")
HRESULT CoGetApartmentType(APTTYPE* pAptType, APTTYPEQUALIFIER* pAptQualifier);

@DllImport("OLE32")
HRESULT CoIncrementMTAUsage(ptrdiff_t* pCookie);

@DllImport("OLE32")
HRESULT CoDecrementMTAUsage(ptrdiff_t Cookie);

@DllImport("OLE32")
HRESULT CoAllowUnmarshalerCLSID(const(GUID)* clsid);

@DllImport("OLE32")
HRESULT CoGetObjectContext(const(GUID)* riid, void** ppv);

@DllImport("OLE32")
HRESULT CoGetClassObject(const(GUID)* rclsid, uint dwClsContext, void* pvReserved, const(GUID)* riid, void** ppv);

@DllImport("OLE32")
HRESULT CoRegisterClassObject(const(GUID)* rclsid, IUnknown pUnk, uint dwClsContext, uint flags, 
                              uint* lpdwRegister);

@DllImport("OLE32")
HRESULT CoRevokeClassObject(uint dwRegister);

@DllImport("OLE32")
HRESULT CoResumeClassObjects();

@DllImport("OLE32")
HRESULT CoSuspendClassObjects();

@DllImport("OLE32")
uint CoAddRefServerProcess();

@DllImport("OLE32")
uint CoReleaseServerProcess();

@DllImport("OLE32")
HRESULT CoGetPSClsid(const(GUID)* riid, GUID* pClsid);

@DllImport("OLE32")
HRESULT CoRegisterPSClsid(const(GUID)* riid, const(GUID)* rclsid);

@DllImport("OLE32")
HRESULT CoRegisterSurrogate(ISurrogate pSurrogate);

@DllImport("OLE32")
HRESULT CoGetMarshalSizeMax(uint* pulSize, const(GUID)* riid, IUnknown pUnk, uint dwDestContext, 
                            void* pvDestContext, uint mshlflags);

@DllImport("OLE32")
HRESULT CoMarshalInterface(IStream pStm, const(GUID)* riid, IUnknown pUnk, uint dwDestContext, void* pvDestContext, 
                           uint mshlflags);

@DllImport("OLE32")
HRESULT CoUnmarshalInterface(IStream pStm, const(GUID)* riid, void** ppv);

@DllImport("OLE32")
HRESULT CoMarshalHresult(IStream pstm, HRESULT hresult);

@DllImport("OLE32")
HRESULT CoUnmarshalHresult(IStream pstm, int* phresult);

@DllImport("OLE32")
HRESULT CoReleaseMarshalData(IStream pStm);

@DllImport("OLE32")
HRESULT CoDisconnectObject(IUnknown pUnk, uint dwReserved);

@DllImport("OLE32")
HRESULT CoLockObjectExternal(IUnknown pUnk, BOOL fLock, BOOL fLastUnlockReleases);

@DllImport("OLE32")
HRESULT CoGetStandardMarshal(const(GUID)* riid, IUnknown pUnk, uint dwDestContext, void* pvDestContext, 
                             uint mshlflags, IMarshal* ppMarshal);

@DllImport("OLE32")
HRESULT CoGetStdMarshalEx(IUnknown pUnkOuter, uint smexflags, IUnknown* ppUnkInner);

@DllImport("OLE32")
BOOL CoIsHandlerConnected(IUnknown pUnk);

@DllImport("OLE32")
HRESULT CoMarshalInterThreadInterfaceInStream(const(GUID)* riid, IUnknown pUnk, IStream* ppStm);

@DllImport("OLE32")
HRESULT CoGetInterfaceAndReleaseStream(IStream pStm, const(GUID)* iid, void** ppv);

@DllImport("OLE32")
HRESULT CoCreateFreeThreadedMarshaler(IUnknown punkOuter, IUnknown* ppunkMarshal);

@DllImport("OLE32")
void CoFreeUnusedLibraries();

@DllImport("OLE32")
void CoFreeUnusedLibrariesEx(uint dwUnloadDelay, uint dwReserved);

@DllImport("OLE32")
HRESULT CoDisconnectContext(uint dwTimeout);

@DllImport("OLE32")
HRESULT CoInitializeSecurity(void* pSecDesc, int cAuthSvc, char* asAuthSvc, void* pReserved1, uint dwAuthnLevel, 
                             uint dwImpLevel, void* pAuthList, uint dwCapabilities, void* pReserved3);

@DllImport("OLE32")
HRESULT CoGetCallContext(const(GUID)* riid, void** ppInterface);

@DllImport("OLE32")
HRESULT CoQueryProxyBlanket(IUnknown pProxy, uint* pwAuthnSvc, uint* pAuthzSvc, ushort** pServerPrincName, 
                            uint* pAuthnLevel, uint* pImpLevel, void** pAuthInfo, uint* pCapabilites);

@DllImport("OLE32")
HRESULT CoSetProxyBlanket(IUnknown pProxy, uint dwAuthnSvc, uint dwAuthzSvc, ushort* pServerPrincName, 
                          uint dwAuthnLevel, uint dwImpLevel, void* pAuthInfo, uint dwCapabilities);

@DllImport("OLE32")
HRESULT CoCopyProxy(IUnknown pProxy, IUnknown* ppCopy);

@DllImport("OLE32")
HRESULT CoQueryClientBlanket(uint* pAuthnSvc, uint* pAuthzSvc, ushort** pServerPrincName, uint* pAuthnLevel, 
                             uint* pImpLevel, void** pPrivs, uint* pCapabilities);

@DllImport("OLE32")
HRESULT CoImpersonateClient();

@DllImport("OLE32")
HRESULT CoRevertToSelf();

@DllImport("OLE32")
HRESULT CoQueryAuthenticationServices(uint* pcAuthSvc, SOLE_AUTHENTICATION_SERVICE** asAuthSvc);

@DllImport("OLE32")
HRESULT CoSwitchCallContext(IUnknown pNewObject, IUnknown* ppOldObject);

@DllImport("OLE32")
HRESULT CoCreateInstance(const(GUID)* rclsid, IUnknown pUnkOuter, uint dwClsContext, const(GUID)* riid, void** ppv);

@DllImport("OLE32")
HRESULT CoCreateInstanceEx(const(GUID)* Clsid, IUnknown punkOuter, uint dwClsCtx, COSERVERINFO* pServerInfo, 
                           uint dwCount, char* pResults);

@DllImport("OLE32")
HRESULT CoCreateInstanceFromApp(const(GUID)* Clsid, IUnknown punkOuter, uint dwClsCtx, void* reserved, 
                                uint dwCount, char* pResults);

@DllImport("OLE32")
HRESULT CoRegisterActivationFilter(IActivationFilter pActivationFilter);

@DllImport("OLE32")
HRESULT CoGetCancelObject(uint dwThreadId, const(GUID)* iid, void** ppUnk);

@DllImport("OLE32")
HRESULT CoSetCancelObject(IUnknown pUnk);

@DllImport("OLE32")
HRESULT CoCancelCall(uint dwThreadId, uint ulTimeout);

@DllImport("OLE32")
HRESULT CoTestCancel();

@DllImport("OLE32")
HRESULT CoEnableCallCancellation(void* pReserved);

@DllImport("OLE32")
HRESULT CoDisableCallCancellation(void* pReserved);

@DllImport("OLE32")
HRESULT StringFromCLSID(const(GUID)* rclsid, ushort** lplpsz);

@DllImport("OLE32")
HRESULT CLSIDFromString(ushort* lpsz, GUID* pclsid);

@DllImport("OLE32")
HRESULT StringFromIID(const(GUID)* rclsid, ushort** lplpsz);

@DllImport("OLE32")
HRESULT IIDFromString(ushort* lpsz, GUID* lpiid);

@DllImport("OLE32")
HRESULT ProgIDFromCLSID(const(GUID)* clsid, ushort** lplpszProgID);

@DllImport("OLE32")
HRESULT CLSIDFromProgID(ushort* lpszProgID, GUID* lpclsid);

@DllImport("OLE32")
int StringFromGUID2(const(GUID)* rguid, char* lpsz, int cchMax);

@DllImport("OLE32")
HRESULT CoCreateGuid(GUID* pguid);

@DllImport("OLE32")
HRESULT CoWaitForMultipleHandles(uint dwFlags, uint dwTimeout, uint cHandles, char* pHandles, uint* lpdwindex);

@DllImport("OLE32")
HRESULT CoWaitForMultipleObjects(uint dwFlags, uint dwTimeout, uint cHandles, char* pHandles, uint* lpdwindex);

@DllImport("OLE32")
HRESULT CoGetTreatAsClass(const(GUID)* clsidOld, GUID* pClsidNew);

@DllImport("OLE32")
HRESULT CoInvalidateRemoteMachineBindings(ushort* pszMachineName);

@DllImport("OLE32")
void* CoTaskMemAlloc(size_t cb);

@DllImport("OLE32")
void* CoTaskMemRealloc(void* pv, size_t cb);

@DllImport("OLE32")
void CoTaskMemFree(void* pv);

@DllImport("OLE32")
HRESULT CoFileTimeNow(FILETIME* lpFileTime);

@DllImport("OLE32")
HRESULT CLSIDFromProgIDEx(ushort* lpszProgID, GUID* lpclsid);

@DllImport("OLE32")
HRESULT CoRegisterDeviceCatalog(const(wchar)* deviceInstanceId, ptrdiff_t* cookie);

@DllImport("OLE32")
HRESULT CoRevokeDeviceCatalog(ptrdiff_t cookie);

@DllImport("OLE32")
uint CLIPFORMAT_UserSize(uint* param0, uint param1, ushort* param2);

@DllImport("OLE32")
ubyte* CLIPFORMAT_UserMarshal(uint* param0, ubyte* param1, ushort* param2);

@DllImport("OLE32")
ubyte* CLIPFORMAT_UserUnmarshal(uint* param0, char* param1, ushort* param2);

@DllImport("OLE32")
void CLIPFORMAT_UserFree(uint* param0, ushort* param1);

@DllImport("OLE32")
uint HBITMAP_UserSize(uint* param0, uint param1, HBITMAP* param2);

@DllImport("OLE32")
ubyte* HBITMAP_UserMarshal(uint* param0, ubyte* param1, HBITMAP* param2);

@DllImport("OLE32")
ubyte* HBITMAP_UserUnmarshal(uint* param0, char* param1, HBITMAP* param2);

@DllImport("OLE32")
void HBITMAP_UserFree(uint* param0, HBITMAP* param1);

@DllImport("OLE32")
uint HDC_UserSize(uint* param0, uint param1, HDC* param2);

@DllImport("OLE32")
ubyte* HDC_UserMarshal(uint* param0, ubyte* param1, HDC* param2);

@DllImport("OLE32")
ubyte* HDC_UserUnmarshal(uint* param0, char* param1, HDC* param2);

@DllImport("OLE32")
void HDC_UserFree(uint* param0, HDC* param1);

@DllImport("OLE32")
uint HICON_UserSize(uint* param0, uint param1, HICON* param2);

@DllImport("OLE32")
ubyte* HICON_UserMarshal(uint* param0, ubyte* param1, HICON* param2);

@DllImport("OLE32")
ubyte* HICON_UserUnmarshal(uint* param0, char* param1, HICON* param2);

@DllImport("OLE32")
void HICON_UserFree(uint* param0, HICON* param1);

@DllImport("ole32")
uint SNB_UserSize(uint* param0, uint param1, ushort*** param2);

@DllImport("ole32")
ubyte* SNB_UserMarshal(uint* param0, ubyte* param1, ushort*** param2);

@DllImport("ole32")
ubyte* SNB_UserUnmarshal(uint* param0, char* param1, ushort*** param2);

@DllImport("ole32")
void SNB_UserFree(uint* param0, ushort*** param1);

@DllImport("OLE32")
uint CLIPFORMAT_UserSize64(uint* param0, uint param1, ushort* param2);

@DllImport("OLE32")
ubyte* CLIPFORMAT_UserMarshal64(uint* param0, ubyte* param1, ushort* param2);

@DllImport("OLE32")
ubyte* CLIPFORMAT_UserUnmarshal64(uint* param0, char* param1, ushort* param2);

@DllImport("OLE32")
void CLIPFORMAT_UserFree64(uint* param0, ushort* param1);

@DllImport("OLE32")
uint HBITMAP_UserSize64(uint* param0, uint param1, HBITMAP* param2);

@DllImport("OLE32")
ubyte* HBITMAP_UserMarshal64(uint* param0, ubyte* param1, HBITMAP* param2);

@DllImport("OLE32")
ubyte* HBITMAP_UserUnmarshal64(uint* param0, char* param1, HBITMAP* param2);

@DllImport("OLE32")
void HBITMAP_UserFree64(uint* param0, HBITMAP* param1);

@DllImport("OLE32")
uint HDC_UserSize64(uint* param0, uint param1, HDC* param2);

@DllImport("OLE32")
ubyte* HDC_UserMarshal64(uint* param0, ubyte* param1, HDC* param2);

@DllImport("OLE32")
ubyte* HDC_UserUnmarshal64(uint* param0, char* param1, HDC* param2);

@DllImport("OLE32")
void HDC_UserFree64(uint* param0, HDC* param1);

@DllImport("OLE32")
uint HICON_UserSize64(uint* param0, uint param1, HICON* param2);

@DllImport("OLE32")
ubyte* HICON_UserMarshal64(uint* param0, ubyte* param1, HICON* param2);

@DllImport("OLE32")
ubyte* HICON_UserUnmarshal64(uint* param0, char* param1, HICON* param2);

@DllImport("OLE32")
void HICON_UserFree64(uint* param0, HICON* param1);

@DllImport("ole32")
uint SNB_UserSize64(uint* param0, uint param1, ushort*** param2);

@DllImport("ole32")
ubyte* SNB_UserMarshal64(uint* param0, ubyte* param1, ushort*** param2);

@DllImport("ole32")
ubyte* SNB_UserUnmarshal64(uint* param0, char* param1, ushort*** param2);

@DllImport("ole32")
void SNB_UserFree64(uint* param0, ushort*** param1);

@DllImport("OLE32")
uint HACCEL_UserSize(uint* param0, uint param1, HACCEL* param2);

@DllImport("OLE32")
ubyte* HACCEL_UserMarshal(uint* param0, ubyte* param1, HACCEL* param2);

@DllImport("OLE32")
ubyte* HACCEL_UserUnmarshal(uint* param0, char* param1, HACCEL* param2);

@DllImport("OLE32")
void HACCEL_UserFree(uint* param0, HACCEL* param1);

@DllImport("OLE32")
uint HGLOBAL_UserSize(uint* param0, uint param1, ptrdiff_t* param2);

@DllImport("OLE32")
ubyte* HGLOBAL_UserMarshal(uint* param0, ubyte* param1, ptrdiff_t* param2);

@DllImport("OLE32")
ubyte* HGLOBAL_UserUnmarshal(uint* param0, char* param1, ptrdiff_t* param2);

@DllImport("OLE32")
void HGLOBAL_UserFree(uint* param0, ptrdiff_t* param1);

@DllImport("OLE32")
uint HMENU_UserSize(uint* param0, uint param1, HMENU* param2);

@DllImport("OLE32")
ubyte* HMENU_UserMarshal(uint* param0, ubyte* param1, HMENU* param2);

@DllImport("OLE32")
ubyte* HMENU_UserUnmarshal(uint* param0, char* param1, HMENU* param2);

@DllImport("OLE32")
void HMENU_UserFree(uint* param0, HMENU* param1);

@DllImport("OLE32")
uint HACCEL_UserSize64(uint* param0, uint param1, HACCEL* param2);

@DllImport("OLE32")
ubyte* HACCEL_UserMarshal64(uint* param0, ubyte* param1, HACCEL* param2);

@DllImport("OLE32")
ubyte* HACCEL_UserUnmarshal64(uint* param0, char* param1, HACCEL* param2);

@DllImport("OLE32")
void HACCEL_UserFree64(uint* param0, HACCEL* param1);

@DllImport("OLE32")
uint HGLOBAL_UserSize64(uint* param0, uint param1, ptrdiff_t* param2);

@DllImport("OLE32")
ubyte* HGLOBAL_UserMarshal64(uint* param0, ubyte* param1, ptrdiff_t* param2);

@DllImport("OLE32")
ubyte* HGLOBAL_UserUnmarshal64(uint* param0, char* param1, ptrdiff_t* param2);

@DllImport("OLE32")
void HGLOBAL_UserFree64(uint* param0, ptrdiff_t* param1);

@DllImport("OLE32")
uint HMENU_UserSize64(uint* param0, uint param1, HMENU* param2);

@DllImport("OLE32")
ubyte* HMENU_UserMarshal64(uint* param0, ubyte* param1, HMENU* param2);

@DllImport("OLE32")
ubyte* HMENU_UserUnmarshal64(uint* param0, char* param1, HMENU* param2);

@DllImport("OLE32")
void HMENU_UserFree64(uint* param0, HMENU* param1);

@DllImport("urlmon")
HRESULT CreateURLMoniker(IMoniker pMkCtx, const(wchar)* szURL, IMoniker* ppmk);

@DllImport("urlmon")
HRESULT CreateURLMonikerEx(IMoniker pMkCtx, const(wchar)* szURL, IMoniker* ppmk, uint dwFlags);

@DllImport("urlmon")
HRESULT GetClassURL(const(wchar)* szURL, GUID* pClsID);

@DllImport("urlmon")
HRESULT CreateAsyncBindCtx(uint reserved, IBindStatusCallback pBSCb, IEnumFORMATETC pEFetc, IBindCtx* ppBC);

@DllImport("urlmon")
HRESULT CreateURLMonikerEx2(IMoniker pMkCtx, IUri pUri, IMoniker* ppmk, uint dwFlags);

@DllImport("urlmon")
HRESULT CreateAsyncBindCtxEx(IBindCtx pbc, uint dwOptions, IBindStatusCallback pBSCb, IEnumFORMATETC pEnum, 
                             IBindCtx* ppBC, uint reserved);

@DllImport("urlmon")
HRESULT MkParseDisplayNameEx(IBindCtx pbc, const(wchar)* szDisplayName, uint* pchEaten, IMoniker* ppmk);

@DllImport("urlmon")
HRESULT RegisterBindStatusCallback(IBindCtx pBC, IBindStatusCallback pBSCb, IBindStatusCallback* ppBSCBPrev, 
                                   uint dwReserved);

@DllImport("urlmon")
HRESULT RevokeBindStatusCallback(IBindCtx pBC, IBindStatusCallback pBSCb);

@DllImport("urlmon")
HRESULT GetClassFileOrMime(IBindCtx pBC, const(wchar)* szFilename, char* pBuffer, uint cbSize, 
                           const(wchar)* szMime, uint dwReserved, GUID* pclsid);

@DllImport("urlmon")
HRESULT IsValidURL(IBindCtx pBC, const(wchar)* szURL, uint dwReserved);

@DllImport("urlmon")
HRESULT CoGetClassObjectFromURL(const(GUID)* rCLASSID, const(wchar)* szCODE, uint dwFileVersionMS, 
                                uint dwFileVersionLS, const(wchar)* szTYPE, IBindCtx pBindCtx, uint dwClsContext, 
                                void* pvReserved, const(GUID)* riid, void** ppv);

@DllImport("urlmon")
HRESULT IEInstallScope(uint* pdwScope);

@DllImport("urlmon")
HRESULT FaultInIEFeature(HWND hWnd, uCLSSPEC* pClassSpec, QUERYCONTEXT* pQuery, uint dwFlags);

@DllImport("urlmon")
HRESULT GetComponentIDFromCLSSPEC(uCLSSPEC* pClassspec, byte** ppszComponentID);

@DllImport("urlmon")
HRESULT IsAsyncMoniker(IMoniker pmk);

@DllImport("urlmon")
HRESULT RegisterMediaTypes(uint ctypes, char* rgszTypes, char* rgcfTypes);

@DllImport("urlmon")
HRESULT FindMediaType(const(char)* rgszTypes, ushort* rgcfTypes);

@DllImport("urlmon")
HRESULT CreateFormatEnumerator(uint cfmtetc, char* rgfmtetc, IEnumFORMATETC* ppenumfmtetc);

@DllImport("urlmon")
HRESULT RegisterFormatEnumerator(IBindCtx pBC, IEnumFORMATETC pEFetc, uint reserved);

@DllImport("urlmon")
HRESULT RevokeFormatEnumerator(IBindCtx pBC, IEnumFORMATETC pEFetc);

@DllImport("urlmon")
HRESULT RegisterMediaTypeClass(IBindCtx pBC, uint ctypes, char* rgszTypes, char* rgclsID, uint reserved);

@DllImport("urlmon")
HRESULT FindMediaTypeClass(IBindCtx pBC, const(char)* szType, GUID* pclsID, uint reserved);

@DllImport("urlmon")
HRESULT UrlMkSetSessionOption(uint dwOption, char* pBuffer, uint dwBufferLength, uint dwReserved);

@DllImport("urlmon")
HRESULT UrlMkGetSessionOption(uint dwOption, char* pBuffer, uint dwBufferLength, uint* pdwBufferLengthOut, 
                              uint dwReserved);

@DllImport("urlmon")
HRESULT FindMimeFromData(IBindCtx pBC, const(wchar)* pwzUrl, char* pBuffer, uint cbSize, 
                         const(wchar)* pwzMimeProposed, uint dwMimeFlags, ushort** ppwzMimeOut, uint dwReserved);

@DllImport("urlmon")
HRESULT ObtainUserAgentString(uint dwOption, const(char)* pszUAOut, uint* cbSize);

@DllImport("urlmon")
HRESULT CompareSecurityIds(char* pbSecurityId1, uint dwLen1, char* pbSecurityId2, uint dwLen2, uint dwReserved);

@DllImport("urlmon")
HRESULT CompatFlagsFromClsid(GUID* pclsid, uint* pdwCompatFlags, uint* pdwMiscStatusFlags);

@DllImport("urlmon")
HRESULT SetAccessForIEAppContainer(HANDLE hObject, IEObjectType ieObjectType, uint dwAccessMask);

@DllImport("URLMON")
HRESULT CreateUri(const(wchar)* pwzURI, uint dwFlags, size_t dwReserved, IUri* ppURI);

@DllImport("URLMON")
HRESULT CreateUriWithFragment(const(wchar)* pwzURI, const(wchar)* pwzFragment, uint dwFlags, size_t dwReserved, 
                              IUri* ppURI);

@DllImport("urlmon")
HRESULT CreateUriFromMultiByteString(const(char)* pszANSIInputUri, uint dwEncodingFlags, uint dwCodePage, 
                                     uint dwCreateFlags, size_t dwReserved, IUri* ppUri);

@DllImport("URLMON")
HRESULT CreateIUriBuilder(IUri pIUri, uint dwFlags, size_t dwReserved, IUriBuilder* ppIUriBuilder);

@DllImport("urlmon")
HRESULT HlinkSimpleNavigateToString(const(wchar)* szTarget, const(wchar)* szLocation, 
                                    const(wchar)* szTargetFrameName, IUnknown pUnk, IBindCtx pbc, 
                                    IBindStatusCallback param5, uint grfHLNF, uint dwReserved);

@DllImport("urlmon")
HRESULT HlinkSimpleNavigateToMoniker(IMoniker pmkTarget, const(wchar)* szLocation, const(wchar)* szTargetFrameName, 
                                     IUnknown pUnk, IBindCtx pbc, IBindStatusCallback param5, uint grfHLNF, 
                                     uint dwReserved);

@DllImport("urlmon")
HRESULT URLOpenStreamA(IUnknown param0, const(char)* param1, uint param2, IBindStatusCallback param3);

@DllImport("urlmon")
HRESULT URLOpenStreamW(IUnknown param0, const(wchar)* param1, uint param2, IBindStatusCallback param3);

@DllImport("urlmon")
HRESULT URLOpenPullStreamA(IUnknown param0, const(char)* param1, uint param2, IBindStatusCallback param3);

@DllImport("urlmon")
HRESULT URLOpenPullStreamW(IUnknown param0, const(wchar)* param1, uint param2, IBindStatusCallback param3);

@DllImport("urlmon")
HRESULT URLDownloadToFileA(IUnknown param0, const(char)* param1, const(char)* param2, uint param3, 
                           IBindStatusCallback param4);

@DllImport("urlmon")
HRESULT URLDownloadToFileW(IUnknown param0, const(wchar)* param1, const(wchar)* param2, uint param3, 
                           IBindStatusCallback param4);

@DllImport("urlmon")
HRESULT URLDownloadToCacheFileA(IUnknown param0, const(char)* param1, const(char)* param2, uint cchFileName, 
                                uint param4, IBindStatusCallback param5);

@DllImport("urlmon")
HRESULT URLDownloadToCacheFileW(IUnknown param0, const(wchar)* param1, const(wchar)* param2, uint cchFileName, 
                                uint param4, IBindStatusCallback param5);

@DllImport("urlmon")
HRESULT URLOpenBlockingStreamA(IUnknown param0, const(char)* param1, IStream* param2, uint param3, 
                               IBindStatusCallback param4);

@DllImport("urlmon")
HRESULT URLOpenBlockingStreamW(IUnknown param0, const(wchar)* param1, IStream* param2, uint param3, 
                               IBindStatusCallback param4);

@DllImport("urlmon")
HRESULT HlinkGoBack(IUnknown pUnk);

@DllImport("urlmon")
HRESULT HlinkGoForward(IUnknown pUnk);

@DllImport("urlmon")
HRESULT HlinkNavigateString(IUnknown pUnk, const(wchar)* szTarget);

@DllImport("urlmon")
HRESULT HlinkNavigateMoniker(IUnknown pUnk, IMoniker pmkTarget);

@DllImport("urlmon")
HRESULT CoInternetParseUrl(const(wchar)* pwzUrl, PARSEACTION ParseAction, uint dwFlags, const(wchar)* pszResult, 
                           uint cchResult, uint* pcchResult, uint dwReserved);

@DllImport("urlmon")
HRESULT CoInternetParseIUri(IUri pIUri, PARSEACTION ParseAction, uint dwFlags, const(wchar)* pwzResult, 
                            uint cchResult, uint* pcchResult, size_t dwReserved);

@DllImport("urlmon")
HRESULT CoInternetCombineUrl(const(wchar)* pwzBaseUrl, const(wchar)* pwzRelativeUrl, uint dwCombineFlags, 
                             const(wchar)* pszResult, uint cchResult, uint* pcchResult, uint dwReserved);

@DllImport("urlmon")
HRESULT CoInternetCombineUrlEx(IUri pBaseUri, const(wchar)* pwzRelativeUrl, uint dwCombineFlags, 
                               IUri* ppCombinedUri, size_t dwReserved);

@DllImport("urlmon")
HRESULT CoInternetCombineIUri(IUri pBaseUri, IUri pRelativeUri, uint dwCombineFlags, IUri* ppCombinedUri, 
                              size_t dwReserved);

@DllImport("urlmon")
HRESULT CoInternetCompareUrl(const(wchar)* pwzUrl1, const(wchar)* pwzUrl2, uint dwFlags);

@DllImport("urlmon")
HRESULT CoInternetGetProtocolFlags(const(wchar)* pwzUrl, uint* pdwFlags, uint dwReserved);

@DllImport("urlmon")
HRESULT CoInternetQueryInfo(const(wchar)* pwzUrl, QUERYOPTION QueryOptions, uint dwQueryFlags, char* pvBuffer, 
                            uint cbBuffer, uint* pcbBuffer, uint dwReserved);

@DllImport("urlmon")
HRESULT CoInternetGetSession(uint dwSessionMode, IInternetSession* ppIInternetSession, uint dwReserved);

@DllImport("urlmon")
HRESULT CoInternetGetSecurityUrl(const(wchar)* pwszUrl, ushort** ppwszSecUrl, PSUACTION psuAction, uint dwReserved);

@DllImport("urlmon")
HRESULT CoInternetGetSecurityUrlEx(IUri pUri, IUri* ppSecUri, PSUACTION psuAction, size_t dwReserved);

@DllImport("urlmon")
HRESULT CoInternetSetFeatureEnabled(INTERNETFEATURELIST FeatureEntry, uint dwFlags, BOOL fEnable);

@DllImport("urlmon")
HRESULT CoInternetIsFeatureEnabled(INTERNETFEATURELIST FeatureEntry, uint dwFlags);

@DllImport("urlmon")
HRESULT CoInternetIsFeatureEnabledForUrl(INTERNETFEATURELIST FeatureEntry, uint dwFlags, const(wchar)* szURL, 
                                         IInternetSecurityManager pSecMgr);

@DllImport("urlmon")
HRESULT CoInternetIsFeatureEnabledForIUri(INTERNETFEATURELIST FeatureEntry, uint dwFlags, IUri pIUri, 
                                          IInternetSecurityManagerEx2 pSecMgr);

@DllImport("urlmon")
HRESULT CoInternetIsFeatureZoneElevationEnabled(const(wchar)* szFromURL, const(wchar)* szToURL, 
                                                IInternetSecurityManager pSecMgr, uint dwFlags);

@DllImport("urlmon")
HRESULT CopyStgMedium(const(STGMEDIUM)* pcstgmedSrc, STGMEDIUM* pstgmedDest);

@DllImport("urlmon")
HRESULT CopyBindInfo(const(BINDINFO)* pcbiSrc, BINDINFO* pbiDest);

@DllImport("urlmon")
void ReleaseBindInfo(BINDINFO* pbindinfo);

@DllImport("urlmon")
ushort* IEGetUserPrivateNamespaceName();

@DllImport("urlmon")
HRESULT CoInternetCreateSecurityManager(IServiceProvider pSP, IInternetSecurityManager* ppSM, uint dwReserved);

@DllImport("urlmon")
HRESULT CoInternetCreateZoneManager(IServiceProvider pSP, IInternetZoneManager* ppZM, uint dwReserved);

@DllImport("urlmon")
HRESULT GetSoftwareUpdateInfo(const(wchar)* szDistUnit, SOFTDISTINFO* psdi);

@DllImport("urlmon")
HRESULT SetSoftwareUpdateAdvertisementState(const(wchar)* szDistUnit, uint dwAdState, uint dwAdvertisedVersionMS, 
                                            uint dwAdvertisedVersionLS);

@DllImport("urlmon")
BOOL IsLoggingEnabledA(const(char)* pszUrl);

@DllImport("urlmon")
BOOL IsLoggingEnabledW(const(wchar)* pwszUrl);

@DllImport("urlmon")
BOOL WriteHitLogging(HIT_LOGGING_INFO* lpLogginginfo);

@DllImport("OLE32")
HRESULT CreateDataAdviseHolder(IDataAdviseHolder* ppDAHolder);

@DllImport("ole32")
uint OleBuildVersion();

@DllImport("OLE32")
HRESULT OleInitialize(void* pvReserved);

@DllImport("OLE32")
void OleUninitialize();

@DllImport("OLE32")
HRESULT OleQueryLinkFromData(IDataObject pSrcDataObject);

@DllImport("OLE32")
HRESULT OleQueryCreateFromData(IDataObject pSrcDataObject);

@DllImport("OLE32")
HRESULT OleCreate(const(GUID)* rclsid, const(GUID)* riid, uint renderopt, FORMATETC* pFormatEtc, 
                  IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("ole32")
HRESULT OleCreateEx(const(GUID)* rclsid, const(GUID)* riid, uint dwFlags, uint renderopt, uint cFormats, 
                    uint* rgAdvf, FORMATETC* rgFormatEtc, IAdviseSink lpAdviseSink, uint* rgdwConnection, 
                    IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("OLE32")
HRESULT OleCreateFromData(IDataObject pSrcDataObj, const(GUID)* riid, uint renderopt, FORMATETC* pFormatEtc, 
                          IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("ole32")
HRESULT OleCreateFromDataEx(IDataObject pSrcDataObj, const(GUID)* riid, uint dwFlags, uint renderopt, 
                            uint cFormats, uint* rgAdvf, FORMATETC* rgFormatEtc, IAdviseSink lpAdviseSink, 
                            uint* rgdwConnection, IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("OLE32")
HRESULT OleCreateLinkFromData(IDataObject pSrcDataObj, const(GUID)* riid, uint renderopt, FORMATETC* pFormatEtc, 
                              IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("ole32")
HRESULT OleCreateLinkFromDataEx(IDataObject pSrcDataObj, const(GUID)* riid, uint dwFlags, uint renderopt, 
                                uint cFormats, uint* rgAdvf, FORMATETC* rgFormatEtc, IAdviseSink lpAdviseSink, 
                                uint* rgdwConnection, IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("OLE32")
HRESULT OleCreateStaticFromData(IDataObject pSrcDataObj, const(GUID)* iid, uint renderopt, FORMATETC* pFormatEtc, 
                                IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("ole32")
HRESULT OleCreateLink(IMoniker pmkLinkSrc, const(GUID)* riid, uint renderopt, FORMATETC* lpFormatEtc, 
                      IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("ole32")
HRESULT OleCreateLinkEx(IMoniker pmkLinkSrc, const(GUID)* riid, uint dwFlags, uint renderopt, uint cFormats, 
                        uint* rgAdvf, FORMATETC* rgFormatEtc, IAdviseSink lpAdviseSink, uint* rgdwConnection, 
                        IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("OLE32")
HRESULT OleCreateLinkToFile(ushort* lpszFileName, const(GUID)* riid, uint renderopt, FORMATETC* lpFormatEtc, 
                            IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("ole32")
HRESULT OleCreateLinkToFileEx(ushort* lpszFileName, const(GUID)* riid, uint dwFlags, uint renderopt, uint cFormats, 
                              uint* rgAdvf, FORMATETC* rgFormatEtc, IAdviseSink lpAdviseSink, uint* rgdwConnection, 
                              IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("OLE32")
HRESULT OleCreateFromFile(const(GUID)* rclsid, ushort* lpszFileName, const(GUID)* riid, uint renderopt, 
                          FORMATETC* lpFormatEtc, IOleClientSite pClientSite, IStorage pStg, void** ppvObj);

@DllImport("ole32")
HRESULT OleCreateFromFileEx(const(GUID)* rclsid, ushort* lpszFileName, const(GUID)* riid, uint dwFlags, 
                            uint renderopt, uint cFormats, uint* rgAdvf, FORMATETC* rgFormatEtc, 
                            IAdviseSink lpAdviseSink, uint* rgdwConnection, IOleClientSite pClientSite, 
                            IStorage pStg, void** ppvObj);

@DllImport("OLE32")
HRESULT OleLoad(IStorage pStg, const(GUID)* riid, IOleClientSite pClientSite, void** ppvObj);

@DllImport("OLE32")
HRESULT OleSave(IPersistStorage pPS, IStorage pStg, BOOL fSameAsLoad);

@DllImport("OLE32")
HRESULT OleLoadFromStream(IStream pStm, const(GUID)* iidInterface, void** ppvObj);

@DllImport("OLE32")
HRESULT OleSaveToStream(IPersistStream pPStm, IStream pStm);

@DllImport("OLE32")
HRESULT OleSetContainedObject(IUnknown pUnknown, BOOL fContained);

@DllImport("ole32")
HRESULT OleNoteObjectVisible(IUnknown pUnknown, BOOL fVisible);

@DllImport("OLE32")
HRESULT RegisterDragDrop(HWND hwnd, IDropTarget pDropTarget);

@DllImport("OLE32")
HRESULT RevokeDragDrop(HWND hwnd);

@DllImport("OLE32")
HRESULT DoDragDrop(IDataObject pDataObj, IDropSource pDropSource, uint dwOKEffects, uint* pdwEffect);

@DllImport("OLE32")
HRESULT OleSetClipboard(IDataObject pDataObj);

@DllImport("OLE32")
HRESULT OleGetClipboard(IDataObject* ppDataObj);

@DllImport("ole32")
HRESULT OleGetClipboardWithEnterpriseInfo(IDataObject* dataObject, ushort** dataEnterpriseId, 
                                          ushort** sourceDescription, ushort** targetDescription, 
                                          ushort** dataDescription);

@DllImport("OLE32")
HRESULT OleFlushClipboard();

@DllImport("OLE32")
HRESULT OleIsCurrentClipboard(IDataObject pDataObj);

@DllImport("OLE32")
ptrdiff_t OleCreateMenuDescriptor(HMENU hmenuCombined, OleMenuGroupWidths* lpMenuWidths);

@DllImport("OLE32")
HRESULT OleSetMenuDescriptor(ptrdiff_t holemenu, HWND hwndFrame, HWND hwndActiveObject, IOleInPlaceFrame lpFrame, 
                             IOleInPlaceActiveObject lpActiveObj);

@DllImport("OLE32")
HRESULT OleDestroyMenuDescriptor(ptrdiff_t holemenu);

@DllImport("OLE32")
HRESULT OleTranslateAccelerator(IOleInPlaceFrame lpFrame, OIFI* lpFrameInfo, MSG* lpmsg);

@DllImport("OLE32")
HANDLE OleDuplicateData(HANDLE hSrc, ushort cfFormat, uint uiFlags);

@DllImport("OLE32")
HRESULT OleDraw(IUnknown pUnknown, uint dwAspect, HDC hdcDraw, RECT* lprcBounds);

@DllImport("OLE32")
HRESULT OleRun(IUnknown pUnknown);

@DllImport("OLE32")
BOOL OleIsRunning(IOleObject pObject);

@DllImport("OLE32")
HRESULT OleLockRunning(IUnknown pUnknown, BOOL fLock, BOOL fLastUnlockCloses);

@DllImport("OLE32")
void ReleaseStgMedium(STGMEDIUM* param0);

@DllImport("OLE32")
HRESULT CreateOleAdviseHolder(IOleAdviseHolder* ppOAHolder);

@DllImport("ole32")
HRESULT OleCreateDefaultHandler(const(GUID)* clsid, IUnknown pUnkOuter, const(GUID)* riid, void** lplpObj);

@DllImport("OLE32")
HRESULT OleCreateEmbeddingHelper(const(GUID)* clsid, IUnknown pUnkOuter, uint flags, IClassFactory pCF, 
                                 const(GUID)* riid, void** lplpObj);

@DllImport("OLE32")
BOOL IsAccelerator(HACCEL hAccel, int cAccelEntries, MSG* lpMsg, ushort* lpwCmd);

@DllImport("ole32")
ptrdiff_t OleGetIconOfFile(ushort* lpszPath, BOOL fUseFileAsLabel);

@DllImport("OLE32")
ptrdiff_t OleGetIconOfClass(const(GUID)* rclsid, ushort* lpszLabel, BOOL fUseTypeAsLabel);

@DllImport("ole32")
ptrdiff_t OleMetafilePictFromIconAndLabel(HICON hIcon, ushort* lpszLabel, ushort* lpszSourceFile, uint iIconIndex);

@DllImport("OLE32")
HRESULT OleRegGetUserType(const(GUID)* clsid, uint dwFormOfType, ushort** pszUserType);

@DllImport("OLE32")
HRESULT OleRegGetMiscStatus(const(GUID)* clsid, uint dwAspect, uint* pdwStatus);

@DllImport("ole32")
HRESULT OleRegEnumFormatEtc(const(GUID)* clsid, uint dwDirection, IEnumFORMATETC* ppenum);

@DllImport("OLE32")
HRESULT OleRegEnumVerbs(const(GUID)* clsid, IEnumOLEVERB* ppenum);

@DllImport("ole32")
HRESULT OleDoAutoConvert(IStorage pStg, GUID* pClsidNew);

@DllImport("OLE32")
HRESULT OleGetAutoConvert(const(GUID)* clsidOld, GUID* pClsidNew);

@DllImport("ole32")
HRESULT OleSetAutoConvert(const(GUID)* clsidOld, const(GUID)* clsidNew);

@DllImport("OLE32")
uint HPALETTE_UserSize(uint* param0, uint param1, HPALETTE* param2);

@DllImport("OLE32")
ubyte* HPALETTE_UserMarshal(uint* param0, ubyte* param1, HPALETTE* param2);

@DllImport("OLE32")
ubyte* HPALETTE_UserUnmarshal(uint* param0, char* param1, HPALETTE* param2);

@DllImport("OLE32")
void HPALETTE_UserFree(uint* param0, HPALETTE* param1);

@DllImport("OLE32")
uint HRGN_UserSize(uint* param0, uint param1, HRGN* param2);

@DllImport("OLE32")
ubyte* HRGN_UserMarshal(uint* param0, ubyte* param1, HRGN* param2);

@DllImport("OLE32")
ubyte* HRGN_UserUnmarshal(uint* param0, char* param1, HRGN* param2);

@DllImport("OLE32")
void HRGN_UserFree(uint* param0, HRGN* param1);

@DllImport("OLE32")
uint HPALETTE_UserSize64(uint* param0, uint param1, HPALETTE* param2);

@DllImport("OLE32")
ubyte* HPALETTE_UserMarshal64(uint* param0, ubyte* param1, HPALETTE* param2);

@DllImport("OLE32")
ubyte* HPALETTE_UserUnmarshal64(uint* param0, char* param1, HPALETTE* param2);

@DllImport("OLE32")
void HPALETTE_UserFree64(uint* param0, HPALETTE* param1);

@DllImport("OLEAUT32")
HRESULT OleCreatePropertyFrame(HWND hwndOwner, uint x, uint y, ushort* lpszCaption, uint cObjects, IUnknown* ppUnk, 
                               uint cPages, GUID* pPageClsID, uint lcid, uint dwReserved, void* pvReserved);

@DllImport("OLEAUT32")
HRESULT OleCreatePropertyFrameIndirect(OCPFIPARAMS* lpParams);

@DllImport("OLEAUT32")
HRESULT OleTranslateColor(uint clr, HPALETTE hpal, uint* lpcolorref);

@DllImport("OLEAUT32")
HRESULT OleCreateFontIndirect(FONTDESC* lpFontDesc, const(GUID)* riid, void** lplpvObj);

@DllImport("OLEAUT32")
HRESULT OleCreatePictureIndirect(PICTDESC* lpPictDesc, const(GUID)* riid, BOOL fOwn, void** lplpvObj);

@DllImport("OLEAUT32")
HRESULT OleLoadPicture(IStream lpstream, int lSize, BOOL fRunmode, const(GUID)* riid, void** lplpvObj);

@DllImport("OLEAUT32")
HRESULT OleLoadPictureEx(IStream lpstream, int lSize, BOOL fRunmode, const(GUID)* riid, uint xSizeDesired, 
                         uint ySizeDesired, uint dwFlags, void** lplpvObj);

@DllImport("OLEAUT32")
HRESULT OleLoadPicturePath(ushort* szURLorPath, IUnknown punkCaller, uint dwReserved, uint clrReserved, 
                           const(GUID)* riid, void** ppvRet);

@DllImport("OLEAUT32")
HCURSOR OleIconToCursor(HINSTANCE hinstExe, HICON hIcon);

@DllImport("oledlg")
BOOL OleUIAddVerbMenuW(IOleObject lpOleObj, const(wchar)* lpszShortType, HMENU hMenu, uint uPos, uint uIDVerbMin, 
                       uint uIDVerbMax, BOOL bAddConvert, uint idConvert, HMENU* lphMenu);

@DllImport("oledlg")
BOOL OleUIAddVerbMenuA(IOleObject lpOleObj, const(char)* lpszShortType, HMENU hMenu, uint uPos, uint uIDVerbMin, 
                       uint uIDVerbMax, BOOL bAddConvert, uint idConvert, HMENU* lphMenu);

@DllImport("oledlg")
uint OleUIInsertObjectW(OLEUIINSERTOBJECTW* param0);

@DllImport("oledlg")
uint OleUIInsertObjectA(OLEUIINSERTOBJECTA* param0);

@DllImport("oledlg")
uint OleUIPasteSpecialW(OLEUIPASTESPECIALW* param0);

@DllImport("oledlg")
uint OleUIPasteSpecialA(OLEUIPASTESPECIALA* param0);

@DllImport("oledlg")
uint OleUIEditLinksW(OLEUIEDITLINKSW* param0);

@DllImport("oledlg")
uint OleUIEditLinksA(OLEUIEDITLINKSA* param0);

@DllImport("oledlg")
uint OleUIChangeIconW(OLEUICHANGEICONW* param0);

@DllImport("oledlg")
uint OleUIChangeIconA(OLEUICHANGEICONA* param0);

@DllImport("oledlg")
uint OleUIConvertW(OLEUICONVERTW* param0);

@DllImport("oledlg")
uint OleUIConvertA(OLEUICONVERTA* param0);

@DllImport("oledlg")
BOOL OleUICanConvertOrActivateAs(const(GUID)* rClsid, BOOL fIsLinkedObject, ushort wFormat);

@DllImport("oledlg")
uint OleUIBusyW(OLEUIBUSYW* param0);

@DllImport("oledlg")
uint OleUIBusyA(OLEUIBUSYA* param0);

@DllImport("oledlg")
uint OleUIChangeSourceW(OLEUICHANGESOURCEW* param0);

@DllImport("oledlg")
uint OleUIChangeSourceA(OLEUICHANGESOURCEA* param0);

@DllImport("oledlg")
uint OleUIObjectPropertiesW(OLEUIOBJECTPROPSW* param0);

@DllImport("oledlg")
uint OleUIObjectPropertiesA(OLEUIOBJECTPROPSA* param0);

@DllImport("oledlg")
int OleUIPromptUserW(int nTemplate, HWND hwndParent);

@DllImport("oledlg")
int OleUIPromptUserA(int nTemplate, HWND hwndParent);

@DllImport("oledlg")
BOOL OleUIUpdateLinksW(IOleUILinkContainerW lpOleUILinkCntr, HWND hwndParent, const(wchar)* lpszTitle, int cLinks);

@DllImport("oledlg")
BOOL OleUIUpdateLinksA(IOleUILinkContainerA lpOleUILinkCntr, HWND hwndParent, const(char)* lpszTitle, int cLinks);

@DllImport("ole32")
HRESULT CoGetInterceptor(const(GUID)* iidIntercepted, IUnknown punkOuter, const(GUID)* iid, void** ppv);

@DllImport("ole32")
HRESULT CoGetInterceptorFromTypeInfo(const(GUID)* iidIntercepted, IUnknown punkOuter, ITypeInfo typeInfo, 
                                     const(GUID)* iid, void** ppv);

@DllImport("ole32")
void CoSetMessageDispatcher(IMessageDispatcher pMessageDispatcher);

@DllImport("ole32")
void CoHandlePriorityEventsFromMessagePump();

@DllImport("OLE32")
HRESULT CoInitialize(void* pvReserved);

@DllImport("OLE32")
HRESULT CoRegisterMallocSpy(IMallocSpy pMallocSpy);

@DllImport("OLE32")
HRESULT CoRevokeMallocSpy();

@DllImport("OLE32")
HRESULT CoRegisterInitializeSpy(IInitializeSpy pSpy, ULARGE_INTEGER* puliCookie);

@DllImport("OLE32")
HRESULT CoRevokeInitializeSpy(ULARGE_INTEGER uliCookie);

@DllImport("OLE32")
HRESULT CoGetSystemSecurityPermissions(COMSD comSDType, void** ppSD);

@DllImport("OLE32")
HINSTANCE CoLoadLibrary(ushort* lpszLibName, BOOL bAutoFree);

@DllImport("OLE32")
void CoFreeLibrary(HINSTANCE hInst);

@DllImport("OLE32")
void CoFreeAllLibraries();

@DllImport("OLE32")
HRESULT CoGetInstanceFromFile(COSERVERINFO* pServerInfo, GUID* pClsid, IUnknown punkOuter, uint dwClsCtx, 
                              uint grfMode, ushort* pwszName, uint dwCount, char* pResults);

@DllImport("OLE32")
HRESULT CoGetInstanceFromIStorage(COSERVERINFO* pServerInfo, GUID* pClsid, IUnknown punkOuter, uint dwClsCtx, 
                                  IStorage pstg, uint dwCount, char* pResults);

@DllImport("OLE32")
HRESULT CoAllowSetForegroundWindow(IUnknown pUnk, void* lpvReserved);

@DllImport("ole32")
BOOL CoIsOle1Class(const(GUID)* rclsid);

@DllImport("OLE32")
BOOL CoFileTimeToDosDateTime(FILETIME* lpFileTime, ushort* lpDosDate, ushort* lpDosTime);

@DllImport("OLE32")
BOOL CoDosDateTimeToFileTime(ushort nDosDate, ushort nDosTime, FILETIME* lpFileTime);

@DllImport("OLE32")
HRESULT CoRegisterMessageFilter(IMessageFilter lpMessageFilter, IMessageFilter* lplpMessageFilter);

@DllImport("ole32")
HRESULT CoRegisterChannelHook(const(GUID)* ExtensionUuid, IChannelHook pChannelHook);

@DllImport("OLE32")
HRESULT CoTreatAsClass(const(GUID)* clsidOld, const(GUID)* clsidNew);

@DllImport("OLE32")
HRESULT CreateDataCache(IUnknown pUnkOuter, const(GUID)* rclsid, const(GUID)* iid, void** ppv);

@DllImport("OLE32")
HRESULT BindMoniker(IMoniker pmk, uint grfOpt, const(GUID)* iidResult, void** ppvResult);

@DllImport("OLE32")
HRESULT CoGetObject(const(wchar)* pszName, BIND_OPTS* pBindOptions, const(GUID)* riid, void** ppv);

@DllImport("OLE32")
HRESULT MkParseDisplayName(IBindCtx pbc, ushort* szUserName, uint* pchEaten, IMoniker* ppmk);

@DllImport("ole32")
HRESULT MonikerRelativePathTo(IMoniker pmkSrc, IMoniker pmkDest, IMoniker* ppmkRelPath, BOOL dwReserved);

@DllImport("ole32")
HRESULT MonikerCommonPrefixWith(IMoniker pmkThis, IMoniker pmkOther, IMoniker* ppmkCommon);

@DllImport("OLE32")
HRESULT CreateBindCtx(uint reserved, IBindCtx* ppbc);

@DllImport("OLE32")
HRESULT CreateGenericComposite(IMoniker pmkFirst, IMoniker pmkRest, IMoniker* ppmkComposite);

@DllImport("OLE32")
HRESULT GetClassFile(ushort* szFilename, GUID* pclsid);

@DllImport("OLE32")
HRESULT CreateClassMoniker(const(GUID)* rclsid, IMoniker* ppmk);

@DllImport("OLE32")
HRESULT CreateFileMoniker(ushort* lpszPathName, IMoniker* ppmk);

@DllImport("OLE32")
HRESULT CreateItemMoniker(ushort* lpszDelim, ushort* lpszItem, IMoniker* ppmk);

@DllImport("OLE32")
HRESULT CreateAntiMoniker(IMoniker* ppmk);

@DllImport("OLE32")
HRESULT CreatePointerMoniker(IUnknown punk, IMoniker* ppmk);

@DllImport("OLE32")
HRESULT CreateObjrefMoniker(IUnknown punk, IMoniker* ppmk);

@DllImport("OLE32")
HRESULT GetRunningObjectTable(uint reserved, IRunningObjectTable* pprot);


// Interfaces

@GUID("00000000-0000-0000-C000-000000000046")
interface IUnknown
{
    HRESULT QueryInterface(const(GUID)* riid, void** ppvObject);
    uint    AddRef();
    uint    Release();
}

@GUID("000E0000-0000-0000-C000-000000000046")
interface AsyncIUnknown : IUnknown
{
    HRESULT Begin_QueryInterface(const(GUID)* riid);
    HRESULT Finish_QueryInterface(void** ppvObject);
    HRESULT Begin_AddRef();
    uint    Finish_AddRef();
    HRESULT Begin_Release();
    uint    Finish_Release();
}

@GUID("00000001-0000-0000-C000-000000000046")
interface IClassFactory : IUnknown
{
    HRESULT CreateInstance(IUnknown pUnkOuter, const(GUID)* riid, void** ppvObject);
    HRESULT LockServer(BOOL fLock);
}

@GUID("00000003-0000-0000-C000-000000000046")
interface IMarshal : IUnknown
{
    HRESULT GetUnmarshalClass(const(GUID)* riid, void* pv, uint dwDestContext, void* pvDestContext, uint mshlflags, 
                              GUID* pCid);
    HRESULT GetMarshalSizeMax(const(GUID)* riid, void* pv, uint dwDestContext, void* pvDestContext, uint mshlflags, 
                              uint* pSize);
    HRESULT MarshalInterface(IStream pStm, const(GUID)* riid, void* pv, uint dwDestContext, void* pvDestContext, 
                             uint mshlflags);
    HRESULT UnmarshalInterface(IStream pStm, const(GUID)* riid, void** ppv);
    HRESULT ReleaseMarshalData(IStream pStm);
    HRESULT DisconnectObject(uint dwReserved);
}

@GUID("ECC8691B-C1DB-4DC0-855E-65F6C551AF49")
interface INoMarshal : IUnknown
{
}

@GUID("94EA2B94-E9CC-49E0-C0FF-EE64CA8F5B90")
interface IAgileObject : IUnknown
{
}

@GUID("00000017-0000-0000-C000-000000000046")
interface IActivationFilter : IUnknown
{
    HRESULT HandleActivation(uint dwActivationType, const(GUID)* rclsid, GUID* pReplacementClsId);
}

@GUID("000001CF-0000-0000-C000-000000000046")
interface IMarshal2 : IMarshal
{
}

@GUID("00000002-0000-0000-C000-000000000046")
interface IMalloc : IUnknown
{
    void*  Alloc(size_t cb);
    void*  Realloc(void* pv, size_t cb);
    void   Free(void* pv);
    size_t GetSize(void* pv);
    int    DidAlloc(void* pv);
    void   HeapMinimize();
}

@GUID("00000018-0000-0000-C000-000000000046")
interface IStdMarshalInfo : IUnknown
{
    HRESULT GetClassForHandler(uint dwDestContext, void* pvDestContext, GUID* pClsid);
}

@GUID("00000019-0000-0000-C000-000000000046")
interface IExternalConnection : IUnknown
{
    uint AddConnection(uint extconn, uint reserved);
    uint ReleaseConnection(uint extconn, uint reserved, BOOL fLastReleaseCloses);
}

@GUID("00000020-0000-0000-C000-000000000046")
interface IMultiQI : IUnknown
{
    HRESULT QueryMultipleInterfaces(uint cMQIs, char* pMQIs);
}

@GUID("000E0020-0000-0000-C000-000000000046")
interface AsyncIMultiQI : IUnknown
{
    HRESULT Begin_QueryMultipleInterfaces(uint cMQIs, char* pMQIs);
    HRESULT Finish_QueryMultipleInterfaces(char* pMQIs);
}

@GUID("00000021-0000-0000-C000-000000000046")
interface IInternalUnknown : IUnknown
{
    HRESULT QueryInternalInterface(const(GUID)* riid, void** ppv);
}

@GUID("00000100-0000-0000-C000-000000000046")
interface IEnumUnknown : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumUnknown* ppenum);
}

@GUID("00000101-0000-0000-C000-000000000046")
interface IEnumString : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumString* ppenum);
}

@GUID("D5F56B60-593B-101A-B569-08002B2DBF7A")
interface IRpcChannelBuffer : IUnknown
{
    HRESULT GetBuffer(RPCOLEMESSAGE* pMessage, const(GUID)* riid);
    HRESULT SendReceive(RPCOLEMESSAGE* pMessage, uint* pStatus);
    HRESULT FreeBuffer(RPCOLEMESSAGE* pMessage);
    HRESULT GetDestCtx(uint* pdwDestContext, void** ppvDestContext);
    HRESULT IsConnected();
}

@GUID("594F31D0-7F19-11D0-B194-00A0C90DC8BF")
interface IRpcChannelBuffer2 : IRpcChannelBuffer
{
    HRESULT GetProtocolVersion(uint* pdwVersion);
}

@GUID("A5029FB6-3C34-11D1-9C99-00C04FB998AA")
interface IAsyncRpcChannelBuffer : IRpcChannelBuffer2
{
    HRESULT Send(RPCOLEMESSAGE* pMsg, ISynchronize pSync, uint* pulStatus);
    HRESULT Receive(RPCOLEMESSAGE* pMsg, uint* pulStatus);
    HRESULT GetDestCtxEx(RPCOLEMESSAGE* pMsg, uint* pdwDestContext, void** ppvDestContext);
}

@GUID("25B15600-0115-11D0-BF0D-00AA00B8DFD2")
interface IRpcChannelBuffer3 : IRpcChannelBuffer2
{
    HRESULT Send(RPCOLEMESSAGE* pMsg, uint* pulStatus);
    HRESULT Receive(RPCOLEMESSAGE* pMsg, uint ulSize, uint* pulStatus);
    HRESULT Cancel(RPCOLEMESSAGE* pMsg);
    HRESULT GetCallContext(RPCOLEMESSAGE* pMsg, const(GUID)* riid, void** pInterface);
    HRESULT GetDestCtxEx(RPCOLEMESSAGE* pMsg, uint* pdwDestContext, void** ppvDestContext);
    HRESULT GetState(RPCOLEMESSAGE* pMsg, uint* pState);
    HRESULT RegisterAsync(RPCOLEMESSAGE* pMsg, IAsyncManager pAsyncMgr);
}

@GUID("58A08519-24C8-4935-B482-3FD823333A4F")
interface IRpcSyntaxNegotiate : IUnknown
{
    HRESULT NegotiateSyntax(RPCOLEMESSAGE* pMsg);
}

@GUID("D5F56A34-593B-101A-B569-08002B2DBF7A")
interface IRpcProxyBuffer : IUnknown
{
    HRESULT Connect(IRpcChannelBuffer pRpcChannelBuffer);
    void    Disconnect();
}

@GUID("D5F56AFC-593B-101A-B569-08002B2DBF7A")
interface IRpcStubBuffer : IUnknown
{
    HRESULT Connect(IUnknown pUnkServer);
    void    Disconnect();
    HRESULT Invoke(RPCOLEMESSAGE* _prpcmsg, IRpcChannelBuffer _pRpcChannelBuffer);
    IRpcStubBuffer IsIIDSupported(const(GUID)* riid);
    uint    CountRefs();
    HRESULT DebugServerQueryInterface(void** ppv);
    void    DebugServerRelease(void* pv);
}

@GUID("D5F569D0-593B-101A-B569-08002B2DBF7A")
interface IPSFactoryBuffer : IUnknown
{
    HRESULT CreateProxy(IUnknown pUnkOuter, const(GUID)* riid, IRpcProxyBuffer* ppProxy, void** ppv);
    HRESULT CreateStub(const(GUID)* riid, IUnknown pUnkServer, IRpcStubBuffer* ppStub);
}

@GUID("1008C4A0-7613-11CF-9AF1-0020AF6E72F4")
interface IChannelHook : IUnknown
{
    void ClientGetSize(const(GUID)* uExtent, const(GUID)* riid, uint* pDataSize);
    void ClientFillBuffer(const(GUID)* uExtent, const(GUID)* riid, uint* pDataSize, void* pDataBuffer);
    void ClientNotify(const(GUID)* uExtent, const(GUID)* riid, uint cbDataSize, void* pDataBuffer, uint lDataRep, 
                      HRESULT hrFault);
    void ServerNotify(const(GUID)* uExtent, const(GUID)* riid, uint cbDataSize, void* pDataBuffer, uint lDataRep);
    void ServerGetSize(const(GUID)* uExtent, const(GUID)* riid, HRESULT hrFault, uint* pDataSize);
    void ServerFillBuffer(const(GUID)* uExtent, const(GUID)* riid, uint* pDataSize, void* pDataBuffer, 
                          HRESULT hrFault);
}

@GUID("0000013D-0000-0000-C000-000000000046")
interface IClientSecurity : IUnknown
{
    HRESULT QueryBlanket(IUnknown pProxy, uint* pAuthnSvc, uint* pAuthzSvc, ushort** pServerPrincName, 
                         uint* pAuthnLevel, uint* pImpLevel, void** pAuthInfo, uint* pCapabilites);
    HRESULT SetBlanket(IUnknown pProxy, uint dwAuthnSvc, uint dwAuthzSvc, ushort* pServerPrincName, 
                       uint dwAuthnLevel, uint dwImpLevel, void* pAuthInfo, uint dwCapabilities);
    HRESULT CopyProxy(IUnknown pProxy, IUnknown* ppCopy);
}

@GUID("0000013E-0000-0000-C000-000000000046")
interface IServerSecurity : IUnknown
{
    HRESULT QueryBlanket(uint* pAuthnSvc, uint* pAuthzSvc, ushort** pServerPrincName, uint* pAuthnLevel, 
                         uint* pImpLevel, void** pPrivs, uint* pCapabilities);
    HRESULT ImpersonateClient();
    HRESULT RevertToSelf();
    BOOL    IsImpersonating();
}

@GUID("00000144-0000-0000-C000-000000000046")
interface IRpcOptions : IUnknown
{
    HRESULT Set(IUnknown pPrx, RPCOPT_PROPERTIES dwProperty, size_t dwValue);
    HRESULT Query(IUnknown pPrx, RPCOPT_PROPERTIES dwProperty, size_t* pdwValue);
}

@GUID("0000015B-0000-0000-C000-000000000046")
interface IGlobalOptions : IUnknown
{
    HRESULT Set(GLOBALOPT_PROPERTIES dwProperty, size_t dwValue);
    HRESULT Query(GLOBALOPT_PROPERTIES dwProperty, size_t* pdwValue);
}

@GUID("00000022-0000-0000-C000-000000000046")
interface ISurrogate : IUnknown
{
    HRESULT LoadDllServer(const(GUID)* Clsid);
    HRESULT FreeSurrogate();
}

@GUID("00000146-0000-0000-C000-000000000046")
interface IGlobalInterfaceTable : IUnknown
{
    HRESULT RegisterInterfaceInGlobal(IUnknown pUnk, const(GUID)* riid, uint* pdwCookie);
    HRESULT RevokeInterfaceFromGlobal(uint dwCookie);
    HRESULT GetInterfaceFromGlobal(uint dwCookie, const(GUID)* riid, void** ppv);
}

@GUID("00000030-0000-0000-C000-000000000046")
interface ISynchronize : IUnknown
{
    HRESULT Wait(uint dwFlags, uint dwMilliseconds);
    HRESULT Signal();
    HRESULT Reset();
}

@GUID("00000031-0000-0000-C000-000000000046")
interface ISynchronizeHandle : IUnknown
{
    HRESULT GetHandle(HANDLE* ph);
}

@GUID("00000032-0000-0000-C000-000000000046")
interface ISynchronizeEvent : ISynchronizeHandle
{
    HRESULT SetEventHandle(HANDLE* ph);
}

@GUID("00000033-0000-0000-C000-000000000046")
interface ISynchronizeContainer : IUnknown
{
    HRESULT AddSynchronize(ISynchronize pSync);
    HRESULT WaitMultiple(uint dwFlags, uint dwTimeOut, ISynchronize* ppSync);
}

@GUID("00000025-0000-0000-C000-000000000046")
interface ISynchronizeMutex : ISynchronize
{
    HRESULT ReleaseMutex();
}

@GUID("00000029-0000-0000-C000-000000000046")
interface ICancelMethodCalls : IUnknown
{
    HRESULT Cancel(uint ulSeconds);
    HRESULT TestCancel();
}

@GUID("0000002A-0000-0000-C000-000000000046")
interface IAsyncManager : IUnknown
{
    HRESULT CompleteCall(HRESULT Result);
    HRESULT GetCallContext(const(GUID)* riid, void** pInterface);
    HRESULT GetState(uint* pulStateFlags);
}

@GUID("1C733A30-2A1C-11CE-ADE5-00AA0044773D")
interface ICallFactory : IUnknown
{
    HRESULT CreateCall(const(GUID)* riid, IUnknown pCtrlUnk, const(GUID)* riid2, IUnknown* ppv);
}

@GUID("00000149-0000-0000-C000-000000000046")
interface IRpcHelper : IUnknown
{
    HRESULT GetDCOMProtocolVersion(uint* pComVersion);
    HRESULT GetIIDFromOBJREF(void* pObjRef, GUID** piid);
}

@GUID("EB0CB9E8-7996-11D2-872E-0000F8080859")
interface IReleaseMarshalBuffers : IUnknown
{
    HRESULT ReleaseMarshalBuffer(RPCOLEMESSAGE* pMsg, uint dwFlags, IUnknown pChnl);
}

@GUID("0000002B-0000-0000-C000-000000000046")
interface IWaitMultiple : IUnknown
{
    HRESULT WaitMultiple(uint timeout, ISynchronize* pSync);
    HRESULT AddSynchronize(ISynchronize pSync);
}

@GUID("00000147-0000-0000-C000-000000000046")
interface IAddrTrackingControl : IUnknown
{
    HRESULT EnableCOMDynamicAddrTracking();
    HRESULT DisableCOMDynamicAddrTracking();
}

@GUID("00000148-0000-0000-C000-000000000046")
interface IAddrExclusionControl : IUnknown
{
    HRESULT GetCurrentAddrExclusionList(const(GUID)* riid, void** ppEnumerator);
    HRESULT UpdateAddrExclusionList(IUnknown pEnumerator);
}

@GUID("DB2F3ACA-2F86-11D1-8E04-00C04FB9989A")
interface IPipeByte : IUnknown
{
    HRESULT Pull(char* buf, uint cRequest, uint* pcReturned);
    HRESULT Push(char* buf, uint cSent);
}

@GUID("DB2F3ACB-2F86-11D1-8E04-00C04FB9989A")
interface AsyncIPipeByte : IUnknown
{
    HRESULT Begin_Pull(uint cRequest);
    HRESULT Finish_Pull(ubyte* buf, uint* pcReturned);
    HRESULT Begin_Push(char* buf, uint cSent);
    HRESULT Finish_Push();
}

@GUID("DB2F3ACC-2F86-11D1-8E04-00C04FB9989A")
interface IPipeLong : IUnknown
{
    HRESULT Pull(char* buf, uint cRequest, uint* pcReturned);
    HRESULT Push(char* buf, uint cSent);
}

@GUID("DB2F3ACD-2F86-11D1-8E04-00C04FB9989A")
interface AsyncIPipeLong : IUnknown
{
    HRESULT Begin_Pull(uint cRequest);
    HRESULT Finish_Pull(int* buf, uint* pcReturned);
    HRESULT Begin_Push(char* buf, uint cSent);
    HRESULT Finish_Push();
}

@GUID("DB2F3ACE-2F86-11D1-8E04-00C04FB9989A")
interface IPipeDouble : IUnknown
{
    HRESULT Pull(char* buf, uint cRequest, uint* pcReturned);
    HRESULT Push(char* buf, uint cSent);
}

@GUID("DB2F3ACF-2F86-11D1-8E04-00C04FB9989A")
interface AsyncIPipeDouble : IUnknown
{
    HRESULT Begin_Pull(uint cRequest);
    HRESULT Finish_Pull(double* buf, uint* pcReturned);
    HRESULT Begin_Push(char* buf, uint cSent);
    HRESULT Finish_Push();
}

@GUID("000001CE-0000-0000-C000-000000000046")
interface IComThreadingInfo : IUnknown
{
    HRESULT GetCurrentApartmentType(APTTYPE* pAptType);
    HRESULT GetCurrentThreadType(THDTYPE* pThreadType);
    HRESULT GetCurrentLogicalThreadId(GUID* pguidLogicalThreadId);
    HRESULT SetCurrentLogicalThreadId(const(GUID)* rguid);
}

@GUID("72380D55-8D2B-43A3-8513-2B6EF31434E9")
interface IProcessInitControl : IUnknown
{
    HRESULT ResetInitializerTimeout(uint dwSecondsRemaining);
}

@GUID("00000040-0000-0000-C000-000000000046")
interface IFastRundown : IUnknown
{
}

@GUID("D8F2F5E6-6102-4863-9F26-389A4676EFDE")
interface IMarshalingStream : IStream
{
    HRESULT GetMarshalingContextAttribute(CO_MARSHALING_CONTEXT_ATTRIBUTES attribute, size_t* pAttributeValue);
}

@GUID("0000001D-0000-0000-C000-000000000046")
interface IMallocSpy : IUnknown
{
    size_t PreAlloc(size_t cbRequest);
    void*  PostAlloc(void* pActual);
    void*  PreFree(void* pRequest, BOOL fSpyed);
    void   PostFree(BOOL fSpyed);
    size_t PreRealloc(void* pRequest, size_t cbRequest, void** ppNewRequest, BOOL fSpyed);
    void*  PostRealloc(void* pActual, BOOL fSpyed);
    void*  PreGetSize(void* pRequest, BOOL fSpyed);
    size_t PostGetSize(size_t cbActual, BOOL fSpyed);
    void*  PreDidAlloc(void* pRequest, BOOL fSpyed);
    int    PostDidAlloc(void* pRequest, BOOL fSpyed, int fActual);
    void   PreHeapMinimize();
    void   PostHeapMinimize();
}

@GUID("0000000E-0000-0000-C000-000000000046")
interface IBindCtx : IUnknown
{
    HRESULT RegisterObjectBound(IUnknown punk);
    HRESULT RevokeObjectBound(IUnknown punk);
    HRESULT ReleaseBoundObjects();
    HRESULT SetBindOptions(BIND_OPTS* pbindopts);
    HRESULT GetBindOptions(BIND_OPTS* pbindopts);
    HRESULT GetRunningObjectTable(IRunningObjectTable* pprot);
    HRESULT RegisterObjectParam(ushort* pszKey, IUnknown punk);
    HRESULT GetObjectParam(ushort* pszKey, IUnknown* ppunk);
    HRESULT EnumObjectParam(IEnumString* ppenum);
    HRESULT RevokeObjectParam(ushort* pszKey);
}

@GUID("00000102-0000-0000-C000-000000000046")
interface IEnumMoniker : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumMoniker* ppenum);
}

@GUID("00000126-0000-0000-C000-000000000046")
interface IRunnableObject : IUnknown
{
    HRESULT GetRunningClass(GUID* lpClsid);
    HRESULT Run(IBindCtx pbc);
    BOOL    IsRunning();
    HRESULT LockRunning(BOOL fLock, BOOL fLastUnlockCloses);
    HRESULT SetContainedObject(BOOL fContained);
}

@GUID("00000010-0000-0000-C000-000000000046")
interface IRunningObjectTable : IUnknown
{
    HRESULT Register(uint grfFlags, IUnknown punkObject, IMoniker pmkObjectName, uint* pdwRegister);
    HRESULT Revoke(uint dwRegister);
    HRESULT IsRunning(IMoniker pmkObjectName);
    HRESULT GetObjectA(IMoniker pmkObjectName, IUnknown* ppunkObject);
    HRESULT NoteChangeTime(uint dwRegister, FILETIME* pfiletime);
    HRESULT GetTimeOfLastChange(IMoniker pmkObjectName, FILETIME* pfiletime);
    HRESULT EnumRunning(IEnumMoniker* ppenumMoniker);
}

@GUID("0000010C-0000-0000-C000-000000000046")
interface IPersist : IUnknown
{
    HRESULT GetClassID(GUID* pClassID);
}

@GUID("00000109-0000-0000-C000-000000000046")
interface IPersistStream : IPersist
{
    HRESULT IsDirty();
    HRESULT Load(IStream pStm);
    HRESULT Save(IStream pStm, BOOL fClearDirty);
    HRESULT GetSizeMax(ULARGE_INTEGER* pcbSize);
}

@GUID("0000000F-0000-0000-C000-000000000046")
interface IMoniker : IPersistStream
{
    HRESULT BindToObject(IBindCtx pbc, IMoniker pmkToLeft, const(GUID)* riidResult, void** ppvResult);
    HRESULT BindToStorage(IBindCtx pbc, IMoniker pmkToLeft, const(GUID)* riid, void** ppvObj);
    HRESULT Reduce(IBindCtx pbc, uint dwReduceHowFar, IMoniker* ppmkToLeft, IMoniker* ppmkReduced);
    HRESULT ComposeWith(IMoniker pmkRight, BOOL fOnlyIfNotGeneric, IMoniker* ppmkComposite);
    HRESULT Enum(BOOL fForward, IEnumMoniker* ppenumMoniker);
    HRESULT IsEqual(IMoniker pmkOtherMoniker);
    HRESULT Hash(uint* pdwHash);
    HRESULT IsRunning(IBindCtx pbc, IMoniker pmkToLeft, IMoniker pmkNewlyRunning);
    HRESULT GetTimeOfLastChange(IBindCtx pbc, IMoniker pmkToLeft, FILETIME* pFileTime);
    HRESULT Inverse(IMoniker* ppmk);
    HRESULT CommonPrefixWith(IMoniker pmkOther, IMoniker* ppmkPrefix);
    HRESULT RelativePathTo(IMoniker pmkOther, IMoniker* ppmkRelPath);
    HRESULT GetDisplayName(IBindCtx pbc, IMoniker pmkToLeft, ushort** ppszDisplayName);
    HRESULT ParseDisplayName(IBindCtx pbc, IMoniker pmkToLeft, ushort* pszDisplayName, uint* pchEaten, 
                             IMoniker* ppmkOut);
    HRESULT IsSystemMoniker(uint* pdwMksys);
}

@GUID("F29F6BC0-5021-11CE-AA15-00006901293F")
interface IROTData : IUnknown
{
    HRESULT GetComparisonData(char* pbData, uint cbMax, uint* pcbData);
}

@GUID("0000010B-0000-0000-C000-000000000046")
interface IPersistFile : IPersist
{
    HRESULT IsDirty();
    HRESULT Load(ushort* pszFileName, uint dwMode);
    HRESULT Save(ushort* pszFileName, BOOL fRemember);
    HRESULT SaveCompleted(ushort* pszFileName);
    HRESULT GetCurFile(ushort** ppszFileName);
}

@GUID("0000010A-0000-0000-C000-000000000046")
interface IPersistStorage : IPersist
{
    HRESULT IsDirty();
    HRESULT InitNew(IStorage pStg);
    HRESULT Load(IStorage pStg);
    HRESULT Save(IStorage pStgSave, BOOL fSameAsLoad);
    HRESULT SaveCompleted(IStorage pStgNew);
    HRESULT HandsOffStorage();
}

@GUID("00000103-0000-0000-C000-000000000046")
interface IEnumFORMATETC : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumFORMATETC* ppenum);
}

@GUID("00000105-0000-0000-C000-000000000046")
interface IEnumSTATDATA : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumSTATDATA* ppenum);
}

@GUID("0000010F-0000-0000-C000-000000000046")
interface IAdviseSink : IUnknown
{
    void OnDataChange(FORMATETC* pFormatetc, STGMEDIUM* pStgmed);
    void OnViewChange(uint dwAspect, int lindex);
    void OnRename(IMoniker pmk);
    void OnSave();
    void OnClose();
}

@GUID("00000150-0000-0000-C000-000000000046")
interface AsyncIAdviseSink : IUnknown
{
    void Begin_OnDataChange(FORMATETC* pFormatetc, STGMEDIUM* pStgmed);
    void Finish_OnDataChange();
    void Begin_OnViewChange(uint dwAspect, int lindex);
    void Finish_OnViewChange();
    void Begin_OnRename(IMoniker pmk);
    void Finish_OnRename();
    void Begin_OnSave();
    void Finish_OnSave();
    void Begin_OnClose();
    void Finish_OnClose();
}

@GUID("00000125-0000-0000-C000-000000000046")
interface IAdviseSink2 : IAdviseSink
{
    void OnLinkSrcChange(IMoniker pmk);
}

@GUID("00000151-0000-0000-C000-000000000046")
interface AsyncIAdviseSink2 : AsyncIAdviseSink
{
    void Begin_OnLinkSrcChange(IMoniker pmk);
    void Finish_OnLinkSrcChange();
}

@GUID("0000010E-0000-0000-C000-000000000046")
interface IDataObject : IUnknown
{
    HRESULT GetData(FORMATETC* pformatetcIn, STGMEDIUM* pmedium);
    HRESULT GetDataHere(FORMATETC* pformatetc, STGMEDIUM* pmedium);
    HRESULT QueryGetData(FORMATETC* pformatetc);
    HRESULT GetCanonicalFormatEtc(FORMATETC* pformatectIn, FORMATETC* pformatetcOut);
    HRESULT SetData(FORMATETC* pformatetc, STGMEDIUM* pmedium, BOOL fRelease);
    HRESULT EnumFormatEtc(uint dwDirection, IEnumFORMATETC* ppenumFormatEtc);
    HRESULT DAdvise(FORMATETC* pformatetc, uint advf, IAdviseSink pAdvSink, uint* pdwConnection);
    HRESULT DUnadvise(uint dwConnection);
    HRESULT EnumDAdvise(IEnumSTATDATA* ppenumAdvise);
}

@GUID("00000110-0000-0000-C000-000000000046")
interface IDataAdviseHolder : IUnknown
{
    HRESULT Advise(IDataObject pDataObject, FORMATETC* pFetc, uint advf, IAdviseSink pAdvise, uint* pdwConnection);
    HRESULT Unadvise(uint dwConnection);
    HRESULT EnumAdvise(IEnumSTATDATA* ppenumAdvise);
    HRESULT SendOnDataChange(IDataObject pDataObject, uint dwReserved, uint advf);
}

@GUID("00000016-0000-0000-C000-000000000046")
interface IMessageFilter : IUnknown
{
    uint HandleInComingCall(uint dwCallType, ptrdiff_t htaskCaller, uint dwTickCount, 
                            INTERFACEINFO* lpInterfaceInfo);
    uint RetryRejectedCall(ptrdiff_t htaskCallee, uint dwTickCount, uint dwRejectType);
    uint MessagePending(ptrdiff_t htaskCallee, uint dwTickCount, uint dwPendingType);
}

@GUID("00000140-0000-0000-C000-000000000046")
interface IClassActivator : IUnknown
{
    HRESULT GetClassObject(const(GUID)* rclsid, uint dwClassContext, uint locale, const(GUID)* riid, void** ppv);
}

@GUID("A9D758A0-4617-11CF-95FC-00AA00680DB4")
interface IProgressNotify : IUnknown
{
    HRESULT OnProgress(uint dwProgressCurrent, uint dwProgressMaximum, BOOL fAccurate, BOOL fOwner);
}

@GUID("30F3D47A-6447-11D1-8E3C-00C04FB9386D")
interface IBlockingLock : IUnknown
{
    HRESULT Lock(uint dwTimeout);
    HRESULT Unlock();
}

@GUID("BC0BF6AE-8878-11D1-83E9-00C04FC2C6D4")
interface ITimeAndNoticeControl : IUnknown
{
    HRESULT SuppressChanges(uint res1, uint res2);
}

@GUID("8D19C834-8879-11D1-83E9-00C04FC2C6D4")
interface IOplockStorage : IUnknown
{
    HRESULT CreateStorageEx(const(wchar)* pwcsName, uint grfMode, uint stgfmt, uint grfAttrs, const(GUID)* riid, 
                            void** ppstgOpen);
    HRESULT OpenStorageEx(const(wchar)* pwcsName, uint grfMode, uint stgfmt, uint grfAttrs, const(GUID)* riid, 
                          void** ppstgOpen);
}

@GUID("00000026-0000-0000-C000-000000000046")
interface IUrlMon : IUnknown
{
    HRESULT AsyncGetClassBits(const(GUID)* rclsid, const(wchar)* pszTYPE, const(wchar)* pszExt, 
                              uint dwFileVersionMS, uint dwFileVersionLS, const(wchar)* pszCodeBase, IBindCtx pbc, 
                              uint dwClassContext, const(GUID)* riid, uint flags);
}

@GUID("00000145-0000-0000-C000-000000000046")
interface IForegroundTransfer : IUnknown
{
    HRESULT AllowForegroundTransfer(void* lpvReserved);
}

@GUID("969DC708-5C76-11D1-8D86-0000F804B057")
interface IThumbnailExtractor : IUnknown
{
    HRESULT ExtractThumbnail(IStorage pStg, uint ulLength, uint ulHeight, uint* pulOutputLength, 
                             uint* pulOutputHeight, HBITMAP* phOutputBitmap);
    HRESULT OnFileUpdated(IStorage pStg);
}

@GUID("947990DE-CC28-11D2-A0F7-00805F858FB1")
interface IDummyHICONIncluder : IUnknown
{
    HRESULT Dummy(HICON h1, HDC h2);
}

@GUID("000001D5-0000-0000-C000-000000000046")
interface IProcessLock : IUnknown
{
    uint AddRefOnProcess();
    uint ReleaseRefOnProcess();
}

@GUID("000001D4-0000-0000-C000-000000000046")
interface ISurrogateService : IUnknown
{
    HRESULT Init(const(GUID)* rguidProcessID, IProcessLock pProcessLock, int* pfApplicationAware);
    HRESULT ApplicationLaunch(const(GUID)* rguidApplID, ApplicationType appType);
    HRESULT ApplicationFree(const(GUID)* rguidApplID);
    HRESULT CatalogRefresh(uint ulReserved);
    HRESULT ProcessShutdown(ShutdownType shutdownType);
}

@GUID("00000034-0000-0000-C000-000000000046")
interface IInitializeSpy : IUnknown
{
    HRESULT PreInitialize(uint dwCoInit, uint dwCurThreadAptRefs);
    HRESULT PostInitialize(HRESULT hrCoInit, uint dwCoInit, uint dwNewThreadAptRefs);
    HRESULT PreUninitialize(uint dwCurThreadAptRefs);
    HRESULT PostUninitialize(uint dwNewThreadAptRefs);
}

@GUID("00000111-0000-0000-C000-000000000046")
interface IOleAdviseHolder : IUnknown
{
    HRESULT Advise(IAdviseSink pAdvise, uint* pdwConnection);
    HRESULT Unadvise(uint dwConnection);
    HRESULT EnumAdvise(IEnumSTATDATA* ppenumAdvise);
    HRESULT SendOnRename(IMoniker pmk);
    HRESULT SendOnSave();
    HRESULT SendOnClose();
}

@GUID("0000011E-0000-0000-C000-000000000046")
interface IOleCache : IUnknown
{
    HRESULT Cache(FORMATETC* pformatetc, uint advf, uint* pdwConnection);
    HRESULT Uncache(uint dwConnection);
    HRESULT EnumCache(IEnumSTATDATA* ppenumSTATDATA);
    HRESULT InitCache(IDataObject pDataObject);
    HRESULT SetData(FORMATETC* pformatetc, STGMEDIUM* pmedium, BOOL fRelease);
}

@GUID("00000128-0000-0000-C000-000000000046")
interface IOleCache2 : IOleCache
{
    HRESULT UpdateCache(IDataObject pDataObject, uint grfUpdf, void* pReserved);
    HRESULT DiscardCache(uint dwDiscardOptions);
}

@GUID("00000129-0000-0000-C000-000000000046")
interface IOleCacheControl : IUnknown
{
    HRESULT OnRun(IDataObject pDataObject);
    HRESULT OnStop();
}

@GUID("0000011A-0000-0000-C000-000000000046")
interface IParseDisplayName : IUnknown
{
    HRESULT ParseDisplayName(IBindCtx pbc, ushort* pszDisplayName, uint* pchEaten, IMoniker* ppmkOut);
}

@GUID("0000011B-0000-0000-C000-000000000046")
interface IOleContainer : IParseDisplayName
{
    HRESULT EnumObjects(uint grfFlags, IEnumUnknown* ppenum);
    HRESULT LockContainer(BOOL fLock);
}

@GUID("00000118-0000-0000-C000-000000000046")
interface IOleClientSite : IUnknown
{
    HRESULT SaveObject();
    HRESULT GetMoniker(uint dwAssign, uint dwWhichMoniker, IMoniker* ppmk);
    HRESULT GetContainer(IOleContainer* ppContainer);
    HRESULT ShowObject();
    HRESULT OnShowWindow(BOOL fShow);
    HRESULT RequestNewObjectLayout();
}

@GUID("00000112-0000-0000-C000-000000000046")
interface IOleObject : IUnknown
{
    HRESULT SetClientSite(IOleClientSite pClientSite);
    HRESULT GetClientSite(IOleClientSite* ppClientSite);
    HRESULT SetHostNames(ushort* szContainerApp, ushort* szContainerObj);
    HRESULT Close(uint dwSaveOption);
    HRESULT SetMoniker(uint dwWhichMoniker, IMoniker pmk);
    HRESULT GetMoniker(uint dwAssign, uint dwWhichMoniker, IMoniker* ppmk);
    HRESULT InitFromData(IDataObject pDataObject, BOOL fCreation, uint dwReserved);
    HRESULT GetClipboardData(uint dwReserved, IDataObject* ppDataObject);
    HRESULT DoVerb(int iVerb, MSG* lpmsg, IOleClientSite pActiveSite, int lindex, HWND hwndParent, 
                   RECT* lprcPosRect);
    HRESULT EnumVerbs(IEnumOLEVERB* ppEnumOleVerb);
    HRESULT Update();
    HRESULT IsUpToDate();
    HRESULT GetUserClassID(GUID* pClsid);
    HRESULT GetUserType(uint dwFormOfType, ushort** pszUserType);
    HRESULT SetExtent(uint dwDrawAspect, SIZE* psizel);
    HRESULT GetExtent(uint dwDrawAspect, SIZE* psizel);
    HRESULT Advise(IAdviseSink pAdvSink, uint* pdwConnection);
    HRESULT Unadvise(uint dwConnection);
    HRESULT EnumAdvise(IEnumSTATDATA* ppenumAdvise);
    HRESULT GetMiscStatus(uint dwAspect, uint* pdwStatus);
    HRESULT SetColorScheme(LOGPALETTE* pLogpal);
}

@GUID("00000114-0000-0000-C000-000000000046")
interface IOleWindow : IUnknown
{
    HRESULT GetWindow(HWND* phwnd);
    HRESULT ContextSensitiveHelp(BOOL fEnterMode);
}

@GUID("0000011D-0000-0000-C000-000000000046")
interface IOleLink : IUnknown
{
    HRESULT SetUpdateOptions(uint dwUpdateOpt);
    HRESULT GetUpdateOptions(uint* pdwUpdateOpt);
    HRESULT SetSourceMoniker(IMoniker pmk, const(GUID)* rclsid);
    HRESULT GetSourceMoniker(IMoniker* ppmk);
    HRESULT SetSourceDisplayName(ushort* pszStatusText);
    HRESULT GetSourceDisplayName(ushort** ppszDisplayName);
    HRESULT BindToSource(uint bindflags, IBindCtx pbc);
    HRESULT BindIfRunning();
    HRESULT GetBoundSource(IUnknown* ppunk);
    HRESULT UnbindSource();
    HRESULT Update(IBindCtx pbc);
}

@GUID("0000011C-0000-0000-C000-000000000046")
interface IOleItemContainer : IOleContainer
{
    HRESULT GetObjectA(ushort* pszItem, uint dwSpeedNeeded, IBindCtx pbc, const(GUID)* riid, void** ppvObject);
    HRESULT GetObjectStorage(ushort* pszItem, IBindCtx pbc, const(GUID)* riid, void** ppvStorage);
    HRESULT IsRunning(ushort* pszItem);
}

@GUID("00000115-0000-0000-C000-000000000046")
interface IOleInPlaceUIWindow : IOleWindow
{
    HRESULT GetBorder(RECT* lprectBorder);
    HRESULT RequestBorderSpace(RECT* pborderwidths);
    HRESULT SetBorderSpace(RECT* pborderwidths);
    HRESULT SetActiveObject(IOleInPlaceActiveObject pActiveObject, ushort* pszObjName);
}

@GUID("00000117-0000-0000-C000-000000000046")
interface IOleInPlaceActiveObject : IOleWindow
{
    HRESULT TranslateAcceleratorA(MSG* lpmsg);
    HRESULT OnFrameWindowActivate(BOOL fActivate);
    HRESULT OnDocWindowActivate(BOOL fActivate);
    HRESULT ResizeBorder(RECT* prcBorder, IOleInPlaceUIWindow pUIWindow, BOOL fFrameWindow);
    HRESULT EnableModeless(BOOL fEnable);
}

@GUID("00000116-0000-0000-C000-000000000046")
interface IOleInPlaceFrame : IOleInPlaceUIWindow
{
    HRESULT InsertMenus(HMENU hmenuShared, OleMenuGroupWidths* lpMenuWidths);
    HRESULT SetMenu(HMENU hmenuShared, ptrdiff_t holemenu, HWND hwndActiveObject);
    HRESULT RemoveMenus(HMENU hmenuShared);
    HRESULT SetStatusText(ushort* pszStatusText);
    HRESULT EnableModeless(BOOL fEnable);
    HRESULT TranslateAcceleratorA(MSG* lpmsg, ushort wID);
}

@GUID("00000113-0000-0000-C000-000000000046")
interface IOleInPlaceObject : IOleWindow
{
    HRESULT InPlaceDeactivate();
    HRESULT UIDeactivate();
    HRESULT SetObjectRects(RECT* lprcPosRect, RECT* lprcClipRect);
    HRESULT ReactivateAndUndo();
}

@GUID("00000119-0000-0000-C000-000000000046")
interface IOleInPlaceSite : IOleWindow
{
    HRESULT CanInPlaceActivate();
    HRESULT OnInPlaceActivate();
    HRESULT OnUIActivate();
    HRESULT GetWindowContext(IOleInPlaceFrame* ppFrame, IOleInPlaceUIWindow* ppDoc, RECT* lprcPosRect, 
                             RECT* lprcClipRect, OIFI* lpFrameInfo);
    HRESULT Scroll(SIZE scrollExtant);
    HRESULT OnUIDeactivate(BOOL fUndoable);
    HRESULT OnInPlaceDeactivate();
    HRESULT DiscardUndoState();
    HRESULT DeactivateAndUndo();
    HRESULT OnPosRectChange(RECT* lprcPosRect);
}

@GUID("0000012A-0000-0000-C000-000000000046")
interface IContinue : IUnknown
{
    HRESULT FContinue();
}

@GUID("0000010D-0000-0000-C000-000000000046")
interface IViewObject : IUnknown
{
    HRESULT Draw(uint dwDrawAspect, int lindex, void* pvAspect, DVTARGETDEVICE* ptd, HDC hdcTargetDev, HDC hdcDraw, 
                 RECTL* lprcBounds, RECTL* lprcWBounds, BOOL************** pfnContinue, size_t dwContinue);
    HRESULT GetColorSet(uint dwDrawAspect, int lindex, void* pvAspect, DVTARGETDEVICE* ptd, HDC hicTargetDev, 
                        LOGPALETTE** ppColorSet);
    HRESULT Freeze(uint dwDrawAspect, int lindex, void* pvAspect, uint* pdwFreeze);
    HRESULT Unfreeze(uint dwFreeze);
    HRESULT SetAdvise(uint aspects, uint advf, IAdviseSink pAdvSink);
    HRESULT GetAdvise(uint* pAspects, uint* pAdvf, IAdviseSink* ppAdvSink);
}

@GUID("00000127-0000-0000-C000-000000000046")
interface IViewObject2 : IViewObject
{
    HRESULT GetExtent(uint dwDrawAspect, int lindex, DVTARGETDEVICE* ptd, SIZE* lpsizel);
}

@GUID("00000121-0000-0000-C000-000000000046")
interface IDropSource : IUnknown
{
    HRESULT QueryContinueDrag(BOOL fEscapePressed, uint grfKeyState);
    HRESULT GiveFeedback(uint dwEffect);
}

@GUID("00000122-0000-0000-C000-000000000046")
interface IDropTarget : IUnknown
{
    HRESULT DragEnter(IDataObject pDataObj, uint grfKeyState, POINTL pt, uint* pdwEffect);
    HRESULT DragOver(uint grfKeyState, POINTL pt, uint* pdwEffect);
    HRESULT DragLeave();
    HRESULT Drop(IDataObject pDataObj, uint grfKeyState, POINTL pt, uint* pdwEffect);
}

@GUID("0000012B-0000-0000-C000-000000000046")
interface IDropSourceNotify : IUnknown
{
    HRESULT DragEnterTarget(HWND hwndTarget);
    HRESULT DragLeaveTarget();
}

@GUID("390E3878-FD55-4E18-819D-4682081C0CFD")
interface IEnterpriseDropTarget : IUnknown
{
    HRESULT SetDropSourceEnterpriseId(const(wchar)* identity);
    HRESULT IsEvaluatingEdpPolicy(int* value);
}

@GUID("00000104-0000-0000-C000-000000000046")
interface IEnumOLEVERB : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumOLEVERB* ppenum);
}

@GUID("79EAC9C9-BAF9-11CE-8C82-00AA004BA90B")
interface IPersistMoniker : IUnknown
{
    HRESULT GetClassID(GUID* pClassID);
    HRESULT IsDirty();
    HRESULT Load(BOOL fFullyAvailable, IMoniker pimkName, IBindCtx pibc, uint grfMode);
    HRESULT Save(IMoniker pimkName, IBindCtx pbc, BOOL fRemember);
    HRESULT SaveCompleted(IMoniker pimkName, IBindCtx pibc);
    HRESULT GetCurMoniker(IMoniker* ppimkName);
}

@GUID("A5CA5F7F-1847-4D87-9C5B-918509F7511D")
interface IMonikerProp : IUnknown
{
    HRESULT PutProperty(MONIKERPROPERTY mkp, const(wchar)* val);
}

@GUID("79EAC9CD-BAF9-11CE-8C82-00AA004BA90B")
interface IBindProtocol : IUnknown
{
    HRESULT CreateBinding(const(wchar)* szUrl, IBindCtx pbc, IBinding* ppb);
}

@GUID("79EAC9C0-BAF9-11CE-8C82-00AA004BA90B")
interface IBinding : IUnknown
{
    HRESULT Abort();
    HRESULT Suspend();
    HRESULT Resume();
    HRESULT SetPriority(int nPriority);
    HRESULT GetPriority(int* pnPriority);
    HRESULT GetBindResult(GUID* pclsidProtocol, uint* pdwResult, ushort** pszResult, uint* pdwReserved);
}

@GUID("79EAC9C1-BAF9-11CE-8C82-00AA004BA90B")
interface IBindStatusCallback : IUnknown
{
    HRESULT OnStartBinding(uint dwReserved, IBinding pib);
    HRESULT GetPriority(int* pnPriority);
    HRESULT OnLowResource(uint reserved);
    HRESULT OnProgress(uint ulProgress, uint ulProgressMax, uint ulStatusCode, const(wchar)* szStatusText);
    HRESULT OnStopBinding(HRESULT hresult, const(wchar)* szError);
    HRESULT GetBindInfo(uint* grfBINDF, BINDINFO* pbindinfo);
    HRESULT OnDataAvailable(uint grfBSCF, uint dwSize, FORMATETC* pformatetc, STGMEDIUM* pstgmed);
    HRESULT OnObjectAvailable(const(GUID)* riid, IUnknown punk);
}

@GUID("AAA74EF9-8EE7-4659-88D9-F8C504DA73CC")
interface IBindStatusCallbackEx : IBindStatusCallback
{
    HRESULT GetBindInfoEx(uint* grfBINDF, BINDINFO* pbindinfo, uint* grfBINDF2, uint* pdwReserved);
}

@GUID("79EAC9D0-BAF9-11CE-8C82-00AA004BA90B")
interface IAuthenticate : IUnknown
{
    HRESULT Authenticate(HWND* phwnd, ushort** pszUsername, ushort** pszPassword);
}

@GUID("2AD1EDAF-D83D-48B5-9ADF-03DBE19F53BD")
interface IAuthenticateEx : IAuthenticate
{
    HRESULT AuthenticateEx(HWND* phwnd, ushort** pszUsername, ushort** pszPassword, AUTHENTICATEINFO* pauthinfo);
}

@GUID("79EAC9D2-BAF9-11CE-8C82-00AA004BA90B")
interface IHttpNegotiate : IUnknown
{
    HRESULT BeginningTransaction(const(wchar)* szURL, const(wchar)* szHeaders, uint dwReserved, 
                                 ushort** pszAdditionalHeaders);
    HRESULT OnResponse(uint dwResponseCode, const(wchar)* szResponseHeaders, const(wchar)* szRequestHeaders, 
                       ushort** pszAdditionalRequestHeaders);
}

@GUID("4F9F9FCB-E0F4-48EB-B7AB-FA2EA9365CB4")
interface IHttpNegotiate2 : IHttpNegotiate
{
    HRESULT GetRootSecurityId(char* pbSecurityId, uint* pcbSecurityId, size_t dwReserved);
}

@GUID("57B6C80A-34C2-4602-BC26-66A02FC57153")
interface IHttpNegotiate3 : IHttpNegotiate2
{
    HRESULT GetSerializedClientCertContext(char* ppbCert, uint* pcbCert);
}

@GUID("F134C4B7-B1F8-4E75-B886-74B90943BECB")
interface IWinInetFileStream : IUnknown
{
    HRESULT SetHandleForUnlock(size_t hWinInetLockHandle, size_t dwReserved);
    HRESULT SetDeleteFile(size_t dwReserved);
}

@GUID("79EAC9D5-BAFA-11CE-8C82-00AA004BA90B")
interface IWindowForBindingUI : IUnknown
{
    HRESULT GetWindow(const(GUID)* rguidReason, HWND* phwnd);
}

@GUID("79EAC9D1-BAF9-11CE-8C82-00AA004BA90B")
interface ICodeInstall : IWindowForBindingUI
{
    HRESULT OnCodeInstallProblem(uint ulStatusCode, const(wchar)* szDestination, const(wchar)* szSource, 
                                 uint dwReserved);
}

@GUID("A39EE748-6A27-4817-A6F2-13914BEF5890")
interface IUri : IUnknown
{
    HRESULT GetPropertyBSTR(Uri_PROPERTY uriProp, BSTR* pbstrProperty, uint dwFlags);
    HRESULT GetPropertyLength(Uri_PROPERTY uriProp, uint* pcchProperty, uint dwFlags);
    HRESULT GetPropertyDWORD(Uri_PROPERTY uriProp, uint* pdwProperty, uint dwFlags);
    HRESULT HasProperty(Uri_PROPERTY uriProp, int* pfHasProperty);
    HRESULT GetAbsoluteUri(BSTR* pbstrAbsoluteUri);
    HRESULT GetAuthority(BSTR* pbstrAuthority);
    HRESULT GetDisplayUri(BSTR* pbstrDisplayString);
    HRESULT GetDomain(BSTR* pbstrDomain);
    HRESULT GetExtension(BSTR* pbstrExtension);
    HRESULT GetFragment(BSTR* pbstrFragment);
    HRESULT GetHost(BSTR* pbstrHost);
    HRESULT GetPassword(BSTR* pbstrPassword);
    HRESULT GetPath(BSTR* pbstrPath);
    HRESULT GetPathAndQuery(BSTR* pbstrPathAndQuery);
    HRESULT GetQuery(BSTR* pbstrQuery);
    HRESULT GetRawUri(BSTR* pbstrRawUri);
    HRESULT GetSchemeName(BSTR* pbstrSchemeName);
    HRESULT GetUserInfo(BSTR* pbstrUserInfo);
    HRESULT GetUserNameA(BSTR* pbstrUserName);
    HRESULT GetHostType(uint* pdwHostType);
    HRESULT GetPort(uint* pdwPort);
    HRESULT GetScheme(uint* pdwScheme);
    HRESULT GetZone(uint* pdwZone);
    HRESULT GetProperties(uint* pdwFlags);
    HRESULT IsEqual(IUri pUri, int* pfEqual);
}

@GUID("A158A630-ED6F-45FB-B987-F68676F57752")
interface IUriContainer : IUnknown
{
    HRESULT GetIUri(IUri* ppIUri);
}

@GUID("4221B2E1-8955-46C0-BD5B-DE9897565DE7")
interface IUriBuilder : IUnknown
{
    HRESULT CreateUriSimple(uint dwAllowEncodingPropertyMask, size_t dwReserved, IUri* ppIUri);
    HRESULT CreateUri(uint dwCreateFlags, uint dwAllowEncodingPropertyMask, size_t dwReserved, IUri* ppIUri);
    HRESULT CreateUriWithFlags(uint dwCreateFlags, uint dwUriBuilderFlags, uint dwAllowEncodingPropertyMask, 
                               size_t dwReserved, IUri* ppIUri);
    HRESULT GetIUri(IUri* ppIUri);
    HRESULT SetIUri(IUri pIUri);
    HRESULT GetFragment(uint* pcchFragment, ushort** ppwzFragment);
    HRESULT GetHost(uint* pcchHost, ushort** ppwzHost);
    HRESULT GetPassword(uint* pcchPassword, ushort** ppwzPassword);
    HRESULT GetPath(uint* pcchPath, ushort** ppwzPath);
    HRESULT GetPort(int* pfHasPort, uint* pdwPort);
    HRESULT GetQuery(uint* pcchQuery, ushort** ppwzQuery);
    HRESULT GetSchemeName(uint* pcchSchemeName, ushort** ppwzSchemeName);
    HRESULT GetUserNameA(uint* pcchUserName, ushort** ppwzUserName);
    HRESULT SetFragment(const(wchar)* pwzNewValue);
    HRESULT SetHost(const(wchar)* pwzNewValue);
    HRESULT SetPassword(const(wchar)* pwzNewValue);
    HRESULT SetPath(const(wchar)* pwzNewValue);
    HRESULT SetPortA(BOOL fHasPort, uint dwNewValue);
    HRESULT SetQuery(const(wchar)* pwzNewValue);
    HRESULT SetSchemeName(const(wchar)* pwzNewValue);
    HRESULT SetUserName(const(wchar)* pwzNewValue);
    HRESULT RemoveProperties(uint dwPropertyMask);
    HRESULT HasBeenModified(int* pfModified);
}

@GUID("E982CE48-0B96-440C-BC37-0C869B27A29E")
interface IUriBuilderFactory : IUnknown
{
    HRESULT CreateIUriBuilder(uint dwFlags, size_t dwReserved, IUriBuilder* ppIUriBuilder);
    HRESULT CreateInitializedIUriBuilder(uint dwFlags, size_t dwReserved, IUriBuilder* ppIUriBuilder);
}

@GUID("79EAC9D6-BAFA-11CE-8C82-00AA004BA90B")
interface IWinInetInfo : IUnknown
{
    HRESULT QueryOption(uint dwOption, void* pBuffer, uint* pcbBuf);
}

@GUID("79EAC9D7-BAFA-11CE-8C82-00AA004BA90B")
interface IHttpSecurity : IWindowForBindingUI
{
    HRESULT OnSecurityProblem(uint dwProblem);
}

@GUID("79EAC9D8-BAFA-11CE-8C82-00AA004BA90B")
interface IWinInetHttpInfo : IWinInetInfo
{
    HRESULT QueryInfo(uint dwOption, void* pBuffer, uint* pcbBuf, uint* pdwFlags, uint* pdwReserved);
}

@GUID("F286FA56-C1FD-4270-8E67-B3EB790A81E8")
interface IWinInetHttpTimeouts : IUnknown
{
    HRESULT GetRequestTimeouts(uint* pdwConnectTimeout, uint* pdwSendTimeout, uint* pdwReceiveTimeout);
}

@GUID("DD1EC3B3-8391-4FDB-A9E6-347C3CAAA7DD")
interface IWinInetCacheHints : IUnknown
{
    HRESULT SetCacheExtension(const(wchar)* pwzExt, void* pszCacheFile, uint* pcbCacheFile, uint* pdwWinInetError, 
                              uint* pdwReserved);
}

@GUID("7857AEAC-D31F-49BF-884E-DD46DF36780A")
interface IWinInetCacheHints2 : IWinInetCacheHints
{
    HRESULT SetCacheExtension2(const(wchar)* pwzExt, char* pwzCacheFile, uint* pcchCacheFile, 
                               uint* pdwWinInetError, uint* pdwReserved);
}

@GUID("FC4801A1-2BA9-11CF-A229-00AA003D7352")
interface IBindHost : IUnknown
{
    HRESULT CreateMoniker(ushort* szName, IBindCtx pBC, IMoniker* ppmk, uint dwReserved);
    HRESULT MonikerBindToStorage(IMoniker pMk, IBindCtx pBC, IBindStatusCallback pBSC, const(GUID)* riid, 
                                 void** ppvObj);
    HRESULT MonikerBindToObject(IMoniker pMk, IBindCtx pBC, IBindStatusCallback pBSC, const(GUID)* riid, 
                                void** ppvObj);
}

@GUID("79EAC9E0-BAF9-11CE-8C82-00AA004BA90B")
interface IInternet : IUnknown
{
}

@GUID("79EAC9E1-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetBindInfo : IUnknown
{
    HRESULT GetBindInfo(uint* grfBINDF, BINDINFO* pbindinfo);
    HRESULT GetBindString(uint ulStringType, ushort** ppwzStr, uint cEl, uint* pcElFetched);
}

@GUID("A3E015B7-A82C-4DCD-A150-569AEEED36AB")
interface IInternetBindInfoEx : IInternetBindInfo
{
    HRESULT GetBindInfoEx(uint* grfBINDF, BINDINFO* pbindinfo, uint* grfBINDF2, uint* pdwReserved);
}

@GUID("79EAC9E3-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetProtocolRoot : IUnknown
{
    HRESULT Start(const(wchar)* szUrl, IInternetProtocolSink pOIProtSink, IInternetBindInfo pOIBindInfo, 
                  uint grfPI, size_t dwReserved);
    HRESULT Continue(PROTOCOLDATA* pProtocolData);
    HRESULT Abort(HRESULT hrReason, uint dwOptions);
    HRESULT Terminate(uint dwOptions);
    HRESULT Suspend();
    HRESULT Resume();
}

@GUID("79EAC9E4-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetProtocol : IInternetProtocolRoot
{
    HRESULT Read(void* pv, uint cb, uint* pcbRead);
    HRESULT Seek(LARGE_INTEGER dlibMove, uint dwOrigin, ULARGE_INTEGER* plibNewPosition);
    HRESULT LockRequest(uint dwOptions);
    HRESULT UnlockRequest();
}

@GUID("C7A98E66-1010-492C-A1C8-C809E1F75905")
interface IInternetProtocolEx : IInternetProtocol
{
    HRESULT StartEx(IUri pUri, IInternetProtocolSink pOIProtSink, IInternetBindInfo pOIBindInfo, uint grfPI, 
                    size_t dwReserved);
}

@GUID("79EAC9E5-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetProtocolSink : IUnknown
{
    HRESULT Switch(PROTOCOLDATA* pProtocolData);
    HRESULT ReportProgress(uint ulStatusCode, const(wchar)* szStatusText);
    HRESULT ReportData(uint grfBSCF, uint ulProgress, uint ulProgressMax);
    HRESULT ReportResult(HRESULT hrResult, uint dwError, const(wchar)* szResult);
}

@GUID("79EAC9F0-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetProtocolSinkStackable : IUnknown
{
    HRESULT SwitchSink(IInternetProtocolSink pOIProtSink);
    HRESULT CommitSwitch();
    HRESULT RollbackSwitch();
}

@GUID("79EAC9E7-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetSession : IUnknown
{
    HRESULT RegisterNameSpace(IClassFactory pCF, const(GUID)* rclsid, const(wchar)* pwzProtocol, uint cPatterns, 
                              const(ushort)** ppwzPatterns, uint dwReserved);
    HRESULT UnregisterNameSpace(IClassFactory pCF, const(wchar)* pszProtocol);
    HRESULT RegisterMimeFilter(IClassFactory pCF, const(GUID)* rclsid, const(wchar)* pwzType);
    HRESULT UnregisterMimeFilter(IClassFactory pCF, const(wchar)* pwzType);
    HRESULT CreateBinding(IBindCtx pBC, const(wchar)* szUrl, IUnknown pUnkOuter, IUnknown* ppUnk, 
                          IInternetProtocol* ppOInetProt, uint dwOption);
    HRESULT SetSessionOption(uint dwOption, void* pBuffer, uint dwBufferLength, uint dwReserved);
    HRESULT GetSessionOption(uint dwOption, void* pBuffer, uint* pdwBufferLength, uint dwReserved);
}

@GUID("79EAC9E8-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetThreadSwitch : IUnknown
{
    HRESULT Prepare();
    HRESULT Continue();
}

@GUID("79EAC9EB-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetPriority : IUnknown
{
    HRESULT SetPriority(int nPriority);
    HRESULT GetPriority(int* pnPriority);
}

@GUID("79EAC9EC-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetProtocolInfo : IUnknown
{
    HRESULT ParseUrl(const(wchar)* pwzUrl, PARSEACTION ParseAction, uint dwParseFlags, const(wchar)* pwzResult, 
                     uint cchResult, uint* pcchResult, uint dwReserved);
    HRESULT CombineUrl(const(wchar)* pwzBaseUrl, const(wchar)* pwzRelativeUrl, uint dwCombineFlags, 
                       const(wchar)* pwzResult, uint cchResult, uint* pcchResult, uint dwReserved);
    HRESULT CompareUrl(const(wchar)* pwzUrl1, const(wchar)* pwzUrl2, uint dwCompareFlags);
    HRESULT QueryInfo(const(wchar)* pwzUrl, QUERYOPTION OueryOption, uint dwQueryFlags, void* pBuffer, 
                      uint cbBuffer, uint* pcbBuf, uint dwReserved);
}

@GUID("79EAC9ED-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetSecurityMgrSite : IUnknown
{
    HRESULT GetWindow(HWND* phwnd);
    HRESULT EnableModeless(BOOL fEnable);
}

@GUID("79EAC9EE-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetSecurityManager : IUnknown
{
    HRESULT SetSecuritySite(IInternetSecurityMgrSite pSite);
    HRESULT GetSecuritySite(IInternetSecurityMgrSite* ppSite);
    HRESULT MapUrlToZone(const(wchar)* pwszUrl, uint* pdwZone, uint dwFlags);
    HRESULT GetSecurityId(const(wchar)* pwszUrl, char* pbSecurityId, uint* pcbSecurityId, size_t dwReserved);
    HRESULT ProcessUrlAction(const(wchar)* pwszUrl, uint dwAction, char* pPolicy, uint cbPolicy, ubyte* pContext, 
                             uint cbContext, uint dwFlags, uint dwReserved);
    HRESULT QueryCustomPolicy(const(wchar)* pwszUrl, const(GUID)* guidKey, char* ppPolicy, uint* pcbPolicy, 
                              ubyte* pContext, uint cbContext, uint dwReserved);
    HRESULT SetZoneMapping(uint dwZone, const(wchar)* lpszPattern, uint dwFlags);
    HRESULT GetZoneMappings(uint dwZone, IEnumString* ppenumString, uint dwFlags);
}

@GUID("F164EDF1-CC7C-4F0D-9A94-34222625C393")
interface IInternetSecurityManagerEx : IInternetSecurityManager
{
    HRESULT ProcessUrlActionEx(const(wchar)* pwszUrl, uint dwAction, char* pPolicy, uint cbPolicy, ubyte* pContext, 
                               uint cbContext, uint dwFlags, uint dwReserved, uint* pdwOutFlags);
}

@GUID("F1E50292-A795-4117-8E09-2B560A72AC60")
interface IInternetSecurityManagerEx2 : IInternetSecurityManagerEx
{
    HRESULT MapUrlToZoneEx2(IUri pUri, uint* pdwZone, uint dwFlags, ushort** ppwszMappedUrl, uint* pdwOutFlags);
    HRESULT ProcessUrlActionEx2(IUri pUri, uint dwAction, char* pPolicy, uint cbPolicy, ubyte* pContext, 
                                uint cbContext, uint dwFlags, size_t dwReserved, uint* pdwOutFlags);
    HRESULT GetSecurityIdEx2(IUri pUri, char* pbSecurityId, uint* pcbSecurityId, size_t dwReserved);
    HRESULT QueryCustomPolicyEx2(IUri pUri, const(GUID)* guidKey, char* ppPolicy, uint* pcbPolicy, ubyte* pContext, 
                                 uint cbContext, size_t dwReserved);
}

@GUID("CD45F185-1B21-48E2-967B-EAD743A8914E")
interface IZoneIdentifier : IUnknown
{
    HRESULT GetId(uint* pdwZone);
    HRESULT SetId(uint dwZone);
    HRESULT Remove();
}

@GUID("EB5E760C-09EF-45C0-B510-70830CE31E6A")
interface IZoneIdentifier2 : IZoneIdentifier
{
    HRESULT GetLastWriterPackageFamilyName(ushort** packageFamilyName);
    HRESULT SetLastWriterPackageFamilyName(const(wchar)* packageFamilyName);
    HRESULT RemoveLastWriterPackageFamilyName();
    HRESULT GetAppZoneId(uint* zone);
    HRESULT SetAppZoneId(uint zone);
    HRESULT RemoveAppZoneId();
}

@GUID("3AF280B6-CB3F-11D0-891E-00C04FB6BFC4")
interface IInternetHostSecurityManager : IUnknown
{
    HRESULT GetSecurityId(char* pbSecurityId, uint* pcbSecurityId, size_t dwReserved);
    HRESULT ProcessUrlAction(uint dwAction, char* pPolicy, uint cbPolicy, char* pContext, uint cbContext, 
                             uint dwFlags, uint dwReserved);
    HRESULT QueryCustomPolicy(const(GUID)* guidKey, char* ppPolicy, uint* pcbPolicy, char* pContext, 
                              uint cbContext, uint dwReserved);
}

@GUID("79EAC9EF-BAF9-11CE-8C82-00AA004BA90B")
interface IInternetZoneManager : IUnknown
{
    HRESULT GetZoneAttributes(uint dwZone, ZONEATTRIBUTES* pZoneAttributes);
    HRESULT SetZoneAttributes(uint dwZone, ZONEATTRIBUTES* pZoneAttributes);
    HRESULT GetZoneCustomPolicy(uint dwZone, const(GUID)* guidKey, ubyte** ppPolicy, uint* pcbPolicy, 
                                URLZONEREG urlZoneReg);
    HRESULT SetZoneCustomPolicy(uint dwZone, const(GUID)* guidKey, char* pPolicy, uint cbPolicy, 
                                URLZONEREG urlZoneReg);
    HRESULT GetZoneActionPolicy(uint dwZone, uint dwAction, char* pPolicy, uint cbPolicy, URLZONEREG urlZoneReg);
    HRESULT SetZoneActionPolicy(uint dwZone, uint dwAction, char* pPolicy, uint cbPolicy, URLZONEREG urlZoneReg);
    HRESULT PromptAction(uint dwAction, HWND hwndParent, const(wchar)* pwszUrl, const(wchar)* pwszText, 
                         uint dwPromptFlags);
    HRESULT LogAction(uint dwAction, const(wchar)* pwszUrl, const(wchar)* pwszText, uint dwLogFlags);
    HRESULT CreateZoneEnumerator(uint* pdwEnum, uint* pdwCount, uint dwFlags);
    HRESULT GetZoneAt(uint dwEnum, uint dwIndex, uint* pdwZone);
    HRESULT DestroyZoneEnumerator(uint dwEnum);
    HRESULT CopyTemplatePoliciesToZone(uint dwTemplate, uint dwZone, uint dwReserved);
}

@GUID("A4C23339-8E06-431E-9BF4-7E711C085648")
interface IInternetZoneManagerEx : IInternetZoneManager
{
    HRESULT GetZoneActionPolicyEx(uint dwZone, uint dwAction, char* pPolicy, uint cbPolicy, URLZONEREG urlZoneReg, 
                                  uint dwFlags);
    HRESULT SetZoneActionPolicyEx(uint dwZone, uint dwAction, char* pPolicy, uint cbPolicy, URLZONEREG urlZoneReg, 
                                  uint dwFlags);
}

@GUID("EDC17559-DD5D-4846-8EEF-8BECBA5A4ABF")
interface IInternetZoneManagerEx2 : IInternetZoneManagerEx
{
    HRESULT GetZoneAttributesEx(uint dwZone, ZONEATTRIBUTES* pZoneAttributes, uint dwFlags);
    HRESULT GetZoneSecurityState(uint dwZoneIndex, BOOL fRespectPolicy, uint* pdwState, int* pfPolicyEncountered);
    HRESULT GetIESecurityState(BOOL fRespectPolicy, uint* pdwState, int* pfPolicyEncountered, BOOL fNoCache);
    HRESULT FixUnsecureSettings();
}

@GUID("B15B8DC1-C7E1-11D0-8680-00AA00BDCB71")
interface ISoftDistExt : IUnknown
{
    HRESULT ProcessSoftDist(const(wchar)* szCDFURL, IXMLElement pSoftDistElement, SOFTDISTINFO* lpsdi);
    HRESULT GetFirstCodeBase(ushort** szCodeBase, uint* dwMaxSize);
    HRESULT GetNextCodeBase(ushort** szCodeBase, uint* dwMaxSize);
    HRESULT AsyncInstallDistributionUnit(IBindCtx pbc, void* pvReserved, uint flags, CODEBASEHOLD* lpcbh);
}

@GUID("711C7600-6B48-11D1-B403-00AA00B92AF1")
interface ICatalogFileInfo : IUnknown
{
    HRESULT GetCatalogFile(byte** ppszCatalogFile);
    HRESULT GetJavaTrust(void** ppJavaTrust);
}

@GUID("69D14C80-C18E-11D0-A9CE-006097942311")
interface IDataFilter : IUnknown
{
    HRESULT DoEncode(uint dwFlags, int lInBufferSize, char* pbInBuffer, int lOutBufferSize, char* pbOutBuffer, 
                     int lInBytesAvailable, int* plInBytesRead, int* plOutBytesWritten, uint dwReserved);
    HRESULT DoDecode(uint dwFlags, int lInBufferSize, char* pbInBuffer, int lOutBufferSize, char* pbOutBuffer, 
                     int lInBytesAvailable, int* plInBytesRead, int* plOutBytesWritten, uint dwReserved);
    HRESULT SetEncodingLevel(uint dwEncLevel);
}

@GUID("70BDDE00-C18E-11D0-A9CE-006097942311")
interface IEncodingFilterFactory : IUnknown
{
    HRESULT FindBestFilter(const(wchar)* pwzCodeIn, const(wchar)* pwzCodeOut, DATAINFO info, IDataFilter* ppDF);
    HRESULT GetDefaultFilter(const(wchar)* pwzCodeIn, const(wchar)* pwzCodeOut, IDataFilter* ppDF);
}

@GUID("53C84785-8425-4DC5-971B-E58D9C19F9B6")
interface IWrappedProtocol : IUnknown
{
    HRESULT GetWrapperCode(int* pnCode, size_t dwReserved);
}

@GUID("AF0FF408-129D-4B20-91F0-02BD23D88352")
interface IGetBindHandle : IUnknown
{
    HRESULT GetBindHandle(BINDHANDLETYPES enumRequestedHandle, HANDLE* pRetHandle);
}

@GUID("11C81BC2-121E-4ED5-B9C4-B430BD54F2C0")
interface IBindCallbackRedirect : IUnknown
{
    HRESULT Redirect(const(wchar)* lpcUrl, short* vbCancel);
}

@GUID("A9EDA967-F50E-4A33-B358-206F6EF3086D")
interface IBindHttpSecurity : IUnknown
{
    HRESULT GetIgnoreCertMask(uint* pdwIgnoreCertMask);
}

@GUID("B196B287-BAB4-101A-B69C-00AA00341D07")
interface IEnumConnections : IUnknown
{
    HRESULT Next(uint cConnections, CONNECTDATA* rgcd, uint* pcFetched);
    HRESULT Skip(uint cConnections);
    HRESULT Reset();
    HRESULT Clone(IEnumConnections* ppEnum);
}

@GUID("B196B286-BAB4-101A-B69C-00AA00341D07")
interface IConnectionPoint : IUnknown
{
    HRESULT GetConnectionInterface(GUID* pIID);
    HRESULT GetConnectionPointContainer(IConnectionPointContainer* ppCPC);
    HRESULT Advise(IUnknown pUnkSink, uint* pdwCookie);
    HRESULT Unadvise(uint dwCookie);
    HRESULT EnumConnections(IEnumConnections* ppEnum);
}

@GUID("B196B285-BAB4-101A-B69C-00AA00341D07")
interface IEnumConnectionPoints : IUnknown
{
    HRESULT Next(uint cConnections, IConnectionPoint* ppCP, uint* pcFetched);
    HRESULT Skip(uint cConnections);
    HRESULT Reset();
    HRESULT Clone(IEnumConnectionPoints* ppEnum);
}

@GUID("B196B284-BAB4-101A-B69C-00AA00341D07")
interface IConnectionPointContainer : IUnknown
{
    HRESULT EnumConnectionPoints(IEnumConnectionPoints* ppEnum);
    HRESULT FindConnectionPoint(const(GUID)* riid, IConnectionPoint* ppCP);
}

@GUID("B196B28F-BAB4-101A-B69C-00AA00341D07")
interface IClassFactory2 : IClassFactory
{
    HRESULT GetLicInfo(LICINFO* pLicInfo);
    HRESULT RequestLicKey(uint dwReserved, BSTR* pBstrKey);
    HRESULT CreateInstanceLic(IUnknown pUnkOuter, IUnknown pUnkReserved, const(GUID)* riid, BSTR bstrKey, 
                              void** ppvObj);
}

@GUID("B196B283-BAB4-101A-B69C-00AA00341D07")
interface IProvideClassInfo : IUnknown
{
    HRESULT GetClassInfoA(ITypeInfo* ppTI);
}

@GUID("A6BC3AC0-DBAA-11CE-9DE3-00AA004BB851")
interface IProvideClassInfo2 : IProvideClassInfo
{
    HRESULT GetGUID(uint dwGuidKind, GUID* pGUID);
}

@GUID("A7ABA9C1-8983-11CF-8F20-00805F2CD064")
interface IProvideMultipleClassInfo : IProvideClassInfo2
{
    HRESULT GetMultiTypeInfoCount(uint* pcti);
    HRESULT GetInfoOfIndex(uint iti, uint dwFlags, ITypeInfo* pptiCoClass, uint* pdwTIFlags, 
                           uint* pcdispidReserved, GUID* piidPrimary, GUID* piidSource);
}

@GUID("B196B288-BAB4-101A-B69C-00AA00341D07")
interface IOleControl : IUnknown
{
    HRESULT GetControlInfo(CONTROLINFO* pCI);
    HRESULT OnMnemonic(MSG* pMsg);
    HRESULT OnAmbientPropertyChange(int dispID);
    HRESULT FreezeEvents(BOOL bFreeze);
}

@GUID("B196B289-BAB4-101A-B69C-00AA00341D07")
interface IOleControlSite : IUnknown
{
    HRESULT OnControlInfoChanged();
    HRESULT LockInPlaceActive(BOOL fLock);
    HRESULT GetExtendedControl(IDispatch* ppDisp);
    HRESULT TransformCoords(POINTL* pPtlHimetric, POINTF* pPtfContainer, uint dwFlags);
    HRESULT TranslateAcceleratorA(MSG* pMsg, uint grfModifiers);
    HRESULT OnFocus(BOOL fGotFocus);
    HRESULT ShowPropertyFrame();
}

@GUID("B196B28D-BAB4-101A-B69C-00AA00341D07")
interface IPropertyPage : IUnknown
{
    HRESULT SetPageSite(IPropertyPageSite pPageSite);
    HRESULT Activate(HWND hWndParent, RECT* pRect, BOOL bModal);
    HRESULT Deactivate();
    HRESULT GetPageInfo(PROPPAGEINFO* pPageInfo);
    HRESULT SetObjects(uint cObjects, char* ppUnk);
    HRESULT Show(uint nCmdShow);
    HRESULT Move(RECT* pRect);
    HRESULT IsPageDirty();
    HRESULT Apply();
    HRESULT Help(ushort* pszHelpDir);
    HRESULT TranslateAcceleratorA(MSG* pMsg);
}

@GUID("01E44665-24AC-101B-84ED-08002B2EC713")
interface IPropertyPage2 : IPropertyPage
{
    HRESULT EditProperty(int dispID);
}

@GUID("B196B28C-BAB4-101A-B69C-00AA00341D07")
interface IPropertyPageSite : IUnknown
{
    HRESULT OnStatusChange(uint dwFlags);
    HRESULT GetLocaleID(uint* pLocaleID);
    HRESULT GetPageContainer(IUnknown* ppUnk);
    HRESULT TranslateAcceleratorA(MSG* pMsg);
}

@GUID("9BFBBC02-EFF1-101A-84ED-00AA00341D07")
interface IPropertyNotifySink : IUnknown
{
    HRESULT OnChanged(int dispID);
    HRESULT OnRequestEdit(int dispID);
}

@GUID("B196B28B-BAB4-101A-B69C-00AA00341D07")
interface ISpecifyPropertyPages : IUnknown
{
    HRESULT GetPages(CAUUID* pPages);
}

@GUID("BD1AE5E0-A6AE-11CE-BD37-504200C10000")
interface IPersistMemory : IPersist
{
    HRESULT IsDirty();
    HRESULT Load(void* pMem, uint cbSize);
    HRESULT Save(void* pMem, BOOL fClearDirty, uint cbSize);
    HRESULT GetSizeMax(uint* pCbSize);
    HRESULT InitNew();
}

@GUID("7FD52380-4E07-101B-AE2D-08002B2EC713")
interface IPersistStreamInit : IPersist
{
    HRESULT IsDirty();
    HRESULT Load(IStream pStm);
    HRESULT Save(IStream pStm, BOOL fClearDirty);
    HRESULT GetSizeMax(ULARGE_INTEGER* pCbSize);
    HRESULT InitNew();
}

@GUID("37D84F60-42CB-11CE-8135-00AA004BB851")
interface IPersistPropertyBag : IPersist
{
    HRESULT InitNew();
    HRESULT Load(IPropertyBag pPropBag, IErrorLog pErrorLog);
    HRESULT Save(IPropertyBag pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);
}

@GUID("742B0E01-14E6-101B-914E-00AA00300CAB")
interface ISimpleFrameSite : IUnknown
{
    HRESULT PreMessageFilter(HWND hWnd, uint msg, WPARAM wp, LPARAM lp, LRESULT* plResult, uint* pdwCookie);
    HRESULT PostMessageFilter(HWND hWnd, uint msg, WPARAM wp, LPARAM lp, LRESULT* plResult, uint dwCookie);
}

@GUID("BEF6E002-A874-101A-8BBA-00AA00300CAB")
interface IFont : IUnknown
{
    HRESULT get_Name(BSTR* pName);
    HRESULT put_Name(BSTR name);
    HRESULT get_Size(CY* pSize);
    HRESULT put_Size(CY size);
    HRESULT get_Bold(int* pBold);
    HRESULT put_Bold(BOOL bold);
    HRESULT get_Italic(int* pItalic);
    HRESULT put_Italic(BOOL italic);
    HRESULT get_Underline(int* pUnderline);
    HRESULT put_Underline(BOOL underline);
    HRESULT get_Strikethrough(int* pStrikethrough);
    HRESULT put_Strikethrough(BOOL strikethrough);
    HRESULT get_Weight(short* pWeight);
    HRESULT put_Weight(short weight);
    HRESULT get_Charset(short* pCharset);
    HRESULT put_Charset(short charset);
    HRESULT get_hFont(HFONT* phFont);
    HRESULT Clone(IFont* ppFont);
    HRESULT IsEqual(IFont pFontOther);
    HRESULT SetRatio(int cyLogical, int cyHimetric);
    HRESULT QueryTextMetrics(TEXTMETRICW* pTM);
    HRESULT AddRefHfont(HFONT hFont);
    HRESULT ReleaseHfont(HFONT hFont);
    HRESULT SetHdc(HDC hDC);
}

@GUID("7BF80980-BF32-101A-8BBB-00AA00300CAB")
interface IPicture : IUnknown
{
    HRESULT get_Handle(uint* pHandle);
    HRESULT get_hPal(uint* phPal);
    HRESULT get_Type(short* pType);
    HRESULT get_Width(int* pWidth);
    HRESULT get_Height(int* pHeight);
    HRESULT Render(HDC hDC, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, 
                   RECT* pRcWBounds);
    HRESULT set_hPal(uint hPal);
    HRESULT get_CurDC(HDC* phDC);
    HRESULT SelectPicture(HDC hDCIn, HDC* phDCOut, uint* phBmpOut);
    HRESULT get_KeepOriginalFormat(int* pKeep);
    HRESULT put_KeepOriginalFormat(BOOL keep);
    HRESULT PictureChanged();
    HRESULT SaveAsFile(IStream pStream, BOOL fSaveMemCopy, int* pCbSize);
    HRESULT get_Attributes(uint* pDwAttr);
}

@GUID("F5185DD8-2012-4B0B-AAD9-F052C6BD482B")
interface IPicture2 : IUnknown
{
    HRESULT get_Handle(size_t* pHandle);
    HRESULT get_hPal(size_t* phPal);
    HRESULT get_Type(short* pType);
    HRESULT get_Width(int* pWidth);
    HRESULT get_Height(int* pHeight);
    HRESULT Render(HDC hDC, int x, int y, int cx, int cy, int xSrc, int ySrc, int cxSrc, int cySrc, 
                   RECT* pRcWBounds);
    HRESULT set_hPal(size_t hPal);
    HRESULT get_CurDC(HDC* phDC);
    HRESULT SelectPicture(HDC hDCIn, HDC* phDCOut, size_t* phBmpOut);
    HRESULT get_KeepOriginalFormat(int* pKeep);
    HRESULT put_KeepOriginalFormat(BOOL keep);
    HRESULT PictureChanged();
    HRESULT SaveAsFile(IStream pStream, BOOL fSaveMemCopy, int* pCbSize);
    HRESULT get_Attributes(uint* pDwAttr);
}

@GUID("4EF6100A-AF88-11D0-9846-00C04FC29993")
interface IFontEventsDisp : IDispatch
{
}

@GUID("BEF6E003-A874-101A-8BBA-00AA00300CAB")
interface IFontDisp : IDispatch
{
}

@GUID("7BF80981-BF32-101A-8BBB-00AA00300CAB")
interface IPictureDisp : IDispatch
{
}

@GUID("1C2056CC-5EF4-101B-8BC8-00AA003E3B29")
interface IOleInPlaceObjectWindowless : IOleInPlaceObject
{
    HRESULT OnWindowMessage(uint msg, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
    HRESULT GetDropTarget(IDropTarget* ppDropTarget);
}

@GUID("9C2CAD80-3424-11CF-B670-00AA004CD6D8")
interface IOleInPlaceSiteEx : IOleInPlaceSite
{
    HRESULT OnInPlaceActivateEx(int* pfNoRedraw, uint dwFlags);
    HRESULT OnInPlaceDeactivateEx(BOOL fNoRedraw);
    HRESULT RequestUIActivate();
}

@GUID("922EADA0-3424-11CF-B670-00AA004CD6D8")
interface IOleInPlaceSiteWindowless : IOleInPlaceSiteEx
{
    HRESULT CanWindowlessActivate();
    HRESULT GetCapture();
    HRESULT SetCapture(BOOL fCapture);
    HRESULT GetFocus();
    HRESULT SetFocus(BOOL fFocus);
    HRESULT GetDC(RECT* pRect, uint grfFlags, HDC* phDC);
    HRESULT ReleaseDC(HDC hDC);
    HRESULT InvalidateRect(RECT* pRect, BOOL fErase);
    HRESULT InvalidateRgn(HRGN hRGN, BOOL fErase);
    HRESULT ScrollRect(int dx, int dy, RECT* pRectScroll, RECT* pRectClip);
    HRESULT AdjustRect(RECT* prc);
    HRESULT OnDefWindowMessage(uint msg, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
}

@GUID("3AF24292-0C96-11CE-A0CF-00AA00600AB8")
interface IViewObjectEx : IViewObject2
{
    HRESULT GetRect(uint dwAspect, RECTL* pRect);
    HRESULT GetViewStatus(uint* pdwStatus);
    HRESULT QueryHitPoint(uint dwAspect, RECT* pRectBounds, POINT ptlLoc, int lCloseHint, uint* pHitResult);
    HRESULT QueryHitRect(uint dwAspect, RECT* pRectBounds, RECT* pRectLoc, int lCloseHint, uint* pHitResult);
    HRESULT GetNaturalExtent(uint dwAspect, int lindex, DVTARGETDEVICE* ptd, HDC hicTargetDev, 
                             ExtentInfo* pExtentInfo, SIZE* pSizel);
}

@GUID("894AD3B0-EF97-11CE-9BC9-00AA00608E01")
interface IOleUndoUnit : IUnknown
{
    HRESULT Do(IOleUndoManager pUndoManager);
    HRESULT GetDescription(BSTR* pBstr);
    HRESULT GetUnitType(GUID* pClsid, int* plID);
    HRESULT OnNextAdd();
}

@GUID("A1FAF330-EF97-11CE-9BC9-00AA00608E01")
interface IOleParentUndoUnit : IOleUndoUnit
{
    HRESULT Open(IOleParentUndoUnit pPUU);
    HRESULT Close(IOleParentUndoUnit pPUU, BOOL fCommit);
    HRESULT Add(IOleUndoUnit pUU);
    HRESULT FindUnit(IOleUndoUnit pUU);
    HRESULT GetParentState(uint* pdwState);
}

@GUID("B3E7C340-EF97-11CE-9BC9-00AA00608E01")
interface IEnumOleUndoUnits : IUnknown
{
    HRESULT Next(uint cElt, IOleUndoUnit* rgElt, uint* pcEltFetched);
    HRESULT Skip(uint cElt);
    HRESULT Reset();
    HRESULT Clone(IEnumOleUndoUnits* ppEnum);
}

@GUID("D001F200-EF97-11CE-9BC9-00AA00608E01")
interface IOleUndoManager : IUnknown
{
    HRESULT Open(IOleParentUndoUnit pPUU);
    HRESULT Close(IOleParentUndoUnit pPUU, BOOL fCommit);
    HRESULT Add(IOleUndoUnit pUU);
    HRESULT GetOpenParentState(uint* pdwState);
    HRESULT DiscardFrom(IOleUndoUnit pUU);
    HRESULT UndoTo(IOleUndoUnit pUU);
    HRESULT RedoTo(IOleUndoUnit pUU);
    HRESULT EnumUndoable(IEnumOleUndoUnits* ppEnum);
    HRESULT EnumRedoable(IEnumOleUndoUnits* ppEnum);
    HRESULT GetLastUndoDescription(BSTR* pBstr);
    HRESULT GetLastRedoDescription(BSTR* pBstr);
    HRESULT Enable(BOOL fEnable);
}

@GUID("55980BA0-35AA-11CF-B671-00AA004CD6D8")
interface IPointerInactive : IUnknown
{
    HRESULT GetActivationPolicy(uint* pdwPolicy);
    HRESULT OnInactiveMouseMove(RECT* pRectBounds, int x, int y, uint grfKeyState);
    HRESULT OnInactiveSetCursor(RECT* pRectBounds, int x, int y, uint dwMouseMsg, BOOL fSetAlways);
}

@GUID("FC4801A3-2BA9-11CF-A229-00AA003D7352")
interface IObjectWithSite : IUnknown
{
    HRESULT SetSite(IUnknown pUnkSite);
    HRESULT GetSite(const(GUID)* riid, void** ppvSite);
}

@GUID("376BD3AA-3845-101B-84ED-08002B2EC713")
interface IPerPropertyBrowsing : IUnknown
{
    HRESULT GetDisplayString(int dispID, BSTR* pBstr);
    HRESULT MapPropertyToPage(int dispID, GUID* pClsid);
    HRESULT GetPredefinedStrings(int dispID, CALPOLESTR* pCaStringsOut, CADWORD* pCaCookiesOut);
    HRESULT GetPredefinedValue(int dispID, uint dwCookie, VARIANT* pVarOut);
}

@GUID("22F55882-280B-11D0-A8A9-00A0C90C2004")
interface IPropertyBag2 : IUnknown
{
    HRESULT Read(uint cProperties, char* pPropBag, IErrorLog pErrLog, char* pvarValue, char* phrError);
    HRESULT Write(uint cProperties, char* pPropBag, char* pvarValue);
    HRESULT CountProperties(uint* pcProperties);
    HRESULT GetPropertyInfo(uint iProperty, uint cProperties, char* pPropBag, uint* pcProperties);
    HRESULT LoadObject(ushort* pstrName, uint dwHint, IUnknown pUnkObject, IErrorLog pErrLog);
}

@GUID("22F55881-280B-11D0-A8A9-00A0C90C2004")
interface IPersistPropertyBag2 : IPersist
{
    HRESULT InitNew();
    HRESULT Load(IPropertyBag2 pPropBag, IErrorLog pErrLog);
    HRESULT Save(IPropertyBag2 pPropBag, BOOL fClearDirty, BOOL fSaveAllProperties);
    HRESULT IsDirty();
}

@GUID("3AF24290-0C96-11CE-A0CF-00AA00600AB8")
interface IAdviseSinkEx : IAdviseSink
{
    void OnViewStatusChange(uint dwViewStatus);
}

@GUID("CF51ED10-62FE-11CF-BF86-00A0C9034836")
interface IQuickActivate : IUnknown
{
    HRESULT QuickActivate(QACONTAINER* pQaContainer, QACONTROL* pQaControl);
    HRESULT SetContentExtent(SIZE* pSizel);
    HRESULT GetContentExtent(SIZE* pSizel);
}

interface IVBGetControl : IUnknown
{
    HRESULT EnumControls(uint dwOleContF, uint dwWhich, IEnumUnknown* ppenumUnk);
}

interface IGetOleObject : IUnknown
{
    HRESULT GetOleObject(const(GUID)* riid, void** ppvObj);
}

interface IVBFormat : IUnknown
{
    HRESULT Format(VARIANT* vData, BSTR bstrFormat, void* lpBuffer, ushort cb, int lcid, short sFirstDayOfWeek, 
                   ushort sFirstWeekOfYear, ushort* rcb);
}

interface IGetVBAObject : IUnknown
{
    HRESULT GetObjectA(const(GUID)* riid, void** ppvObj, uint dwReserved);
}

@GUID("B722BCC5-4E68-101B-A2BC-00AA00404770")
interface IOleDocument : IUnknown
{
    HRESULT CreateView(IOleInPlaceSite pIPSite, IStream pstm, uint dwReserved, IOleDocumentView* ppView);
    HRESULT GetDocMiscStatus(uint* pdwStatus);
    HRESULT EnumViews(IEnumOleDocumentViews* ppEnum, IOleDocumentView* ppView);
}

@GUID("B722BCC7-4E68-101B-A2BC-00AA00404770")
interface IOleDocumentSite : IUnknown
{
    HRESULT ActivateMe(IOleDocumentView pViewToActivate);
}

@GUID("B722BCC6-4E68-101B-A2BC-00AA00404770")
interface IOleDocumentView : IUnknown
{
    HRESULT SetInPlaceSite(IOleInPlaceSite pIPSite);
    HRESULT GetInPlaceSite(IOleInPlaceSite* ppIPSite);
    HRESULT GetDocument(IUnknown* ppunk);
    HRESULT SetRect(RECT* prcView);
    HRESULT GetRect(RECT* prcView);
    HRESULT SetRectComplex(RECT* prcView, RECT* prcHScroll, RECT* prcVScroll, RECT* prcSizeBox);
    HRESULT Show(BOOL fShow);
    HRESULT UIActivate(BOOL fUIActivate);
    HRESULT Open();
    HRESULT CloseView(uint dwReserved);
    HRESULT SaveViewState(IStream pstm);
    HRESULT ApplyViewState(IStream pstm);
    HRESULT Clone(IOleInPlaceSite pIPSiteNew, IOleDocumentView* ppViewNew);
}

@GUID("B722BCC8-4E68-101B-A2BC-00AA00404770")
interface IEnumOleDocumentViews : IUnknown
{
    HRESULT Next(uint cViews, IOleDocumentView* rgpView, uint* pcFetched);
    HRESULT Skip(uint cViews);
    HRESULT Reset();
    HRESULT Clone(IEnumOleDocumentViews* ppEnum);
}

@GUID("B722BCCA-4E68-101B-A2BC-00AA00404770")
interface IContinueCallback : IUnknown
{
    HRESULT FContinue();
    HRESULT FContinuePrinting(int nCntPrinted, int nCurPage, ushort* pwszPrintStatus);
}

@GUID("B722BCC9-4E68-101B-A2BC-00AA00404770")
interface IPrint : IUnknown
{
    HRESULT SetInitialPageNum(int nFirstPage);
    HRESULT GetPageInfo(int* pnFirstPage, int* pcPages);
    HRESULT Print(uint grfFlags, DVTARGETDEVICE** pptd, PAGESET** ppPageSet, STGMEDIUM* pstgmOptions, 
                  IContinueCallback pcallback, int nFirstPage, int* pcPagesPrinted, int* pnLastPage);
}

@GUID("B722BCCB-4E68-101B-A2BC-00AA00404770")
interface IOleCommandTarget : IUnknown
{
    HRESULT QueryStatus(const(GUID)* pguidCmdGroup, uint cCmds, char* prgCmds, OLECMDTEXT* pCmdText);
    HRESULT Exec(const(GUID)* pguidCmdGroup, uint nCmdID, uint nCmdexecopt, VARIANT* pvaIn, VARIANT* pvaOut);
}

@GUID("41B68150-904C-4E17-A0BA-A438182E359D")
interface IZoomEvents : IUnknown
{
    HRESULT OnZoomPercentChanged(uint ulZoomPercent);
}

@GUID("D81F90A3-8156-44F7-AD28-5ABB87003274")
interface IProtectFocus : IUnknown
{
    HRESULT AllowFocusChange(int* pfAllow);
}

@GUID("73C105EE-9DFF-4A07-B83C-7EFF290C266E")
interface IProtectedModeMenuServices : IUnknown
{
    HRESULT CreateMenu(HMENU* phMenu);
    HRESULT LoadMenuA(const(wchar)* pszModuleName, const(wchar)* pszMenuName, HMENU* phMenu);
    HRESULT LoadMenuID(const(wchar)* pszModuleName, ushort wResourceID, HMENU* phMenu);
}

interface IOleUILinkContainerW : IUnknown
{
    uint    GetNextLink(uint dwLink);
    HRESULT SetLinkUpdateOptions(uint dwLink, uint dwUpdateOpt);
    HRESULT GetLinkUpdateOptions(uint dwLink, uint* lpdwUpdateOpt);
    HRESULT SetLinkSource(uint dwLink, const(wchar)* lpszDisplayName, uint lenFileName, uint* pchEaten, 
                          BOOL fValidateSource);
    HRESULT GetLinkSource(uint dwLink, ushort** lplpszDisplayName, uint* lplenFileName, 
                          ushort** lplpszFullLinkType, ushort** lplpszShortLinkType, int* lpfSourceAvailable, 
                          int* lpfIsSelected);
    HRESULT OpenLinkSource(uint dwLink);
    HRESULT UpdateLink(uint dwLink, BOOL fErrorMessage, BOOL fReserved);
    HRESULT CancelLink(uint dwLink);
}

interface IOleUILinkContainerA : IUnknown
{
    uint    GetNextLink(uint dwLink);
    HRESULT SetLinkUpdateOptions(uint dwLink, uint dwUpdateOpt);
    HRESULT GetLinkUpdateOptions(uint dwLink, uint* lpdwUpdateOpt);
    HRESULT SetLinkSource(uint dwLink, const(char)* lpszDisplayName, uint lenFileName, uint* pchEaten, 
                          BOOL fValidateSource);
    HRESULT GetLinkSource(uint dwLink, byte** lplpszDisplayName, uint* lplenFileName, byte** lplpszFullLinkType, 
                          byte** lplpszShortLinkType, int* lpfSourceAvailable, int* lpfIsSelected);
    HRESULT OpenLinkSource(uint dwLink);
    HRESULT UpdateLink(uint dwLink, BOOL fErrorMessage, BOOL fReserved);
    HRESULT CancelLink(uint dwLink);
}

interface IOleUIObjInfoW : IUnknown
{
    HRESULT GetObjectInfo(uint dwObject, uint* lpdwObjSize, ushort** lplpszLabel, ushort** lplpszType, 
                          ushort** lplpszShortType, ushort** lplpszLocation);
    HRESULT GetConvertInfo(uint dwObject, GUID* lpClassID, ushort* lpwFormat, GUID* lpConvertDefaultClassID, 
                           GUID** lplpClsidExclude, uint* lpcClsidExclude);
    HRESULT ConvertObject(uint dwObject, const(GUID)* clsidNew);
    HRESULT GetViewInfo(uint dwObject, ptrdiff_t* phMetaPict, uint* pdvAspect, int* pnCurrentScale);
    HRESULT SetViewInfo(uint dwObject, ptrdiff_t hMetaPict, uint dvAspect, int nCurrentScale, BOOL bRelativeToOrig);
}

interface IOleUIObjInfoA : IUnknown
{
    HRESULT GetObjectInfo(uint dwObject, uint* lpdwObjSize, byte** lplpszLabel, byte** lplpszType, 
                          byte** lplpszShortType, byte** lplpszLocation);
    HRESULT GetConvertInfo(uint dwObject, GUID* lpClassID, ushort* lpwFormat, GUID* lpConvertDefaultClassID, 
                           GUID** lplpClsidExclude, uint* lpcClsidExclude);
    HRESULT ConvertObject(uint dwObject, const(GUID)* clsidNew);
    HRESULT GetViewInfo(uint dwObject, ptrdiff_t* phMetaPict, uint* pdvAspect, int* pnCurrentScale);
    HRESULT SetViewInfo(uint dwObject, ptrdiff_t hMetaPict, uint dvAspect, int nCurrentScale, BOOL bRelativeToOrig);
}

interface IOleUILinkInfoW : IOleUILinkContainerW
{
    HRESULT GetLastUpdate(uint dwLink, FILETIME* lpLastUpdate);
}

interface IOleUILinkInfoA : IOleUILinkContainerA
{
    HRESULT GetLastUpdate(uint dwLink, FILETIME* lpLastUpdate);
}

@GUID("D573B4B0-894E-11D2-B8B6-00C04FB9618A")
interface ICallFrame : IUnknown
{
    HRESULT GetInfo(CALLFRAMEINFO* pInfo);
    HRESULT GetIIDAndMethod(GUID* pIID, uint* piMethod);
    HRESULT GetNames(ushort** pwszInterface, ushort** pwszMethod);
    void*   GetStackLocation();
    void    SetStackLocation(void* pvStack);
    void    SetReturnValue(HRESULT hr);
    HRESULT GetReturnValue();
    HRESULT GetParamInfo(uint iparam, CALLFRAMEPARAMINFO* pInfo);
    HRESULT SetParam(uint iparam, VARIANT* pvar);
    HRESULT GetParam(uint iparam, VARIANT* pvar);
    HRESULT Copy(CALLFRAME_COPY copyControl, ICallFrameWalker pWalker, ICallFrame* ppFrame);
    HRESULT Free(ICallFrame pframeArgsDest, ICallFrameWalker pWalkerDestFree, ICallFrameWalker pWalkerCopy, 
                 uint freeFlags, ICallFrameWalker pWalkerFree, uint nullFlags);
    HRESULT FreeParam(uint iparam, uint freeFlags, ICallFrameWalker pWalkerFree, uint nullFlags);
    HRESULT WalkFrame(uint walkWhat, ICallFrameWalker pWalker);
    HRESULT GetMarshalSizeMax(CALLFRAME_MARSHALCONTEXT* pmshlContext, MSHLFLAGS mshlflags, uint* pcbBufferNeeded);
    HRESULT Marshal(CALLFRAME_MARSHALCONTEXT* pmshlContext, MSHLFLAGS mshlflags, void* pBuffer, uint cbBuffer, 
                    uint* pcbBufferUsed, uint* pdataRep, uint* prpcFlags);
    HRESULT Unmarshal(void* pBuffer, uint cbBuffer, uint dataRep, CALLFRAME_MARSHALCONTEXT* pcontext, 
                      uint* pcbUnmarshalled);
    HRESULT ReleaseMarshalData(void* pBuffer, uint cbBuffer, uint ibFirstRelease, uint dataRep, 
                               CALLFRAME_MARSHALCONTEXT* pcontext);
    HRESULT Invoke(void* pvReceiver);
}

@GUID("D573B4B1-894E-11D2-B8B6-00C04FB9618A")
interface ICallIndirect : IUnknown
{
    HRESULT CallIndirect(int* phrReturn, uint iMethod, void* pvArgs, uint* cbArgs);
    HRESULT GetMethodInfo(uint iMethod, CALLFRAMEINFO* pInfo, ushort** pwszMethod);
    HRESULT GetStackSize(uint iMethod, uint* cbArgs);
    HRESULT GetIID(GUID* piid, int* pfDerivesFromIDispatch, uint* pcMethod, ushort** pwszInterface);
}

@GUID("60C7CA75-896D-11D2-B8B6-00C04FB9618A")
interface ICallInterceptor : ICallIndirect
{
    HRESULT RegisterSink(ICallFrameEvents psink);
    HRESULT GetRegisteredSink(ICallFrameEvents* ppsink);
}

@GUID("FD5E0843-FC91-11D0-97D7-00C04FB9618A")
interface ICallFrameEvents : IUnknown
{
    HRESULT OnCall(ICallFrame pFrame);
}

@GUID("5333B003-2E42-11D2-B89D-00C04FB9618A")
interface ICallUnmarshal : IUnknown
{
    HRESULT Unmarshal(uint iMethod, void* pBuffer, uint cbBuffer, BOOL fForceBufferCopy, uint dataRep, 
                      CALLFRAME_MARSHALCONTEXT* pcontext, uint* pcbUnmarshalled, ICallFrame* ppFrame);
    HRESULT ReleaseMarshalData(uint iMethod, void* pBuffer, uint cbBuffer, uint ibFirstRelease, uint dataRep, 
                               CALLFRAME_MARSHALCONTEXT* pcontext);
}

@GUID("08B23919-392D-11D2-B8A4-00C04FB9618A")
interface ICallFrameWalker : IUnknown
{
    HRESULT OnWalkInterface(const(GUID)* iid, void** ppvInterface, BOOL fIn, BOOL fOut);
}

@GUID("D1FB5A79-7706-11D1-ADBA-00C04FC2ADC0")
interface IInterfaceRelated : IUnknown
{
    HRESULT SetIID(const(GUID)* iid);
    HRESULT GetIID(GUID* piid);
}

@GUID("FF222117-0C6C-11D2-B89A-00C04FB9618A")
interface ILog : IUnknown
{
    HRESULT Force(LARGE_INTEGER lsnMinToForce);
    HRESULT AppendRecord(char* rgBlob, uint cBlob, BOOL fForceNow, LARGE_INTEGER* plsn);
    HRESULT ReadRecord(LARGE_INTEGER lsnToRead, LARGE_INTEGER* plsnPrev, LARGE_INTEGER* plsnNext, char* ppbData, 
                       uint* pcbData);
    HRESULT ReadRecordPrefix(LARGE_INTEGER lsnToRead, LARGE_INTEGER* plsnPrev, LARGE_INTEGER* plsnNext, 
                             char* pbData, uint* pcbData, uint* pcbRecord);
    HRESULT GetLogLimits(LARGE_INTEGER* plsnFirst, LARGE_INTEGER* plsnLast);
    HRESULT TruncatePrefix(LARGE_INTEGER lsnFirstToKeep);
    HRESULT SetAccessPolicyHint(RECORD_READING_POLICY policy);
}

@GUID("00951E8C-1294-11D1-97E4-00C04FB9618A")
interface IFileBasedLogInit : IUnknown
{
    HRESULT InitNew(const(wchar)* filename, uint cbCapacityHint);
}

@GUID("0002E000-0000-0000-C000-000000000046")
interface IEnumGUID : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumGUID* ppenum);
}

@GUID("0002E011-0000-0000-C000-000000000046")
interface IEnumCATEGORYINFO : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumCATEGORYINFO* ppenum);
}

@GUID("0002E012-0000-0000-C000-000000000046")
interface ICatRegister : IUnknown
{
    HRESULT RegisterCategories(uint cCategories, char* rgCategoryInfo);
    HRESULT UnRegisterCategories(uint cCategories, char* rgcatid);
    HRESULT RegisterClassImplCategories(const(GUID)* rclsid, uint cCategories, char* rgcatid);
    HRESULT UnRegisterClassImplCategories(const(GUID)* rclsid, uint cCategories, char* rgcatid);
    HRESULT RegisterClassReqCategories(const(GUID)* rclsid, uint cCategories, char* rgcatid);
    HRESULT UnRegisterClassReqCategories(const(GUID)* rclsid, uint cCategories, char* rgcatid);
}

@GUID("0002E013-0000-0000-C000-000000000046")
interface ICatInformation : IUnknown
{
    HRESULT EnumCategories(uint lcid, IEnumCATEGORYINFO* ppenumCategoryInfo);
    HRESULT GetCategoryDesc(GUID* rcatid, uint lcid, ushort** pszDesc);
    HRESULT EnumClassesOfCategories(uint cImplemented, const(GUID)* rgcatidImpl, uint cRequired, 
                                    const(GUID)* rgcatidReq, IEnumGUID* ppenumClsid);
    HRESULT IsClassOfCategories(const(GUID)* rclsid, uint cImplemented, const(GUID)* rgcatidImpl, uint cRequired, 
                                const(GUID)* rgcatidReq);
    HRESULT EnumImplCategoriesOfClass(const(GUID)* rclsid, IEnumGUID* ppenumCatid);
    HRESULT EnumReqCategoriesOfClass(const(GUID)* rclsid, IEnumGUID* ppenumCatid);
}

@GUID("EEDD23E0-8410-11CE-A1C3-08002B2B8D8F")
interface IAccessControl : IUnknown
{
    HRESULT GrantAccessRights(ACTRL_ACCESSW* pAccessList);
    HRESULT SetAccessRights(ACTRL_ACCESSW* pAccessList);
    HRESULT SetOwner(TRUSTEE_W* pOwner, TRUSTEE_W* pGroup);
    HRESULT RevokeAccessRights(const(wchar)* lpProperty, uint cTrustees, char* prgTrustees);
    HRESULT GetAllAccessRights(const(wchar)* lpProperty, ACTRL_ACCESSW** ppAccessList, TRUSTEE_W** ppOwner, 
                               TRUSTEE_W** ppGroup);
    HRESULT IsAccessAllowed(TRUSTEE_W* pTrustee, const(wchar)* lpProperty, uint AccessRights, int* pfAccessAllowed);
}

@GUID("1DA6292F-BC66-11CE-AAE3-00AA004C2737")
interface IAuditControl : IUnknown
{
    HRESULT GrantAuditRights(ACTRL_ACCESSW* pAuditList);
    HRESULT SetAuditRights(ACTRL_ACCESSW* pAuditList);
    HRESULT RevokeAuditRights(const(wchar)* lpProperty, uint cTrustees, char* prgTrustees);
    HRESULT GetAllAuditRights(const(wchar)* lpProperty, ACTRL_ACCESSW** ppAuditList);
    HRESULT IsAccessAudited(TRUSTEE_W* pTrustee, uint AuditRights, int* pfAccessAudited);
}

@GUID("000001DA-0000-0000-C000-000000000046")
interface IContextCallback : IUnknown
{
    HRESULT ContextCallback(PFNCONTEXTCALL pfnCallback, ComCallData* pParam, const(GUID)* riid, int iMethod, 
                            IUnknown pUnk);
}

@GUID("F5F84C8F-CFD0-4CD6-B66B-C5D26FF1689D")
interface IMessageDispatcher : IInspectable
{
    HRESULT PumpMessages();
}

@GUID("E341516B-2E32-11D1-9964-00C04FBBB345")
interface IEventPublisher : IDispatch
{
    HRESULT get_PublisherID(BSTR* pbstrPublisherID);
    HRESULT put_PublisherID(BSTR bstrPublisherID);
    HRESULT get_PublisherName(BSTR* pbstrPublisherName);
    HRESULT put_PublisherName(BSTR bstrPublisherName);
    HRESULT get_PublisherType(BSTR* pbstrPublisherType);
    HRESULT put_PublisherType(BSTR bstrPublisherType);
    HRESULT get_OwnerSID(BSTR* pbstrOwnerSID);
    HRESULT put_OwnerSID(BSTR bstrOwnerSID);
    HRESULT get_Description(BSTR* pbstrDescription);
    HRESULT put_Description(BSTR bstrDescription);
    HRESULT GetDefaultProperty(BSTR bstrPropertyName, VARIANT* propertyValue);
    HRESULT PutDefaultProperty(BSTR bstrPropertyName, VARIANT* propertyValue);
    HRESULT RemoveDefaultProperty(BSTR bstrPropertyName);
    HRESULT GetDefaultPropertyCollection(IEventObjectCollection* collection);
}

@GUID("DA538EE2-F4DE-11D1-B6BB-00805FC79216")
interface IEventProperty : IDispatch
{
    HRESULT get_Name(BSTR* propertyName);
    HRESULT put_Name(BSTR propertyName);
    HRESULT get_Value(VARIANT* propertyValue);
    HRESULT put_Value(VARIANT* propertyValue);
}

@GUID("157733FD-A592-42E5-B594-248468C5A81B")
interface IAccessibilityDockingServiceCallback : IUnknown
{
    HRESULT Undocked(UNDOCK_REASON undockReason);
}

@GUID("8849DC22-CEDF-4C95-998D-051419DD3F76")
interface IAccessibilityDockingService : IUnknown
{
    HRESULT GetAvailableSize(ptrdiff_t hMonitor, uint* pcxFixed, uint* pcyMax);
    HRESULT DockWindow(HWND hwnd, ptrdiff_t hMonitor, uint cyRequested, 
                       IAccessibilityDockingServiceCallback pCallback);
    HRESULT UndockWindow(HWND hwnd);
}


// GUIDs


const GUID IID_AsyncIAdviseSink                     = GUIDOF!AsyncIAdviseSink;
const GUID IID_AsyncIAdviseSink2                    = GUIDOF!AsyncIAdviseSink2;
const GUID IID_AsyncIMultiQI                        = GUIDOF!AsyncIMultiQI;
const GUID IID_AsyncIPipeByte                       = GUIDOF!AsyncIPipeByte;
const GUID IID_AsyncIPipeDouble                     = GUIDOF!AsyncIPipeDouble;
const GUID IID_AsyncIPipeLong                       = GUIDOF!AsyncIPipeLong;
const GUID IID_AsyncIUnknown                        = GUIDOF!AsyncIUnknown;
const GUID IID_IAccessControl                       = GUIDOF!IAccessControl;
const GUID IID_IAccessibilityDockingService         = GUIDOF!IAccessibilityDockingService;
const GUID IID_IAccessibilityDockingServiceCallback = GUIDOF!IAccessibilityDockingServiceCallback;
const GUID IID_IActivationFilter                    = GUIDOF!IActivationFilter;
const GUID IID_IAddrExclusionControl                = GUIDOF!IAddrExclusionControl;
const GUID IID_IAddrTrackingControl                 = GUIDOF!IAddrTrackingControl;
const GUID IID_IAdviseSink                          = GUIDOF!IAdviseSink;
const GUID IID_IAdviseSink2                         = GUIDOF!IAdviseSink2;
const GUID IID_IAdviseSinkEx                        = GUIDOF!IAdviseSinkEx;
const GUID IID_IAgileObject                         = GUIDOF!IAgileObject;
const GUID IID_IAsyncManager                        = GUIDOF!IAsyncManager;
const GUID IID_IAsyncRpcChannelBuffer               = GUIDOF!IAsyncRpcChannelBuffer;
const GUID IID_IAuditControl                        = GUIDOF!IAuditControl;
const GUID IID_IAuthenticate                        = GUIDOF!IAuthenticate;
const GUID IID_IAuthenticateEx                      = GUIDOF!IAuthenticateEx;
const GUID IID_IBindCallbackRedirect                = GUIDOF!IBindCallbackRedirect;
const GUID IID_IBindCtx                             = GUIDOF!IBindCtx;
const GUID IID_IBindHost                            = GUIDOF!IBindHost;
const GUID IID_IBindHttpSecurity                    = GUIDOF!IBindHttpSecurity;
const GUID IID_IBindProtocol                        = GUIDOF!IBindProtocol;
const GUID IID_IBindStatusCallback                  = GUIDOF!IBindStatusCallback;
const GUID IID_IBindStatusCallbackEx                = GUIDOF!IBindStatusCallbackEx;
const GUID IID_IBinding                             = GUIDOF!IBinding;
const GUID IID_IBlockingLock                        = GUIDOF!IBlockingLock;
const GUID IID_ICallFactory                         = GUIDOF!ICallFactory;
const GUID IID_ICallFrame                           = GUIDOF!ICallFrame;
const GUID IID_ICallFrameEvents                     = GUIDOF!ICallFrameEvents;
const GUID IID_ICallFrameWalker                     = GUIDOF!ICallFrameWalker;
const GUID IID_ICallIndirect                        = GUIDOF!ICallIndirect;
const GUID IID_ICallInterceptor                     = GUIDOF!ICallInterceptor;
const GUID IID_ICallUnmarshal                       = GUIDOF!ICallUnmarshal;
const GUID IID_ICancelMethodCalls                   = GUIDOF!ICancelMethodCalls;
const GUID IID_ICatInformation                      = GUIDOF!ICatInformation;
const GUID IID_ICatRegister                         = GUIDOF!ICatRegister;
const GUID IID_ICatalogFileInfo                     = GUIDOF!ICatalogFileInfo;
const GUID IID_IChannelHook                         = GUIDOF!IChannelHook;
const GUID IID_IClassActivator                      = GUIDOF!IClassActivator;
const GUID IID_IClassFactory                        = GUIDOF!IClassFactory;
const GUID IID_IClassFactory2                       = GUIDOF!IClassFactory2;
const GUID IID_IClientSecurity                      = GUIDOF!IClientSecurity;
const GUID IID_ICodeInstall                         = GUIDOF!ICodeInstall;
const GUID IID_IComThreadingInfo                    = GUIDOF!IComThreadingInfo;
const GUID IID_IConnectionPoint                     = GUIDOF!IConnectionPoint;
const GUID IID_IConnectionPointContainer            = GUIDOF!IConnectionPointContainer;
const GUID IID_IContextCallback                     = GUIDOF!IContextCallback;
const GUID IID_IContinue                            = GUIDOF!IContinue;
const GUID IID_IContinueCallback                    = GUIDOF!IContinueCallback;
const GUID IID_IDataAdviseHolder                    = GUIDOF!IDataAdviseHolder;
const GUID IID_IDataFilter                          = GUIDOF!IDataFilter;
const GUID IID_IDataObject                          = GUIDOF!IDataObject;
const GUID IID_IDropSource                          = GUIDOF!IDropSource;
const GUID IID_IDropSourceNotify                    = GUIDOF!IDropSourceNotify;
const GUID IID_IDropTarget                          = GUIDOF!IDropTarget;
const GUID IID_IDummyHICONIncluder                  = GUIDOF!IDummyHICONIncluder;
const GUID IID_IEncodingFilterFactory               = GUIDOF!IEncodingFilterFactory;
const GUID IID_IEnterpriseDropTarget                = GUIDOF!IEnterpriseDropTarget;
const GUID IID_IEnumCATEGORYINFO                    = GUIDOF!IEnumCATEGORYINFO;
const GUID IID_IEnumConnectionPoints                = GUIDOF!IEnumConnectionPoints;
const GUID IID_IEnumConnections                     = GUIDOF!IEnumConnections;
const GUID IID_IEnumFORMATETC                       = GUIDOF!IEnumFORMATETC;
const GUID IID_IEnumGUID                            = GUIDOF!IEnumGUID;
const GUID IID_IEnumMoniker                         = GUIDOF!IEnumMoniker;
const GUID IID_IEnumOLEVERB                         = GUIDOF!IEnumOLEVERB;
const GUID IID_IEnumOleDocumentViews                = GUIDOF!IEnumOleDocumentViews;
const GUID IID_IEnumOleUndoUnits                    = GUIDOF!IEnumOleUndoUnits;
const GUID IID_IEnumSTATDATA                        = GUIDOF!IEnumSTATDATA;
const GUID IID_IEnumString                          = GUIDOF!IEnumString;
const GUID IID_IEnumUnknown                         = GUIDOF!IEnumUnknown;
const GUID IID_IEventProperty                       = GUIDOF!IEventProperty;
const GUID IID_IEventPublisher                      = GUIDOF!IEventPublisher;
const GUID IID_IExternalConnection                  = GUIDOF!IExternalConnection;
const GUID IID_IFastRundown                         = GUIDOF!IFastRundown;
const GUID IID_IFileBasedLogInit                    = GUIDOF!IFileBasedLogInit;
const GUID IID_IFont                                = GUIDOF!IFont;
const GUID IID_IFontDisp                            = GUIDOF!IFontDisp;
const GUID IID_IFontEventsDisp                      = GUIDOF!IFontEventsDisp;
const GUID IID_IForegroundTransfer                  = GUIDOF!IForegroundTransfer;
const GUID IID_IGetBindHandle                       = GUIDOF!IGetBindHandle;
const GUID IID_IGlobalInterfaceTable                = GUIDOF!IGlobalInterfaceTable;
const GUID IID_IGlobalOptions                       = GUIDOF!IGlobalOptions;
const GUID IID_IHttpNegotiate                       = GUIDOF!IHttpNegotiate;
const GUID IID_IHttpNegotiate2                      = GUIDOF!IHttpNegotiate2;
const GUID IID_IHttpNegotiate3                      = GUIDOF!IHttpNegotiate3;
const GUID IID_IHttpSecurity                        = GUIDOF!IHttpSecurity;
const GUID IID_IInitializeSpy                       = GUIDOF!IInitializeSpy;
const GUID IID_IInterfaceRelated                    = GUIDOF!IInterfaceRelated;
const GUID IID_IInternalUnknown                     = GUIDOF!IInternalUnknown;
const GUID IID_IInternet                            = GUIDOF!IInternet;
const GUID IID_IInternetBindInfo                    = GUIDOF!IInternetBindInfo;
const GUID IID_IInternetBindInfoEx                  = GUIDOF!IInternetBindInfoEx;
const GUID IID_IInternetHostSecurityManager         = GUIDOF!IInternetHostSecurityManager;
const GUID IID_IInternetPriority                    = GUIDOF!IInternetPriority;
const GUID IID_IInternetProtocol                    = GUIDOF!IInternetProtocol;
const GUID IID_IInternetProtocolEx                  = GUIDOF!IInternetProtocolEx;
const GUID IID_IInternetProtocolInfo                = GUIDOF!IInternetProtocolInfo;
const GUID IID_IInternetProtocolRoot                = GUIDOF!IInternetProtocolRoot;
const GUID IID_IInternetProtocolSink                = GUIDOF!IInternetProtocolSink;
const GUID IID_IInternetProtocolSinkStackable       = GUIDOF!IInternetProtocolSinkStackable;
const GUID IID_IInternetSecurityManager             = GUIDOF!IInternetSecurityManager;
const GUID IID_IInternetSecurityManagerEx           = GUIDOF!IInternetSecurityManagerEx;
const GUID IID_IInternetSecurityManagerEx2          = GUIDOF!IInternetSecurityManagerEx2;
const GUID IID_IInternetSecurityMgrSite             = GUIDOF!IInternetSecurityMgrSite;
const GUID IID_IInternetSession                     = GUIDOF!IInternetSession;
const GUID IID_IInternetThreadSwitch                = GUIDOF!IInternetThreadSwitch;
const GUID IID_IInternetZoneManager                 = GUIDOF!IInternetZoneManager;
const GUID IID_IInternetZoneManagerEx               = GUIDOF!IInternetZoneManagerEx;
const GUID IID_IInternetZoneManagerEx2              = GUIDOF!IInternetZoneManagerEx2;
const GUID IID_ILog                                 = GUIDOF!ILog;
const GUID IID_IMalloc                              = GUIDOF!IMalloc;
const GUID IID_IMallocSpy                           = GUIDOF!IMallocSpy;
const GUID IID_IMarshal                             = GUIDOF!IMarshal;
const GUID IID_IMarshal2                            = GUIDOF!IMarshal2;
const GUID IID_IMarshalingStream                    = GUIDOF!IMarshalingStream;
const GUID IID_IMessageDispatcher                   = GUIDOF!IMessageDispatcher;
const GUID IID_IMessageFilter                       = GUIDOF!IMessageFilter;
const GUID IID_IMoniker                             = GUIDOF!IMoniker;
const GUID IID_IMonikerProp                         = GUIDOF!IMonikerProp;
const GUID IID_IMultiQI                             = GUIDOF!IMultiQI;
const GUID IID_INoMarshal                           = GUIDOF!INoMarshal;
const GUID IID_IObjectWithSite                      = GUIDOF!IObjectWithSite;
const GUID IID_IOleAdviseHolder                     = GUIDOF!IOleAdviseHolder;
const GUID IID_IOleCache                            = GUIDOF!IOleCache;
const GUID IID_IOleCache2                           = GUIDOF!IOleCache2;
const GUID IID_IOleCacheControl                     = GUIDOF!IOleCacheControl;
const GUID IID_IOleClientSite                       = GUIDOF!IOleClientSite;
const GUID IID_IOleCommandTarget                    = GUIDOF!IOleCommandTarget;
const GUID IID_IOleContainer                        = GUIDOF!IOleContainer;
const GUID IID_IOleControl                          = GUIDOF!IOleControl;
const GUID IID_IOleControlSite                      = GUIDOF!IOleControlSite;
const GUID IID_IOleDocument                         = GUIDOF!IOleDocument;
const GUID IID_IOleDocumentSite                     = GUIDOF!IOleDocumentSite;
const GUID IID_IOleDocumentView                     = GUIDOF!IOleDocumentView;
const GUID IID_IOleInPlaceActiveObject              = GUIDOF!IOleInPlaceActiveObject;
const GUID IID_IOleInPlaceFrame                     = GUIDOF!IOleInPlaceFrame;
const GUID IID_IOleInPlaceObject                    = GUIDOF!IOleInPlaceObject;
const GUID IID_IOleInPlaceObjectWindowless          = GUIDOF!IOleInPlaceObjectWindowless;
const GUID IID_IOleInPlaceSite                      = GUIDOF!IOleInPlaceSite;
const GUID IID_IOleInPlaceSiteEx                    = GUIDOF!IOleInPlaceSiteEx;
const GUID IID_IOleInPlaceSiteWindowless            = GUIDOF!IOleInPlaceSiteWindowless;
const GUID IID_IOleInPlaceUIWindow                  = GUIDOF!IOleInPlaceUIWindow;
const GUID IID_IOleItemContainer                    = GUIDOF!IOleItemContainer;
const GUID IID_IOleLink                             = GUIDOF!IOleLink;
const GUID IID_IOleObject                           = GUIDOF!IOleObject;
const GUID IID_IOleParentUndoUnit                   = GUIDOF!IOleParentUndoUnit;
const GUID IID_IOleUndoManager                      = GUIDOF!IOleUndoManager;
const GUID IID_IOleUndoUnit                         = GUIDOF!IOleUndoUnit;
const GUID IID_IOleWindow                           = GUIDOF!IOleWindow;
const GUID IID_IOplockStorage                       = GUIDOF!IOplockStorage;
const GUID IID_IPSFactoryBuffer                     = GUIDOF!IPSFactoryBuffer;
const GUID IID_IParseDisplayName                    = GUIDOF!IParseDisplayName;
const GUID IID_IPerPropertyBrowsing                 = GUIDOF!IPerPropertyBrowsing;
const GUID IID_IPersist                             = GUIDOF!IPersist;
const GUID IID_IPersistFile                         = GUIDOF!IPersistFile;
const GUID IID_IPersistMemory                       = GUIDOF!IPersistMemory;
const GUID IID_IPersistMoniker                      = GUIDOF!IPersistMoniker;
const GUID IID_IPersistPropertyBag                  = GUIDOF!IPersistPropertyBag;
const GUID IID_IPersistPropertyBag2                 = GUIDOF!IPersistPropertyBag2;
const GUID IID_IPersistStorage                      = GUIDOF!IPersistStorage;
const GUID IID_IPersistStream                       = GUIDOF!IPersistStream;
const GUID IID_IPersistStreamInit                   = GUIDOF!IPersistStreamInit;
const GUID IID_IPicture                             = GUIDOF!IPicture;
const GUID IID_IPicture2                            = GUIDOF!IPicture2;
const GUID IID_IPictureDisp                         = GUIDOF!IPictureDisp;
const GUID IID_IPipeByte                            = GUIDOF!IPipeByte;
const GUID IID_IPipeDouble                          = GUIDOF!IPipeDouble;
const GUID IID_IPipeLong                            = GUIDOF!IPipeLong;
const GUID IID_IPointerInactive                     = GUIDOF!IPointerInactive;
const GUID IID_IPrint                               = GUIDOF!IPrint;
const GUID IID_IProcessInitControl                  = GUIDOF!IProcessInitControl;
const GUID IID_IProcessLock                         = GUIDOF!IProcessLock;
const GUID IID_IProgressNotify                      = GUIDOF!IProgressNotify;
const GUID IID_IPropertyBag2                        = GUIDOF!IPropertyBag2;
const GUID IID_IPropertyNotifySink                  = GUIDOF!IPropertyNotifySink;
const GUID IID_IPropertyPage                        = GUIDOF!IPropertyPage;
const GUID IID_IPropertyPage2                       = GUIDOF!IPropertyPage2;
const GUID IID_IPropertyPageSite                    = GUIDOF!IPropertyPageSite;
const GUID IID_IProtectFocus                        = GUIDOF!IProtectFocus;
const GUID IID_IProtectedModeMenuServices           = GUIDOF!IProtectedModeMenuServices;
const GUID IID_IProvideClassInfo                    = GUIDOF!IProvideClassInfo;
const GUID IID_IProvideClassInfo2                   = GUIDOF!IProvideClassInfo2;
const GUID IID_IProvideMultipleClassInfo            = GUIDOF!IProvideMultipleClassInfo;
const GUID IID_IQuickActivate                       = GUIDOF!IQuickActivate;
const GUID IID_IROTData                             = GUIDOF!IROTData;
const GUID IID_IReleaseMarshalBuffers               = GUIDOF!IReleaseMarshalBuffers;
const GUID IID_IRpcChannelBuffer                    = GUIDOF!IRpcChannelBuffer;
const GUID IID_IRpcChannelBuffer2                   = GUIDOF!IRpcChannelBuffer2;
const GUID IID_IRpcChannelBuffer3                   = GUIDOF!IRpcChannelBuffer3;
const GUID IID_IRpcHelper                           = GUIDOF!IRpcHelper;
const GUID IID_IRpcOptions                          = GUIDOF!IRpcOptions;
const GUID IID_IRpcProxyBuffer                      = GUIDOF!IRpcProxyBuffer;
const GUID IID_IRpcStubBuffer                       = GUIDOF!IRpcStubBuffer;
const GUID IID_IRpcSyntaxNegotiate                  = GUIDOF!IRpcSyntaxNegotiate;
const GUID IID_IRunnableObject                      = GUIDOF!IRunnableObject;
const GUID IID_IRunningObjectTable                  = GUIDOF!IRunningObjectTable;
const GUID IID_IServerSecurity                      = GUIDOF!IServerSecurity;
const GUID IID_ISimpleFrameSite                     = GUIDOF!ISimpleFrameSite;
const GUID IID_ISoftDistExt                         = GUIDOF!ISoftDistExt;
const GUID IID_ISpecifyPropertyPages                = GUIDOF!ISpecifyPropertyPages;
const GUID IID_IStdMarshalInfo                      = GUIDOF!IStdMarshalInfo;
const GUID IID_ISurrogate                           = GUIDOF!ISurrogate;
const GUID IID_ISurrogateService                    = GUIDOF!ISurrogateService;
const GUID IID_ISynchronize                         = GUIDOF!ISynchronize;
const GUID IID_ISynchronizeContainer                = GUIDOF!ISynchronizeContainer;
const GUID IID_ISynchronizeEvent                    = GUIDOF!ISynchronizeEvent;
const GUID IID_ISynchronizeHandle                   = GUIDOF!ISynchronizeHandle;
const GUID IID_ISynchronizeMutex                    = GUIDOF!ISynchronizeMutex;
const GUID IID_IThumbnailExtractor                  = GUIDOF!IThumbnailExtractor;
const GUID IID_ITimeAndNoticeControl                = GUIDOF!ITimeAndNoticeControl;
const GUID IID_IUnknown                             = GUIDOF!IUnknown;
const GUID IID_IUri                                 = GUIDOF!IUri;
const GUID IID_IUriBuilder                          = GUIDOF!IUriBuilder;
const GUID IID_IUriBuilderFactory                   = GUIDOF!IUriBuilderFactory;
const GUID IID_IUriContainer                        = GUIDOF!IUriContainer;
const GUID IID_IUrlMon                              = GUIDOF!IUrlMon;
const GUID IID_IViewObject                          = GUIDOF!IViewObject;
const GUID IID_IViewObject2                         = GUIDOF!IViewObject2;
const GUID IID_IViewObjectEx                        = GUIDOF!IViewObjectEx;
const GUID IID_IWaitMultiple                        = GUIDOF!IWaitMultiple;
const GUID IID_IWinInetCacheHints                   = GUIDOF!IWinInetCacheHints;
const GUID IID_IWinInetCacheHints2                  = GUIDOF!IWinInetCacheHints2;
const GUID IID_IWinInetFileStream                   = GUIDOF!IWinInetFileStream;
const GUID IID_IWinInetHttpInfo                     = GUIDOF!IWinInetHttpInfo;
const GUID IID_IWinInetHttpTimeouts                 = GUIDOF!IWinInetHttpTimeouts;
const GUID IID_IWinInetInfo                         = GUIDOF!IWinInetInfo;
const GUID IID_IWindowForBindingUI                  = GUIDOF!IWindowForBindingUI;
const GUID IID_IWrappedProtocol                     = GUIDOF!IWrappedProtocol;
const GUID IID_IZoneIdentifier                      = GUIDOF!IZoneIdentifier;
const GUID IID_IZoneIdentifier2                     = GUIDOF!IZoneIdentifier2;
const GUID IID_IZoomEvents                          = GUIDOF!IZoomEvents;
