module windows.windowssystemassessmenttool;

public import windows.automation;
public import windows.com;
public import windows.gdi;
public import windows.windowsaccessibility;
public import windows.windowsandmessaging;
public import windows.windowsprogramming;

extern(Windows):

const GUID CLSID_CInitiateWinSAT = {0x489331DC, 0xF5E0, 0x4528, [0x9F, 0xDA, 0x45, 0x33, 0x1B, 0xF4, 0xA5, 0x71]};
@GUID(0x489331DC, 0xF5E0, 0x4528, [0x9F, 0xDA, 0x45, 0x33, 0x1B, 0xF4, 0xA5, 0x71]);
struct CInitiateWinSAT;

const GUID CLSID_CQueryWinSAT = {0xF3BDFAD3, 0xF276, 0x49E9, [0x9B, 0x17, 0xC4, 0x74, 0xF4, 0x8F, 0x07, 0x64]};
@GUID(0xF3BDFAD3, 0xF276, 0x49E9, [0x9B, 0x17, 0xC4, 0x74, 0xF4, 0x8F, 0x07, 0x64]);
struct CQueryWinSAT;

const GUID CLSID_CQueryAllWinSAT = {0x05DF8D13, 0xC355, 0x47F4, [0xA1, 0x1E, 0x85, 0x1B, 0x33, 0x8C, 0xEF, 0xB8]};
@GUID(0x05DF8D13, 0xC355, 0x47F4, [0xA1, 0x1E, 0x85, 0x1B, 0x33, 0x8C, 0xEF, 0xB8]);
struct CQueryAllWinSAT;

const GUID CLSID_CProvideWinSATVisuals = {0x9F377D7E, 0xE551, 0x44F8, [0x9F, 0x94, 0x9D, 0xB3, 0x92, 0xB0, 0x3B, 0x7B]};
@GUID(0x9F377D7E, 0xE551, 0x44F8, [0x9F, 0x94, 0x9D, 0xB3, 0x92, 0xB0, 0x3B, 0x7B]);
struct CProvideWinSATVisuals;

const GUID CLSID_CAccessiblityWinSAT = {0x6E18F9C6, 0xA3EB, 0x495A, [0x89, 0xB7, 0x95, 0x64, 0x82, 0xE1, 0x9F, 0x7A]};
@GUID(0x6E18F9C6, 0xA3EB, 0x495A, [0x89, 0xB7, 0x95, 0x64, 0x82, 0xE1, 0x9F, 0x7A]);
struct CAccessiblityWinSAT;

const GUID CLSID_CQueryOEMWinSATCustomization = {0xC47A41B7, 0xB729, 0x424F, [0x9A, 0xF9, 0x5C, 0xB3, 0x93, 0x4F, 0x2D, 0xFA]};
@GUID(0xC47A41B7, 0xB729, 0x424F, [0x9A, 0xF9, 0x5C, 0xB3, 0x93, 0x4F, 0x2D, 0xFA]);
struct CQueryOEMWinSATCustomization;

enum __MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001
{
    WINSAT_OEM_DATA_VALID = 0,
    WINSAT_OEM_DATA_NON_SYS_CONFIG_MATCH = 1,
    WINSAT_OEM_DATA_INVALID = 2,
    WINSAT_OEM_NO_DATA_SUPPLIED = 3,
}

enum WINSAT_ASSESSMENT_STATE
{
    WINSAT_ASSESSMENT_STATE_MIN = 0,
    WINSAT_ASSESSMENT_STATE_UNKNOWN = 0,
    WINSAT_ASSESSMENT_STATE_VALID = 1,
    WINSAT_ASSESSMENT_STATE_INCOHERENT_WITH_HARDWARE = 2,
    WINSAT_ASSESSMENT_STATE_NOT_AVAILABLE = 3,
    WINSAT_ASSESSMENT_STATE_INVALID = 4,
    WINSAT_ASSESSMENT_STATE_MAX = 4,
}

enum WINSAT_ASSESSMENT_TYPE
{
    WINSAT_ASSESSMENT_MEMORY = 0,
    WINSAT_ASSESSMENT_CPU = 1,
    WINSAT_ASSESSMENT_DISK = 2,
    WINSAT_ASSESSMENT_D3D = 3,
    WINSAT_ASSESSMENT_GRAPHICS = 4,
}

enum WINSAT_BITMAP_SIZE
{
    WINSAT_BITMAP_SIZE_SMALL = 0,
    WINSAT_BITMAP_SIZE_NORMAL = 1,
}

const GUID IID_IProvideWinSATAssessmentInfo = {0x0CD1C380, 0x52D3, 0x4678, [0xAC, 0x6F, 0xE9, 0x29, 0xE4, 0x80, 0xBE, 0x9E]};
@GUID(0x0CD1C380, 0x52D3, 0x4678, [0xAC, 0x6F, 0xE9, 0x29, 0xE4, 0x80, 0xBE, 0x9E]);
interface IProvideWinSATAssessmentInfo : IDispatch
{
    HRESULT get_Score(float* score);
    HRESULT get_Title(BSTR* title);
    HRESULT get_Description(BSTR* description);
}

const GUID IID_IProvideWinSATResultsInfo = {0xF8334D5D, 0x568E, 0x4075, [0x87, 0x5F, 0x9D, 0xF3, 0x41, 0x50, 0x66, 0x40]};
@GUID(0xF8334D5D, 0x568E, 0x4075, [0x87, 0x5F, 0x9D, 0xF3, 0x41, 0x50, 0x66, 0x40]);
interface IProvideWinSATResultsInfo : IDispatch
{
    HRESULT GetAssessmentInfo(WINSAT_ASSESSMENT_TYPE assessment, IProvideWinSATAssessmentInfo* ppinfo);
    HRESULT get_AssessmentState(WINSAT_ASSESSMENT_STATE* state);
    HRESULT get_AssessmentDateTime(VARIANT* fileTime);
    HRESULT get_SystemRating(float* level);
    HRESULT get_RatingStateDesc(BSTR* description);
}

const GUID IID_IQueryRecentWinSATAssessment = {0xF8AD5D1F, 0x3B47, 0x4BDC, [0x93, 0x75, 0x7C, 0x6B, 0x1D, 0xA4, 0xEC, 0xA7]};
@GUID(0xF8AD5D1F, 0x3B47, 0x4BDC, [0x93, 0x75, 0x7C, 0x6B, 0x1D, 0xA4, 0xEC, 0xA7]);
interface IQueryRecentWinSATAssessment : IDispatch
{
    HRESULT get_XML(BSTR xPath, BSTR namespaces, IXMLDOMNodeList* ppDomNodeList);
    HRESULT get_Info(IProvideWinSATResultsInfo* ppWinSATAssessmentInfo);
}

const GUID IID_IProvideWinSATVisuals = {0xA9F4ADE0, 0x871A, 0x42A3, [0xB8, 0x13, 0x30, 0x78, 0xD2, 0x51, 0x62, 0xC9]};
@GUID(0xA9F4ADE0, 0x871A, 0x42A3, [0xB8, 0x13, 0x30, 0x78, 0xD2, 0x51, 0x62, 0xC9]);
interface IProvideWinSATVisuals : IUnknown
{
    HRESULT get_Bitmap(WINSAT_BITMAP_SIZE bitmapSize, WINSAT_ASSESSMENT_STATE state, float rating, HBITMAP* pBitmap);
}

const GUID IID_IQueryAllWinSATAssessments = {0x0B89ED1D, 0x6398, 0x4FEA, [0x87, 0xFC, 0x56, 0x7D, 0x8D, 0x19, 0x17, 0x6F]};
@GUID(0x0B89ED1D, 0x6398, 0x4FEA, [0x87, 0xFC, 0x56, 0x7D, 0x8D, 0x19, 0x17, 0x6F]);
interface IQueryAllWinSATAssessments : IDispatch
{
    HRESULT get_AllXML(BSTR xPath, BSTR namespaces, IXMLDOMNodeList* ppDomNodeList);
}

const GUID IID_IWinSATInitiateEvents = {0x262A1918, 0xBA0D, 0x41D5, [0x92, 0xC2, 0xFA, 0xB4, 0x63, 0x3E, 0xE7, 0x4F]};
@GUID(0x262A1918, 0xBA0D, 0x41D5, [0x92, 0xC2, 0xFA, 0xB4, 0x63, 0x3E, 0xE7, 0x4F]);
interface IWinSATInitiateEvents : IUnknown
{
    HRESULT WinSATComplete(HRESULT hresult, const(wchar)* strDescription);
    HRESULT WinSATUpdate(uint uCurrentTick, uint uTickTotal, const(wchar)* strCurrentState);
}

const GUID IID_IInitiateWinSATAssessment = {0xD983FC50, 0xF5BF, 0x49D5, [0xB5, 0xED, 0xCC, 0xCB, 0x18, 0xAA, 0x7F, 0xC1]};
@GUID(0xD983FC50, 0xF5BF, 0x49D5, [0xB5, 0xED, 0xCC, 0xCB, 0x18, 0xAA, 0x7F, 0xC1]);
interface IInitiateWinSATAssessment : IUnknown
{
    HRESULT InitiateAssessment(const(wchar)* cmdLine, IWinSATInitiateEvents pCallbacks, HWND callerHwnd);
    HRESULT InitiateFormalAssessment(IWinSATInitiateEvents pCallbacks, HWND callerHwnd);
    HRESULT CancelAssessment();
}

const GUID IID_IAccessibleWinSAT = {0x30E6018A, 0x94A8, 0x4FF8, [0xA6, 0x9A, 0x71, 0xB6, 0x74, 0x13, 0xF0, 0x7B]};
@GUID(0x30E6018A, 0x94A8, 0x4FF8, [0xA6, 0x9A, 0x71, 0xB6, 0x74, 0x13, 0xF0, 0x7B]);
interface IAccessibleWinSAT : IAccessible
{
    HRESULT SetAccessiblityData(const(wchar)* wsName, const(wchar)* wsValue, const(wchar)* wsDesc);
}

const GUID IID_IQueryOEMWinSATCustomization = {0xBC9A6A9F, 0xAD4E, 0x420E, [0x99, 0x53, 0xB3, 0x46, 0x71, 0xE9, 0xDF, 0x22]};
@GUID(0xBC9A6A9F, 0xAD4E, 0x420E, [0x99, 0x53, 0xB3, 0x46, 0x71, 0xE9, 0xDF, 0x22]);
interface IQueryOEMWinSATCustomization : IUnknown
{
    HRESULT GetOEMPrePopulationInfo(__MIDL___MIDL_itf_winsatcominterfacei_0000_0000_0001* state);
}

