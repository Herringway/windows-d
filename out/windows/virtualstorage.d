module windows.virtualstorage;

public import system;
public import windows.systemservices;

extern(Windows):

struct VIRTUAL_STORAGE_TYPE
{
    uint DeviceId;
    Guid VendorId;
}

enum OPEN_VIRTUAL_DISK_VERSION
{
    OPEN_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    OPEN_VIRTUAL_DISK_VERSION_1 = 1,
    OPEN_VIRTUAL_DISK_VERSION_2 = 2,
    OPEN_VIRTUAL_DISK_VERSION_3 = 3,
}

struct OPEN_VIRTUAL_DISK_PARAMETERS
{
    OPEN_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum VIRTUAL_DISK_ACCESS_MASK
{
    VIRTUAL_DISK_ACCESS_NONE = 0,
    VIRTUAL_DISK_ACCESS_ATTACH_RO = 65536,
    VIRTUAL_DISK_ACCESS_ATTACH_RW = 131072,
    VIRTUAL_DISK_ACCESS_DETACH = 262144,
    VIRTUAL_DISK_ACCESS_GET_INFO = 524288,
    VIRTUAL_DISK_ACCESS_CREATE = 1048576,
    VIRTUAL_DISK_ACCESS_METAOPS = 2097152,
    VIRTUAL_DISK_ACCESS_READ = 851968,
    VIRTUAL_DISK_ACCESS_ALL = 4128768,
    VIRTUAL_DISK_ACCESS_WRITABLE = 3276800,
}

enum OPEN_VIRTUAL_DISK_FLAG
{
    OPEN_VIRTUAL_DISK_FLAG_NONE = 0,
    OPEN_VIRTUAL_DISK_FLAG_NO_PARENTS = 1,
    OPEN_VIRTUAL_DISK_FLAG_BLANK_FILE = 2,
    OPEN_VIRTUAL_DISK_FLAG_BOOT_DRIVE = 4,
    OPEN_VIRTUAL_DISK_FLAG_CACHED_IO = 8,
    OPEN_VIRTUAL_DISK_FLAG_CUSTOM_DIFF_CHAIN = 16,
    OPEN_VIRTUAL_DISK_FLAG_PARENT_CACHED_IO = 32,
    OPEN_VIRTUAL_DISK_FLAG_VHDSET_FILE_ONLY = 64,
    OPEN_VIRTUAL_DISK_FLAG_IGNORE_RELATIVE_PARENT_LOCATOR = 128,
    OPEN_VIRTUAL_DISK_FLAG_NO_WRITE_HARDENING = 256,
    OPEN_VIRTUAL_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES = 512,
}

enum CREATE_VIRTUAL_DISK_VERSION
{
    CREATE_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    CREATE_VIRTUAL_DISK_VERSION_1 = 1,
    CREATE_VIRTUAL_DISK_VERSION_2 = 2,
    CREATE_VIRTUAL_DISK_VERSION_3 = 3,
    CREATE_VIRTUAL_DISK_VERSION_4 = 4,
}

struct CREATE_VIRTUAL_DISK_PARAMETERS
{
    CREATE_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum CREATE_VIRTUAL_DISK_FLAG
{
    CREATE_VIRTUAL_DISK_FLAG_NONE = 0,
    CREATE_VIRTUAL_DISK_FLAG_FULL_PHYSICAL_ALLOCATION = 1,
    CREATE_VIRTUAL_DISK_FLAG_PREVENT_WRITES_TO_SOURCE_DISK = 2,
    CREATE_VIRTUAL_DISK_FLAG_DO_NOT_COPY_METADATA_FROM_PARENT = 4,
    CREATE_VIRTUAL_DISK_FLAG_CREATE_BACKING_STORAGE = 8,
    CREATE_VIRTUAL_DISK_FLAG_USE_CHANGE_TRACKING_SOURCE_LIMIT = 16,
    CREATE_VIRTUAL_DISK_FLAG_PRESERVE_PARENT_CHANGE_TRACKING_STATE = 32,
    CREATE_VIRTUAL_DISK_FLAG_VHD_SET_USE_ORIGINAL_BACKING_STORAGE = 64,
    CREATE_VIRTUAL_DISK_FLAG_SPARSE_FILE = 128,
    CREATE_VIRTUAL_DISK_FLAG_PMEM_COMPATIBLE = 256,
}

enum ATTACH_VIRTUAL_DISK_VERSION
{
    ATTACH_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    ATTACH_VIRTUAL_DISK_VERSION_1 = 1,
    ATTACH_VIRTUAL_DISK_VERSION_2 = 2,
}

struct ATTACH_VIRTUAL_DISK_PARAMETERS
{
    ATTACH_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum ATTACH_VIRTUAL_DISK_FLAG
{
    ATTACH_VIRTUAL_DISK_FLAG_NONE = 0,
    ATTACH_VIRTUAL_DISK_FLAG_READ_ONLY = 1,
    ATTACH_VIRTUAL_DISK_FLAG_NO_DRIVE_LETTER = 2,
    ATTACH_VIRTUAL_DISK_FLAG_PERMANENT_LIFETIME = 4,
    ATTACH_VIRTUAL_DISK_FLAG_NO_LOCAL_HOST = 8,
    ATTACH_VIRTUAL_DISK_FLAG_NO_SECURITY_DESCRIPTOR = 16,
    ATTACH_VIRTUAL_DISK_FLAG_BYPASS_DEFAULT_ENCRYPTION_POLICY = 32,
    ATTACH_VIRTUAL_DISK_FLAG_NON_PNP = 64,
    ATTACH_VIRTUAL_DISK_FLAG_RESTRICTED_RANGE = 128,
    ATTACH_VIRTUAL_DISK_FLAG_SINGLE_PARTITION = 256,
    ATTACH_VIRTUAL_DISK_FLAG_REGISTER_VOLUME = 512,
}

enum DETACH_VIRTUAL_DISK_FLAG
{
    DETACH_VIRTUAL_DISK_FLAG_NONE = 0,
}

enum DEPENDENT_DISK_FLAG
{
    DEPENDENT_DISK_FLAG_NONE = 0,
    DEPENDENT_DISK_FLAG_MULT_BACKING_FILES = 1,
    DEPENDENT_DISK_FLAG_FULLY_ALLOCATED = 2,
    DEPENDENT_DISK_FLAG_READ_ONLY = 4,
    DEPENDENT_DISK_FLAG_REMOTE = 8,
    DEPENDENT_DISK_FLAG_SYSTEM_VOLUME = 16,
    DEPENDENT_DISK_FLAG_SYSTEM_VOLUME_PARENT = 32,
    DEPENDENT_DISK_FLAG_REMOVABLE = 64,
    DEPENDENT_DISK_FLAG_NO_DRIVE_LETTER = 128,
    DEPENDENT_DISK_FLAG_PARENT = 256,
    DEPENDENT_DISK_FLAG_NO_HOST_DISK = 512,
    DEPENDENT_DISK_FLAG_PERMANENT_LIFETIME = 1024,
    DEPENDENT_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES = 2048,
}

enum STORAGE_DEPENDENCY_INFO_VERSION
{
    STORAGE_DEPENDENCY_INFO_VERSION_UNSPECIFIED = 0,
    STORAGE_DEPENDENCY_INFO_VERSION_1 = 1,
    STORAGE_DEPENDENCY_INFO_VERSION_2 = 2,
}

struct STORAGE_DEPENDENCY_INFO_TYPE_1
{
    DEPENDENT_DISK_FLAG DependencyTypeFlags;
    uint ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
}

struct STORAGE_DEPENDENCY_INFO_TYPE_2
{
    DEPENDENT_DISK_FLAG DependencyTypeFlags;
    uint ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
    uint AncestorLevel;
    const(wchar)* DependencyDeviceName;
    const(wchar)* HostVolumeName;
    const(wchar)* DependentVolumeName;
    const(wchar)* DependentVolumeRelativePath;
}

struct STORAGE_DEPENDENCY_INFO
{
    STORAGE_DEPENDENCY_INFO_VERSION Version;
    uint NumberEntries;
    _Anonymous_e__Union Anonymous;
}

enum GET_STORAGE_DEPENDENCY_FLAG
{
    GET_STORAGE_DEPENDENCY_FLAG_NONE = 0,
    GET_STORAGE_DEPENDENCY_FLAG_HOST_VOLUMES = 1,
    GET_STORAGE_DEPENDENCY_FLAG_DISK_HANDLE = 2,
}

enum GET_VIRTUAL_DISK_INFO_VERSION
{
    GET_VIRTUAL_DISK_INFO_UNSPECIFIED = 0,
    GET_VIRTUAL_DISK_INFO_SIZE = 1,
    GET_VIRTUAL_DISK_INFO_IDENTIFIER = 2,
    GET_VIRTUAL_DISK_INFO_PARENT_LOCATION = 3,
    GET_VIRTUAL_DISK_INFO_PARENT_IDENTIFIER = 4,
    GET_VIRTUAL_DISK_INFO_PARENT_TIMESTAMP = 5,
    GET_VIRTUAL_DISK_INFO_VIRTUAL_STORAGE_TYPE = 6,
    GET_VIRTUAL_DISK_INFO_PROVIDER_SUBTYPE = 7,
    GET_VIRTUAL_DISK_INFO_IS_4K_ALIGNED = 8,
    GET_VIRTUAL_DISK_INFO_PHYSICAL_DISK = 9,
    GET_VIRTUAL_DISK_INFO_VHD_PHYSICAL_SECTOR_SIZE = 10,
    GET_VIRTUAL_DISK_INFO_SMALLEST_SAFE_VIRTUAL_SIZE = 11,
    GET_VIRTUAL_DISK_INFO_FRAGMENTATION = 12,
    GET_VIRTUAL_DISK_INFO_IS_LOADED = 13,
    GET_VIRTUAL_DISK_INFO_VIRTUAL_DISK_ID = 14,
    GET_VIRTUAL_DISK_INFO_CHANGE_TRACKING_STATE = 15,
}

struct GET_VIRTUAL_DISK_INFO
{
    GET_VIRTUAL_DISK_INFO_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum SET_VIRTUAL_DISK_INFO_VERSION
{
    SET_VIRTUAL_DISK_INFO_UNSPECIFIED = 0,
    SET_VIRTUAL_DISK_INFO_PARENT_PATH = 1,
    SET_VIRTUAL_DISK_INFO_IDENTIFIER = 2,
    SET_VIRTUAL_DISK_INFO_PARENT_PATH_WITH_DEPTH = 3,
    SET_VIRTUAL_DISK_INFO_PHYSICAL_SECTOR_SIZE = 4,
    SET_VIRTUAL_DISK_INFO_VIRTUAL_DISK_ID = 5,
    SET_VIRTUAL_DISK_INFO_CHANGE_TRACKING_STATE = 6,
    SET_VIRTUAL_DISK_INFO_PARENT_LOCATOR = 7,
}

struct SET_VIRTUAL_DISK_INFO
{
    SET_VIRTUAL_DISK_INFO_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

struct VIRTUAL_DISK_PROGRESS
{
    uint OperationStatus;
    ulong CurrentValue;
    ulong CompletionValue;
}

enum COMPACT_VIRTUAL_DISK_VERSION
{
    COMPACT_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    COMPACT_VIRTUAL_DISK_VERSION_1 = 1,
}

struct COMPACT_VIRTUAL_DISK_PARAMETERS
{
    COMPACT_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum COMPACT_VIRTUAL_DISK_FLAG
{
    COMPACT_VIRTUAL_DISK_FLAG_NONE = 0,
    COMPACT_VIRTUAL_DISK_FLAG_NO_ZERO_SCAN = 1,
    COMPACT_VIRTUAL_DISK_FLAG_NO_BLOCK_MOVES = 2,
}

enum MERGE_VIRTUAL_DISK_VERSION
{
    MERGE_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    MERGE_VIRTUAL_DISK_VERSION_1 = 1,
    MERGE_VIRTUAL_DISK_VERSION_2 = 2,
}

struct MERGE_VIRTUAL_DISK_PARAMETERS
{
    MERGE_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum MERGE_VIRTUAL_DISK_FLAG
{
    MERGE_VIRTUAL_DISK_FLAG_NONE = 0,
}

enum EXPAND_VIRTUAL_DISK_VERSION
{
    EXPAND_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    EXPAND_VIRTUAL_DISK_VERSION_1 = 1,
}

struct EXPAND_VIRTUAL_DISK_PARAMETERS
{
    EXPAND_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum EXPAND_VIRTUAL_DISK_FLAG
{
    EXPAND_VIRTUAL_DISK_FLAG_NONE = 0,
}

enum RESIZE_VIRTUAL_DISK_VERSION
{
    RESIZE_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    RESIZE_VIRTUAL_DISK_VERSION_1 = 1,
}

struct RESIZE_VIRTUAL_DISK_PARAMETERS
{
    RESIZE_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum RESIZE_VIRTUAL_DISK_FLAG
{
    RESIZE_VIRTUAL_DISK_FLAG_NONE = 0,
    RESIZE_VIRTUAL_DISK_FLAG_ALLOW_UNSAFE_VIRTUAL_SIZE = 1,
    RESIZE_VIRTUAL_DISK_FLAG_RESIZE_TO_SMALLEST_SAFE_VIRTUAL_SIZE = 2,
}

enum MIRROR_VIRTUAL_DISK_VERSION
{
    MIRROR_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    MIRROR_VIRTUAL_DISK_VERSION_1 = 1,
}

struct MIRROR_VIRTUAL_DISK_PARAMETERS
{
    MIRROR_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum MIRROR_VIRTUAL_DISK_FLAG
{
    MIRROR_VIRTUAL_DISK_FLAG_NONE = 0,
    MIRROR_VIRTUAL_DISK_FLAG_EXISTING_FILE = 1,
    MIRROR_VIRTUAL_DISK_FLAG_SKIP_MIRROR_ACTIVATION = 2,
    MIRROR_VIRTUAL_DISK_FLAG_ENABLE_SMB_COMPRESSION = 4,
    MIRROR_VIRTUAL_DISK_FLAG_IS_LIVE_MIGRATION = 8,
}

struct QUERY_CHANGES_VIRTUAL_DISK_RANGE
{
    ulong ByteOffset;
    ulong ByteLength;
    ulong Reserved;
}

enum QUERY_CHANGES_VIRTUAL_DISK_FLAG
{
    QUERY_CHANGES_VIRTUAL_DISK_FLAG_NONE = 0,
}

enum TAKE_SNAPSHOT_VHDSET_FLAG
{
    TAKE_SNAPSHOT_VHDSET_FLAG_NONE = 0,
    TAKE_SNAPSHOT_VHDSET_FLAG_WRITEABLE = 1,
}

enum TAKE_SNAPSHOT_VHDSET_VERSION
{
    TAKE_SNAPSHOT_VHDSET_VERSION_UNSPECIFIED = 0,
    TAKE_SNAPSHOT_VHDSET_VERSION_1 = 1,
}

struct TAKE_SNAPSHOT_VHDSET_PARAMETERS
{
    TAKE_SNAPSHOT_VHDSET_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum DELETE_SNAPSHOT_VHDSET_FLAG
{
    DELETE_SNAPSHOT_VHDSET_FLAG_NONE = 0,
    DELETE_SNAPSHOT_VHDSET_FLAG_PERSIST_RCT = 1,
}

enum DELETE_SNAPSHOT_VHDSET_VERSION
{
    DELETE_SNAPSHOT_VHDSET_VERSION_UNSPECIFIED = 0,
    DELETE_SNAPSHOT_VHDSET_VERSION_1 = 1,
}

struct DELETE_SNAPSHOT_VHDSET_PARAMETERS
{
    DELETE_SNAPSHOT_VHDSET_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum MODIFY_VHDSET_VERSION
{
    MODIFY_VHDSET_UNSPECIFIED = 0,
    MODIFY_VHDSET_SNAPSHOT_PATH = 1,
    MODIFY_VHDSET_REMOVE_SNAPSHOT = 2,
    MODIFY_VHDSET_DEFAULT_SNAPSHOT_PATH = 3,
}

enum MODIFY_VHDSET_FLAG
{
    MODIFY_VHDSET_FLAG_NONE = 0,
    MODIFY_VHDSET_FLAG_WRITEABLE_SNAPSHOT = 1,
}

struct MODIFY_VHDSET_PARAMETERS
{
    MODIFY_VHDSET_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum APPLY_SNAPSHOT_VHDSET_FLAG
{
    APPLY_SNAPSHOT_VHDSET_FLAG_NONE = 0,
    APPLY_SNAPSHOT_VHDSET_FLAG_WRITEABLE = 1,
}

enum APPLY_SNAPSHOT_VHDSET_VERSION
{
    APPLY_SNAPSHOT_VHDSET_VERSION_UNSPECIFIED = 0,
    APPLY_SNAPSHOT_VHDSET_VERSION_1 = 1,
}

struct APPLY_SNAPSHOT_VHDSET_PARAMETERS
{
    APPLY_SNAPSHOT_VHDSET_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum RAW_SCSI_VIRTUAL_DISK_FLAG
{
    RAW_SCSI_VIRTUAL_DISK_FLAG_NONE = 0,
}

enum RAW_SCSI_VIRTUAL_DISK_VERSION
{
    RAW_SCSI_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    RAW_SCSI_VIRTUAL_DISK_VERSION_1 = 1,
}

struct RAW_SCSI_VIRTUAL_DISK_PARAMETERS
{
    RAW_SCSI_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

struct RAW_SCSI_VIRTUAL_DISK_RESPONSE
{
    RAW_SCSI_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum FORK_VIRTUAL_DISK_VERSION
{
    FORK_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
    FORK_VIRTUAL_DISK_VERSION_1 = 1,
}

struct FORK_VIRTUAL_DISK_PARAMETERS
{
    FORK_VIRTUAL_DISK_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

enum FORK_VIRTUAL_DISK_FLAG
{
    FORK_VIRTUAL_DISK_FLAG_NONE = 0,
    FORK_VIRTUAL_DISK_FLAG_EXISTING_FILE = 1,
}

@DllImport("VirtDisk.dll")
uint OpenVirtualDisk(VIRTUAL_STORAGE_TYPE* VirtualStorageType, const(wchar)* Path, VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask, OPEN_VIRTUAL_DISK_FLAG Flags, OPEN_VIRTUAL_DISK_PARAMETERS* Parameters, int* Handle);

@DllImport("VirtDisk.dll")
uint CreateVirtualDisk(VIRTUAL_STORAGE_TYPE* VirtualStorageType, const(wchar)* Path, VIRTUAL_DISK_ACCESS_MASK VirtualDiskAccessMask, void* SecurityDescriptor, CREATE_VIRTUAL_DISK_FLAG Flags, uint ProviderSpecificFlags, CREATE_VIRTUAL_DISK_PARAMETERS* Parameters, OVERLAPPED* Overlapped, int* Handle);

@DllImport("VirtDisk.dll")
uint AttachVirtualDisk(HANDLE VirtualDiskHandle, void* SecurityDescriptor, ATTACH_VIRTUAL_DISK_FLAG Flags, uint ProviderSpecificFlags, ATTACH_VIRTUAL_DISK_PARAMETERS* Parameters, OVERLAPPED* Overlapped);

@DllImport("VirtDisk.dll")
uint DetachVirtualDisk(HANDLE VirtualDiskHandle, DETACH_VIRTUAL_DISK_FLAG Flags, uint ProviderSpecificFlags);

@DllImport("VirtDisk.dll")
uint GetVirtualDiskPhysicalPath(HANDLE VirtualDiskHandle, uint* DiskPathSizeInBytes, const(wchar)* DiskPath);

@DllImport("VirtDisk.dll")
uint GetAllAttachedVirtualDiskPhysicalPaths(uint* PathsBufferSizeInBytes, const(wchar)* PathsBuffer);

@DllImport("VirtDisk.dll")
uint GetStorageDependencyInformation(HANDLE ObjectHandle, GET_STORAGE_DEPENDENCY_FLAG Flags, uint StorageDependencyInfoSize, STORAGE_DEPENDENCY_INFO* StorageDependencyInfo, uint* SizeUsed);

@DllImport("VirtDisk.dll")
uint GetVirtualDiskInformation(HANDLE VirtualDiskHandle, uint* VirtualDiskInfoSize, char* VirtualDiskInfo, uint* SizeUsed);

@DllImport("VirtDisk.dll")
uint SetVirtualDiskInformation(HANDLE VirtualDiskHandle, SET_VIRTUAL_DISK_INFO* VirtualDiskInfo);

@DllImport("VirtDisk.dll")
uint EnumerateVirtualDiskMetadata(HANDLE VirtualDiskHandle, uint* NumberOfItems, char* Items);

@DllImport("VirtDisk.dll")
uint GetVirtualDiskMetadata(HANDLE VirtualDiskHandle, const(Guid)* Item, uint* MetaDataSize, char* MetaData);

@DllImport("VirtDisk.dll")
uint SetVirtualDiskMetadata(HANDLE VirtualDiskHandle, const(Guid)* Item, uint MetaDataSize, char* MetaData);

@DllImport("VirtDisk.dll")
uint DeleteVirtualDiskMetadata(HANDLE VirtualDiskHandle, const(Guid)* Item);

@DllImport("VirtDisk.dll")
uint GetVirtualDiskOperationProgress(HANDLE VirtualDiskHandle, OVERLAPPED* Overlapped, VIRTUAL_DISK_PROGRESS* Progress);

@DllImport("VirtDisk.dll")
uint CompactVirtualDisk(HANDLE VirtualDiskHandle, COMPACT_VIRTUAL_DISK_FLAG Flags, COMPACT_VIRTUAL_DISK_PARAMETERS* Parameters, OVERLAPPED* Overlapped);

@DllImport("VirtDisk.dll")
uint MergeVirtualDisk(HANDLE VirtualDiskHandle, MERGE_VIRTUAL_DISK_FLAG Flags, MERGE_VIRTUAL_DISK_PARAMETERS* Parameters, OVERLAPPED* Overlapped);

@DllImport("VirtDisk.dll")
uint ExpandVirtualDisk(HANDLE VirtualDiskHandle, EXPAND_VIRTUAL_DISK_FLAG Flags, EXPAND_VIRTUAL_DISK_PARAMETERS* Parameters, OVERLAPPED* Overlapped);

@DllImport("VirtDisk.dll")
uint ResizeVirtualDisk(HANDLE VirtualDiskHandle, RESIZE_VIRTUAL_DISK_FLAG Flags, RESIZE_VIRTUAL_DISK_PARAMETERS* Parameters, OVERLAPPED* Overlapped);

@DllImport("VirtDisk.dll")
uint MirrorVirtualDisk(HANDLE VirtualDiskHandle, MIRROR_VIRTUAL_DISK_FLAG Flags, MIRROR_VIRTUAL_DISK_PARAMETERS* Parameters, OVERLAPPED* Overlapped);

@DllImport("VirtDisk.dll")
uint BreakMirrorVirtualDisk(HANDLE VirtualDiskHandle);

@DllImport("VirtDisk.dll")
uint AddVirtualDiskParent(HANDLE VirtualDiskHandle, const(wchar)* ParentPath);

@DllImport("VirtDisk.dll")
uint QueryChangesVirtualDisk(HANDLE VirtualDiskHandle, const(wchar)* ChangeTrackingId, ulong ByteOffset, ulong ByteLength, QUERY_CHANGES_VIRTUAL_DISK_FLAG Flags, char* Ranges, uint* RangeCount, ulong* ProcessedLength);

@DllImport("VirtDisk.dll")
uint TakeSnapshotVhdSet(HANDLE VirtualDiskHandle, const(TAKE_SNAPSHOT_VHDSET_PARAMETERS)* Parameters, TAKE_SNAPSHOT_VHDSET_FLAG Flags);

@DllImport("VirtDisk.dll")
uint DeleteSnapshotVhdSet(HANDLE VirtualDiskHandle, const(DELETE_SNAPSHOT_VHDSET_PARAMETERS)* Parameters, DELETE_SNAPSHOT_VHDSET_FLAG Flags);

@DllImport("VirtDisk.dll")
uint ModifyVhdSet(HANDLE VirtualDiskHandle, const(MODIFY_VHDSET_PARAMETERS)* Parameters, MODIFY_VHDSET_FLAG Flags);

@DllImport("VirtDisk.dll")
uint ApplySnapshotVhdSet(HANDLE VirtualDiskHandle, const(APPLY_SNAPSHOT_VHDSET_PARAMETERS)* Parameters, APPLY_SNAPSHOT_VHDSET_FLAG Flags);

@DllImport("VirtDisk.dll")
uint RawSCSIVirtualDisk(HANDLE VirtualDiskHandle, const(RAW_SCSI_VIRTUAL_DISK_PARAMETERS)* Parameters, RAW_SCSI_VIRTUAL_DISK_FLAG Flags, RAW_SCSI_VIRTUAL_DISK_RESPONSE* Response);

@DllImport("VirtDisk.dll")
uint ForkVirtualDisk(HANDLE VirtualDiskHandle, FORK_VIRTUAL_DISK_FLAG Flags, const(FORK_VIRTUAL_DISK_PARAMETERS)* Parameters, OVERLAPPED* Overlapped);

@DllImport("VirtDisk.dll")
uint CompleteForkVirtualDisk(HANDLE VirtualDiskHandle);

