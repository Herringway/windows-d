module windows.direct2d;

public import windows.core;
public import windows.com : HRESULT, IUnknown;
public import windows.direct3d11 : D3D_FEATURE_LEVEL;
public import windows.direct3d9 : D3DADAPTER_IDENTIFIER9, D3DBACKBUFFER_TYPE, D3DBOX, D3DCLIPSTATUS9, D3DCOMPOSERECTSOP,
                                  D3DCUBEMAP_FACES, D3DDEVICE_CREATION_PARAMETERS, D3DDEVTYPE, D3DDISPLAYMODE,
                                  D3DDISPLAYMODEEX, D3DDISPLAYMODEFILTER, D3DDISPLAYROTATION, D3DFORMAT, D3DGAMMARAMP,
                                  D3DINDEXBUFFER_DESC, D3DLIGHT9, D3DLOCKED_BOX, D3DLOCKED_RECT, D3DMATERIAL9,
                                  D3DMATRIX, D3DMULTISAMPLE_TYPE, D3DPOOL, D3DPRESENTSTATS, D3DQUERYTYPE,
                                  D3DRASTER_STATUS, D3DRECTPATCH_INFO, D3DRESOURCETYPE, D3DSAMPLERSTATETYPE,
                                  D3DSURFACE_DESC, D3DTEXTUREFILTERTYPE, D3DTRIPATCH_INFO, D3DVERTEXBUFFER_DESC,
                                  D3DVERTEXELEMENT9, D3DVIEWPORT9, D3DVOLUME_DESC, _D3DPRESENT_PARAMETERS_;
public import windows.directwrite : DWRITE_GLYPH_IMAGE_FORMATS, DWRITE_GLYPH_RUN, DWRITE_GLYPH_RUN_DESCRIPTION,
                                    DWRITE_MEASURING_MODE, IDWriteFontFace, IDWriteRenderingParams, IDWriteTextFormat,
                                    IDWriteTextLayout;
public import windows.displaydevices : POINT, RECT;
public import windows.dxgi : DXGI_COLOR_SPACE_TYPE, DXGI_FORMAT, DXGI_RGBA, IDXGIDevice, IDXGISurface;
public import windows.gdi : HDC, RGNDATA;
public import windows.kernel : LUID;
public import windows.structuredstorage : IStream;
public import windows.systemservices : BOOL, D3DPRIMITIVETYPE, D3DRECT, D3DRENDERSTATETYPE, D3DSTATEBLOCKTYPE,
                                       D3DTEXTURESTAGESTATETYPE, D3DTRANSFORMSTATETYPE, HANDLE;
public import windows.windowsandmessaging : HWND;
public import windows.windowsimagingcomponent : IWICBitmap, IWICBitmapSource, IWICColorContext, IWICImagingFactory;
public import windows.xps : IPrintDocumentPackageTarget;

extern(Windows):


// Enums


enum : uint
{
    D2D1_ALPHA_MODE_UNKNOWN       = 0x00000000,
    D2D1_ALPHA_MODE_PREMULTIPLIED = 0x00000001,
    D2D1_ALPHA_MODE_STRAIGHT      = 0x00000002,
    D2D1_ALPHA_MODE_IGNORE        = 0x00000003,
    D2D1_ALPHA_MODE_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_ALPHA_MODE = uint;

enum : int
{
    D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR              = 0x00000001,
    D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC               = 0x00000002,
    D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC         = 0x00000004,
    D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_INTERPOLATION_MODE_DEFINITION_FANT                = 0x00000006,
    D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR       = 0x00000007,
}
alias D2D1_INTERPOLATION_MODE_DEFINITION = int;

enum : uint
{
    D2D1_GAMMA_2_2         = 0x00000000,
    D2D1_GAMMA_1_0         = 0x00000001,
    D2D1_GAMMA_FORCE_DWORD = 0xffffffff,
}
alias D2D1_GAMMA = uint;

enum : uint
{
    D2D1_OPACITY_MASK_CONTENT_GRAPHICS            = 0x00000000,
    D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL        = 0x00000001,
    D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE = 0x00000002,
    D2D1_OPACITY_MASK_CONTENT_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_OPACITY_MASK_CONTENT = uint;

enum : uint
{
    D2D1_EXTEND_MODE_CLAMP       = 0x00000000,
    D2D1_EXTEND_MODE_WRAP        = 0x00000001,
    D2D1_EXTEND_MODE_MIRROR      = 0x00000002,
    D2D1_EXTEND_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_EXTEND_MODE = uint;

enum : uint
{
    D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = 0x00000000,
    D2D1_ANTIALIAS_MODE_ALIASED       = 0x00000001,
    D2D1_ANTIALIAS_MODE_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_ANTIALIAS_MODE = uint;

enum : uint
{
    D2D1_TEXT_ANTIALIAS_MODE_DEFAULT     = 0x00000000,
    D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE   = 0x00000001,
    D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE   = 0x00000002,
    D2D1_TEXT_ANTIALIAS_MODE_ALIASED     = 0x00000003,
    D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_TEXT_ANTIALIAS_MODE = uint;

enum : uint
{
    D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0x00000000,
    D2D1_BITMAP_INTERPOLATION_MODE_LINEAR           = 0x00000001,
    D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD      = 0xffffffff,
}
alias D2D1_BITMAP_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_DRAW_TEXT_OPTIONS_NO_SNAP                       = 0x00000001,
    D2D1_DRAW_TEXT_OPTIONS_CLIP                          = 0x00000002,
    D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT             = 0x00000004,
    D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING = 0x00000008,
    D2D1_DRAW_TEXT_OPTIONS_NONE                          = 0x00000000,
    D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD                   = 0xffffffff,
}
alias D2D1_DRAW_TEXT_OPTIONS = uint;

enum : uint
{
    D2D1_ARC_SIZE_SMALL       = 0x00000000,
    D2D1_ARC_SIZE_LARGE       = 0x00000001,
    D2D1_ARC_SIZE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_ARC_SIZE = uint;

enum : uint
{
    D2D1_CAP_STYLE_FLAT        = 0x00000000,
    D2D1_CAP_STYLE_SQUARE      = 0x00000001,
    D2D1_CAP_STYLE_ROUND       = 0x00000002,
    D2D1_CAP_STYLE_TRIANGLE    = 0x00000003,
    D2D1_CAP_STYLE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_CAP_STYLE = uint;

enum : uint
{
    D2D1_DASH_STYLE_SOLID        = 0x00000000,
    D2D1_DASH_STYLE_DASH         = 0x00000001,
    D2D1_DASH_STYLE_DOT          = 0x00000002,
    D2D1_DASH_STYLE_DASH_DOT     = 0x00000003,
    D2D1_DASH_STYLE_DASH_DOT_DOT = 0x00000004,
    D2D1_DASH_STYLE_CUSTOM       = 0x00000005,
    D2D1_DASH_STYLE_FORCE_DWORD  = 0xffffffff,
}
alias D2D1_DASH_STYLE = uint;

enum : uint
{
    D2D1_LINE_JOIN_MITER          = 0x00000000,
    D2D1_LINE_JOIN_BEVEL          = 0x00000001,
    D2D1_LINE_JOIN_ROUND          = 0x00000002,
    D2D1_LINE_JOIN_MITER_OR_BEVEL = 0x00000003,
    D2D1_LINE_JOIN_FORCE_DWORD    = 0xffffffff,
}
alias D2D1_LINE_JOIN = uint;

enum : uint
{
    D2D1_COMBINE_MODE_UNION       = 0x00000000,
    D2D1_COMBINE_MODE_INTERSECT   = 0x00000001,
    D2D1_COMBINE_MODE_XOR         = 0x00000002,
    D2D1_COMBINE_MODE_EXCLUDE     = 0x00000003,
    D2D1_COMBINE_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_COMBINE_MODE = uint;

enum : uint
{
    D2D1_GEOMETRY_RELATION_UNKNOWN      = 0x00000000,
    D2D1_GEOMETRY_RELATION_DISJOINT     = 0x00000001,
    D2D1_GEOMETRY_RELATION_IS_CONTAINED = 0x00000002,
    D2D1_GEOMETRY_RELATION_CONTAINS     = 0x00000003,
    D2D1_GEOMETRY_RELATION_OVERLAP      = 0x00000004,
    D2D1_GEOMETRY_RELATION_FORCE_DWORD  = 0xffffffff,
}
alias D2D1_GEOMETRY_RELATION = uint;

enum : uint
{
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES = 0x00000000,
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES            = 0x00000001,
    D2D1_GEOMETRY_SIMPLIFICATION_OPTION_FORCE_DWORD      = 0xffffffff,
}
alias D2D1_GEOMETRY_SIMPLIFICATION_OPTION = uint;

enum : uint
{
    D2D1_FIGURE_BEGIN_FILLED      = 0x00000000,
    D2D1_FIGURE_BEGIN_HOLLOW      = 0x00000001,
    D2D1_FIGURE_BEGIN_FORCE_DWORD = 0xffffffff,
}
alias D2D1_FIGURE_BEGIN = uint;

enum : uint
{
    D2D1_FIGURE_END_OPEN        = 0x00000000,
    D2D1_FIGURE_END_CLOSED      = 0x00000001,
    D2D1_FIGURE_END_FORCE_DWORD = 0xffffffff,
}
alias D2D1_FIGURE_END = uint;

enum : uint
{
    D2D1_PATH_SEGMENT_NONE                  = 0x00000000,
    D2D1_PATH_SEGMENT_FORCE_UNSTROKED       = 0x00000001,
    D2D1_PATH_SEGMENT_FORCE_ROUND_LINE_JOIN = 0x00000002,
    D2D1_PATH_SEGMENT_FORCE_DWORD           = 0xffffffff,
}
alias D2D1_PATH_SEGMENT = uint;

enum : uint
{
    D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = 0x00000000,
    D2D1_SWEEP_DIRECTION_CLOCKWISE         = 0x00000001,
    D2D1_SWEEP_DIRECTION_FORCE_DWORD       = 0xffffffff,
}
alias D2D1_SWEEP_DIRECTION = uint;

enum : uint
{
    D2D1_FILL_MODE_ALTERNATE   = 0x00000000,
    D2D1_FILL_MODE_WINDING     = 0x00000001,
    D2D1_FILL_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_FILL_MODE = uint;

enum : uint
{
    D2D1_LAYER_OPTIONS_NONE                     = 0x00000000,
    D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = 0x00000001,
    D2D1_LAYER_OPTIONS_FORCE_DWORD              = 0xffffffff,
}
alias D2D1_LAYER_OPTIONS = uint;

enum : uint
{
    D2D1_WINDOW_STATE_NONE        = 0x00000000,
    D2D1_WINDOW_STATE_OCCLUDED    = 0x00000001,
    D2D1_WINDOW_STATE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_WINDOW_STATE = uint;

enum : uint
{
    D2D1_RENDER_TARGET_TYPE_DEFAULT     = 0x00000000,
    D2D1_RENDER_TARGET_TYPE_SOFTWARE    = 0x00000001,
    D2D1_RENDER_TARGET_TYPE_HARDWARE    = 0x00000002,
    D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_RENDER_TARGET_TYPE = uint;

enum : uint
{
    D2D1_FEATURE_LEVEL_DEFAULT     = 0x00000000,
    D2D1_FEATURE_LEVEL_9           = 0x00009100,
    D2D1_FEATURE_LEVEL_10          = 0x0000a000,
    D2D1_FEATURE_LEVEL_FORCE_DWORD = 0xffffffff,
}
alias D2D1_FEATURE_LEVEL = uint;

enum : uint
{
    D2D1_RENDER_TARGET_USAGE_NONE                  = 0x00000000,
    D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = 0x00000001,
    D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE        = 0x00000002,
    D2D1_RENDER_TARGET_USAGE_FORCE_DWORD           = 0xffffffff,
}
alias D2D1_RENDER_TARGET_USAGE = uint;

enum : uint
{
    D2D1_PRESENT_OPTIONS_NONE            = 0x00000000,
    D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = 0x00000001,
    D2D1_PRESENT_OPTIONS_IMMEDIATELY     = 0x00000002,
    D2D1_PRESENT_OPTIONS_FORCE_DWORD     = 0xffffffff,
}
alias D2D1_PRESENT_OPTIONS = uint;

enum : uint
{
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE           = 0x00000000,
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = 0x00000001,
    D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD    = 0xffffffff,
}
alias D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS = uint;

enum : uint
{
    D2D1_DC_INITIALIZE_MODE_COPY        = 0x00000000,
    D2D1_DC_INITIALIZE_MODE_CLEAR       = 0x00000001,
    D2D1_DC_INITIALIZE_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_DC_INITIALIZE_MODE = uint;

enum : uint
{
    D2D1_DEBUG_LEVEL_NONE        = 0x00000000,
    D2D1_DEBUG_LEVEL_ERROR       = 0x00000001,
    D2D1_DEBUG_LEVEL_WARNING     = 0x00000002,
    D2D1_DEBUG_LEVEL_INFORMATION = 0x00000003,
    D2D1_DEBUG_LEVEL_FORCE_DWORD = 0xffffffff,
}
alias D2D1_DEBUG_LEVEL = uint;

enum : uint
{
    D2D1_FACTORY_TYPE_SINGLE_THREADED = 0x00000000,
    D2D1_FACTORY_TYPE_MULTI_THREADED  = 0x00000001,
    D2D1_FACTORY_TYPE_FORCE_DWORD     = 0xffffffff,
}
alias D2D1_FACTORY_TYPE = uint;

enum : uint
{
    D2D1_BORDER_MODE_SOFT        = 0x00000000,
    D2D1_BORDER_MODE_HARD        = 0x00000001,
    D2D1_BORDER_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_BORDER_MODE = uint;

enum : uint
{
    D2D1_CHANNEL_SELECTOR_R           = 0x00000000,
    D2D1_CHANNEL_SELECTOR_G           = 0x00000001,
    D2D1_CHANNEL_SELECTOR_B           = 0x00000002,
    D2D1_CHANNEL_SELECTOR_A           = 0x00000003,
    D2D1_CHANNEL_SELECTOR_FORCE_DWORD = 0xffffffff,
}
alias D2D1_CHANNEL_SELECTOR = uint;

enum : uint
{
    D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT                             = 0x00000001,
    D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL                     = 0x00000002,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180                 = 0x00000003,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 0x00000004,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 0x00000005,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90                  = 0x00000006,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL  = 0x00000007,
    D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270                 = 0x00000008,
    D2D1_BITMAPSOURCE_ORIENTATION_FORCE_DWORD                         = 0xffffffff,
}
alias D2D1_BITMAPSOURCE_ORIENTATION = uint;

enum : uint
{
    D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION = 0x00000000,
    D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION       = 0x00000001,
    D2D1_GAUSSIANBLUR_PROP_BORDER_MODE        = 0x00000002,
    D2D1_GAUSSIANBLUR_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_GAUSSIANBLUR_PROP = uint;

enum : uint
{
    D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED       = 0x00000000,
    D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED    = 0x00000001,
    D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY     = 0x00000002,
    D2D1_GAUSSIANBLUR_OPTIMIZATION_FORCE_DWORD = 0xffffffff,
}
alias D2D1_GAUSSIANBLUR_OPTIMIZATION = uint;

enum : uint
{
    D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION = 0x00000000,
    D2D1_DIRECTIONALBLUR_PROP_ANGLE              = 0x00000001,
    D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION       = 0x00000002,
    D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE        = 0x00000003,
    D2D1_DIRECTIONALBLUR_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_DIRECTIONALBLUR_PROP = uint;

enum : uint
{
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED       = 0x00000000,
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED    = 0x00000001,
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY     = 0x00000002,
    D2D1_DIRECTIONALBLUR_OPTIMIZATION_FORCE_DWORD = 0xffffffff,
}
alias D2D1_DIRECTIONALBLUR_OPTIMIZATION = uint;

enum : uint
{
    D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION = 0x00000000,
    D2D1_SHADOW_PROP_COLOR                   = 0x00000001,
    D2D1_SHADOW_PROP_OPTIMIZATION            = 0x00000002,
    D2D1_SHADOW_PROP_FORCE_DWORD             = 0xffffffff,
}
alias D2D1_SHADOW_PROP = uint;

enum : uint
{
    D2D1_SHADOW_OPTIMIZATION_SPEED       = 0x00000000,
    D2D1_SHADOW_OPTIMIZATION_BALANCED    = 0x00000001,
    D2D1_SHADOW_OPTIMIZATION_QUALITY     = 0x00000002,
    D2D1_SHADOW_OPTIMIZATION_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SHADOW_OPTIMIZATION = uint;

enum : uint
{
    D2D1_BLEND_PROP_MODE        = 0x00000000,
    D2D1_BLEND_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_BLEND_PROP = uint;

enum : uint
{
    D2D1_BLEND_MODE_MULTIPLY      = 0x00000000,
    D2D1_BLEND_MODE_SCREEN        = 0x00000001,
    D2D1_BLEND_MODE_DARKEN        = 0x00000002,
    D2D1_BLEND_MODE_LIGHTEN       = 0x00000003,
    D2D1_BLEND_MODE_DISSOLVE      = 0x00000004,
    D2D1_BLEND_MODE_COLOR_BURN    = 0x00000005,
    D2D1_BLEND_MODE_LINEAR_BURN   = 0x00000006,
    D2D1_BLEND_MODE_DARKER_COLOR  = 0x00000007,
    D2D1_BLEND_MODE_LIGHTER_COLOR = 0x00000008,
    D2D1_BLEND_MODE_COLOR_DODGE   = 0x00000009,
    D2D1_BLEND_MODE_LINEAR_DODGE  = 0x0000000a,
    D2D1_BLEND_MODE_OVERLAY       = 0x0000000b,
    D2D1_BLEND_MODE_SOFT_LIGHT    = 0x0000000c,
    D2D1_BLEND_MODE_HARD_LIGHT    = 0x0000000d,
    D2D1_BLEND_MODE_VIVID_LIGHT   = 0x0000000e,
    D2D1_BLEND_MODE_LINEAR_LIGHT  = 0x0000000f,
    D2D1_BLEND_MODE_PIN_LIGHT     = 0x00000010,
    D2D1_BLEND_MODE_HARD_MIX      = 0x00000011,
    D2D1_BLEND_MODE_DIFFERENCE    = 0x00000012,
    D2D1_BLEND_MODE_EXCLUSION     = 0x00000013,
    D2D1_BLEND_MODE_HUE           = 0x00000014,
    D2D1_BLEND_MODE_SATURATION    = 0x00000015,
    D2D1_BLEND_MODE_COLOR         = 0x00000016,
    D2D1_BLEND_MODE_LUMINOSITY    = 0x00000017,
    D2D1_BLEND_MODE_SUBTRACT      = 0x00000018,
    D2D1_BLEND_MODE_DIVISION      = 0x00000019,
    D2D1_BLEND_MODE_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_BLEND_MODE = uint;

enum : uint
{
    D2D1_SATURATION_PROP_SATURATION  = 0x00000000,
    D2D1_SATURATION_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SATURATION_PROP = uint;

enum : uint
{
    D2D1_HUEROTATION_PROP_ANGLE       = 0x00000000,
    D2D1_HUEROTATION_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_HUEROTATION_PROP = uint;

enum : uint
{
    D2D1_COLORMATRIX_PROP_COLOR_MATRIX = 0x00000000,
    D2D1_COLORMATRIX_PROP_ALPHA_MODE   = 0x00000001,
    D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT = 0x00000002,
    D2D1_COLORMATRIX_PROP_FORCE_DWORD  = 0xffffffff,
}
alias D2D1_COLORMATRIX_PROP = uint;

enum : uint
{
    D2D1_COLORMATRIX_ALPHA_MODE_PREMULTIPLIED = 0x00000001,
    D2D1_COLORMATRIX_ALPHA_MODE_STRAIGHT      = 0x00000002,
    D2D1_COLORMATRIX_ALPHA_MODE_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_COLORMATRIX_ALPHA_MODE = uint;

enum : uint
{
    D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE     = 0x00000000,
    D2D1_BITMAPSOURCE_PROP_SCALE                 = 0x00000001,
    D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE    = 0x00000002,
    D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION = 0x00000003,
    D2D1_BITMAPSOURCE_PROP_ALPHA_MODE            = 0x00000004,
    D2D1_BITMAPSOURCE_PROP_ORIENTATION           = 0x00000005,
    D2D1_BITMAPSOURCE_PROP_FORCE_DWORD           = 0xffffffff,
}
alias D2D1_BITMAPSOURCE_PROP = uint;

enum : uint
{
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = 0x00000000,
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR           = 0x00000001,
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC            = 0x00000002,
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT             = 0x00000006,
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR    = 0x00000007,
    D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FORCE_DWORD      = 0xffffffff,
}
alias D2D1_BITMAPSOURCE_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED = 0x00000001,
    D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT      = 0x00000002,
    D2D1_BITMAPSOURCE_ALPHA_MODE_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_BITMAPSOURCE_ALPHA_MODE = uint;

enum : uint
{
    D2D1_COMPOSITE_PROP_MODE        = 0x00000000,
    D2D1_COMPOSITE_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_COMPOSITE_PROP = uint;

enum : uint
{
    D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE = 0x00000000,
    D2D1_3DTRANSFORM_PROP_BORDER_MODE        = 0x00000001,
    D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX   = 0x00000002,
    D2D1_3DTRANSFORM_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_3DTRANSFORM_PROP = uint;

enum : uint
{
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR              = 0x00000001,
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC               = 0x00000002,
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_3DTRANSFORM_INTERPOLATION_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_3DTRANSFORM_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE = 0x00000000,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE        = 0x00000001,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH              = 0x00000002,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN = 0x00000003,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET       = 0x00000004,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET      = 0x00000005,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN    = 0x00000006,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION           = 0x00000007,
    D2D1_3DPERSPECTIVETRANSFORM_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_3DPERSPECTIVETRANSFORM_PROP = uint;

enum : uint
{
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR              = 0x00000001,
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC               = 0x00000002,
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE = 0x00000000,
    D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE        = 0x00000001,
    D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX   = 0x00000002,
    D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS          = 0x00000003,
    D2D1_2DAFFINETRANSFORM_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_2DAFFINETRANSFORM_PROP = uint;

enum : uint
{
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_LINEAR              = 0x00000001,
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_CUBIC               = 0x00000002,
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE = 0x00000000,
    D2D1_DPICOMPENSATION_PROP_BORDER_MODE        = 0x00000001,
    D2D1_DPICOMPENSATION_PROP_INPUT_DPI          = 0x00000002,
    D2D1_DPICOMPENSATION_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_DPICOMPENSATION_PROP = uint;

enum : uint
{
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR              = 0x00000001,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC               = 0x00000002,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_DPICOMPENSATION_INTERPOLATION_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_DPICOMPENSATION_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_SCALE_PROP_SCALE              = 0x00000000,
    D2D1_SCALE_PROP_CENTER_POINT       = 0x00000001,
    D2D1_SCALE_PROP_INTERPOLATION_MODE = 0x00000002,
    D2D1_SCALE_PROP_BORDER_MODE        = 0x00000003,
    D2D1_SCALE_PROP_SHARPNESS          = 0x00000004,
    D2D1_SCALE_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_SCALE_PROP = uint;

enum : uint
{
    D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_SCALE_INTERPOLATION_MODE_LINEAR              = 0x00000001,
    D2D1_SCALE_INTERPOLATION_MODE_CUBIC               = 0x00000002,
    D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_SCALE_INTERPOLATION_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_SCALE_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_TURBULENCE_PROP_OFFSET         = 0x00000000,
    D2D1_TURBULENCE_PROP_SIZE           = 0x00000001,
    D2D1_TURBULENCE_PROP_BASE_FREQUENCY = 0x00000002,
    D2D1_TURBULENCE_PROP_NUM_OCTAVES    = 0x00000003,
    D2D1_TURBULENCE_PROP_SEED           = 0x00000004,
    D2D1_TURBULENCE_PROP_NOISE          = 0x00000005,
    D2D1_TURBULENCE_PROP_STITCHABLE     = 0x00000006,
    D2D1_TURBULENCE_PROP_FORCE_DWORD    = 0xffffffff,
}
alias D2D1_TURBULENCE_PROP = uint;

enum : uint
{
    D2D1_TURBULENCE_NOISE_FRACTAL_SUM = 0x00000000,
    D2D1_TURBULENCE_NOISE_TURBULENCE  = 0x00000001,
    D2D1_TURBULENCE_NOISE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_TURBULENCE_NOISE = uint;

enum : uint
{
    D2D1_DISPLACEMENTMAP_PROP_SCALE            = 0x00000000,
    D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT = 0x00000001,
    D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT = 0x00000002,
    D2D1_DISPLACEMENTMAP_PROP_FORCE_DWORD      = 0xffffffff,
}
alias D2D1_DISPLACEMENTMAP_PROP = uint;

enum : uint
{
    D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT         = 0x00000000,
    D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT      = 0x00000001,
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT    = 0x00000002,
    D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT = 0x00000003,
    D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE                   = 0x00000004,
    D2D1_COLORMANAGEMENT_PROP_QUALITY                      = 0x00000005,
    D2D1_COLORMANAGEMENT_PROP_FORCE_DWORD                  = 0xffffffff,
}
alias D2D1_COLORMANAGEMENT_PROP = uint;

enum : uint
{
    D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED = 0x00000001,
    D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT      = 0x00000002,
    D2D1_COLORMANAGEMENT_ALPHA_MODE_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_COLORMANAGEMENT_ALPHA_MODE = uint;

enum : uint
{
    D2D1_COLORMANAGEMENT_QUALITY_PROOF       = 0x00000000,
    D2D1_COLORMANAGEMENT_QUALITY_NORMAL      = 0x00000001,
    D2D1_COLORMANAGEMENT_QUALITY_BEST        = 0x00000002,
    D2D1_COLORMANAGEMENT_QUALITY_FORCE_DWORD = 0xffffffff,
}
alias D2D1_COLORMANAGEMENT_QUALITY = uint;

enum : uint
{
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL            = 0x00000000,
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC = 0x00000001,
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION            = 0x00000002,
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC = 0x00000003,
    D2D1_COLORMANAGEMENT_RENDERING_INTENT_FORCE_DWORD           = 0xffffffff,
}
alias D2D1_COLORMANAGEMENT_RENDERING_INTENT = uint;

enum : uint
{
    D2D1_HISTOGRAM_PROP_NUM_BINS         = 0x00000000,
    D2D1_HISTOGRAM_PROP_CHANNEL_SELECT   = 0x00000001,
    D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT = 0x00000002,
    D2D1_HISTOGRAM_PROP_FORCE_DWORD      = 0xffffffff,
}
alias D2D1_HISTOGRAM_PROP = uint;

enum : uint
{
    D2D1_POINTSPECULAR_PROP_LIGHT_POSITION     = 0x00000000,
    D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT  = 0x00000001,
    D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT  = 0x00000002,
    D2D1_POINTSPECULAR_PROP_SURFACE_SCALE      = 0x00000003,
    D2D1_POINTSPECULAR_PROP_COLOR              = 0x00000004,
    D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 0x00000005,
    D2D1_POINTSPECULAR_PROP_SCALE_MODE         = 0x00000006,
    D2D1_POINTSPECULAR_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_POINTSPECULAR_PROP = uint;

enum : uint
{
    D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_POINTSPECULAR_SCALE_MODE_LINEAR              = 0x00000001,
    D2D1_POINTSPECULAR_SCALE_MODE_CUBIC               = 0x00000002,
    D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_POINTSPECULAR_SCALE_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_POINTSPECULAR_SCALE_MODE = uint;

enum : uint
{
    D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION      = 0x00000000,
    D2D1_SPOTSPECULAR_PROP_POINTS_AT           = 0x00000001,
    D2D1_SPOTSPECULAR_PROP_FOCUS               = 0x00000002,
    D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE = 0x00000003,
    D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT   = 0x00000004,
    D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT   = 0x00000005,
    D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE       = 0x00000006,
    D2D1_SPOTSPECULAR_PROP_COLOR               = 0x00000007,
    D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH  = 0x00000008,
    D2D1_SPOTSPECULAR_PROP_SCALE_MODE          = 0x00000009,
    D2D1_SPOTSPECULAR_PROP_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_SPOTSPECULAR_PROP = uint;

enum : uint
{
    D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR              = 0x00000001,
    D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC               = 0x00000002,
    D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_SPOTSPECULAR_SCALE_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_SPOTSPECULAR_SCALE_MODE = uint;

enum : uint
{
    D2D1_DISTANTSPECULAR_PROP_AZIMUTH            = 0x00000000,
    D2D1_DISTANTSPECULAR_PROP_ELEVATION          = 0x00000001,
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT  = 0x00000002,
    D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT  = 0x00000003,
    D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE      = 0x00000004,
    D2D1_DISTANTSPECULAR_PROP_COLOR              = 0x00000005,
    D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH = 0x00000006,
    D2D1_DISTANTSPECULAR_PROP_SCALE_MODE         = 0x00000007,
    D2D1_DISTANTSPECULAR_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_DISTANTSPECULAR_PROP = uint;

enum : uint
{
    D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR              = 0x00000001,
    D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC               = 0x00000002,
    D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_DISTANTSPECULAR_SCALE_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_DISTANTSPECULAR_SCALE_MODE = uint;

enum : uint
{
    D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION     = 0x00000000,
    D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT   = 0x00000001,
    D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE      = 0x00000002,
    D2D1_POINTDIFFUSE_PROP_COLOR              = 0x00000003,
    D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 0x00000004,
    D2D1_POINTDIFFUSE_PROP_SCALE_MODE         = 0x00000005,
    D2D1_POINTDIFFUSE_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_POINTDIFFUSE_PROP = uint;

enum : uint
{
    D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR              = 0x00000001,
    D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC               = 0x00000002,
    D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_POINTDIFFUSE_SCALE_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_POINTDIFFUSE_SCALE_MODE = uint;

enum : uint
{
    D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION      = 0x00000000,
    D2D1_SPOTDIFFUSE_PROP_POINTS_AT           = 0x00000001,
    D2D1_SPOTDIFFUSE_PROP_FOCUS               = 0x00000002,
    D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE = 0x00000003,
    D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT    = 0x00000004,
    D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE       = 0x00000005,
    D2D1_SPOTDIFFUSE_PROP_COLOR               = 0x00000006,
    D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH  = 0x00000007,
    D2D1_SPOTDIFFUSE_PROP_SCALE_MODE          = 0x00000008,
    D2D1_SPOTDIFFUSE_PROP_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_SPOTDIFFUSE_PROP = uint;

enum : uint
{
    D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR              = 0x00000001,
    D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC               = 0x00000002,
    D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_SPOTDIFFUSE_SCALE_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_SPOTDIFFUSE_SCALE_MODE = uint;

enum : uint
{
    D2D1_DISTANTDIFFUSE_PROP_AZIMUTH            = 0x00000000,
    D2D1_DISTANTDIFFUSE_PROP_ELEVATION          = 0x00000001,
    D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT   = 0x00000002,
    D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE      = 0x00000003,
    D2D1_DISTANTDIFFUSE_PROP_COLOR              = 0x00000004,
    D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = 0x00000005,
    D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE         = 0x00000006,
    D2D1_DISTANTDIFFUSE_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_DISTANTDIFFUSE_PROP = uint;

enum : uint
{
    D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR              = 0x00000001,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC               = 0x00000002,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_DISTANTDIFFUSE_SCALE_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_DISTANTDIFFUSE_SCALE_MODE = uint;

enum : uint
{
    D2D1_FLOOD_PROP_COLOR       = 0x00000000,
    D2D1_FLOOD_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_FLOOD_PROP = uint;

enum : uint
{
    D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT   = 0x00000000,
    D2D1_LINEARTRANSFER_PROP_RED_SLOPE         = 0x00000001,
    D2D1_LINEARTRANSFER_PROP_RED_DISABLE       = 0x00000002,
    D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT = 0x00000003,
    D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE       = 0x00000004,
    D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE     = 0x00000005,
    D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT  = 0x00000006,
    D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE        = 0x00000007,
    D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE      = 0x00000008,
    D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT = 0x00000009,
    D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE       = 0x0000000a,
    D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE     = 0x0000000b,
    D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT      = 0x0000000c,
    D2D1_LINEARTRANSFER_PROP_FORCE_DWORD       = 0xffffffff,
}
alias D2D1_LINEARTRANSFER_PROP = uint;

enum : uint
{
    D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE   = 0x00000000,
    D2D1_GAMMATRANSFER_PROP_RED_EXPONENT    = 0x00000001,
    D2D1_GAMMATRANSFER_PROP_RED_OFFSET      = 0x00000002,
    D2D1_GAMMATRANSFER_PROP_RED_DISABLE     = 0x00000003,
    D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE = 0x00000004,
    D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT  = 0x00000005,
    D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET    = 0x00000006,
    D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE   = 0x00000007,
    D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE  = 0x00000008,
    D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT   = 0x00000009,
    D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET     = 0x0000000a,
    D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE    = 0x0000000b,
    D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE = 0x0000000c,
    D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT  = 0x0000000d,
    D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET    = 0x0000000e,
    D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE   = 0x0000000f,
    D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT    = 0x00000010,
    D2D1_GAMMATRANSFER_PROP_FORCE_DWORD     = 0xffffffff,
}
alias D2D1_GAMMATRANSFER_PROP = uint;

enum : uint
{
    D2D1_TABLETRANSFER_PROP_RED_TABLE     = 0x00000000,
    D2D1_TABLETRANSFER_PROP_RED_DISABLE   = 0x00000001,
    D2D1_TABLETRANSFER_PROP_GREEN_TABLE   = 0x00000002,
    D2D1_TABLETRANSFER_PROP_GREEN_DISABLE = 0x00000003,
    D2D1_TABLETRANSFER_PROP_BLUE_TABLE    = 0x00000004,
    D2D1_TABLETRANSFER_PROP_BLUE_DISABLE  = 0x00000005,
    D2D1_TABLETRANSFER_PROP_ALPHA_TABLE   = 0x00000006,
    D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE = 0x00000007,
    D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT  = 0x00000008,
    D2D1_TABLETRANSFER_PROP_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_TABLETRANSFER_PROP = uint;

enum : uint
{
    D2D1_DISCRETETRANSFER_PROP_RED_TABLE     = 0x00000000,
    D2D1_DISCRETETRANSFER_PROP_RED_DISABLE   = 0x00000001,
    D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE   = 0x00000002,
    D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE = 0x00000003,
    D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE    = 0x00000004,
    D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE  = 0x00000005,
    D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE   = 0x00000006,
    D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE = 0x00000007,
    D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT  = 0x00000008,
    D2D1_DISCRETETRANSFER_PROP_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_DISCRETETRANSFER_PROP = uint;

enum : uint
{
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH = 0x00000000,
    D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE         = 0x00000001,
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X      = 0x00000002,
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y      = 0x00000003,
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX      = 0x00000004,
    D2D1_CONVOLVEMATRIX_PROP_DIVISOR            = 0x00000005,
    D2D1_CONVOLVEMATRIX_PROP_BIAS               = 0x00000006,
    D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET      = 0x00000007,
    D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA     = 0x00000008,
    D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE        = 0x00000009,
    D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT       = 0x0000000a,
    D2D1_CONVOLVEMATRIX_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_CONVOLVEMATRIX_PROP = uint;

enum : uint
{
    D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR              = 0x00000001,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC               = 0x00000002,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_CONVOLVEMATRIX_SCALE_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_CONVOLVEMATRIX_SCALE_MODE = uint;

enum : uint
{
    D2D1_BRIGHTNESS_PROP_WHITE_POINT = 0x00000000,
    D2D1_BRIGHTNESS_PROP_BLACK_POINT = 0x00000001,
    D2D1_BRIGHTNESS_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_BRIGHTNESS_PROP = uint;

enum : uint
{
    D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS = 0x00000000,
    D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT = 0x00000001,
    D2D1_ARITHMETICCOMPOSITE_PROP_FORCE_DWORD  = 0xffffffff,
}
alias D2D1_ARITHMETICCOMPOSITE_PROP = uint;

enum : uint
{
    D2D1_CROP_PROP_RECT        = 0x00000000,
    D2D1_CROP_PROP_BORDER_MODE = 0x00000001,
    D2D1_CROP_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_CROP_PROP = uint;

enum : uint
{
    D2D1_BORDER_PROP_EDGE_MODE_X = 0x00000000,
    D2D1_BORDER_PROP_EDGE_MODE_Y = 0x00000001,
    D2D1_BORDER_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_BORDER_PROP = uint;

enum : uint
{
    D2D1_BORDER_EDGE_MODE_CLAMP       = 0x00000000,
    D2D1_BORDER_EDGE_MODE_WRAP        = 0x00000001,
    D2D1_BORDER_EDGE_MODE_MIRROR      = 0x00000002,
    D2D1_BORDER_EDGE_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_BORDER_EDGE_MODE = uint;

enum : uint
{
    D2D1_MORPHOLOGY_PROP_MODE        = 0x00000000,
    D2D1_MORPHOLOGY_PROP_WIDTH       = 0x00000001,
    D2D1_MORPHOLOGY_PROP_HEIGHT      = 0x00000002,
    D2D1_MORPHOLOGY_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_MORPHOLOGY_PROP = uint;

enum : uint
{
    D2D1_MORPHOLOGY_MODE_ERODE       = 0x00000000,
    D2D1_MORPHOLOGY_MODE_DILATE      = 0x00000001,
    D2D1_MORPHOLOGY_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_MORPHOLOGY_MODE = uint;

enum : uint
{
    D2D1_TILE_PROP_RECT        = 0x00000000,
    D2D1_TILE_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_TILE_PROP = uint;

enum : uint
{
    D2D1_ATLAS_PROP_INPUT_RECT         = 0x00000000,
    D2D1_ATLAS_PROP_INPUT_PADDING_RECT = 0x00000001,
    D2D1_ATLAS_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_ATLAS_PROP = uint;

enum : uint
{
    D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT = 0x00000000,
    D2D1_OPACITYMETADATA_PROP_FORCE_DWORD       = 0xffffffff,
}
alias D2D1_OPACITYMETADATA_PROP = uint;

enum : uint
{
    D2D1_PROPERTY_TYPE_UNKNOWN       = 0x00000000,
    D2D1_PROPERTY_TYPE_STRING        = 0x00000001,
    D2D1_PROPERTY_TYPE_BOOL          = 0x00000002,
    D2D1_PROPERTY_TYPE_UINT32        = 0x00000003,
    D2D1_PROPERTY_TYPE_INT32         = 0x00000004,
    D2D1_PROPERTY_TYPE_FLOAT         = 0x00000005,
    D2D1_PROPERTY_TYPE_VECTOR2       = 0x00000006,
    D2D1_PROPERTY_TYPE_VECTOR3       = 0x00000007,
    D2D1_PROPERTY_TYPE_VECTOR4       = 0x00000008,
    D2D1_PROPERTY_TYPE_BLOB          = 0x00000009,
    D2D1_PROPERTY_TYPE_IUNKNOWN      = 0x0000000a,
    D2D1_PROPERTY_TYPE_ENUM          = 0x0000000b,
    D2D1_PROPERTY_TYPE_ARRAY         = 0x0000000c,
    D2D1_PROPERTY_TYPE_CLSID         = 0x0000000d,
    D2D1_PROPERTY_TYPE_MATRIX_3X2    = 0x0000000e,
    D2D1_PROPERTY_TYPE_MATRIX_4X3    = 0x0000000f,
    D2D1_PROPERTY_TYPE_MATRIX_4X4    = 0x00000010,
    D2D1_PROPERTY_TYPE_MATRIX_5X4    = 0x00000011,
    D2D1_PROPERTY_TYPE_COLOR_CONTEXT = 0x00000012,
    D2D1_PROPERTY_TYPE_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_PROPERTY_TYPE = uint;

enum : uint
{
    D2D1_PROPERTY_CLSID       = 0x80000000,
    D2D1_PROPERTY_DISPLAYNAME = 0x80000001,
    D2D1_PROPERTY_AUTHOR      = 0x80000002,
    D2D1_PROPERTY_CATEGORY    = 0x80000003,
    D2D1_PROPERTY_DESCRIPTION = 0x80000004,
    D2D1_PROPERTY_INPUTS      = 0x80000005,
    D2D1_PROPERTY_CACHED      = 0x80000006,
    D2D1_PROPERTY_PRECISION   = 0x80000007,
    D2D1_PROPERTY_MIN_INPUTS  = 0x80000008,
    D2D1_PROPERTY_MAX_INPUTS  = 0x80000009,
    D2D1_PROPERTY_FORCE_DWORD = 0xffffffff,
}
alias D2D1_PROPERTY = uint;

enum : uint
{
    D2D1_SUBPROPERTY_DISPLAYNAME = 0x80000000,
    D2D1_SUBPROPERTY_ISREADONLY  = 0x80000001,
    D2D1_SUBPROPERTY_MIN         = 0x80000002,
    D2D1_SUBPROPERTY_MAX         = 0x80000003,
    D2D1_SUBPROPERTY_DEFAULT     = 0x80000004,
    D2D1_SUBPROPERTY_FIELDS      = 0x80000005,
    D2D1_SUBPROPERTY_INDEX       = 0x80000006,
    D2D1_SUBPROPERTY_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SUBPROPERTY = uint;

enum : uint
{
    D2D1_BITMAP_OPTIONS_NONE           = 0x00000000,
    D2D1_BITMAP_OPTIONS_TARGET         = 0x00000001,
    D2D1_BITMAP_OPTIONS_CANNOT_DRAW    = 0x00000002,
    D2D1_BITMAP_OPTIONS_CPU_READ       = 0x00000004,
    D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE = 0x00000008,
    D2D1_BITMAP_OPTIONS_FORCE_DWORD    = 0xffffffff,
}
alias D2D1_BITMAP_OPTIONS = uint;

enum : uint
{
    D2D1_COMPOSITE_MODE_SOURCE_OVER         = 0x00000000,
    D2D1_COMPOSITE_MODE_DESTINATION_OVER    = 0x00000001,
    D2D1_COMPOSITE_MODE_SOURCE_IN           = 0x00000002,
    D2D1_COMPOSITE_MODE_DESTINATION_IN      = 0x00000003,
    D2D1_COMPOSITE_MODE_SOURCE_OUT          = 0x00000004,
    D2D1_COMPOSITE_MODE_DESTINATION_OUT     = 0x00000005,
    D2D1_COMPOSITE_MODE_SOURCE_ATOP         = 0x00000006,
    D2D1_COMPOSITE_MODE_DESTINATION_ATOP    = 0x00000007,
    D2D1_COMPOSITE_MODE_XOR                 = 0x00000008,
    D2D1_COMPOSITE_MODE_PLUS                = 0x00000009,
    D2D1_COMPOSITE_MODE_SOURCE_COPY         = 0x0000000a,
    D2D1_COMPOSITE_MODE_BOUNDED_SOURCE_COPY = 0x0000000b,
    D2D1_COMPOSITE_MODE_MASK_INVERT         = 0x0000000c,
    D2D1_COMPOSITE_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_COMPOSITE_MODE = uint;

enum : uint
{
    D2D1_BUFFER_PRECISION_UNKNOWN         = 0x00000000,
    D2D1_BUFFER_PRECISION_8BPC_UNORM      = 0x00000001,
    D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB = 0x00000002,
    D2D1_BUFFER_PRECISION_16BPC_UNORM     = 0x00000003,
    D2D1_BUFFER_PRECISION_16BPC_FLOAT     = 0x00000004,
    D2D1_BUFFER_PRECISION_32BPC_FLOAT     = 0x00000005,
    D2D1_BUFFER_PRECISION_FORCE_DWORD     = 0xffffffff,
}
alias D2D1_BUFFER_PRECISION = uint;

enum : uint
{
    D2D1_MAP_OPTIONS_NONE        = 0x00000000,
    D2D1_MAP_OPTIONS_READ        = 0x00000001,
    D2D1_MAP_OPTIONS_WRITE       = 0x00000002,
    D2D1_MAP_OPTIONS_DISCARD     = 0x00000004,
    D2D1_MAP_OPTIONS_FORCE_DWORD = 0xffffffff,
}
alias D2D1_MAP_OPTIONS = uint;

enum : uint
{
    D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_INTERPOLATION_MODE_LINEAR              = 0x00000001,
    D2D1_INTERPOLATION_MODE_CUBIC               = 0x00000002,
    D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_INTERPOLATION_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_INTERPOLATION_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_UNIT_MODE_DIPS        = 0x00000000,
    D2D1_UNIT_MODE_PIXELS      = 0x00000001,
    D2D1_UNIT_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_UNIT_MODE = uint;

enum : uint
{
    D2D1_COLOR_SPACE_CUSTOM      = 0x00000000,
    D2D1_COLOR_SPACE_SRGB        = 0x00000001,
    D2D1_COLOR_SPACE_SCRGB       = 0x00000002,
    D2D1_COLOR_SPACE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_COLOR_SPACE = uint;

enum : uint
{
    D2D1_DEVICE_CONTEXT_OPTIONS_NONE                               = 0x00000000,
    D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS = 0x00000001,
    D2D1_DEVICE_CONTEXT_OPTIONS_FORCE_DWORD                        = 0xffffffff,
}
alias D2D1_DEVICE_CONTEXT_OPTIONS = uint;

enum : uint
{
    D2D1_STROKE_TRANSFORM_TYPE_NORMAL      = 0x00000000,
    D2D1_STROKE_TRANSFORM_TYPE_FIXED       = 0x00000001,
    D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE    = 0x00000002,
    D2D1_STROKE_TRANSFORM_TYPE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_STROKE_TRANSFORM_TYPE = uint;

enum : uint
{
    D2D1_PRIMITIVE_BLEND_SOURCE_OVER = 0x00000000,
    D2D1_PRIMITIVE_BLEND_COPY        = 0x00000001,
    D2D1_PRIMITIVE_BLEND_MIN         = 0x00000002,
    D2D1_PRIMITIVE_BLEND_ADD         = 0x00000003,
    D2D1_PRIMITIVE_BLEND_MAX         = 0x00000004,
    D2D1_PRIMITIVE_BLEND_FORCE_DWORD = 0xffffffff,
}
alias D2D1_PRIMITIVE_BLEND = uint;

enum : uint
{
    D2D1_THREADING_MODE_SINGLE_THREADED = 0x00000000,
    D2D1_THREADING_MODE_MULTI_THREADED  = 0x00000001,
    D2D1_THREADING_MODE_FORCE_DWORD     = 0xffffffff,
}
alias D2D1_THREADING_MODE = uint;

enum : uint
{
    D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT      = 0x00000000,
    D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED = 0x00000001,
    D2D1_COLOR_INTERPOLATION_MODE_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_COLOR_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_LAYER_OPTIONS1_NONE                       = 0x00000000,
    D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND = 0x00000001,
    D2D1_LAYER_OPTIONS1_IGNORE_ALPHA               = 0x00000002,
    D2D1_LAYER_OPTIONS1_FORCE_DWORD                = 0xffffffff,
}
alias D2D1_LAYER_OPTIONS1 = uint;

enum : uint
{
    D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT     = 0x00000000,
    D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE    = 0x00000001,
    D2D1_PRINT_FONT_SUBSET_MODE_NONE        = 0x00000002,
    D2D1_PRINT_FONT_SUBSET_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_PRINT_FONT_SUBSET_MODE = uint;

enum : uint
{
    D2D1_CHANGE_TYPE_NONE        = 0x00000000,
    D2D1_CHANGE_TYPE_PROPERTIES  = 0x00000001,
    D2D1_CHANGE_TYPE_CONTEXT     = 0x00000002,
    D2D1_CHANGE_TYPE_GRAPH       = 0x00000003,
    D2D1_CHANGE_TYPE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_CHANGE_TYPE = uint;

enum : uint
{
    D2D1_PIXEL_OPTIONS_NONE             = 0x00000000,
    D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING = 0x00000001,
    D2D1_PIXEL_OPTIONS_FORCE_DWORD      = 0xffffffff,
}
alias D2D1_PIXEL_OPTIONS = uint;

enum : uint
{
    D2D1_VERTEX_OPTIONS_NONE              = 0x00000000,
    D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR      = 0x00000001,
    D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER  = 0x00000002,
    D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP = 0x00000004,
    D2D1_VERTEX_OPTIONS_FORCE_DWORD       = 0xffffffff,
}
alias D2D1_VERTEX_OPTIONS = uint;

enum : uint
{
    D2D1_VERTEX_USAGE_STATIC      = 0x00000000,
    D2D1_VERTEX_USAGE_DYNAMIC     = 0x00000001,
    D2D1_VERTEX_USAGE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_VERTEX_USAGE = uint;

enum : uint
{
    D2D1_BLEND_OPERATION_ADD          = 0x00000001,
    D2D1_BLEND_OPERATION_SUBTRACT     = 0x00000002,
    D2D1_BLEND_OPERATION_REV_SUBTRACT = 0x00000003,
    D2D1_BLEND_OPERATION_MIN          = 0x00000004,
    D2D1_BLEND_OPERATION_MAX          = 0x00000005,
    D2D1_BLEND_OPERATION_FORCE_DWORD  = 0xffffffff,
}
alias D2D1_BLEND_OPERATION = uint;

enum : uint
{
    D2D1_BLEND_ZERO             = 0x00000001,
    D2D1_BLEND_ONE              = 0x00000002,
    D2D1_BLEND_SRC_COLOR        = 0x00000003,
    D2D1_BLEND_INV_SRC_COLOR    = 0x00000004,
    D2D1_BLEND_SRC_ALPHA        = 0x00000005,
    D2D1_BLEND_INV_SRC_ALPHA    = 0x00000006,
    D2D1_BLEND_DEST_ALPHA       = 0x00000007,
    D2D1_BLEND_INV_DEST_ALPHA   = 0x00000008,
    D2D1_BLEND_DEST_COLOR       = 0x00000009,
    D2D1_BLEND_INV_DEST_COLOR   = 0x0000000a,
    D2D1_BLEND_SRC_ALPHA_SAT    = 0x0000000b,
    D2D1_BLEND_BLEND_FACTOR     = 0x0000000e,
    D2D1_BLEND_INV_BLEND_FACTOR = 0x0000000f,
    D2D1_BLEND_FORCE_DWORD      = 0xffffffff,
}
alias D2D1_BLEND = uint;

enum : uint
{
    D2D1_CHANNEL_DEPTH_DEFAULT     = 0x00000000,
    D2D1_CHANNEL_DEPTH_1           = 0x00000001,
    D2D1_CHANNEL_DEPTH_4           = 0x00000004,
    D2D1_CHANNEL_DEPTH_FORCE_DWORD = 0xffffffff,
}
alias D2D1_CHANNEL_DEPTH = uint;

enum : uint
{
    D2D1_FILTER_MIN_MAG_MIP_POINT               = 0x00000000,
    D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR        = 0x00000001,
    D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT  = 0x00000004,
    D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR        = 0x00000005,
    D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT        = 0x00000010,
    D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000011,
    D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT        = 0x00000014,
    D2D1_FILTER_MIN_MAG_MIP_LINEAR              = 0x00000015,
    D2D1_FILTER_ANISOTROPIC                     = 0x00000055,
    D2D1_FILTER_FORCE_DWORD                     = 0xffffffff,
}
alias D2D1_FILTER = uint;

enum : uint
{
    D2D1_FEATURE_DOUBLES                  = 0x00000000,
    D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS = 0x00000001,
    D2D1_FEATURE_FORCE_DWORD              = 0xffffffff,
}
alias D2D1_FEATURE = uint;

enum : uint
{
    D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING = 0x00000000,
    D2D1_YCBCR_PROP_TRANSFORM_MATRIX   = 0x00000001,
    D2D1_YCBCR_PROP_INTERPOLATION_MODE = 0x00000002,
    D2D1_YCBCR_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_YCBCR_PROP = uint;

enum : uint
{
    D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO        = 0x00000000,
    D2D1_YCBCR_CHROMA_SUBSAMPLING_420         = 0x00000001,
    D2D1_YCBCR_CHROMA_SUBSAMPLING_422         = 0x00000002,
    D2D1_YCBCR_CHROMA_SUBSAMPLING_444         = 0x00000003,
    D2D1_YCBCR_CHROMA_SUBSAMPLING_440         = 0x00000004,
    D2D1_YCBCR_CHROMA_SUBSAMPLING_FORCE_DWORD = 0xffffffff,
}
alias D2D1_YCBCR_CHROMA_SUBSAMPLING = uint;

enum : uint
{
    D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_YCBCR_INTERPOLATION_MODE_LINEAR              = 0x00000001,
    D2D1_YCBCR_INTERPOLATION_MODE_CUBIC               = 0x00000002,
    D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC  = 0x00000005,
    D2D1_YCBCR_INTERPOLATION_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_YCBCR_INTERPOLATION_MODE = uint;

enum : uint
{
    D2D1_CONTRAST_PROP_CONTRAST    = 0x00000000,
    D2D1_CONTRAST_PROP_CLAMP_INPUT = 0x00000001,
    D2D1_CONTRAST_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_CONTRAST_PROP = uint;

enum : uint
{
    D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE = 0x00000000,
    D2D1_RGBTOHUE_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_RGBTOHUE_PROP = uint;

enum : uint
{
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE     = 0x00000000,
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 0x00000001,
    D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_FORCE_DWORD              = 0xffffffff,
}
alias D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE = uint;

enum : uint
{
    D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE = 0x00000000,
    D2D1_HUETORGB_PROP_FORCE_DWORD       = 0xffffffff,
}
alias D2D1_HUETORGB_PROP = uint;

enum : uint
{
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE     = 0x00000000,
    D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = 0x00000001,
    D2D1_HUETORGB_INPUT_COLOR_SPACE_FORCE_DWORD              = 0xffffffff,
}
alias D2D1_HUETORGB_INPUT_COLOR_SPACE = uint;

enum : uint
{
    D2D1_CHROMAKEY_PROP_COLOR        = 0x00000000,
    D2D1_CHROMAKEY_PROP_TOLERANCE    = 0x00000001,
    D2D1_CHROMAKEY_PROP_INVERT_ALPHA = 0x00000002,
    D2D1_CHROMAKEY_PROP_FEATHER      = 0x00000003,
    D2D1_CHROMAKEY_PROP_FORCE_DWORD  = 0xffffffff,
}
alias D2D1_CHROMAKEY_PROP = uint;

enum : uint
{
    D2D1_EMBOSS_PROP_HEIGHT      = 0x00000000,
    D2D1_EMBOSS_PROP_DIRECTION   = 0x00000001,
    D2D1_EMBOSS_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_EMBOSS_PROP = uint;

enum : uint
{
    D2D1_EXPOSURE_PROP_EXPOSURE_VALUE = 0x00000000,
    D2D1_EXPOSURE_PROP_FORCE_DWORD    = 0xffffffff,
}
alias D2D1_EXPOSURE_PROP = uint;

enum : uint
{
    D2D1_POSTERIZE_PROP_RED_VALUE_COUNT   = 0x00000000,
    D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT = 0x00000001,
    D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT  = 0x00000002,
    D2D1_POSTERIZE_PROP_FORCE_DWORD       = 0xffffffff,
}
alias D2D1_POSTERIZE_PROP = uint;

enum : uint
{
    D2D1_SEPIA_PROP_INTENSITY   = 0x00000000,
    D2D1_SEPIA_PROP_ALPHA_MODE  = 0x00000001,
    D2D1_SEPIA_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SEPIA_PROP = uint;

enum : uint
{
    D2D1_SHARPEN_PROP_SHARPNESS   = 0x00000000,
    D2D1_SHARPEN_PROP_THRESHOLD   = 0x00000001,
    D2D1_SHARPEN_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SHARPEN_PROP = uint;

enum : uint
{
    D2D1_STRAIGHTEN_PROP_ANGLE         = 0x00000000,
    D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE = 0x00000001,
    D2D1_STRAIGHTEN_PROP_SCALE_MODE    = 0x00000002,
    D2D1_STRAIGHTEN_PROP_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_STRAIGHTEN_PROP = uint;

enum : uint
{
    D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR    = 0x00000000,
    D2D1_STRAIGHTEN_SCALE_MODE_LINEAR              = 0x00000001,
    D2D1_STRAIGHTEN_SCALE_MODE_CUBIC               = 0x00000002,
    D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR = 0x00000003,
    D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC         = 0x00000004,
    D2D1_STRAIGHTEN_SCALE_MODE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_STRAIGHTEN_SCALE_MODE = uint;

enum : uint
{
    D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE = 0x00000000,
    D2D1_TEMPERATUREANDTINT_PROP_TINT        = 0x00000001,
    D2D1_TEMPERATUREANDTINT_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_TEMPERATUREANDTINT_PROP = uint;

enum : uint
{
    D2D1_VIGNETTE_PROP_COLOR           = 0x00000000,
    D2D1_VIGNETTE_PROP_TRANSITION_SIZE = 0x00000001,
    D2D1_VIGNETTE_PROP_STRENGTH        = 0x00000002,
    D2D1_VIGNETTE_PROP_FORCE_DWORD     = 0xffffffff,
}
alias D2D1_VIGNETTE_PROP = uint;

enum : uint
{
    D2D1_EDGEDETECTION_PROP_STRENGTH      = 0x00000000,
    D2D1_EDGEDETECTION_PROP_BLUR_RADIUS   = 0x00000001,
    D2D1_EDGEDETECTION_PROP_MODE          = 0x00000002,
    D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES = 0x00000003,
    D2D1_EDGEDETECTION_PROP_ALPHA_MODE    = 0x00000004,
    D2D1_EDGEDETECTION_PROP_FORCE_DWORD   = 0xffffffff,
}
alias D2D1_EDGEDETECTION_PROP = uint;

enum : uint
{
    D2D1_EDGEDETECTION_MODE_SOBEL       = 0x00000000,
    D2D1_EDGEDETECTION_MODE_PREWITT     = 0x00000001,
    D2D1_EDGEDETECTION_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_EDGEDETECTION_MODE = uint;

enum : uint
{
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS       = 0x00000000,
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS          = 0x00000001,
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY          = 0x00000002,
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA      = 0x00000003,
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS = 0x00000004,
    D2D1_HIGHLIGHTSANDSHADOWS_PROP_FORCE_DWORD      = 0xffffffff,
}
alias D2D1_HIGHLIGHTSANDSHADOWS_PROP = uint;

enum : uint
{
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR      = 0x00000000,
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB        = 0x00000001,
    D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_FORCE_DWORD = 0xffffffff,
}
alias D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA = uint;

enum : uint
{
    D2D1_LOOKUPTABLE3D_PROP_LUT         = 0x00000000,
    D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE  = 0x00000001,
    D2D1_LOOKUPTABLE3D_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_LOOKUPTABLE3D_PROP = uint;

enum : uint
{
    D2D1_OPACITY_PROP_OPACITY     = 0x00000000,
    D2D1_OPACITY_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_OPACITY_PROP = uint;

enum : uint
{
    D2D1_CROSSFADE_PROP_WEIGHT      = 0x00000000,
    D2D1_CROSSFADE_PROP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_CROSSFADE_PROP = uint;

enum : uint
{
    D2D1_TINT_PROP_COLOR        = 0x00000000,
    D2D1_TINT_PROP_CLAMP_OUTPUT = 0x00000001,
    D2D1_TINT_PROP_FORCE_DWORD  = 0xffffffff,
}
alias D2D1_TINT_PROP = uint;

enum : uint
{
    D2D1_WHITELEVELADJUSTMENT_PROP_INPUT_WHITE_LEVEL  = 0x00000000,
    D2D1_WHITELEVELADJUSTMENT_PROP_OUTPUT_WHITE_LEVEL = 0x00000001,
    D2D1_WHITELEVELADJUSTMENT_PROP_FORCE_DWORD        = 0xffffffff,
}
alias D2D1_WHITELEVELADJUSTMENT_PROP = uint;

enum : uint
{
    D2D1_HDRTONEMAP_PROP_INPUT_MAX_LUMINANCE  = 0x00000000,
    D2D1_HDRTONEMAP_PROP_OUTPUT_MAX_LUMINANCE = 0x00000001,
    D2D1_HDRTONEMAP_PROP_DISPLAY_MODE         = 0x00000002,
    D2D1_HDRTONEMAP_PROP_FORCE_DWORD          = 0xffffffff,
}
alias D2D1_HDRTONEMAP_PROP = uint;

enum : uint
{
    D2D1_HDRTONEMAP_DISPLAY_MODE_SDR         = 0x00000000,
    D2D1_HDRTONEMAP_DISPLAY_MODE_HDR         = 0x00000001,
    D2D1_HDRTONEMAP_DISPLAY_MODE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_HDRTONEMAP_DISPLAY_MODE = uint;

enum : uint
{
    D2D1_RENDERING_PRIORITY_NORMAL      = 0x00000000,
    D2D1_RENDERING_PRIORITY_LOW         = 0x00000001,
    D2D1_RENDERING_PRIORITY_FORCE_DWORD = 0xffffffff,
}
alias D2D1_RENDERING_PRIORITY = uint;

enum : uint
{
    D2D1_SVG_PAINT_TYPE_NONE              = 0x00000000,
    D2D1_SVG_PAINT_TYPE_COLOR             = 0x00000001,
    D2D1_SVG_PAINT_TYPE_CURRENT_COLOR     = 0x00000002,
    D2D1_SVG_PAINT_TYPE_URI               = 0x00000003,
    D2D1_SVG_PAINT_TYPE_URI_NONE          = 0x00000004,
    D2D1_SVG_PAINT_TYPE_URI_COLOR         = 0x00000005,
    D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR = 0x00000006,
    D2D1_SVG_PAINT_TYPE_FORCE_DWORD       = 0xffffffff,
}
alias D2D1_SVG_PAINT_TYPE = uint;

enum : uint
{
    D2D1_SVG_LENGTH_UNITS_NUMBER      = 0x00000000,
    D2D1_SVG_LENGTH_UNITS_PERCENTAGE  = 0x00000001,
    D2D1_SVG_LENGTH_UNITS_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SVG_LENGTH_UNITS = uint;

enum : uint
{
    D2D1_SVG_DISPLAY_INLINE      = 0x00000000,
    D2D1_SVG_DISPLAY_NONE        = 0x00000001,
    D2D1_SVG_DISPLAY_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SVG_DISPLAY = uint;

enum : uint
{
    D2D1_SVG_VISIBILITY_VISIBLE     = 0x00000000,
    D2D1_SVG_VISIBILITY_HIDDEN      = 0x00000001,
    D2D1_SVG_VISIBILITY_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SVG_VISIBILITY = uint;

enum : uint
{
    D2D1_SVG_OVERFLOW_VISIBLE     = 0x00000000,
    D2D1_SVG_OVERFLOW_HIDDEN      = 0x00000001,
    D2D1_SVG_OVERFLOW_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SVG_OVERFLOW = uint;

enum : uint
{
    D2D1_SVG_LINE_CAP_BUTT        = 0x00000000,
    D2D1_SVG_LINE_CAP_SQUARE      = 0x00000001,
    D2D1_SVG_LINE_CAP_ROUND       = 0x00000002,
    D2D1_SVG_LINE_CAP_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SVG_LINE_CAP = uint;

enum : uint
{
    D2D1_SVG_LINE_JOIN_BEVEL       = 0x00000001,
    D2D1_SVG_LINE_JOIN_MITER       = 0x00000003,
    D2D1_SVG_LINE_JOIN_ROUND       = 0x00000002,
    D2D1_SVG_LINE_JOIN_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SVG_LINE_JOIN = uint;

enum : uint
{
    D2D1_SVG_ASPECT_ALIGN_NONE        = 0x00000000,
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN = 0x00000001,
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN = 0x00000002,
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN = 0x00000003,
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID = 0x00000004,
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID = 0x00000005,
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID = 0x00000006,
    D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX = 0x00000007,
    D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX = 0x00000008,
    D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX = 0x00000009,
    D2D1_SVG_ASPECT_ALIGN_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SVG_ASPECT_ALIGN = uint;

enum : uint
{
    D2D1_SVG_ASPECT_SCALING_MEET        = 0x00000000,
    D2D1_SVG_ASPECT_SCALING_SLICE       = 0x00000001,
    D2D1_SVG_ASPECT_SCALING_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SVG_ASPECT_SCALING = uint;

enum : uint
{
    D2D1_SVG_PATH_COMMAND_CLOSE_PATH                = 0x00000000,
    D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE             = 0x00000001,
    D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE             = 0x00000002,
    D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE             = 0x00000003,
    D2D1_SVG_PATH_COMMAND_LINE_RELATIVE             = 0x00000004,
    D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE            = 0x00000005,
    D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE            = 0x00000006,
    D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE        = 0x00000007,
    D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE        = 0x00000008,
    D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE              = 0x00000009,
    D2D1_SVG_PATH_COMMAND_ARC_RELATIVE              = 0x0000000a,
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE       = 0x0000000b,
    D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE       = 0x0000000c,
    D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE         = 0x0000000d,
    D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE         = 0x0000000e,
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE     = 0x0000000f,
    D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE     = 0x00000010,
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE = 0x00000011,
    D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE = 0x00000012,
    D2D1_SVG_PATH_COMMAND_FORCE_DWORD               = 0xffffffff,
}
alias D2D1_SVG_PATH_COMMAND = uint;

enum : uint
{
    D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE   = 0x00000000,
    D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX = 0x00000001,
    D2D1_SVG_UNIT_TYPE_FORCE_DWORD         = 0xffffffff,
}
alias D2D1_SVG_UNIT_TYPE = uint;

enum : uint
{
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG         = 0x00000000,
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID          = 0x00000001,
    D2D1_SVG_ATTRIBUTE_STRING_TYPE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_SVG_ATTRIBUTE_STRING_TYPE = uint;

enum : uint
{
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT                 = 0x00000000,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR                 = 0x00000001,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE             = 0x00000002,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY               = 0x00000003,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW              = 0x00000004,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP              = 0x00000005,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN             = 0x00000006,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY            = 0x00000007,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX                = 0x00000008,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE             = 0x00000009,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE           = 0x0000000a,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO = 0x0000000b,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX               = 0x0000000c,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH                = 0x0000000d,
    D2D1_SVG_ATTRIBUTE_POD_TYPE_FORCE_DWORD           = 0xffffffff,
}
alias D2D1_SVG_ATTRIBUTE_POD_TYPE = uint;

enum : uint
{
    D2D1_INK_NIB_SHAPE_ROUND       = 0x00000000,
    D2D1_INK_NIB_SHAPE_SQUARE      = 0x00000001,
    D2D1_INK_NIB_SHAPE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_INK_NIB_SHAPE = uint;

enum : uint
{
    D2D1_ORIENTATION_DEFAULT                             = 0x00000001,
    D2D1_ORIENTATION_FLIP_HORIZONTAL                     = 0x00000002,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180                 = 0x00000003,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 0x00000004,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL  = 0x00000005,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270                 = 0x00000006,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 0x00000007,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90                  = 0x00000008,
    D2D1_ORIENTATION_FORCE_DWORD                         = 0xffffffff,
}
alias D2D1_ORIENTATION = uint;

enum : uint
{
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE            = 0x00000000,
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE  = 0x00000001,
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND = 0x00000002,
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_FORCE_DWORD     = 0xffffffff,
}
alias D2D1_IMAGE_SOURCE_LOADING_OPTIONS = uint;

enum : uint
{
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE                           = 0x00000000,
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION = 0x00000001,
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_FORCE_DWORD                    = 0xffffffff,
}
alias D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS = uint;

enum : uint
{
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE              = 0x00000000,
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE = 0x00000001,
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_FORCE_DWORD       = 0xffffffff,
}
alias D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS = uint;

enum : uint
{
    D2D1_PATCH_EDGE_MODE_ALIASED          = 0x00000000,
    D2D1_PATCH_EDGE_MODE_ANTIALIASED      = 0x00000001,
    D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED = 0x00000002,
    D2D1_PATCH_EDGE_MODE_FORCE_DWORD      = 0xffffffff,
}
alias D2D1_PATCH_EDGE_MODE = uint;

enum : uint
{
    D2D1_SPRITE_OPTIONS_NONE                      = 0x00000000,
    D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE = 0x00000001,
    D2D1_SPRITE_OPTIONS_FORCE_DWORD               = 0xffffffff,
}
alias D2D1_SPRITE_OPTIONS = uint;

enum : uint
{
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT     = 0x00000000,
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE     = 0x00000001,
    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_FORCE_DWORD = 0xffffffff,
}
alias D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION = uint;

enum : uint
{
    D2D1_GAMMA1_G22         = 0x00000000,
    D2D1_GAMMA1_G10         = 0x00000001,
    D2D1_GAMMA1_G2084       = 0x00000002,
    D2D1_GAMMA1_FORCE_DWORD = 0xffffffff,
}
alias D2D1_GAMMA1 = uint;

enum : uint
{
    D2D1_COLOR_CONTEXT_TYPE_ICC         = 0x00000000,
    D2D1_COLOR_CONTEXT_TYPE_SIMPLE      = 0x00000001,
    D2D1_COLOR_CONTEXT_TYPE_DXGI        = 0x00000002,
    D2D1_COLOR_CONTEXT_TYPE_FORCE_DWORD = 0xffffffff,
}
alias D2D1_COLOR_CONTEXT_TYPE = uint;

// Callbacks

alias PD2D1_EFFECT_FACTORY = HRESULT function(IUnknown* effectImpl);
alias PD2D1_PROPERTY_SET_FUNCTION = HRESULT function(IUnknown effect, char* data, uint dataSize);
alias PD2D1_PROPERTY_GET_FUNCTION = HRESULT function(const(IUnknown) effect, char* data, uint dataSize, 
                                                     uint* actualSize);

// Structs


struct PALETTEENTRY
{
    ubyte peRed;
    ubyte peGreen;
    ubyte peBlue;
    ubyte peFlags;
}

struct D2D1_PIXEL_FORMAT
{
    DXGI_FORMAT     format;
    D2D1_ALPHA_MODE alphaMode;
}

struct D2D_POINT_2U
{
    uint x;
    uint y;
}

struct D2D_POINT_2F
{
    float x;
    float y;
}

struct D2D_VECTOR_2F
{
    float x;
    float y;
}

struct D2D_VECTOR_3F
{
    float x;
    float y;
    float z;
}

struct D2D_VECTOR_4F
{
    float x;
    float y;
    float z;
    float w;
}

struct D2D_RECT_F
{
    float left;
    float top;
    float right;
    float bottom;
}

struct D2D_RECT_U
{
    uint left;
    uint top;
    uint right;
    uint bottom;
}

struct D2D_SIZE_F
{
    float width;
    float height;
}

struct D2D_SIZE_U
{
    uint width;
    uint height;
}

struct D2D_MATRIX_3X2_F
{
    union
    {
        struct
        {
            float m11;
            float m12;
            float m21;
            float m22;
            float dx;
            float dy;
        }
        struct
        {
            float _11;
            float _12;
            float _21;
            float _22;
            float _31;
            float _32;
        }
        float[6] m;
    }
}

struct D2D_MATRIX_4X3_F
{
    union
    {
        struct
        {
            float _11;
            float _12;
            float _13;
            float _21;
            float _22;
            float _23;
            float _31;
            float _32;
            float _33;
            float _41;
            float _42;
            float _43;
        }
        float[12] m;
    }
}

struct D2D_MATRIX_4X4_F
{
    union
    {
        struct
        {
            float _11;
            float _12;
            float _13;
            float _14;
            float _21;
            float _22;
            float _23;
            float _24;
            float _31;
            float _32;
            float _33;
            float _34;
            float _41;
            float _42;
            float _43;
            float _44;
        }
        float[16] m;
    }
}

struct D2D_MATRIX_5X4_F
{
    union
    {
        struct
        {
            float _11;
            float _12;
            float _13;
            float _14;
            float _21;
            float _22;
            float _23;
            float _24;
            float _31;
            float _32;
            float _33;
            float _34;
            float _41;
            float _42;
            float _43;
            float _44;
            float _51;
            float _52;
            float _53;
            float _54;
        }
        float[20] m;
    }
}

struct D2D1_BITMAP_PROPERTIES
{
    D2D1_PIXEL_FORMAT pixelFormat;
    float             dpiX;
    float             dpiY;
}

struct D2D1_GRADIENT_STOP
{
    float     position;
    DXGI_RGBA color;
}

struct D2D1_BRUSH_PROPERTIES
{
    float            opacity;
    D2D_MATRIX_3X2_F transform;
}

struct D2D1_BITMAP_BRUSH_PROPERTIES
{
    D2D1_EXTEND_MODE extendModeX;
    D2D1_EXTEND_MODE extendModeY;
    D2D1_BITMAP_INTERPOLATION_MODE interpolationMode;
}

struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES
{
    D2D_POINT_2F startPoint;
    D2D_POINT_2F endPoint;
}

struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES
{
    D2D_POINT_2F center;
    D2D_POINT_2F gradientOriginOffset;
    float        radiusX;
    float        radiusY;
}

struct D2D1_BEZIER_SEGMENT
{
    D2D_POINT_2F point1;
    D2D_POINT_2F point2;
    D2D_POINT_2F point3;
}

struct D2D1_TRIANGLE
{
    D2D_POINT_2F point1;
    D2D_POINT_2F point2;
    D2D_POINT_2F point3;
}

struct D2D1_ARC_SEGMENT
{
    D2D_POINT_2F         point;
    D2D_SIZE_F           size;
    float                rotationAngle;
    D2D1_SWEEP_DIRECTION sweepDirection;
    D2D1_ARC_SIZE        arcSize;
}

struct D2D1_QUADRATIC_BEZIER_SEGMENT
{
    D2D_POINT_2F point1;
    D2D_POINT_2F point2;
}

struct D2D1_ELLIPSE
{
    D2D_POINT_2F point;
    float        radiusX;
    float        radiusY;
}

struct D2D1_ROUNDED_RECT
{
    D2D_RECT_F rect;
    float      radiusX;
    float      radiusY;
}

struct D2D1_STROKE_STYLE_PROPERTIES
{
    D2D1_CAP_STYLE  startCap;
    D2D1_CAP_STYLE  endCap;
    D2D1_CAP_STYLE  dashCap;
    D2D1_LINE_JOIN  lineJoin;
    float           miterLimit;
    D2D1_DASH_STYLE dashStyle;
    float           dashOffset;
}

struct D2D1_LAYER_PARAMETERS
{
    D2D_RECT_F          contentBounds;
    ID2D1Geometry       geometricMask;
    D2D1_ANTIALIAS_MODE maskAntialiasMode;
    D2D_MATRIX_3X2_F    maskTransform;
    float               opacity;
    ID2D1Brush          opacityBrush;
    D2D1_LAYER_OPTIONS  layerOptions;
}

struct D2D1_RENDER_TARGET_PROPERTIES
{
    D2D1_RENDER_TARGET_TYPE type;
    D2D1_PIXEL_FORMAT  pixelFormat;
    float              dpiX;
    float              dpiY;
    D2D1_RENDER_TARGET_USAGE usage;
    D2D1_FEATURE_LEVEL minLevel;
}

struct D2D1_HWND_RENDER_TARGET_PROPERTIES
{
    HWND                 hwnd;
    D2D_SIZE_U           pixelSize;
    D2D1_PRESENT_OPTIONS presentOptions;
}

struct D2D1_DRAWING_STATE_DESCRIPTION
{
    D2D1_ANTIALIAS_MODE antialiasMode;
    D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
    ulong               tag1;
    ulong               tag2;
    D2D_MATRIX_3X2_F    transform;
}

struct D2D1_FACTORY_OPTIONS
{
    D2D1_DEBUG_LEVEL debugLevel;
}

struct D2D1_BITMAP_PROPERTIES1
{
    D2D1_PIXEL_FORMAT   pixelFormat;
    float               dpiX;
    float               dpiY;
    D2D1_BITMAP_OPTIONS bitmapOptions;
    ID2D1ColorContext   colorContext;
}

struct D2D1_MAPPED_RECT
{
    uint   pitch;
    ubyte* bits;
}

struct D2D1_RENDERING_CONTROLS
{
    D2D1_BUFFER_PRECISION bufferPrecision;
    D2D_SIZE_U tileSize;
}

struct D2D1_EFFECT_INPUT_DESCRIPTION
{
    ID2D1Effect effect;
    uint        inputIndex;
    D2D_RECT_F  inputRectangle;
}

struct D2D1_POINT_DESCRIPTION
{
    D2D_POINT_2F point;
    D2D_POINT_2F unitTangentVector;
    uint         endSegment;
    uint         endFigure;
    float        lengthToEndSegment;
}

struct D2D1_IMAGE_BRUSH_PROPERTIES
{
    D2D_RECT_F       sourceRectangle;
    D2D1_EXTEND_MODE extendModeX;
    D2D1_EXTEND_MODE extendModeY;
    D2D1_INTERPOLATION_MODE interpolationMode;
}

struct D2D1_BITMAP_BRUSH_PROPERTIES1
{
    D2D1_EXTEND_MODE extendModeX;
    D2D1_EXTEND_MODE extendModeY;
    D2D1_INTERPOLATION_MODE interpolationMode;
}

struct D2D1_STROKE_STYLE_PROPERTIES1
{
    D2D1_CAP_STYLE  startCap;
    D2D1_CAP_STYLE  endCap;
    D2D1_CAP_STYLE  dashCap;
    D2D1_LINE_JOIN  lineJoin;
    float           miterLimit;
    D2D1_DASH_STYLE dashStyle;
    float           dashOffset;
    D2D1_STROKE_TRANSFORM_TYPE transformType;
}

struct D2D1_LAYER_PARAMETERS1
{
    D2D_RECT_F          contentBounds;
    ID2D1Geometry       geometricMask;
    D2D1_ANTIALIAS_MODE maskAntialiasMode;
    D2D_MATRIX_3X2_F    maskTransform;
    float               opacity;
    ID2D1Brush          opacityBrush;
    D2D1_LAYER_OPTIONS1 layerOptions;
}

struct D2D1_DRAWING_STATE_DESCRIPTION1
{
    D2D1_ANTIALIAS_MODE  antialiasMode;
    D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
    ulong                tag1;
    ulong                tag2;
    D2D_MATRIX_3X2_F     transform;
    D2D1_PRIMITIVE_BLEND primitiveBlend;
    D2D1_UNIT_MODE       unitMode;
}

struct D2D1_PRINT_CONTROL_PROPERTIES
{
    D2D1_PRINT_FONT_SUBSET_MODE fontSubset;
    float            rasterDPI;
    D2D1_COLOR_SPACE colorSpace;
}

struct D2D1_CREATION_PROPERTIES
{
    D2D1_THREADING_MODE threadingMode;
    D2D1_DEBUG_LEVEL    debugLevel;
    D2D1_DEVICE_CONTEXT_OPTIONS options;
}

struct Matrix4x3F
{
    D2D_MATRIX_4X3_F __AnonymousBase_d2d1_1helper_L45_C31;
}

struct Matrix4x4F
{
    D2D_MATRIX_4X4_F __AnonymousBase_d2d1_1helper_L97_C31;
}

struct Matrix5x4F
{
    D2D_MATRIX_5X4_F __AnonymousBase_d2d1_1helper_L472_C31;
}

struct D2D1_PROPERTY_BINDING
{
    const(wchar)* propertyName;
    PD2D1_PROPERTY_SET_FUNCTION setFunction;
    PD2D1_PROPERTY_GET_FUNCTION getFunction;
}

struct D2D1_RESOURCE_TEXTURE_PROPERTIES
{
    const(uint)*       extents;
    uint               dimensions;
    D2D1_BUFFER_PRECISION bufferPrecision;
    D2D1_CHANNEL_DEPTH channelDepth;
    D2D1_FILTER        filter;
    const(D2D1_EXTEND_MODE)* extendModes;
}

struct D2D1_INPUT_ELEMENT_DESC
{
    const(char)* semanticName;
    uint         semanticIndex;
    DXGI_FORMAT  format;
    uint         inputSlot;
    uint         alignedByteOffset;
}

struct D2D1_VERTEX_BUFFER_PROPERTIES
{
    uint              inputCount;
    D2D1_VERTEX_USAGE usage;
    const(ubyte)*     data;
    uint              byteWidth;
}

struct D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES
{
    const(ubyte)* shaderBufferWithInputSignature;
    uint          shaderBufferSize;
    const(D2D1_INPUT_ELEMENT_DESC)* inputElements;
    uint          elementCount;
    uint          stride;
}

struct D2D1_VERTEX_RANGE
{
    uint startVertex;
    uint vertexCount;
}

struct D2D1_BLEND_DESCRIPTION
{
    D2D1_BLEND           sourceBlend;
    D2D1_BLEND           destinationBlend;
    D2D1_BLEND_OPERATION blendOperation;
    D2D1_BLEND           sourceBlendAlpha;
    D2D1_BLEND           destinationBlendAlpha;
    D2D1_BLEND_OPERATION blendOperationAlpha;
    float[4]             blendFactor;
}

struct D2D1_INPUT_DESCRIPTION
{
    D2D1_FILTER filter;
    uint        levelOfDetailCount;
}

struct D2D1_FEATURE_DATA_DOUBLES
{
    BOOL doublePrecisionFloatShaderOps;
}

struct D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
{
    BOOL computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}

struct D2D1_SVG_LENGTH
{
    float value;
    D2D1_SVG_LENGTH_UNITS units;
}

struct D2D1_SVG_PRESERVE_ASPECT_RATIO
{
    BOOL defer;
    D2D1_SVG_ASPECT_ALIGN align_;
    D2D1_SVG_ASPECT_SCALING meetOrSlice;
}

struct D2D1_SVG_VIEWBOX
{
    float x;
    float y;
    float width;
    float height;
}

struct D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES
{
    D2D1_ORIENTATION orientation;
    float            scaleX;
    float            scaleY;
    D2D1_INTERPOLATION_MODE interpolationMode;
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS options;
}

struct D2D1_INK_POINT
{
    float x;
    float y;
    float radius;
}

struct D2D1_INK_BEZIER_SEGMENT
{
    D2D1_INK_POINT point1;
    D2D1_INK_POINT point2;
    D2D1_INK_POINT point3;
}

struct D2D1_INK_STYLE_PROPERTIES
{
    D2D1_INK_NIB_SHAPE nibShape;
    D2D_MATRIX_3X2_F   nibTransform;
}

struct D2D1_GRADIENT_MESH_PATCH
{
    D2D_POINT_2F         point00;
    D2D_POINT_2F         point01;
    D2D_POINT_2F         point02;
    D2D_POINT_2F         point03;
    D2D_POINT_2F         point10;
    D2D_POINT_2F         point11;
    D2D_POINT_2F         point12;
    D2D_POINT_2F         point13;
    D2D_POINT_2F         point20;
    D2D_POINT_2F         point21;
    D2D_POINT_2F         point22;
    D2D_POINT_2F         point23;
    D2D_POINT_2F         point30;
    D2D_POINT_2F         point31;
    D2D_POINT_2F         point32;
    D2D_POINT_2F         point33;
    DXGI_RGBA            color00;
    DXGI_RGBA            color03;
    DXGI_RGBA            color30;
    DXGI_RGBA            color33;
    D2D1_PATCH_EDGE_MODE topEdgeMode;
    D2D1_PATCH_EDGE_MODE leftEdgeMode;
    D2D1_PATCH_EDGE_MODE bottomEdgeMode;
    D2D1_PATCH_EDGE_MODE rightEdgeMode;
}

struct D2D1_SIMPLE_COLOR_PROFILE
{
    D2D_POINT_2F redPrimary;
    D2D_POINT_2F greenPrimary;
    D2D_POINT_2F bluePrimary;
    D2D_POINT_2F whitePointXZ;
    D2D1_GAMMA1  gamma;
}

struct D3DVSHADERCAPS2_0
{
    uint Caps;
    int  DynamicFlowControlDepth;
    int  NumTemps;
    int  StaticFlowControlDepth;
}

struct D3DPSHADERCAPS2_0
{
    uint Caps;
    int  DynamicFlowControlDepth;
    int  NumTemps;
    int  StaticFlowControlDepth;
    int  NumInstructionSlots;
}

struct D3DCAPS9
{
    D3DDEVTYPE        DeviceType;
    uint              AdapterOrdinal;
    uint              Caps;
    uint              Caps2;
    uint              Caps3;
    uint              PresentationIntervals;
    uint              CursorCaps;
    uint              DevCaps;
    uint              PrimitiveMiscCaps;
    uint              RasterCaps;
    uint              ZCmpCaps;
    uint              SrcBlendCaps;
    uint              DestBlendCaps;
    uint              AlphaCmpCaps;
    uint              ShadeCaps;
    uint              TextureCaps;
    uint              TextureFilterCaps;
    uint              CubeTextureFilterCaps;
    uint              VolumeTextureFilterCaps;
    uint              TextureAddressCaps;
    uint              VolumeTextureAddressCaps;
    uint              LineCaps;
    uint              MaxTextureWidth;
    uint              MaxTextureHeight;
    uint              MaxVolumeExtent;
    uint              MaxTextureRepeat;
    uint              MaxTextureAspectRatio;
    uint              MaxAnisotropy;
    float             MaxVertexW;
    float             GuardBandLeft;
    float             GuardBandTop;
    float             GuardBandRight;
    float             GuardBandBottom;
    float             ExtentsAdjust;
    uint              StencilCaps;
    uint              FVFCaps;
    uint              TextureOpCaps;
    uint              MaxTextureBlendStages;
    uint              MaxSimultaneousTextures;
    uint              VertexProcessingCaps;
    uint              MaxActiveLights;
    uint              MaxUserClipPlanes;
    uint              MaxVertexBlendMatrices;
    uint              MaxVertexBlendMatrixIndex;
    float             MaxPointSize;
    uint              MaxPrimitiveCount;
    uint              MaxVertexIndex;
    uint              MaxStreams;
    uint              MaxStreamStride;
    uint              VertexShaderVersion;
    uint              MaxVertexShaderConst;
    uint              PixelShaderVersion;
    float             PixelShader1xMaxValue;
    uint              DevCaps2;
    float             MaxNpatchTessellationLevel;
    uint              Reserved5;
    uint              MasterAdapterOrdinal;
    uint              AdapterOrdinalInGroup;
    uint              NumberOfAdaptersInGroup;
    uint              DeclTypes;
    uint              NumSimultaneousRTs;
    uint              StretchRectFilterCaps;
    D3DVSHADERCAPS2_0 VS20Caps;
    D3DPSHADERCAPS2_0 PS20Caps;
    uint              VertexTextureFilterCaps;
    uint              MaxVShaderInstructionsExecuted;
    uint              MaxPShaderInstructionsExecuted;
    uint              MaxVertexShader30InstructionSlots;
    uint              MaxPixelShader30InstructionSlots;
}

// Functions

@DllImport("d2d1")
HRESULT D2D1CreateFactory(D2D1_FACTORY_TYPE factoryType, const(GUID)* riid, 
                          const(D2D1_FACTORY_OPTIONS)* pFactoryOptions, void** ppIFactory);

@DllImport("d2d1")
void D2D1MakeRotateMatrix(float angle, D2D_POINT_2F center, D2D_MATRIX_3X2_F* matrix);

@DllImport("d2d1")
void D2D1MakeSkewMatrix(float angleX, float angleY, D2D_POINT_2F center, D2D_MATRIX_3X2_F* matrix);

@DllImport("d2d1")
BOOL D2D1IsMatrixInvertible(const(D2D_MATRIX_3X2_F)* matrix);

@DllImport("d2d1")
BOOL D2D1InvertMatrix(D2D_MATRIX_3X2_F* matrix);

@DllImport("d2d1")
HRESULT D2D1CreateDevice(IDXGIDevice dxgiDevice, const(D2D1_CREATION_PROPERTIES)* creationProperties, 
                         ID2D1Device* d2dDevice);

@DllImport("d2d1")
HRESULT D2D1CreateDeviceContext(IDXGISurface dxgiSurface, const(D2D1_CREATION_PROPERTIES)* creationProperties, 
                                ID2D1DeviceContext* d2dDeviceContext);

@DllImport("d2d1")
DXGI_RGBA D2D1ConvertColorSpace(D2D1_COLOR_SPACE sourceColorSpace, D2D1_COLOR_SPACE destinationColorSpace, 
                                const(DXGI_RGBA)* color);

@DllImport("d2d1")
void D2D1SinCos(float angle, float* s, float* c);

@DllImport("d2d1")
float D2D1Tan(float angle);

@DllImport("d2d1")
float D2D1Vec3Length(float x, float y, float z);

@DllImport("d2d1")
float D2D1ComputeMaximumScaleFactor(const(D2D_MATRIX_3X2_F)* matrix);

@DllImport("d2d1")
void D2D1GetGradientMeshInteriorPointsFromCoonsPatch(const(D2D_POINT_2F)* pPoint0, const(D2D_POINT_2F)* pPoint1, 
                                                     const(D2D_POINT_2F)* pPoint2, const(D2D_POINT_2F)* pPoint3, 
                                                     const(D2D_POINT_2F)* pPoint4, const(D2D_POINT_2F)* pPoint5, 
                                                     const(D2D_POINT_2F)* pPoint6, const(D2D_POINT_2F)* pPoint7, 
                                                     const(D2D_POINT_2F)* pPoint8, const(D2D_POINT_2F)* pPoint9, 
                                                     const(D2D_POINT_2F)* pPoint10, const(D2D_POINT_2F)* pPoint11, 
                                                     D2D_POINT_2F* pTensorPoint11, D2D_POINT_2F* pTensorPoint12, 
                                                     D2D_POINT_2F* pTensorPoint21, D2D_POINT_2F* pTensorPoint22);

@DllImport("d3d9")
IDirect3D9 Direct3DCreate9(uint SDKVersion);

@DllImport("d3d9")
HRESULT Direct3DCreate9Ex(uint SDKVersion, IDirect3D9Ex* param1);


// Interfaces

@GUID("2CD90691-12E2-11DC-9FED-001143A055F9")
interface ID2D1Resource : IUnknown
{
    void GetFactory(ID2D1Factory* factory);
}

@GUID("65019F75-8DA2-497C-B32C-DFA34E48EDE6")
interface ID2D1Image : ID2D1Resource
{
}

@GUID("A2296057-EA42-4099-983B-539FB6505426")
interface ID2D1Bitmap : ID2D1Image
{
    D2D_SIZE_F GetSize();
    D2D_SIZE_U GetPixelSize();
    D2D1_PIXEL_FORMAT GetPixelFormat();
    void    GetDpi(float* dpiX, float* dpiY);
    HRESULT CopyFromBitmap(const(D2D_POINT_2U)* destPoint, ID2D1Bitmap bitmap, const(D2D_RECT_U)* srcRect);
    HRESULT CopyFromRenderTarget(const(D2D_POINT_2U)* destPoint, ID2D1RenderTarget renderTarget, 
                                 const(D2D_RECT_U)* srcRect);
    HRESULT CopyFromMemory(const(D2D_RECT_U)* dstRect, const(void)* srcData, uint pitch);
}

@GUID("2CD906A7-12E2-11DC-9FED-001143A055F9")
interface ID2D1GradientStopCollection : ID2D1Resource
{
    uint GetGradientStopCount();
    void GetGradientStops(char* gradientStops, uint gradientStopsCount);
    D2D1_GAMMA GetColorInterpolationGamma();
    D2D1_EXTEND_MODE GetExtendMode();
}

@GUID("2CD906A8-12E2-11DC-9FED-001143A055F9")
interface ID2D1Brush : ID2D1Resource
{
    void  SetOpacity(float opacity);
    void  SetTransform(const(D2D_MATRIX_3X2_F)* transform);
    float GetOpacity();
    void  GetTransform(D2D_MATRIX_3X2_F* transform);
}

@GUID("2CD906AA-12E2-11DC-9FED-001143A055F9")
interface ID2D1BitmapBrush : ID2D1Brush
{
    void SetExtendModeX(D2D1_EXTEND_MODE extendModeX);
    void SetExtendModeY(D2D1_EXTEND_MODE extendModeY);
    void SetInterpolationMode(D2D1_BITMAP_INTERPOLATION_MODE interpolationMode);
    void SetBitmap(ID2D1Bitmap bitmap);
    D2D1_EXTEND_MODE GetExtendModeX();
    D2D1_EXTEND_MODE GetExtendModeY();
    D2D1_BITMAP_INTERPOLATION_MODE GetInterpolationMode();
    void GetBitmap(ID2D1Bitmap* bitmap);
}

@GUID("2CD906A9-12E2-11DC-9FED-001143A055F9")
interface ID2D1SolidColorBrush : ID2D1Brush
{
    void SetColor(const(DXGI_RGBA)* color);
    DXGI_RGBA GetColor();
}

@GUID("2CD906AB-12E2-11DC-9FED-001143A055F9")
interface ID2D1LinearGradientBrush : ID2D1Brush
{
    void SetStartPoint(D2D_POINT_2F startPoint);
    void SetEndPoint(D2D_POINT_2F endPoint);
    D2D_POINT_2F GetStartPoint();
    D2D_POINT_2F GetEndPoint();
    void GetGradientStopCollection(ID2D1GradientStopCollection* gradientStopCollection);
}

@GUID("2CD906AC-12E2-11DC-9FED-001143A055F9")
interface ID2D1RadialGradientBrush : ID2D1Brush
{
    void  SetCenter(D2D_POINT_2F center);
    void  SetGradientOriginOffset(D2D_POINT_2F gradientOriginOffset);
    void  SetRadiusX(float radiusX);
    void  SetRadiusY(float radiusY);
    D2D_POINT_2F GetCenter();
    D2D_POINT_2F GetGradientOriginOffset();
    float GetRadiusX();
    float GetRadiusY();
    void  GetGradientStopCollection(ID2D1GradientStopCollection* gradientStopCollection);
}

@GUID("2CD9069D-12E2-11DC-9FED-001143A055F9")
interface ID2D1StrokeStyle : ID2D1Resource
{
    D2D1_CAP_STYLE GetStartCap();
    D2D1_CAP_STYLE GetEndCap();
    D2D1_CAP_STYLE GetDashCap();
    float GetMiterLimit();
    D2D1_LINE_JOIN GetLineJoin();
    float GetDashOffset();
    D2D1_DASH_STYLE GetDashStyle();
    uint  GetDashesCount();
    void  GetDashes(char* dashes, uint dashesCount);
}

@GUID("2CD906A1-12E2-11DC-9FED-001143A055F9")
interface ID2D1Geometry : ID2D1Resource
{
    HRESULT GetBounds(const(D2D_MATRIX_3X2_F)* worldTransform, D2D_RECT_F* bounds);
    HRESULT GetWidenedBounds(float strokeWidth, ID2D1StrokeStyle strokeStyle, 
                             const(D2D_MATRIX_3X2_F)* worldTransform, float flatteningTolerance, D2D_RECT_F* bounds);
    HRESULT StrokeContainsPoint(D2D_POINT_2F point, float strokeWidth, ID2D1StrokeStyle strokeStyle, 
                                const(D2D_MATRIX_3X2_F)* worldTransform, float flatteningTolerance, int* contains);
    HRESULT FillContainsPoint(D2D_POINT_2F point, const(D2D_MATRIX_3X2_F)* worldTransform, 
                              float flatteningTolerance, int* contains);
    HRESULT CompareWithGeometry(ID2D1Geometry inputGeometry, const(D2D_MATRIX_3X2_F)* inputGeometryTransform, 
                                float flatteningTolerance, D2D1_GEOMETRY_RELATION* relation);
    HRESULT Simplify(D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, 
                     const(D2D_MATRIX_3X2_F)* worldTransform, float flatteningTolerance, 
                     ID2D1SimplifiedGeometrySink geometrySink);
    HRESULT Tessellate(const(D2D_MATRIX_3X2_F)* worldTransform, float flatteningTolerance, 
                       ID2D1TessellationSink tessellationSink);
    HRESULT CombineWithGeometry(ID2D1Geometry inputGeometry, D2D1_COMBINE_MODE combineMode, 
                                const(D2D_MATRIX_3X2_F)* inputGeometryTransform, float flatteningTolerance, 
                                ID2D1SimplifiedGeometrySink geometrySink);
    HRESULT Outline(const(D2D_MATRIX_3X2_F)* worldTransform, float flatteningTolerance, 
                    ID2D1SimplifiedGeometrySink geometrySink);
    HRESULT ComputeArea(const(D2D_MATRIX_3X2_F)* worldTransform, float flatteningTolerance, float* area);
    HRESULT ComputeLength(const(D2D_MATRIX_3X2_F)* worldTransform, float flatteningTolerance, float* length);
    HRESULT ComputePointAtLength(float length, const(D2D_MATRIX_3X2_F)* worldTransform, float flatteningTolerance, 
                                 D2D_POINT_2F* point, D2D_POINT_2F* unitTangentVector);
    HRESULT Widen(float strokeWidth, ID2D1StrokeStyle strokeStyle, const(D2D_MATRIX_3X2_F)* worldTransform, 
                  float flatteningTolerance, ID2D1SimplifiedGeometrySink geometrySink);
}

@GUID("2CD906A2-12E2-11DC-9FED-001143A055F9")
interface ID2D1RectangleGeometry : ID2D1Geometry
{
    void GetRect(D2D_RECT_F* rect);
}

@GUID("2CD906A3-12E2-11DC-9FED-001143A055F9")
interface ID2D1RoundedRectangleGeometry : ID2D1Geometry
{
    void GetRoundedRect(D2D1_ROUNDED_RECT* roundedRect);
}

@GUID("2CD906A4-12E2-11DC-9FED-001143A055F9")
interface ID2D1EllipseGeometry : ID2D1Geometry
{
    void GetEllipse(D2D1_ELLIPSE* ellipse);
}

@GUID("2CD906A6-12E2-11DC-9FED-001143A055F9")
interface ID2D1GeometryGroup : ID2D1Geometry
{
    D2D1_FILL_MODE GetFillMode();
    uint GetSourceGeometryCount();
    void GetSourceGeometries(char* geometries, uint geometriesCount);
}

@GUID("2CD906BB-12E2-11DC-9FED-001143A055F9")
interface ID2D1TransformedGeometry : ID2D1Geometry
{
    void GetSourceGeometry(ID2D1Geometry* sourceGeometry);
    void GetTransform(D2D_MATRIX_3X2_F* transform);
}

@GUID("2CD9069E-12E2-11DC-9FED-001143A055F9")
interface ID2D1SimplifiedGeometrySink : IUnknown
{
    void    SetFillMode(D2D1_FILL_MODE fillMode);
    void    SetSegmentFlags(D2D1_PATH_SEGMENT vertexFlags);
    void    BeginFigure(D2D_POINT_2F startPoint, D2D1_FIGURE_BEGIN figureBegin);
    void    AddLines(char* points, uint pointsCount);
    void    AddBeziers(char* beziers, uint beziersCount);
    void    EndFigure(D2D1_FIGURE_END figureEnd);
    HRESULT Close();
}

@GUID("2CD9069F-12E2-11DC-9FED-001143A055F9")
interface ID2D1GeometrySink : ID2D1SimplifiedGeometrySink
{
    void AddLine(D2D_POINT_2F point);
    void AddBezier(const(D2D1_BEZIER_SEGMENT)* bezier);
    void AddQuadraticBezier(const(D2D1_QUADRATIC_BEZIER_SEGMENT)* bezier);
    void AddQuadraticBeziers(char* beziers, uint beziersCount);
    void AddArc(const(D2D1_ARC_SEGMENT)* arc);
}

@GUID("2CD906C1-12E2-11DC-9FED-001143A055F9")
interface ID2D1TessellationSink : IUnknown
{
    void    AddTriangles(char* triangles, uint trianglesCount);
    HRESULT Close();
}

@GUID("2CD906A5-12E2-11DC-9FED-001143A055F9")
interface ID2D1PathGeometry : ID2D1Geometry
{
    HRESULT Open(ID2D1GeometrySink* geometrySink);
    HRESULT Stream(ID2D1GeometrySink geometrySink);
    HRESULT GetSegmentCount(uint* count);
    HRESULT GetFigureCount(uint* count);
}

@GUID("2CD906C2-12E2-11DC-9FED-001143A055F9")
interface ID2D1Mesh : ID2D1Resource
{
    HRESULT Open(ID2D1TessellationSink* tessellationSink);
}

@GUID("2CD9069B-12E2-11DC-9FED-001143A055F9")
interface ID2D1Layer : ID2D1Resource
{
    D2D_SIZE_F GetSize();
}

@GUID("28506E39-EBF6-46A1-BB47-FD85565AB957")
interface ID2D1DrawingStateBlock : ID2D1Resource
{
    void GetDescription(D2D1_DRAWING_STATE_DESCRIPTION* stateDescription);
    void SetDescription(const(D2D1_DRAWING_STATE_DESCRIPTION)* stateDescription);
    void SetTextRenderingParams(IDWriteRenderingParams textRenderingParams);
    void GetTextRenderingParams(IDWriteRenderingParams* textRenderingParams);
}

@GUID("2CD90694-12E2-11DC-9FED-001143A055F9")
interface ID2D1RenderTarget : ID2D1Resource
{
    HRESULT CreateBitmap(D2D_SIZE_U size, const(void)* srcData, uint pitch, 
                         const(D2D1_BITMAP_PROPERTIES)* bitmapProperties, ID2D1Bitmap* bitmap);
    HRESULT CreateBitmapFromWicBitmap(IWICBitmapSource wicBitmapSource, 
                                      const(D2D1_BITMAP_PROPERTIES)* bitmapProperties, ID2D1Bitmap* bitmap);
    HRESULT CreateSharedBitmap(const(GUID)* riid, void* data, const(D2D1_BITMAP_PROPERTIES)* bitmapProperties, 
                               ID2D1Bitmap* bitmap);
    HRESULT CreateBitmapBrush(ID2D1Bitmap bitmap, const(D2D1_BITMAP_BRUSH_PROPERTIES)* bitmapBrushProperties, 
                              const(D2D1_BRUSH_PROPERTIES)* brushProperties, ID2D1BitmapBrush* bitmapBrush);
    HRESULT CreateSolidColorBrush(const(DXGI_RGBA)* color, const(D2D1_BRUSH_PROPERTIES)* brushProperties, 
                                  ID2D1SolidColorBrush* solidColorBrush);
    HRESULT CreateGradientStopCollection(char* gradientStops, uint gradientStopsCount, 
                                         D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, 
                                         ID2D1GradientStopCollection* gradientStopCollection);
    HRESULT CreateLinearGradientBrush(const(D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES)* linearGradientBrushProperties, 
                                      const(D2D1_BRUSH_PROPERTIES)* brushProperties, 
                                      ID2D1GradientStopCollection gradientStopCollection, 
                                      ID2D1LinearGradientBrush* linearGradientBrush);
    HRESULT CreateRadialGradientBrush(const(D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES)* radialGradientBrushProperties, 
                                      const(D2D1_BRUSH_PROPERTIES)* brushProperties, 
                                      ID2D1GradientStopCollection gradientStopCollection, 
                                      ID2D1RadialGradientBrush* radialGradientBrush);
    HRESULT CreateCompatibleRenderTarget(const(D2D_SIZE_F)* desiredSize, const(D2D_SIZE_U)* desiredPixelSize, 
                                         const(D2D1_PIXEL_FORMAT)* desiredFormat, 
                                         D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, 
                                         ID2D1BitmapRenderTarget* bitmapRenderTarget);
    HRESULT CreateLayer(const(D2D_SIZE_F)* size, ID2D1Layer* layer);
    HRESULT CreateMesh(ID2D1Mesh* mesh);
    void    DrawLine(D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush brush, float strokeWidth, 
                     ID2D1StrokeStyle strokeStyle);
    void    DrawRectangle(const(D2D_RECT_F)* rect, ID2D1Brush brush, float strokeWidth, 
                          ID2D1StrokeStyle strokeStyle);
    void    FillRectangle(const(D2D_RECT_F)* rect, ID2D1Brush brush);
    void    DrawRoundedRectangle(const(D2D1_ROUNDED_RECT)* roundedRect, ID2D1Brush brush, float strokeWidth, 
                                 ID2D1StrokeStyle strokeStyle);
    void    FillRoundedRectangle(const(D2D1_ROUNDED_RECT)* roundedRect, ID2D1Brush brush);
    void    DrawEllipse(const(D2D1_ELLIPSE)* ellipse, ID2D1Brush brush, float strokeWidth, 
                        ID2D1StrokeStyle strokeStyle);
    void    FillEllipse(const(D2D1_ELLIPSE)* ellipse, ID2D1Brush brush);
    void    DrawGeometry(ID2D1Geometry geometry, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    void    FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush);
    void    FillMesh(ID2D1Mesh mesh, ID2D1Brush brush);
    void    FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, D2D1_OPACITY_MASK_CONTENT content, 
                            const(D2D_RECT_F)* destinationRectangle, const(D2D_RECT_F)* sourceRectangle);
    void    DrawBitmap(ID2D1Bitmap bitmap, const(D2D_RECT_F)* destinationRectangle, float opacity, 
                       D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, const(D2D_RECT_F)* sourceRectangle);
    void    DrawTextA(const(wchar)* string, uint stringLength, IDWriteTextFormat textFormat, 
                      const(D2D_RECT_F)* layoutRect, ID2D1Brush defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, 
                      DWRITE_MEASURING_MODE measuringMode);
    void    DrawTextLayout(D2D_POINT_2F origin, IDWriteTextLayout textLayout, ID2D1Brush defaultFillBrush, 
                           D2D1_DRAW_TEXT_OPTIONS options);
    void    DrawGlyphRun(D2D_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, 
                         ID2D1Brush foregroundBrush, DWRITE_MEASURING_MODE measuringMode);
    void    SetTransform(const(D2D_MATRIX_3X2_F)* transform);
    void    GetTransform(D2D_MATRIX_3X2_F* transform);
    void    SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);
    D2D1_ANTIALIAS_MODE GetAntialiasMode();
    void    SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);
    D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode();
    void    SetTextRenderingParams(IDWriteRenderingParams textRenderingParams);
    void    GetTextRenderingParams(IDWriteRenderingParams* textRenderingParams);
    void    SetTags(ulong tag1, ulong tag2);
    void    GetTags(ulong* tag1, ulong* tag2);
    void    PushLayer(const(D2D1_LAYER_PARAMETERS)* layerParameters, ID2D1Layer layer);
    void    PopLayer();
    HRESULT Flush(ulong* tag1, ulong* tag2);
    void    SaveDrawingState(ID2D1DrawingStateBlock drawingStateBlock);
    void    RestoreDrawingState(ID2D1DrawingStateBlock drawingStateBlock);
    void    PushAxisAlignedClip(const(D2D_RECT_F)* clipRect, D2D1_ANTIALIAS_MODE antialiasMode);
    void    PopAxisAlignedClip();
    void    Clear(const(DXGI_RGBA)* clearColor);
    void    BeginDraw();
    HRESULT EndDraw(ulong* tag1, ulong* tag2);
    D2D1_PIXEL_FORMAT GetPixelFormat();
    void    SetDpi(float dpiX, float dpiY);
    void    GetDpi(float* dpiX, float* dpiY);
    D2D_SIZE_F GetSize();
    D2D_SIZE_U GetPixelSize();
    uint    GetMaximumBitmapSize();
    BOOL    IsSupported(const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties);
}

@GUID("2CD90695-12E2-11DC-9FED-001143A055F9")
interface ID2D1BitmapRenderTarget : ID2D1RenderTarget
{
    HRESULT GetBitmap(ID2D1Bitmap* bitmap);
}

@GUID("2CD90698-12E2-11DC-9FED-001143A055F9")
interface ID2D1HwndRenderTarget : ID2D1RenderTarget
{
    D2D1_WINDOW_STATE CheckWindowState();
    HRESULT Resize(const(D2D_SIZE_U)* pixelSize);
    HWND    GetHwnd();
}

@GUID("E0DB51C3-6F77-4BAE-B3D5-E47509B35838")
interface ID2D1GdiInteropRenderTarget : IUnknown
{
    HRESULT GetDC(D2D1_DC_INITIALIZE_MODE mode, HDC* hdc);
    HRESULT ReleaseDC(const(RECT)* update);
}

@GUID("1C51BC64-DE61-46FD-9899-63A5D8F03950")
interface ID2D1DCRenderTarget : ID2D1RenderTarget
{
    HRESULT BindDC(const(ptrdiff_t) hDC, const(RECT)* pSubRect);
}

@GUID("06152247-6F50-465A-9245-118BFD3B6007")
interface ID2D1Factory : IUnknown
{
    HRESULT ReloadSystemMetrics();
    void    GetDesktopDpi(float* dpiX, float* dpiY);
    HRESULT CreateRectangleGeometry(const(D2D_RECT_F)* rectangle, ID2D1RectangleGeometry* rectangleGeometry);
    HRESULT CreateRoundedRectangleGeometry(const(D2D1_ROUNDED_RECT)* roundedRectangle, 
                                           ID2D1RoundedRectangleGeometry* roundedRectangleGeometry);
    HRESULT CreateEllipseGeometry(const(D2D1_ELLIPSE)* ellipse, ID2D1EllipseGeometry* ellipseGeometry);
    HRESULT CreateGeometryGroup(D2D1_FILL_MODE fillMode, char* geometries, uint geometriesCount, 
                                ID2D1GeometryGroup* geometryGroup);
    HRESULT CreateTransformedGeometry(ID2D1Geometry sourceGeometry, const(D2D_MATRIX_3X2_F)* transform, 
                                      ID2D1TransformedGeometry* transformedGeometry);
    HRESULT CreatePathGeometry(ID2D1PathGeometry* pathGeometry);
    HRESULT CreateStrokeStyle(const(D2D1_STROKE_STYLE_PROPERTIES)* strokeStyleProperties, char* dashes, 
                              uint dashesCount, ID2D1StrokeStyle* strokeStyle);
    HRESULT CreateDrawingStateBlock(const(D2D1_DRAWING_STATE_DESCRIPTION)* drawingStateDescription, 
                                    IDWriteRenderingParams textRenderingParams, 
                                    ID2D1DrawingStateBlock* drawingStateBlock);
    HRESULT CreateWicBitmapRenderTarget(IWICBitmap target, 
                                        const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties, 
                                        ID2D1RenderTarget* renderTarget);
    HRESULT CreateHwndRenderTarget(const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties, 
                                   const(D2D1_HWND_RENDER_TARGET_PROPERTIES)* hwndRenderTargetProperties, 
                                   ID2D1HwndRenderTarget* hwndRenderTarget);
    HRESULT CreateDxgiSurfaceRenderTarget(IDXGISurface dxgiSurface, 
                                          const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties, 
                                          ID2D1RenderTarget* renderTarget);
    HRESULT CreateDCRenderTarget(const(D2D1_RENDER_TARGET_PROPERTIES)* renderTargetProperties, 
                                 ID2D1DCRenderTarget* dcRenderTarget);
}

@GUID("82237326-8111-4F7C-BCF4-B5C1175564FE")
interface ID2D1GdiMetafileSink : IUnknown
{
    HRESULT ProcessRecord(uint recordType, const(void)* recordData, uint recordDataSize);
}

@GUID("2F543DC3-CFC1-4211-864F-CFD91C6F3395")
interface ID2D1GdiMetafile : ID2D1Resource
{
    HRESULT Stream(ID2D1GdiMetafileSink sink);
    HRESULT GetBounds(D2D_RECT_F* bounds);
}

@GUID("54D7898A-A061-40A7-BEC7-E465BCBA2C4F")
interface ID2D1CommandSink : IUnknown
{
    HRESULT BeginDraw();
    HRESULT EndDraw();
    HRESULT SetAntialiasMode(D2D1_ANTIALIAS_MODE antialiasMode);
    HRESULT SetTags(ulong tag1, ulong tag2);
    HRESULT SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);
    HRESULT SetTextRenderingParams(IDWriteRenderingParams textRenderingParams);
    HRESULT SetTransform(const(D2D_MATRIX_3X2_F)* transform);
    HRESULT SetPrimitiveBlend(D2D1_PRIMITIVE_BLEND primitiveBlend);
    HRESULT SetUnitMode(D2D1_UNIT_MODE unitMode);
    HRESULT Clear(const(DXGI_RGBA)* color);
    HRESULT DrawGlyphRun(D2D_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, 
                         const(DWRITE_GLYPH_RUN_DESCRIPTION)* glyphRunDescription, ID2D1Brush foregroundBrush, 
                         DWRITE_MEASURING_MODE measuringMode);
    HRESULT DrawLine(D2D_POINT_2F point0, D2D_POINT_2F point1, ID2D1Brush brush, float strokeWidth, 
                     ID2D1StrokeStyle strokeStyle);
    HRESULT DrawGeometry(ID2D1Geometry geometry, ID2D1Brush brush, float strokeWidth, ID2D1StrokeStyle strokeStyle);
    HRESULT DrawRectangle(const(D2D_RECT_F)* rect, ID2D1Brush brush, float strokeWidth, 
                          ID2D1StrokeStyle strokeStyle);
    HRESULT DrawBitmap(ID2D1Bitmap bitmap, const(D2D_RECT_F)* destinationRectangle, float opacity, 
                       D2D1_INTERPOLATION_MODE interpolationMode, const(D2D_RECT_F)* sourceRectangle, 
                       const(D2D_MATRIX_4X4_F)* perspectiveTransform);
    HRESULT DrawImage(ID2D1Image image, const(D2D_POINT_2F)* targetOffset, const(D2D_RECT_F)* imageRectangle, 
                      D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);
    HRESULT DrawGdiMetafile(ID2D1GdiMetafile gdiMetafile, const(D2D_POINT_2F)* targetOffset);
    HRESULT FillMesh(ID2D1Mesh mesh, ID2D1Brush brush);
    HRESULT FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, const(D2D_RECT_F)* destinationRectangle, 
                            const(D2D_RECT_F)* sourceRectangle);
    HRESULT FillGeometry(ID2D1Geometry geometry, ID2D1Brush brush, ID2D1Brush opacityBrush);
    HRESULT FillRectangle(const(D2D_RECT_F)* rect, ID2D1Brush brush);
    HRESULT PushAxisAlignedClip(const(D2D_RECT_F)* clipRect, D2D1_ANTIALIAS_MODE antialiasMode);
    HRESULT PushLayer(const(D2D1_LAYER_PARAMETERS1)* layerParameters1, ID2D1Layer layer);
    HRESULT PopAxisAlignedClip();
    HRESULT PopLayer();
}

@GUID("B4F34A19-2383-4D76-94F6-EC343657C3DC")
interface ID2D1CommandList : ID2D1Image
{
    HRESULT Stream(ID2D1CommandSink sink);
    HRESULT Close();
}

@GUID("2C1D867D-C290-41C8-AE7E-34A98702E9A5")
interface ID2D1PrintControl : IUnknown
{
    HRESULT AddPage(ID2D1CommandList commandList, D2D_SIZE_F pageSize, IStream pagePrintTicketStream, ulong* tag1, 
                    ulong* tag2);
    HRESULT Close();
}

@GUID("FE9E984D-3F95-407C-B5DB-CB94D4E8F87C")
interface ID2D1ImageBrush : ID2D1Brush
{
    void SetImage(ID2D1Image image);
    void SetExtendModeX(D2D1_EXTEND_MODE extendModeX);
    void SetExtendModeY(D2D1_EXTEND_MODE extendModeY);
    void SetInterpolationMode(D2D1_INTERPOLATION_MODE interpolationMode);
    void SetSourceRectangle(const(D2D_RECT_F)* sourceRectangle);
    void GetImage(ID2D1Image* image);
    D2D1_EXTEND_MODE GetExtendModeX();
    D2D1_EXTEND_MODE GetExtendModeY();
    D2D1_INTERPOLATION_MODE GetInterpolationMode();
    void GetSourceRectangle(D2D_RECT_F* sourceRectangle);
}

@GUID("41343A53-E41A-49A2-91CD-21793BBB62E5")
interface ID2D1BitmapBrush1 : ID2D1BitmapBrush
{
    void SetInterpolationMode1(D2D1_INTERPOLATION_MODE interpolationMode);
    D2D1_INTERPOLATION_MODE GetInterpolationMode1();
}

@GUID("10A72A66-E91C-43F4-993F-DDF4B82B0B4A")
interface ID2D1StrokeStyle1 : ID2D1StrokeStyle
{
    D2D1_STROKE_TRANSFORM_TYPE GetStrokeTransformType();
}

@GUID("62BAA2D2-AB54-41B7-B872-787E0106A421")
interface ID2D1PathGeometry1 : ID2D1PathGeometry
{
    HRESULT ComputePointAndSegmentAtLength(float length, uint startSegment, 
                                           const(D2D_MATRIX_3X2_F)* worldTransform, float flatteningTolerance, 
                                           D2D1_POINT_DESCRIPTION* pointDescription);
}

@GUID("483473D7-CD46-4F9D-9D3A-3112AA80159D")
interface ID2D1Properties : IUnknown
{
    uint    GetPropertyCount();
    HRESULT GetPropertyName(uint index, const(wchar)* name, uint nameCount);
    uint    GetPropertyNameLength(uint index);
    D2D1_PROPERTY_TYPE GetType(uint index);
    uint    GetPropertyIndex(const(wchar)* name);
    HRESULT SetValueByName(const(wchar)* name, D2D1_PROPERTY_TYPE type, char* data, uint dataSize);
    HRESULT SetValue(uint index, D2D1_PROPERTY_TYPE type, char* data, uint dataSize);
    HRESULT GetValueByName(const(wchar)* name, D2D1_PROPERTY_TYPE type, char* data, uint dataSize);
    HRESULT GetValue(uint index, D2D1_PROPERTY_TYPE type, char* data, uint dataSize);
    uint    GetValueSize(uint index);
    HRESULT GetSubProperties(uint index, ID2D1Properties* subProperties);
}

@GUID("28211A43-7D89-476F-8181-2D6159B220AD")
interface ID2D1Effect : ID2D1Properties
{
    void    SetInput(uint index, ID2D1Image input, BOOL invalidate);
    HRESULT SetInputCount(uint inputCount);
    void    GetInput(uint index, ID2D1Image* input);
    uint    GetInputCount();
    void    GetOutput(ID2D1Image* outputImage);
}

@GUID("A898A84C-3873-4588-B08B-EBBF978DF041")
interface ID2D1Bitmap1 : ID2D1Bitmap
{
    void    GetColorContext(ID2D1ColorContext* colorContext);
    D2D1_BITMAP_OPTIONS GetOptions();
    HRESULT GetSurface(IDXGISurface* dxgiSurface);
    HRESULT Map(D2D1_MAP_OPTIONS options, D2D1_MAPPED_RECT* mappedRect);
    HRESULT Unmap();
}

@GUID("1C4820BB-5771-4518-A581-2FE4DD0EC657")
interface ID2D1ColorContext : ID2D1Resource
{
    D2D1_COLOR_SPACE GetColorSpace();
    uint    GetProfileSize();
    HRESULT GetProfile(char* profile, uint profileSize);
}

@GUID("AE1572F4-5DD0-4777-998B-9279472AE63B")
interface ID2D1GradientStopCollection1 : ID2D1GradientStopCollection
{
    void GetGradientStops1(char* gradientStops, uint gradientStopsCount);
    D2D1_COLOR_SPACE GetPreInterpolationSpace();
    D2D1_COLOR_SPACE GetPostInterpolationSpace();
    D2D1_BUFFER_PRECISION GetBufferPrecision();
    D2D1_COLOR_INTERPOLATION_MODE GetColorInterpolationMode();
}

@GUID("689F1F85-C72E-4E33-8F19-85754EFD5ACE")
interface ID2D1DrawingStateBlock1 : ID2D1DrawingStateBlock
{
    void GetDescription(D2D1_DRAWING_STATE_DESCRIPTION1* stateDescription);
    void SetDescription(const(D2D1_DRAWING_STATE_DESCRIPTION1)* stateDescription);
}

@GUID("E8F7FE7A-191C-466D-AD95-975678BDA998")
interface ID2D1DeviceContext : ID2D1RenderTarget
{
    HRESULT CreateBitmap(D2D_SIZE_U size, const(void)* sourceData, uint pitch, 
                         const(D2D1_BITMAP_PROPERTIES1)* bitmapProperties, ID2D1Bitmap1* bitmap);
    HRESULT CreateBitmapFromWicBitmap(IWICBitmapSource wicBitmapSource, 
                                      const(D2D1_BITMAP_PROPERTIES1)* bitmapProperties, ID2D1Bitmap1* bitmap);
    HRESULT CreateColorContext(D2D1_COLOR_SPACE space, char* profile, uint profileSize, 
                               ID2D1ColorContext* colorContext);
    HRESULT CreateColorContextFromFilename(const(wchar)* filename, ID2D1ColorContext* colorContext);
    HRESULT CreateColorContextFromWicColorContext(IWICColorContext wicColorContext, 
                                                  ID2D1ColorContext* colorContext);
    HRESULT CreateBitmapFromDxgiSurface(IDXGISurface surface, const(D2D1_BITMAP_PROPERTIES1)* bitmapProperties, 
                                        ID2D1Bitmap1* bitmap);
    HRESULT CreateEffect(const(GUID)* effectId, ID2D1Effect* effect);
    HRESULT CreateGradientStopCollection(char* straightAlphaGradientStops, uint straightAlphaGradientStopsCount, 
                                         D2D1_COLOR_SPACE preInterpolationSpace, 
                                         D2D1_COLOR_SPACE postInterpolationSpace, 
                                         D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, 
                                         D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, 
                                         ID2D1GradientStopCollection1* gradientStopCollection1);
    HRESULT CreateImageBrush(ID2D1Image image, const(D2D1_IMAGE_BRUSH_PROPERTIES)* imageBrushProperties, 
                             const(D2D1_BRUSH_PROPERTIES)* brushProperties, ID2D1ImageBrush* imageBrush);
    HRESULT CreateBitmapBrush(ID2D1Bitmap bitmap, const(D2D1_BITMAP_BRUSH_PROPERTIES1)* bitmapBrushProperties, 
                              const(D2D1_BRUSH_PROPERTIES)* brushProperties, ID2D1BitmapBrush1* bitmapBrush);
    HRESULT CreateCommandList(ID2D1CommandList* commandList);
    BOOL    IsDxgiFormatSupported(DXGI_FORMAT format);
    BOOL    IsBufferPrecisionSupported(D2D1_BUFFER_PRECISION bufferPrecision);
    HRESULT GetImageLocalBounds(ID2D1Image image, D2D_RECT_F* localBounds);
    HRESULT GetImageWorldBounds(ID2D1Image image, D2D_RECT_F* worldBounds);
    HRESULT GetGlyphRunWorldBounds(D2D_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, 
                                   DWRITE_MEASURING_MODE measuringMode, D2D_RECT_F* bounds);
    void    GetDevice(ID2D1Device* device);
    void    SetTarget(ID2D1Image image);
    void    GetTarget(ID2D1Image* image);
    void    SetRenderingControls(const(D2D1_RENDERING_CONTROLS)* renderingControls);
    void    GetRenderingControls(D2D1_RENDERING_CONTROLS* renderingControls);
    void    SetPrimitiveBlend(D2D1_PRIMITIVE_BLEND primitiveBlend);
    D2D1_PRIMITIVE_BLEND GetPrimitiveBlend();
    void    SetUnitMode(D2D1_UNIT_MODE unitMode);
    D2D1_UNIT_MODE GetUnitMode();
    void    DrawGlyphRun(D2D_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, 
                         const(DWRITE_GLYPH_RUN_DESCRIPTION)* glyphRunDescription, ID2D1Brush foregroundBrush, 
                         DWRITE_MEASURING_MODE measuringMode);
    void    DrawImage(ID2D1Image image, const(D2D_POINT_2F)* targetOffset, const(D2D_RECT_F)* imageRectangle, 
                      D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);
    void    DrawGdiMetafile(ID2D1GdiMetafile gdiMetafile, const(D2D_POINT_2F)* targetOffset);
    void    DrawBitmap(ID2D1Bitmap bitmap, const(D2D_RECT_F)* destinationRectangle, float opacity, 
                       D2D1_INTERPOLATION_MODE interpolationMode, const(D2D_RECT_F)* sourceRectangle, 
                       const(D2D_MATRIX_4X4_F)* perspectiveTransform);
    void    PushLayer(const(D2D1_LAYER_PARAMETERS1)* layerParameters, ID2D1Layer layer);
    HRESULT InvalidateEffectInputRectangle(ID2D1Effect effect, uint input, const(D2D_RECT_F)* inputRectangle);
    HRESULT GetEffectInvalidRectangleCount(ID2D1Effect effect, uint* rectangleCount);
    HRESULT GetEffectInvalidRectangles(ID2D1Effect effect, char* rectangles, uint rectanglesCount);
    HRESULT GetEffectRequiredInputRectangles(ID2D1Effect renderEffect, const(D2D_RECT_F)* renderImageRectangle, 
                                             char* inputDescriptions, char* requiredInputRects, uint inputCount);
    void    FillOpacityMask(ID2D1Bitmap opacityMask, ID2D1Brush brush, const(D2D_RECT_F)* destinationRectangle, 
                            const(D2D_RECT_F)* sourceRectangle);
}

@GUID("47DD575D-AC05-4CDD-8049-9B02CD16F44C")
interface ID2D1Device : ID2D1Resource
{
    HRESULT CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext* deviceContext);
    HRESULT CreatePrintControl(IWICImagingFactory wicFactory, IPrintDocumentPackageTarget documentTarget, 
                               const(D2D1_PRINT_CONTROL_PROPERTIES)* printControlProperties, 
                               ID2D1PrintControl* printControl);
    void    SetMaximumTextureMemory(ulong maximumInBytes);
    ulong   GetMaximumTextureMemory();
    void    ClearResources(uint millisecondsSinceUse);
}

@GUID("BB12D362-DAEE-4B9A-AA1D-14BA401CFA1F")
interface ID2D1Factory1 : ID2D1Factory
{
    HRESULT CreateDevice(IDXGIDevice dxgiDevice, ID2D1Device* d2dDevice);
    HRESULT CreateStrokeStyle(const(D2D1_STROKE_STYLE_PROPERTIES1)* strokeStyleProperties, char* dashes, 
                              uint dashesCount, ID2D1StrokeStyle1* strokeStyle);
    HRESULT CreatePathGeometry(ID2D1PathGeometry1* pathGeometry);
    HRESULT CreateDrawingStateBlock(const(D2D1_DRAWING_STATE_DESCRIPTION1)* drawingStateDescription, 
                                    IDWriteRenderingParams textRenderingParams, 
                                    ID2D1DrawingStateBlock1* drawingStateBlock);
    HRESULT CreateGdiMetafile(IStream metafileStream, ID2D1GdiMetafile* metafile);
    HRESULT RegisterEffectFromStream(const(GUID)* classId, IStream propertyXml, char* bindings, uint bindingsCount, 
                                     const(ptrdiff_t) effectFactory);
    HRESULT RegisterEffectFromString(const(GUID)* classId, const(wchar)* propertyXml, char* bindings, 
                                     uint bindingsCount, const(ptrdiff_t) effectFactory);
    HRESULT UnregisterEffect(const(GUID)* classId);
    HRESULT GetRegisteredEffects(char* effects, uint effectsCount, uint* effectsReturned, uint* effectsRegistered);
    HRESULT GetEffectProperties(const(GUID)* effectId, ID2D1Properties* properties);
}

@GUID("31E6E7BC-E0FF-4D46-8C64-A0A8C41C15D3")
interface ID2D1Multithread : IUnknown
{
    BOOL GetMultithreadProtected();
    void Enter();
    void Leave();
}

@GUID("9B8B1336-00A5-4668-92B7-CED5D8BF9B7B")
interface ID2D1VertexBuffer : IUnknown
{
    HRESULT Map(ubyte** data, uint bufferSize);
    HRESULT Unmap();
}

@GUID("688D15C3-02B0-438D-B13A-D1B44C32C39A")
interface ID2D1ResourceTexture : IUnknown
{
    HRESULT Update(char* minimumExtents, char* maximimumExtents, char* strides, uint dimensions, char* data, 
                   uint dataCount);
}

@GUID("519AE1BD-D19A-420D-B849-364F594776B7")
interface ID2D1RenderInfo : IUnknown
{
    HRESULT SetInputDescription(uint inputIndex, D2D1_INPUT_DESCRIPTION inputDescription);
    HRESULT SetOutputBuffer(D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth);
    void    SetCached(BOOL isCached);
    void    SetInstructionCountHint(uint instructionCount);
}

@GUID("693CE632-7F2F-45DE-93FE-18D88B37AA21")
interface ID2D1DrawInfo : ID2D1RenderInfo
{
    HRESULT SetPixelShaderConstantBuffer(char* buffer, uint bufferCount);
    HRESULT SetResourceTexture(uint textureIndex, ID2D1ResourceTexture resourceTexture);
    HRESULT SetVertexShaderConstantBuffer(char* buffer, uint bufferCount);
    HRESULT SetPixelShader(const(GUID)* shaderId, D2D1_PIXEL_OPTIONS pixelOptions);
    HRESULT SetVertexProcessing(ID2D1VertexBuffer vertexBuffer, D2D1_VERTEX_OPTIONS vertexOptions, 
                                const(D2D1_BLEND_DESCRIPTION)* blendDescription, 
                                const(D2D1_VERTEX_RANGE)* vertexRange, const(GUID)* vertexShader);
}

@GUID("5598B14B-9FD7-48B7-9BDB-8F0964EB38BC")
interface ID2D1ComputeInfo : ID2D1RenderInfo
{
    HRESULT SetComputeShaderConstantBuffer(char* buffer, uint bufferCount);
    HRESULT SetComputeShader(const(GUID)* shaderId);
    HRESULT SetResourceTexture(uint textureIndex, ID2D1ResourceTexture resourceTexture);
}

@GUID("B2EFE1E7-729F-4102-949F-505FA21BF666")
interface ID2D1TransformNode : IUnknown
{
    uint GetInputCount();
}

@GUID("13D29038-C3E6-4034-9081-13B53A417992")
interface ID2D1TransformGraph : IUnknown
{
    uint    GetInputCount();
    HRESULT SetSingleTransformNode(ID2D1TransformNode node);
    HRESULT AddNode(ID2D1TransformNode node);
    HRESULT RemoveNode(ID2D1TransformNode node);
    HRESULT SetOutputNode(ID2D1TransformNode node);
    HRESULT ConnectNode(ID2D1TransformNode fromNode, ID2D1TransformNode toNode, uint toNodeInputIndex);
    HRESULT ConnectToEffectInput(uint toEffectInputIndex, ID2D1TransformNode node, uint toNodeInputIndex);
    void    Clear();
    HRESULT SetPassthroughGraph(uint effectInputIndex);
}

@GUID("EF1A287D-342A-4F76-8FDB-DA0D6EA9F92B")
interface ID2D1Transform : ID2D1TransformNode
{
    HRESULT MapOutputRectToInputRects(const(RECT)* outputRect, char* inputRects, uint inputRectsCount);
    HRESULT MapInputRectsToOutputRect(char* inputRects, char* inputOpaqueSubRects, uint inputRectCount, 
                                      RECT* outputRect, RECT* outputOpaqueSubRect);
    HRESULT MapInvalidRect(uint inputIndex, RECT invalidInputRect, RECT* invalidOutputRect);
}

@GUID("36BFDCB6-9739-435D-A30D-A653BEFF6A6F")
interface ID2D1DrawTransform : ID2D1Transform
{
    HRESULT SetDrawInfo(ID2D1DrawInfo drawInfo);
}

@GUID("0D85573C-01E3-4F7D-BFD9-0D60608BF3C3")
interface ID2D1ComputeTransform : ID2D1Transform
{
    HRESULT SetComputeInfo(ID2D1ComputeInfo computeInfo);
    HRESULT CalculateThreadgroups(const(RECT)* outputRect, uint* dimensionX, uint* dimensionY, uint* dimensionZ);
}

@GUID("0359DC30-95E6-4568-9055-27720D130E93")
interface ID2D1AnalysisTransform : IUnknown
{
    HRESULT ProcessAnalysisResults(char* analysisData, uint analysisDataCount);
}

@GUID("DB1800DD-0C34-4CF9-BE90-31CC0A5653E1")
interface ID2D1SourceTransform : ID2D1Transform
{
    HRESULT SetRenderInfo(ID2D1RenderInfo renderInfo);
    HRESULT Draw(ID2D1Bitmap1 target, const(RECT)* drawRect, D2D_POINT_2U targetOrigin);
}

@GUID("1A799D8A-69F7-4E4C-9FED-437CCC6684CC")
interface ID2D1ConcreteTransform : ID2D1TransformNode
{
    HRESULT SetOutputBuffer(D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth);
    void    SetCached(BOOL isCached);
}

@GUID("63AC0B32-BA44-450F-8806-7F4CA1FF2F1B")
interface ID2D1BlendTransform : ID2D1ConcreteTransform
{
    void SetDescription(const(D2D1_BLEND_DESCRIPTION)* description);
    void GetDescription(D2D1_BLEND_DESCRIPTION* description);
}

@GUID("4998735C-3A19-473C-9781-656847E3A347")
interface ID2D1BorderTransform : ID2D1ConcreteTransform
{
    void SetExtendModeX(D2D1_EXTEND_MODE extendMode);
    void SetExtendModeY(D2D1_EXTEND_MODE extendMode);
    D2D1_EXTEND_MODE GetExtendModeX();
    D2D1_EXTEND_MODE GetExtendModeY();
}

@GUID("3FE6ADEA-7643-4F53-BD14-A0CE63F24042")
interface ID2D1OffsetTransform : ID2D1TransformNode
{
    void  SetOffset(POINT offset);
    POINT GetOffset();
}

@GUID("90F732E2-5092-4606-A819-8651970BACCD")
interface ID2D1BoundsAdjustmentTransform : ID2D1TransformNode
{
    void SetOutputBounds(const(RECT)* outputBounds);
    void GetOutputBounds(RECT* outputBounds);
}

@GUID("A248FD3F-3E6C-4E63-9F03-7F68ECC91DB9")
interface ID2D1EffectImpl : IUnknown
{
    HRESULT Initialize(ID2D1EffectContext effectContext, ID2D1TransformGraph transformGraph);
    HRESULT PrepareForRender(D2D1_CHANGE_TYPE changeType);
    HRESULT SetGraph(ID2D1TransformGraph transformGraph);
}

@GUID("3D9F916B-27DC-4AD7-B4F1-64945340F563")
interface ID2D1EffectContext : IUnknown
{
    void    GetDpi(float* dpiX, float* dpiY);
    HRESULT CreateEffect(const(GUID)* effectId, ID2D1Effect* effect);
    HRESULT GetMaximumSupportedFeatureLevel(char* featureLevels, uint featureLevelsCount, 
                                            D3D_FEATURE_LEVEL* maximumSupportedFeatureLevel);
    HRESULT CreateTransformNodeFromEffect(ID2D1Effect effect, ID2D1TransformNode* transformNode);
    HRESULT CreateBlendTransform(uint numInputs, const(D2D1_BLEND_DESCRIPTION)* blendDescription, 
                                 ID2D1BlendTransform* transform);
    HRESULT CreateBorderTransform(D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, 
                                  ID2D1BorderTransform* transform);
    HRESULT CreateOffsetTransform(POINT offset, ID2D1OffsetTransform* transform);
    HRESULT CreateBoundsAdjustmentTransform(const(RECT)* outputRectangle, 
                                            ID2D1BoundsAdjustmentTransform* transform);
    HRESULT LoadPixelShader(const(GUID)* shaderId, char* shaderBuffer, uint shaderBufferCount);
    HRESULT LoadVertexShader(const(GUID)* resourceId, char* shaderBuffer, uint shaderBufferCount);
    HRESULT LoadComputeShader(const(GUID)* resourceId, char* shaderBuffer, uint shaderBufferCount);
    BOOL    IsShaderLoaded(const(GUID)* shaderId);
    HRESULT CreateResourceTexture(const(GUID)* resourceId, 
                                  const(D2D1_RESOURCE_TEXTURE_PROPERTIES)* resourceTextureProperties, char* data, 
                                  char* strides, uint dataSize, ID2D1ResourceTexture* resourceTexture);
    HRESULT FindResourceTexture(const(GUID)* resourceId, ID2D1ResourceTexture* resourceTexture);
    HRESULT CreateVertexBuffer(const(D2D1_VERTEX_BUFFER_PROPERTIES)* vertexBufferProperties, 
                               const(GUID)* resourceId, 
                               const(D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES)* customVertexBufferProperties, 
                               ID2D1VertexBuffer* buffer);
    HRESULT FindVertexBuffer(const(GUID)* resourceId, ID2D1VertexBuffer* buffer);
    HRESULT CreateColorContext(D2D1_COLOR_SPACE space, char* profile, uint profileSize, 
                               ID2D1ColorContext* colorContext);
    HRESULT CreateColorContextFromFilename(const(wchar)* filename, ID2D1ColorContext* colorContext);
    HRESULT CreateColorContextFromWicColorContext(IWICColorContext wicColorContext, 
                                                  ID2D1ColorContext* colorContext);
    HRESULT CheckFeatureSupport(D2D1_FEATURE feature, char* featureSupportData, uint featureSupportDataSize);
    BOOL    IsBufferPrecisionSupported(D2D1_BUFFER_PRECISION bufferPrecision);
}

@GUID("A16907D7-BC02-4801-99E8-8CF7F485F774")
interface ID2D1GeometryRealization : ID2D1Resource
{
}

@GUID("D37F57E4-6908-459F-A199-E72F24F79987")
interface ID2D1DeviceContext1 : ID2D1DeviceContext
{
    HRESULT CreateFilledGeometryRealization(ID2D1Geometry geometry, float flatteningTolerance, 
                                            ID2D1GeometryRealization* geometryRealization);
    HRESULT CreateStrokedGeometryRealization(ID2D1Geometry geometry, float flatteningTolerance, float strokeWidth, 
                                             ID2D1StrokeStyle strokeStyle, 
                                             ID2D1GeometryRealization* geometryRealization);
    void    DrawGeometryRealization(ID2D1GeometryRealization geometryRealization, ID2D1Brush brush);
}

@GUID("D21768E1-23A4-4823-A14B-7C3EBA85D658")
interface ID2D1Device1 : ID2D1Device
{
    D2D1_RENDERING_PRIORITY GetRenderingPriority();
    void    SetRenderingPriority(D2D1_RENDERING_PRIORITY renderingPriority);
    HRESULT CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext1* deviceContext1);
}

@GUID("94F81A73-9212-4376-9C58-B16A3A0D3992")
interface ID2D1Factory2 : ID2D1Factory1
{
    HRESULT CreateDevice(IDXGIDevice dxgiDevice, ID2D1Device1* d2dDevice1);
}

@GUID("9EB767FD-4269-4467-B8C2-EB30CB305743")
interface ID2D1CommandSink1 : ID2D1CommandSink
{
    HRESULT SetPrimitiveBlend1(D2D1_PRIMITIVE_BLEND primitiveBlend);
}

@GUID("C9CDB0DD-F8C9-4E70-B7C2-301C80292C5E")
interface ID2D1SvgAttribute : ID2D1Resource
{
    void    GetElement(ID2D1SvgElement* element);
    HRESULT Clone(ID2D1SvgAttribute* attribute);
}

@GUID("D59BAB0A-68A2-455B-A5DC-9EB2854E2490")
interface ID2D1SvgPaint : ID2D1SvgAttribute
{
    HRESULT SetPaintType(D2D1_SVG_PAINT_TYPE paintType);
    D2D1_SVG_PAINT_TYPE GetPaintType();
    HRESULT SetColor(const(DXGI_RGBA)* color);
    void    GetColor(DXGI_RGBA* color);
    HRESULT SetId(const(wchar)* id);
    HRESULT GetId(const(wchar)* id, uint idCount);
    uint    GetIdLength();
}

@GUID("F1C0CA52-92A3-4F00-B4CE-F35691EFD9D9")
interface ID2D1SvgStrokeDashArray : ID2D1SvgAttribute
{
    HRESULT RemoveDashesAtEnd(uint dashesCount);
    HRESULT UpdateDashes(char* dashes, uint dashesCount, uint startIndex);
    HRESULT UpdateDashes(char* dashes, uint dashesCount, uint startIndex);
    HRESULT GetDashes(char* dashes, uint dashesCount, uint startIndex);
    HRESULT GetDashes(char* dashes, uint dashesCount, uint startIndex);
    uint    GetDashesCount();
}

@GUID("9DBE4C0D-3572-4DD9-9825-5530813BB712")
interface ID2D1SvgPointCollection : ID2D1SvgAttribute
{
    HRESULT RemovePointsAtEnd(uint pointsCount);
    HRESULT UpdatePoints(char* points, uint pointsCount, uint startIndex);
    HRESULT GetPoints(char* points, uint pointsCount, uint startIndex);
    uint    GetPointsCount();
}

@GUID("C095E4F4-BB98-43D6-9745-4D1B84EC9888")
interface ID2D1SvgPathData : ID2D1SvgAttribute
{
    HRESULT RemoveSegmentDataAtEnd(uint dataCount);
    HRESULT UpdateSegmentData(char* data, uint dataCount, uint startIndex);
    HRESULT GetSegmentData(char* data, uint dataCount, uint startIndex);
    uint    GetSegmentDataCount();
    HRESULT RemoveCommandsAtEnd(uint commandsCount);
    HRESULT UpdateCommands(char* commands, uint commandsCount, uint startIndex);
    HRESULT GetCommands(char* commands, uint commandsCount, uint startIndex);
    uint    GetCommandsCount();
    HRESULT CreatePathGeometry(D2D1_FILL_MODE fillMode, ID2D1PathGeometry1* pathGeometry);
}

@GUID("AC7B67A6-183E-49C1-A823-0EBE40B0DB29")
interface ID2D1SvgElement : ID2D1Resource
{
    void    GetDocument(ID2D1SvgDocument* document);
    HRESULT GetTagName(const(wchar)* name, uint nameCount);
    uint    GetTagNameLength();
    BOOL    IsTextContent();
    void    GetParent(ID2D1SvgElement* parent);
    BOOL    HasChildren();
    void    GetFirstChild(ID2D1SvgElement* child);
    void    GetLastChild(ID2D1SvgElement* child);
    HRESULT GetPreviousChild(ID2D1SvgElement referenceChild, ID2D1SvgElement* previousChild);
    HRESULT GetNextChild(ID2D1SvgElement referenceChild, ID2D1SvgElement* nextChild);
    HRESULT InsertChildBefore(ID2D1SvgElement newChild, ID2D1SvgElement referenceChild);
    HRESULT AppendChild(ID2D1SvgElement newChild);
    HRESULT ReplaceChild(ID2D1SvgElement newChild, ID2D1SvgElement oldChild);
    HRESULT RemoveChild(ID2D1SvgElement oldChild);
    HRESULT CreateChild(const(wchar)* tagName, ID2D1SvgElement* newChild);
    BOOL    IsAttributeSpecified(const(wchar)* name, int* inherited);
    uint    GetSpecifiedAttributeCount();
    HRESULT GetSpecifiedAttributeName(uint index, const(wchar)* name, uint nameCount, int* inherited);
    HRESULT GetSpecifiedAttributeNameLength(uint index, uint* nameLength, int* inherited);
    HRESULT RemoveAttribute(const(wchar)* name);
    HRESULT SetTextValue(const(wchar)* name, uint nameCount);
    HRESULT GetTextValue(const(wchar)* name, uint nameCount);
    uint    GetTextValueLength();
    HRESULT SetAttributeValue(const(wchar)* name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type, const(wchar)* value);
    HRESULT GetAttributeValue(const(wchar)* name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type, const(wchar)* value, 
                              uint valueCount);
    HRESULT GetAttributeValueLength(const(wchar)* name, D2D1_SVG_ATTRIBUTE_STRING_TYPE type, uint* valueLength);
    HRESULT SetAttributeValue(const(wchar)* name, D2D1_SVG_ATTRIBUTE_POD_TYPE type, char* value, 
                              uint valueSizeInBytes);
    HRESULT GetAttributeValue(const(wchar)* name, D2D1_SVG_ATTRIBUTE_POD_TYPE type, char* value, 
                              uint valueSizeInBytes);
    HRESULT SetAttributeValue(const(wchar)* name, ID2D1SvgAttribute value);
    HRESULT GetAttributeValue(const(wchar)* name, const(GUID)* riid, void** value);
}

@GUID("86B88E4D-AFA4-4D7B-88E4-68A51C4A0AEC")
interface ID2D1SvgDocument : ID2D1Resource
{
    HRESULT SetViewportSize(D2D_SIZE_F viewportSize);
    D2D_SIZE_F GetViewportSize();
    HRESULT SetRoot(ID2D1SvgElement root);
    void    GetRoot(ID2D1SvgElement* root);
    HRESULT FindElementById(const(wchar)* id, ID2D1SvgElement* svgElement);
    HRESULT Serialize(IStream outputXmlStream, ID2D1SvgElement subtree);
    HRESULT Deserialize(IStream inputXmlStream, ID2D1SvgElement* subtree);
    HRESULT CreatePaint(D2D1_SVG_PAINT_TYPE paintType, const(DXGI_RGBA)* color, const(wchar)* id, 
                        ID2D1SvgPaint* paint);
    HRESULT CreateStrokeDashArray(char* dashes, uint dashesCount, ID2D1SvgStrokeDashArray* strokeDashArray);
    HRESULT CreatePointCollection(char* points, uint pointsCount, ID2D1SvgPointCollection* pointCollection);
    HRESULT CreatePathData(char* segmentData, uint segmentDataCount, char* commands, uint commandsCount, 
                           ID2D1SvgPathData* pathData);
}

@GUID("BAE8B344-23FC-4071-8CB5-D05D6F073848")
interface ID2D1InkStyle : ID2D1Resource
{
    void SetNibTransform(const(D2D_MATRIX_3X2_F)* transform);
    void GetNibTransform(D2D_MATRIX_3X2_F* transform);
    void SetNibShape(D2D1_INK_NIB_SHAPE nibShape);
    D2D1_INK_NIB_SHAPE GetNibShape();
}

@GUID("B499923B-7029-478F-A8B3-432C7C5F5312")
interface ID2D1Ink : ID2D1Resource
{
    void    SetStartPoint(const(D2D1_INK_POINT)* startPoint);
    D2D1_INK_POINT GetStartPoint();
    HRESULT AddSegments(char* segments, uint segmentsCount);
    HRESULT RemoveSegmentsAtEnd(uint segmentsCount);
    HRESULT SetSegments(uint startSegment, char* segments, uint segmentsCount);
    HRESULT SetSegmentAtEnd(const(D2D1_INK_BEZIER_SEGMENT)* segment);
    uint    GetSegmentCount();
    HRESULT GetSegments(uint startSegment, char* segments, uint segmentsCount);
    HRESULT StreamAsGeometry(ID2D1InkStyle inkStyle, const(D2D_MATRIX_3X2_F)* worldTransform, 
                             float flatteningTolerance, ID2D1SimplifiedGeometrySink geometrySink);
    HRESULT GetBounds(ID2D1InkStyle inkStyle, const(D2D_MATRIX_3X2_F)* worldTransform, D2D_RECT_F* bounds);
}

@GUID("F292E401-C050-4CDE-83D7-04962D3B23C2")
interface ID2D1GradientMesh : ID2D1Resource
{
    uint    GetPatchCount();
    HRESULT GetPatches(uint startIndex, char* patches, uint patchesCount);
}

@GUID("C9B664E5-74A1-4378-9AC2-EEFC37A3F4D8")
interface ID2D1ImageSource : ID2D1Image
{
    HRESULT OfferResources();
    HRESULT TryReclaimResources(int* resourcesDiscarded);
}

@GUID("77395441-1C8F-4555-8683-F50DAB0FE792")
interface ID2D1ImageSourceFromWic : ID2D1ImageSource
{
    HRESULT EnsureCached(const(D2D_RECT_U)* rectangleToFill);
    HRESULT TrimCache(const(D2D_RECT_U)* rectangleToPreserve);
    void    GetSource(IWICBitmapSource* wicBitmapSource);
}

@GUID("7F1F79E5-2796-416C-8F55-700F911445E5")
interface ID2D1TransformedImageSource : ID2D1Image
{
    void GetSource(ID2D1ImageSource* imageSource);
    void GetProperties(D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES* properties);
}

@GUID("53DD9855-A3B0-4D5B-82E1-26E25C5E5797")
interface ID2D1LookupTable3D : ID2D1Resource
{
}

@GUID("394EA6A3-0C34-4321-950B-6CA20F0BE6C7")
interface ID2D1DeviceContext2 : ID2D1DeviceContext1
{
    HRESULT CreateInk(const(D2D1_INK_POINT)* startPoint, ID2D1Ink* ink);
    HRESULT CreateInkStyle(const(D2D1_INK_STYLE_PROPERTIES)* inkStyleProperties, ID2D1InkStyle* inkStyle);
    HRESULT CreateGradientMesh(char* patches, uint patchesCount, ID2D1GradientMesh* gradientMesh);
    HRESULT CreateImageSourceFromWic(IWICBitmapSource wicBitmapSource, 
                                     D2D1_IMAGE_SOURCE_LOADING_OPTIONS loadingOptions, D2D1_ALPHA_MODE alphaMode, 
                                     ID2D1ImageSourceFromWic* imageSource);
    HRESULT CreateLookupTable3D(D2D1_BUFFER_PRECISION precision, char* extents, char* data, uint dataCount, 
                                char* strides, ID2D1LookupTable3D* lookupTable);
    HRESULT CreateImageSourceFromDxgi(char* surfaces, uint surfaceCount, DXGI_COLOR_SPACE_TYPE colorSpace, 
                                      D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options, ID2D1ImageSource* imageSource);
    HRESULT GetGradientMeshWorldBounds(ID2D1GradientMesh gradientMesh, D2D_RECT_F* pBounds);
    void    DrawInk(ID2D1Ink ink, ID2D1Brush brush, ID2D1InkStyle inkStyle);
    void    DrawGradientMesh(ID2D1GradientMesh gradientMesh);
    void    DrawGdiMetafile(ID2D1GdiMetafile gdiMetafile, const(D2D_RECT_F)* destinationRectangle, 
                            const(D2D_RECT_F)* sourceRectangle);
    HRESULT CreateTransformedImageSource(ID2D1ImageSource imageSource, 
                                         const(D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES)* properties, 
                                         ID2D1TransformedImageSource* transformedImageSource);
}

@GUID("A44472E1-8DFB-4E60-8492-6E2861C9CA8B")
interface ID2D1Device2 : ID2D1Device1
{
    HRESULT CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext2* deviceContext2);
    void    FlushDeviceContexts(ID2D1Bitmap bitmap);
    HRESULT GetDxgiDevice(IDXGIDevice* dxgiDevice);
}

@GUID("0869759F-4F00-413F-B03E-2BDA45404D0F")
interface ID2D1Factory3 : ID2D1Factory2
{
    HRESULT CreateDevice(IDXGIDevice dxgiDevice, ID2D1Device2* d2dDevice2);
}

@GUID("3BAB440E-417E-47DF-A2E2-BC0BE6A00916")
interface ID2D1CommandSink2 : ID2D1CommandSink1
{
    HRESULT DrawInk(ID2D1Ink ink, ID2D1Brush brush, ID2D1InkStyle inkStyle);
    HRESULT DrawGradientMesh(ID2D1GradientMesh gradientMesh);
    HRESULT DrawGdiMetafile(ID2D1GdiMetafile gdiMetafile, const(D2D_RECT_F)* destinationRectangle, 
                            const(D2D_RECT_F)* sourceRectangle);
}

@GUID("2E69F9E8-DD3F-4BF9-95BA-C04F49D788DF")
interface ID2D1GdiMetafile1 : ID2D1GdiMetafile
{
    HRESULT GetDpi(float* dpiX, float* dpiY);
    HRESULT GetSourceBounds(D2D_RECT_F* bounds);
}

@GUID("FD0ECB6B-91E6-411E-8655-395E760F91B4")
interface ID2D1GdiMetafileSink1 : ID2D1GdiMetafileSink
{
    HRESULT ProcessRecord(uint recordType, const(void)* recordData, uint recordDataSize, uint flags);
}

@GUID("4DC583BF-3A10-438A-8722-E9765224F1F1")
interface ID2D1SpriteBatch : ID2D1Resource
{
    HRESULT AddSprites(uint spriteCount, char* destinationRectangles, char* sourceRectangles, char* colors, 
                       char* transforms, uint destinationRectanglesStride, uint sourceRectanglesStride, 
                       uint colorsStride, uint transformsStride);
    HRESULT SetSprites(uint startIndex, uint spriteCount, char* destinationRectangles, char* sourceRectangles, 
                       char* colors, char* transforms, uint destinationRectanglesStride, uint sourceRectanglesStride, 
                       uint colorsStride, uint transformsStride);
    HRESULT GetSprites(uint startIndex, uint spriteCount, char* destinationRectangles, char* sourceRectangles, 
                       char* colors, char* transforms);
    uint    GetSpriteCount();
    void    Clear();
}

@GUID("235A7496-8351-414C-BCD4-6672AB2D8E00")
interface ID2D1DeviceContext3 : ID2D1DeviceContext2
{
    HRESULT CreateSpriteBatch(ID2D1SpriteBatch* spriteBatch);
    void    DrawSpriteBatch(ID2D1SpriteBatch spriteBatch, uint startIndex, uint spriteCount, ID2D1Bitmap bitmap, 
                            D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions);
}

@GUID("852F2087-802C-4037-AB60-FF2E7EE6FC01")
interface ID2D1Device3 : ID2D1Device2
{
    HRESULT CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext3* deviceContext3);
}

@GUID("BD4EC2D2-0662-4BEE-BA8E-6F29F032E096")
interface ID2D1Factory4 : ID2D1Factory3
{
    HRESULT CreateDevice(IDXGIDevice dxgiDevice, ID2D1Device3* d2dDevice3);
}

@GUID("18079135-4CF3-4868-BC8E-06067E6D242D")
interface ID2D1CommandSink3 : ID2D1CommandSink2
{
    HRESULT DrawSpriteBatch(ID2D1SpriteBatch spriteBatch, uint startIndex, uint spriteCount, ID2D1Bitmap bitmap, 
                            D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, D2D1_SPRITE_OPTIONS spriteOptions);
}

@GUID("AF671749-D241-4DB8-8E41-DCC2E5C1A438")
interface ID2D1SvgGlyphStyle : ID2D1Resource
{
    HRESULT SetFill(ID2D1Brush brush);
    void    GetFill(ID2D1Brush* brush);
    HRESULT SetStroke(ID2D1Brush brush, float strokeWidth, char* dashes, uint dashesCount, float dashOffset);
    uint    GetStrokeDashesCount();
    void    GetStroke(ID2D1Brush* brush, float* strokeWidth, char* dashes, uint dashesCount, float* dashOffset);
}

@GUID("8C427831-3D90-4476-B647-C4FAE349E4DB")
interface ID2D1DeviceContext4 : ID2D1DeviceContext3
{
    HRESULT CreateSvgGlyphStyle(ID2D1SvgGlyphStyle* svgGlyphStyle);
    void    DrawTextA(const(wchar)* string, uint stringLength, IDWriteTextFormat textFormat, 
                      const(D2D_RECT_F)* layoutRect, ID2D1Brush defaultFillBrush, ID2D1SvgGlyphStyle svgGlyphStyle, 
                      uint colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode);
    void    DrawTextLayout(D2D_POINT_2F origin, IDWriteTextLayout textLayout, ID2D1Brush defaultFillBrush, 
                           ID2D1SvgGlyphStyle svgGlyphStyle, uint colorPaletteIndex, D2D1_DRAW_TEXT_OPTIONS options);
    void    DrawColorBitmapGlyphRun(DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F baselineOrigin, 
                                    const(DWRITE_GLYPH_RUN)* glyphRun, DWRITE_MEASURING_MODE measuringMode, 
                                    D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION bitmapSnapOption);
    void    DrawSvgGlyphRun(D2D_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, 
                            ID2D1Brush defaultFillBrush, ID2D1SvgGlyphStyle svgGlyphStyle, uint colorPaletteIndex, 
                            DWRITE_MEASURING_MODE measuringMode);
    HRESULT GetColorBitmapGlyphImage(DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, D2D_POINT_2F glyphOrigin, 
                                     IDWriteFontFace fontFace, float fontEmSize, ushort glyphIndex, BOOL isSideways, 
                                     const(D2D_MATRIX_3X2_F)* worldTransform, float dpiX, float dpiY, 
                                     D2D_MATRIX_3X2_F* glyphTransform, ID2D1Image* glyphImage);
    HRESULT GetSvgGlyphImage(D2D_POINT_2F glyphOrigin, IDWriteFontFace fontFace, float fontEmSize, 
                             ushort glyphIndex, BOOL isSideways, const(D2D_MATRIX_3X2_F)* worldTransform, 
                             ID2D1Brush defaultFillBrush, ID2D1SvgGlyphStyle svgGlyphStyle, uint colorPaletteIndex, 
                             D2D_MATRIX_3X2_F* glyphTransform, ID2D1CommandList* glyphImage);
}

@GUID("D7BDB159-5683-4A46-BC9C-72DC720B858B")
interface ID2D1Device4 : ID2D1Device3
{
    HRESULT CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext4* deviceContext4);
    void    SetMaximumColorGlyphCacheMemory(ulong maximumInBytes);
    ulong   GetMaximumColorGlyphCacheMemory();
}

@GUID("C4349994-838E-4B0F-8CAB-44997D9EEACC")
interface ID2D1Factory5 : ID2D1Factory4
{
    HRESULT CreateDevice(IDXGIDevice dxgiDevice, ID2D1Device4* d2dDevice4);
}

@GUID("C78A6519-40D6-4218-B2DE-BEEEB744BB3E")
interface ID2D1CommandSink4 : ID2D1CommandSink3
{
    HRESULT SetPrimitiveBlend2(D2D1_PRIMITIVE_BLEND primitiveBlend);
}

@GUID("1AB42875-C57F-4BE9-BD85-9CD78D6F55EE")
interface ID2D1ColorContext1 : ID2D1ColorContext
{
    D2D1_COLOR_CONTEXT_TYPE GetColorContextType();
    DXGI_COLOR_SPACE_TYPE GetDXGIColorSpace();
    HRESULT GetSimpleColorProfile(D2D1_SIMPLE_COLOR_PROFILE* simpleProfile);
}

@GUID("7836D248-68CC-4DF6-B9E8-DE991BF62EB7")
interface ID2D1DeviceContext5 : ID2D1DeviceContext4
{
    HRESULT CreateSvgDocument(IStream inputXmlStream, D2D_SIZE_F viewportSize, ID2D1SvgDocument* svgDocument);
    void    DrawSvgDocument(ID2D1SvgDocument svgDocument);
    HRESULT CreateColorContextFromDxgiColorSpace(DXGI_COLOR_SPACE_TYPE colorSpace, 
                                                 ID2D1ColorContext1* colorContext);
    HRESULT CreateColorContextFromSimpleColorProfile(const(D2D1_SIMPLE_COLOR_PROFILE)* simpleProfile, 
                                                     ID2D1ColorContext1* colorContext);
}

@GUID("D55BA0A4-6405-4694-AEF5-08EE1A4358B4")
interface ID2D1Device5 : ID2D1Device4
{
    HRESULT CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext5* deviceContext5);
}

@GUID("F9976F46-F642-44C1-97CA-DA32EA2A2635")
interface ID2D1Factory6 : ID2D1Factory5
{
    HRESULT CreateDevice(IDXGIDevice dxgiDevice, ID2D1Device5* d2dDevice5);
}

@GUID("7047DD26-B1E7-44A7-959A-8349E2144FA8")
interface ID2D1CommandSink5 : ID2D1CommandSink4
{
    HRESULT BlendImage(ID2D1Image image, D2D1_BLEND_MODE blendMode, const(D2D_POINT_2F)* targetOffset, 
                       const(D2D_RECT_F)* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode);
}

@GUID("985F7E37-4ED0-4A19-98A3-15B0EDFDE306")
interface ID2D1DeviceContext6 : ID2D1DeviceContext5
{
    void BlendImage(ID2D1Image image, D2D1_BLEND_MODE blendMode, const(D2D_POINT_2F)* targetOffset, 
                    const(D2D_RECT_F)* imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode);
}

@GUID("7BFEF914-2D75-4BAD-BE87-E18DDB077B6D")
interface ID2D1Device6 : ID2D1Device5
{
    HRESULT CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS options, ID2D1DeviceContext6* deviceContext6);
}

@GUID("BDC2BDD3-B96C-4DE6-BDF7-99D4745454DE")
interface ID2D1Factory7 : ID2D1Factory6
{
    HRESULT CreateDevice(IDXGIDevice dxgiDevice, ID2D1Device6* d2dDevice6);
}

@GUID("84AB595A-FC81-4546-BACD-E8EF4D8ABE7A")
interface ID2D1EffectContext1 : ID2D1EffectContext
{
    HRESULT CreateLookupTable3D(D2D1_BUFFER_PRECISION precision, char* extents, char* data, uint dataCount, 
                                char* strides, ID2D1LookupTable3D* lookupTable);
}

@GUID("577AD2A0-9FC7-4DDA-8B18-DAB810140052")
interface ID2D1EffectContext2 : ID2D1EffectContext1
{
    HRESULT CreateColorContextFromDxgiColorSpace(DXGI_COLOR_SPACE_TYPE colorSpace, 
                                                 ID2D1ColorContext1* colorContext);
    HRESULT CreateColorContextFromSimpleColorProfile(const(D2D1_SIMPLE_COLOR_PROFILE)* simpleProfile, 
                                                     ID2D1ColorContext1* colorContext);
}

@GUID("81BDCBCA-64D4-426D-AE8D-AD0147F4275C")
interface IDirect3D9 : IUnknown
{
    HRESULT RegisterSoftwareDevice(void* pInitializeFunction);
    uint    GetAdapterCount();
    HRESULT GetAdapterIdentifier(uint Adapter, uint Flags, D3DADAPTER_IDENTIFIER9* pIdentifier);
    uint    GetAdapterModeCount(uint Adapter, D3DFORMAT Format);
    HRESULT EnumAdapterModes(uint Adapter, D3DFORMAT Format, uint Mode, D3DDISPLAYMODE* pMode);
    HRESULT GetAdapterDisplayMode(uint Adapter, D3DDISPLAYMODE* pMode);
    HRESULT CheckDeviceType(uint Adapter, D3DDEVTYPE DevType, D3DFORMAT AdapterFormat, D3DFORMAT BackBufferFormat, 
                            BOOL bWindowed);
    HRESULT CheckDeviceFormat(uint Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, uint Usage, 
                              D3DRESOURCETYPE RType, D3DFORMAT CheckFormat);
    HRESULT CheckDeviceMultiSampleType(uint Adapter, D3DDEVTYPE DeviceType, D3DFORMAT SurfaceFormat, BOOL Windowed, 
                                       D3DMULTISAMPLE_TYPE MultiSampleType, uint* pQualityLevels);
    HRESULT CheckDepthStencilMatch(uint Adapter, D3DDEVTYPE DeviceType, D3DFORMAT AdapterFormat, 
                                   D3DFORMAT RenderTargetFormat, D3DFORMAT DepthStencilFormat);
    HRESULT CheckDeviceFormatConversion(uint Adapter, D3DDEVTYPE DeviceType, D3DFORMAT SourceFormat, 
                                        D3DFORMAT TargetFormat);
    HRESULT GetDeviceCaps(uint Adapter, D3DDEVTYPE DeviceType, D3DCAPS9* pCaps);
    ptrdiff_t GetAdapterMonitor(uint Adapter);
    HRESULT CreateDevice(uint Adapter, D3DDEVTYPE DeviceType, HWND hFocusWindow, uint BehaviorFlags, 
                         _D3DPRESENT_PARAMETERS_* pPresentationParameters, 
                         IDirect3DDevice9* ppReturnedDeviceInterface);
}

@GUID("D0223B96-BF7A-43FD-92BD-A43B0D82B9EB")
interface IDirect3DDevice9 : IUnknown
{
    HRESULT TestCooperativeLevel();
    uint    GetAvailableTextureMem();
    HRESULT EvictManagedResources();
    HRESULT GetDirect3D(IDirect3D9* ppD3D9);
    HRESULT GetDeviceCaps(D3DCAPS9* pCaps);
    HRESULT GetDisplayMode(uint iSwapChain, D3DDISPLAYMODE* pMode);
    HRESULT GetCreationParameters(D3DDEVICE_CREATION_PARAMETERS* pParameters);
    HRESULT SetCursorProperties(uint XHotSpot, uint YHotSpot, IDirect3DSurface9 pCursorBitmap);
    void    SetCursorPosition(int X, int Y, uint Flags);
    BOOL    ShowCursor(BOOL bShow);
    HRESULT CreateAdditionalSwapChain(_D3DPRESENT_PARAMETERS_* pPresentationParameters, 
                                      IDirect3DSwapChain9* pSwapChain);
    HRESULT GetSwapChain(uint iSwapChain, IDirect3DSwapChain9* pSwapChain);
    uint    GetNumberOfSwapChains();
    HRESULT Reset(_D3DPRESENT_PARAMETERS_* pPresentationParameters);
    HRESULT Present(const(RECT)* pSourceRect, const(RECT)* pDestRect, HWND hDestWindowOverride, 
                    const(RGNDATA)* pDirtyRegion);
    HRESULT GetBackBuffer(uint iSwapChain, uint iBackBuffer, D3DBACKBUFFER_TYPE Type, 
                          IDirect3DSurface9* ppBackBuffer);
    HRESULT GetRasterStatus(uint iSwapChain, D3DRASTER_STATUS* pRasterStatus);
    HRESULT SetDialogBoxMode(BOOL bEnableDialogs);
    void    SetGammaRamp(uint iSwapChain, uint Flags, const(D3DGAMMARAMP)* pRamp);
    void    GetGammaRamp(uint iSwapChain, D3DGAMMARAMP* pRamp);
    HRESULT CreateTexture(uint Width, uint Height, uint Levels, uint Usage, D3DFORMAT Format, D3DPOOL Pool, 
                          IDirect3DTexture9* ppTexture, HANDLE* pSharedHandle);
    HRESULT CreateVolumeTexture(uint Width, uint Height, uint Depth, uint Levels, uint Usage, D3DFORMAT Format, 
                                D3DPOOL Pool, IDirect3DVolumeTexture9* ppVolumeTexture, HANDLE* pSharedHandle);
    HRESULT CreateCubeTexture(uint EdgeLength, uint Levels, uint Usage, D3DFORMAT Format, D3DPOOL Pool, 
                              IDirect3DCubeTexture9* ppCubeTexture, HANDLE* pSharedHandle);
    HRESULT CreateVertexBuffer(uint Length, uint Usage, uint FVF, D3DPOOL Pool, 
                               IDirect3DVertexBuffer9* ppVertexBuffer, HANDLE* pSharedHandle);
    HRESULT CreateIndexBuffer(uint Length, uint Usage, D3DFORMAT Format, D3DPOOL Pool, 
                              IDirect3DIndexBuffer9* ppIndexBuffer, HANDLE* pSharedHandle);
    HRESULT CreateRenderTarget(uint Width, uint Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, 
                               uint MultisampleQuality, BOOL Lockable, IDirect3DSurface9* ppSurface, 
                               HANDLE* pSharedHandle);
    HRESULT CreateDepthStencilSurface(uint Width, uint Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, 
                                      uint MultisampleQuality, BOOL Discard, IDirect3DSurface9* ppSurface, 
                                      HANDLE* pSharedHandle);
    HRESULT UpdateSurface(IDirect3DSurface9 pSourceSurface, const(RECT)* pSourceRect, 
                          IDirect3DSurface9 pDestinationSurface, const(POINT)* pDestPoint);
    HRESULT UpdateTexture(IDirect3DBaseTexture9 pSourceTexture, IDirect3DBaseTexture9 pDestinationTexture);
    HRESULT GetRenderTargetData(IDirect3DSurface9 pRenderTarget, IDirect3DSurface9 pDestSurface);
    HRESULT GetFrontBufferData(uint iSwapChain, IDirect3DSurface9 pDestSurface);
    HRESULT StretchRect(IDirect3DSurface9 pSourceSurface, const(RECT)* pSourceRect, IDirect3DSurface9 pDestSurface, 
                        const(RECT)* pDestRect, D3DTEXTUREFILTERTYPE Filter);
    HRESULT ColorFill(IDirect3DSurface9 pSurface, const(RECT)* pRect, uint color);
    HRESULT CreateOffscreenPlainSurface(uint Width, uint Height, D3DFORMAT Format, D3DPOOL Pool, 
                                        IDirect3DSurface9* ppSurface, HANDLE* pSharedHandle);
    HRESULT SetRenderTarget(uint RenderTargetIndex, IDirect3DSurface9 pRenderTarget);
    HRESULT GetRenderTarget(uint RenderTargetIndex, IDirect3DSurface9* ppRenderTarget);
    HRESULT SetDepthStencilSurface(IDirect3DSurface9 pNewZStencil);
    HRESULT GetDepthStencilSurface(IDirect3DSurface9* ppZStencilSurface);
    HRESULT BeginScene();
    HRESULT EndScene();
    HRESULT Clear(uint Count, const(D3DRECT)* pRects, uint Flags, uint Color, float Z, uint Stencil);
    HRESULT SetTransform(D3DTRANSFORMSTATETYPE State, const(D3DMATRIX)* pMatrix);
    HRESULT GetTransform(D3DTRANSFORMSTATETYPE State, D3DMATRIX* pMatrix);
    HRESULT MultiplyTransform(D3DTRANSFORMSTATETYPE param0, const(D3DMATRIX)* param1);
    HRESULT SetViewport(const(D3DVIEWPORT9)* pViewport);
    HRESULT GetViewport(D3DVIEWPORT9* pViewport);
    HRESULT SetMaterial(const(D3DMATERIAL9)* pMaterial);
    HRESULT GetMaterial(D3DMATERIAL9* pMaterial);
    HRESULT SetLight(uint Index, const(D3DLIGHT9)* param1);
    HRESULT GetLight(uint Index, D3DLIGHT9* param1);
    HRESULT LightEnable(uint Index, BOOL Enable);
    HRESULT GetLightEnable(uint Index, int* pEnable);
    HRESULT SetClipPlane(uint Index, const(float)* pPlane);
    HRESULT GetClipPlane(uint Index, float* pPlane);
    HRESULT SetRenderState(D3DRENDERSTATETYPE State, uint Value);
    HRESULT GetRenderState(D3DRENDERSTATETYPE State, uint* pValue);
    HRESULT CreateStateBlock(D3DSTATEBLOCKTYPE Type, IDirect3DStateBlock9* ppSB);
    HRESULT BeginStateBlock();
    HRESULT EndStateBlock(IDirect3DStateBlock9* ppSB);
    HRESULT SetClipStatus(const(D3DCLIPSTATUS9)* pClipStatus);
    HRESULT GetClipStatus(D3DCLIPSTATUS9* pClipStatus);
    HRESULT GetTexture(uint Stage, IDirect3DBaseTexture9* ppTexture);
    HRESULT SetTexture(uint Stage, IDirect3DBaseTexture9 pTexture);
    HRESULT GetTextureStageState(uint Stage, D3DTEXTURESTAGESTATETYPE Type, uint* pValue);
    HRESULT SetTextureStageState(uint Stage, D3DTEXTURESTAGESTATETYPE Type, uint Value);
    HRESULT GetSamplerState(uint Sampler, D3DSAMPLERSTATETYPE Type, uint* pValue);
    HRESULT SetSamplerState(uint Sampler, D3DSAMPLERSTATETYPE Type, uint Value);
    HRESULT ValidateDevice(uint* pNumPasses);
    HRESULT SetPaletteEntries(uint PaletteNumber, const(PALETTEENTRY)* pEntries);
    HRESULT GetPaletteEntries(uint PaletteNumber, PALETTEENTRY* pEntries);
    HRESULT SetCurrentTexturePalette(uint PaletteNumber);
    HRESULT GetCurrentTexturePalette(uint* PaletteNumber);
    HRESULT SetScissorRect(const(RECT)* pRect);
    HRESULT GetScissorRect(RECT* pRect);
    HRESULT SetSoftwareVertexProcessing(BOOL bSoftware);
    BOOL    GetSoftwareVertexProcessing();
    HRESULT SetNPatchMode(float nSegments);
    float   GetNPatchMode();
    HRESULT DrawPrimitive(D3DPRIMITIVETYPE PrimitiveType, uint StartVertex, uint PrimitiveCount);
    HRESULT DrawIndexedPrimitive(D3DPRIMITIVETYPE param0, int BaseVertexIndex, uint MinVertexIndex, 
                                 uint NumVertices, uint startIndex, uint primCount);
    HRESULT DrawPrimitiveUP(D3DPRIMITIVETYPE PrimitiveType, uint PrimitiveCount, 
                            const(void)* pVertexStreamZeroData, uint VertexStreamZeroStride);
    HRESULT DrawIndexedPrimitiveUP(D3DPRIMITIVETYPE PrimitiveType, uint MinVertexIndex, uint NumVertices, 
                                   uint PrimitiveCount, const(void)* pIndexData, D3DFORMAT IndexDataFormat, 
                                   const(void)* pVertexStreamZeroData, uint VertexStreamZeroStride);
    HRESULT ProcessVertices(uint SrcStartIndex, uint DestIndex, uint VertexCount, 
                            IDirect3DVertexBuffer9 pDestBuffer, IDirect3DVertexDeclaration9 pVertexDecl, uint Flags);
    HRESULT CreateVertexDeclaration(const(D3DVERTEXELEMENT9)* pVertexElements, IDirect3DVertexDeclaration9* ppDecl);
    HRESULT SetVertexDeclaration(IDirect3DVertexDeclaration9 pDecl);
    HRESULT GetVertexDeclaration(IDirect3DVertexDeclaration9* ppDecl);
    HRESULT SetFVF(uint FVF);
    HRESULT GetFVF(uint* pFVF);
    HRESULT CreateVertexShader(const(uint)* pFunction, IDirect3DVertexShader9* ppShader);
    HRESULT SetVertexShader(IDirect3DVertexShader9 pShader);
    HRESULT GetVertexShader(IDirect3DVertexShader9* ppShader);
    HRESULT SetVertexShaderConstantF(uint StartRegister, const(float)* pConstantData, uint Vector4fCount);
    HRESULT GetVertexShaderConstantF(uint StartRegister, float* pConstantData, uint Vector4fCount);
    HRESULT SetVertexShaderConstantI(uint StartRegister, const(int)* pConstantData, uint Vector4iCount);
    HRESULT GetVertexShaderConstantI(uint StartRegister, int* pConstantData, uint Vector4iCount);
    HRESULT SetVertexShaderConstantB(uint StartRegister, const(int)* pConstantData, uint BoolCount);
    HRESULT GetVertexShaderConstantB(uint StartRegister, int* pConstantData, uint BoolCount);
    HRESULT SetStreamSource(uint StreamNumber, IDirect3DVertexBuffer9 pStreamData, uint OffsetInBytes, uint Stride);
    HRESULT GetStreamSource(uint StreamNumber, IDirect3DVertexBuffer9* ppStreamData, uint* pOffsetInBytes, 
                            uint* pStride);
    HRESULT SetStreamSourceFreq(uint StreamNumber, uint Setting);
    HRESULT GetStreamSourceFreq(uint StreamNumber, uint* pSetting);
    HRESULT SetIndices(IDirect3DIndexBuffer9 pIndexData);
    HRESULT GetIndices(IDirect3DIndexBuffer9* ppIndexData);
    HRESULT CreatePixelShader(const(uint)* pFunction, IDirect3DPixelShader9* ppShader);
    HRESULT SetPixelShader(IDirect3DPixelShader9 pShader);
    HRESULT GetPixelShader(IDirect3DPixelShader9* ppShader);
    HRESULT SetPixelShaderConstantF(uint StartRegister, const(float)* pConstantData, uint Vector4fCount);
    HRESULT GetPixelShaderConstantF(uint StartRegister, float* pConstantData, uint Vector4fCount);
    HRESULT SetPixelShaderConstantI(uint StartRegister, const(int)* pConstantData, uint Vector4iCount);
    HRESULT GetPixelShaderConstantI(uint StartRegister, int* pConstantData, uint Vector4iCount);
    HRESULT SetPixelShaderConstantB(uint StartRegister, const(int)* pConstantData, uint BoolCount);
    HRESULT GetPixelShaderConstantB(uint StartRegister, int* pConstantData, uint BoolCount);
    HRESULT DrawRectPatch(uint Handle, const(float)* pNumSegs, const(D3DRECTPATCH_INFO)* pRectPatchInfo);
    HRESULT DrawTriPatch(uint Handle, const(float)* pNumSegs, const(D3DTRIPATCH_INFO)* pTriPatchInfo);
    HRESULT DeletePatch(uint Handle);
    HRESULT CreateQuery(D3DQUERYTYPE Type, IDirect3DQuery9* ppQuery);
}

@GUID("B07C4FE5-310D-4BA8-A23C-4F0F206F218B")
interface IDirect3DStateBlock9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9* ppDevice);
    HRESULT Capture();
    HRESULT Apply();
}

@GUID("794950F2-ADFC-458A-905E-10A10B0B503B")
interface IDirect3DSwapChain9 : IUnknown
{
    HRESULT Present(const(RECT)* pSourceRect, const(RECT)* pDestRect, HWND hDestWindowOverride, 
                    const(RGNDATA)* pDirtyRegion, uint dwFlags);
    HRESULT GetFrontBufferData(IDirect3DSurface9 pDestSurface);
    HRESULT GetBackBuffer(uint iBackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface9* ppBackBuffer);
    HRESULT GetRasterStatus(D3DRASTER_STATUS* pRasterStatus);
    HRESULT GetDisplayMode(D3DDISPLAYMODE* pMode);
    HRESULT GetDevice(IDirect3DDevice9* ppDevice);
    HRESULT GetPresentParameters(_D3DPRESENT_PARAMETERS_* pPresentationParameters);
}

@GUID("05EEC05D-8F7D-4362-B999-D1BAF357C704")
interface IDirect3DResource9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9* ppDevice);
    HRESULT SetPrivateData(const(GUID)* refguid, const(void)* pData, uint SizeOfData, uint Flags);
    HRESULT GetPrivateData(const(GUID)* refguid, void* pData, uint* pSizeOfData);
    HRESULT FreePrivateData(const(GUID)* refguid);
    uint    SetPriority(uint PriorityNew);
    uint    GetPriority();
    void    PreLoad();
    D3DRESOURCETYPE GetType();
}

@GUID("DD13C59C-36FA-4098-A8FB-C7ED39DC8546")
interface IDirect3DVertexDeclaration9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9* ppDevice);
    HRESULT GetDeclaration(D3DVERTEXELEMENT9* pElement, uint* pNumElements);
}

@GUID("EFC5557E-6265-4613-8A94-43857889EB36")
interface IDirect3DVertexShader9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9* ppDevice);
    HRESULT GetFunction(void* param0, uint* pSizeOfData);
}

@GUID("6D3BDBDC-5B02-4415-B852-CE5E8BCCB289")
interface IDirect3DPixelShader9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9* ppDevice);
    HRESULT GetFunction(void* param0, uint* pSizeOfData);
}

@GUID("580CA87E-1D3C-4D54-991D-B7D3E3C298CE")
interface IDirect3DBaseTexture9 : IDirect3DResource9
{
    uint    SetLOD(uint LODNew);
    uint    GetLOD();
    uint    GetLevelCount();
    HRESULT SetAutoGenFilterType(D3DTEXTUREFILTERTYPE FilterType);
    D3DTEXTUREFILTERTYPE GetAutoGenFilterType();
    void    GenerateMipSubLevels();
}

@GUID("85C31227-3DE5-4F00-9B3A-F11AC38C18B5")
interface IDirect3DTexture9 : IDirect3DBaseTexture9
{
    HRESULT GetLevelDesc(uint Level, D3DSURFACE_DESC* pDesc);
    HRESULT GetSurfaceLevel(uint Level, IDirect3DSurface9* ppSurfaceLevel);
    HRESULT LockRect(uint Level, D3DLOCKED_RECT* pLockedRect, const(RECT)* pRect, uint Flags);
    HRESULT UnlockRect(uint Level);
    HRESULT AddDirtyRect(const(RECT)* pDirtyRect);
}

@GUID("2518526C-E789-4111-A7B9-47EF328D13E6")
interface IDirect3DVolumeTexture9 : IDirect3DBaseTexture9
{
    HRESULT GetLevelDesc(uint Level, D3DVOLUME_DESC* pDesc);
    HRESULT GetVolumeLevel(uint Level, IDirect3DVolume9* ppVolumeLevel);
    HRESULT LockBox(uint Level, D3DLOCKED_BOX* pLockedVolume, const(D3DBOX)* pBox, uint Flags);
    HRESULT UnlockBox(uint Level);
    HRESULT AddDirtyBox(const(D3DBOX)* pDirtyBox);
}

@GUID("FFF32F81-D953-473A-9223-93D652ABA93F")
interface IDirect3DCubeTexture9 : IDirect3DBaseTexture9
{
    HRESULT GetLevelDesc(uint Level, D3DSURFACE_DESC* pDesc);
    HRESULT GetCubeMapSurface(D3DCUBEMAP_FACES FaceType, uint Level, IDirect3DSurface9* ppCubeMapSurface);
    HRESULT LockRect(D3DCUBEMAP_FACES FaceType, uint Level, D3DLOCKED_RECT* pLockedRect, const(RECT)* pRect, 
                     uint Flags);
    HRESULT UnlockRect(D3DCUBEMAP_FACES FaceType, uint Level);
    HRESULT AddDirtyRect(D3DCUBEMAP_FACES FaceType, const(RECT)* pDirtyRect);
}

@GUID("B64BB1B5-FD70-4DF6-BF91-19D0A12455E3")
interface IDirect3DVertexBuffer9 : IDirect3DResource9
{
    HRESULT Lock(uint OffsetToLock, uint SizeToLock, void** ppbData, uint Flags);
    HRESULT Unlock();
    HRESULT GetDesc(D3DVERTEXBUFFER_DESC* pDesc);
}

@GUID("7C9DD65E-D3F7-4529-ACEE-785830ACDE35")
interface IDirect3DIndexBuffer9 : IDirect3DResource9
{
    HRESULT Lock(uint OffsetToLock, uint SizeToLock, void** ppbData, uint Flags);
    HRESULT Unlock();
    HRESULT GetDesc(D3DINDEXBUFFER_DESC* pDesc);
}

@GUID("0CFBAF3A-9FF6-429A-99B3-A2796AF8B89B")
interface IDirect3DSurface9 : IDirect3DResource9
{
    HRESULT GetContainer(const(GUID)* riid, void** ppContainer);
    HRESULT GetDesc(D3DSURFACE_DESC* pDesc);
    HRESULT LockRect(D3DLOCKED_RECT* pLockedRect, const(RECT)* pRect, uint Flags);
    HRESULT UnlockRect();
    HRESULT GetDC(HDC* phdc);
    HRESULT ReleaseDC(HDC hdc);
}

@GUID("24F416E6-1F67-4AA7-B88E-D33F6F3128A1")
interface IDirect3DVolume9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9* ppDevice);
    HRESULT SetPrivateData(const(GUID)* refguid, const(void)* pData, uint SizeOfData, uint Flags);
    HRESULT GetPrivateData(const(GUID)* refguid, void* pData, uint* pSizeOfData);
    HRESULT FreePrivateData(const(GUID)* refguid);
    HRESULT GetContainer(const(GUID)* riid, void** ppContainer);
    HRESULT GetDesc(D3DVOLUME_DESC* pDesc);
    HRESULT LockBox(D3DLOCKED_BOX* pLockedVolume, const(D3DBOX)* pBox, uint Flags);
    HRESULT UnlockBox();
}

@GUID("D9771460-A695-4F26-BBD3-27B840B541CC")
interface IDirect3DQuery9 : IUnknown
{
    HRESULT GetDevice(IDirect3DDevice9* ppDevice);
    D3DQUERYTYPE GetType();
    uint    GetDataSize();
    HRESULT Issue(uint dwIssueFlags);
    HRESULT GetData(void* pData, uint dwSize, uint dwGetDataFlags);
}

@GUID("02177241-69FC-400C-8FF1-93A44DF6861D")
interface IDirect3D9Ex : IDirect3D9
{
    uint    GetAdapterModeCountEx(uint Adapter, const(D3DDISPLAYMODEFILTER)* pFilter);
    HRESULT EnumAdapterModesEx(uint Adapter, const(D3DDISPLAYMODEFILTER)* pFilter, uint Mode, 
                               D3DDISPLAYMODEEX* pMode);
    HRESULT GetAdapterDisplayModeEx(uint Adapter, D3DDISPLAYMODEEX* pMode, D3DDISPLAYROTATION* pRotation);
    HRESULT CreateDeviceEx(uint Adapter, D3DDEVTYPE DeviceType, HWND hFocusWindow, uint BehaviorFlags, 
                           _D3DPRESENT_PARAMETERS_* pPresentationParameters, 
                           D3DDISPLAYMODEEX* pFullscreenDisplayMode, IDirect3DDevice9Ex* ppReturnedDeviceInterface);
    HRESULT GetAdapterLUID(uint Adapter, LUID* pLUID);
}

@GUID("B18B10CE-2649-405A-870F-95F777D4313A")
interface IDirect3DDevice9Ex : IDirect3DDevice9
{
    HRESULT SetConvolutionMonoKernel(uint width, uint height, float* rows, float* columns);
    HRESULT ComposeRects(IDirect3DSurface9 pSrc, IDirect3DSurface9 pDst, IDirect3DVertexBuffer9 pSrcRectDescs, 
                         uint NumRects, IDirect3DVertexBuffer9 pDstRectDescs, D3DCOMPOSERECTSOP Operation, 
                         int Xoffset, int Yoffset);
    HRESULT PresentEx(const(RECT)* pSourceRect, const(RECT)* pDestRect, HWND hDestWindowOverride, 
                      const(RGNDATA)* pDirtyRegion, uint dwFlags);
    HRESULT GetGPUThreadPriority(int* pPriority);
    HRESULT SetGPUThreadPriority(int Priority);
    HRESULT WaitForVBlank(uint iSwapChain);
    HRESULT CheckResourceResidency(IDirect3DResource9* pResourceArray, uint NumResources);
    HRESULT SetMaximumFrameLatency(uint MaxLatency);
    HRESULT GetMaximumFrameLatency(uint* pMaxLatency);
    HRESULT CheckDeviceState(HWND hDestinationWindow);
    HRESULT CreateRenderTargetEx(uint Width, uint Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, 
                                 uint MultisampleQuality, BOOL Lockable, IDirect3DSurface9* ppSurface, 
                                 HANDLE* pSharedHandle, uint Usage);
    HRESULT CreateOffscreenPlainSurfaceEx(uint Width, uint Height, D3DFORMAT Format, D3DPOOL Pool, 
                                          IDirect3DSurface9* ppSurface, HANDLE* pSharedHandle, uint Usage);
    HRESULT CreateDepthStencilSurfaceEx(uint Width, uint Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, 
                                        uint MultisampleQuality, BOOL Discard, IDirect3DSurface9* ppSurface, 
                                        HANDLE* pSharedHandle, uint Usage);
    HRESULT ResetEx(_D3DPRESENT_PARAMETERS_* pPresentationParameters, D3DDISPLAYMODEEX* pFullscreenDisplayMode);
    HRESULT GetDisplayModeEx(uint iSwapChain, D3DDISPLAYMODEEX* pMode, D3DDISPLAYROTATION* pRotation);
}

@GUID("91886CAF-1C3D-4D2E-A0AB-3E4C7D8D3303")
interface IDirect3DSwapChain9Ex : IDirect3DSwapChain9
{
    HRESULT GetLastPresentCount(uint* pLastPresentCount);
    HRESULT GetPresentStats(D3DPRESENTSTATS* pPresentationStatistics);
    HRESULT GetDisplayModeEx(D3DDISPLAYMODEEX* pMode, D3DDISPLAYROTATION* pRotation);
}


// GUIDs


const GUID IID_ID2D1AnalysisTransform         = GUIDOF!ID2D1AnalysisTransform;
const GUID IID_ID2D1Bitmap                    = GUIDOF!ID2D1Bitmap;
const GUID IID_ID2D1Bitmap1                   = GUIDOF!ID2D1Bitmap1;
const GUID IID_ID2D1BitmapBrush               = GUIDOF!ID2D1BitmapBrush;
const GUID IID_ID2D1BitmapBrush1              = GUIDOF!ID2D1BitmapBrush1;
const GUID IID_ID2D1BitmapRenderTarget        = GUIDOF!ID2D1BitmapRenderTarget;
const GUID IID_ID2D1BlendTransform            = GUIDOF!ID2D1BlendTransform;
const GUID IID_ID2D1BorderTransform           = GUIDOF!ID2D1BorderTransform;
const GUID IID_ID2D1BoundsAdjustmentTransform = GUIDOF!ID2D1BoundsAdjustmentTransform;
const GUID IID_ID2D1Brush                     = GUIDOF!ID2D1Brush;
const GUID IID_ID2D1ColorContext              = GUIDOF!ID2D1ColorContext;
const GUID IID_ID2D1ColorContext1             = GUIDOF!ID2D1ColorContext1;
const GUID IID_ID2D1CommandList               = GUIDOF!ID2D1CommandList;
const GUID IID_ID2D1CommandSink               = GUIDOF!ID2D1CommandSink;
const GUID IID_ID2D1CommandSink1              = GUIDOF!ID2D1CommandSink1;
const GUID IID_ID2D1CommandSink2              = GUIDOF!ID2D1CommandSink2;
const GUID IID_ID2D1CommandSink3              = GUIDOF!ID2D1CommandSink3;
const GUID IID_ID2D1CommandSink4              = GUIDOF!ID2D1CommandSink4;
const GUID IID_ID2D1CommandSink5              = GUIDOF!ID2D1CommandSink5;
const GUID IID_ID2D1ComputeInfo               = GUIDOF!ID2D1ComputeInfo;
const GUID IID_ID2D1ComputeTransform          = GUIDOF!ID2D1ComputeTransform;
const GUID IID_ID2D1ConcreteTransform         = GUIDOF!ID2D1ConcreteTransform;
const GUID IID_ID2D1DCRenderTarget            = GUIDOF!ID2D1DCRenderTarget;
const GUID IID_ID2D1Device                    = GUIDOF!ID2D1Device;
const GUID IID_ID2D1Device1                   = GUIDOF!ID2D1Device1;
const GUID IID_ID2D1Device2                   = GUIDOF!ID2D1Device2;
const GUID IID_ID2D1Device3                   = GUIDOF!ID2D1Device3;
const GUID IID_ID2D1Device4                   = GUIDOF!ID2D1Device4;
const GUID IID_ID2D1Device5                   = GUIDOF!ID2D1Device5;
const GUID IID_ID2D1Device6                   = GUIDOF!ID2D1Device6;
const GUID IID_ID2D1DeviceContext             = GUIDOF!ID2D1DeviceContext;
const GUID IID_ID2D1DeviceContext1            = GUIDOF!ID2D1DeviceContext1;
const GUID IID_ID2D1DeviceContext2            = GUIDOF!ID2D1DeviceContext2;
const GUID IID_ID2D1DeviceContext3            = GUIDOF!ID2D1DeviceContext3;
const GUID IID_ID2D1DeviceContext4            = GUIDOF!ID2D1DeviceContext4;
const GUID IID_ID2D1DeviceContext5            = GUIDOF!ID2D1DeviceContext5;
const GUID IID_ID2D1DeviceContext6            = GUIDOF!ID2D1DeviceContext6;
const GUID IID_ID2D1DrawInfo                  = GUIDOF!ID2D1DrawInfo;
const GUID IID_ID2D1DrawTransform             = GUIDOF!ID2D1DrawTransform;
const GUID IID_ID2D1DrawingStateBlock         = GUIDOF!ID2D1DrawingStateBlock;
const GUID IID_ID2D1DrawingStateBlock1        = GUIDOF!ID2D1DrawingStateBlock1;
const GUID IID_ID2D1Effect                    = GUIDOF!ID2D1Effect;
const GUID IID_ID2D1EffectContext             = GUIDOF!ID2D1EffectContext;
const GUID IID_ID2D1EffectContext1            = GUIDOF!ID2D1EffectContext1;
const GUID IID_ID2D1EffectContext2            = GUIDOF!ID2D1EffectContext2;
const GUID IID_ID2D1EffectImpl                = GUIDOF!ID2D1EffectImpl;
const GUID IID_ID2D1EllipseGeometry           = GUIDOF!ID2D1EllipseGeometry;
const GUID IID_ID2D1Factory                   = GUIDOF!ID2D1Factory;
const GUID IID_ID2D1Factory1                  = GUIDOF!ID2D1Factory1;
const GUID IID_ID2D1Factory2                  = GUIDOF!ID2D1Factory2;
const GUID IID_ID2D1Factory3                  = GUIDOF!ID2D1Factory3;
const GUID IID_ID2D1Factory4                  = GUIDOF!ID2D1Factory4;
const GUID IID_ID2D1Factory5                  = GUIDOF!ID2D1Factory5;
const GUID IID_ID2D1Factory6                  = GUIDOF!ID2D1Factory6;
const GUID IID_ID2D1Factory7                  = GUIDOF!ID2D1Factory7;
const GUID IID_ID2D1GdiInteropRenderTarget    = GUIDOF!ID2D1GdiInteropRenderTarget;
const GUID IID_ID2D1GdiMetafile               = GUIDOF!ID2D1GdiMetafile;
const GUID IID_ID2D1GdiMetafile1              = GUIDOF!ID2D1GdiMetafile1;
const GUID IID_ID2D1GdiMetafileSink           = GUIDOF!ID2D1GdiMetafileSink;
const GUID IID_ID2D1GdiMetafileSink1          = GUIDOF!ID2D1GdiMetafileSink1;
const GUID IID_ID2D1Geometry                  = GUIDOF!ID2D1Geometry;
const GUID IID_ID2D1GeometryGroup             = GUIDOF!ID2D1GeometryGroup;
const GUID IID_ID2D1GeometryRealization       = GUIDOF!ID2D1GeometryRealization;
const GUID IID_ID2D1GeometrySink              = GUIDOF!ID2D1GeometrySink;
const GUID IID_ID2D1GradientMesh              = GUIDOF!ID2D1GradientMesh;
const GUID IID_ID2D1GradientStopCollection    = GUIDOF!ID2D1GradientStopCollection;
const GUID IID_ID2D1GradientStopCollection1   = GUIDOF!ID2D1GradientStopCollection1;
const GUID IID_ID2D1HwndRenderTarget          = GUIDOF!ID2D1HwndRenderTarget;
const GUID IID_ID2D1Image                     = GUIDOF!ID2D1Image;
const GUID IID_ID2D1ImageBrush                = GUIDOF!ID2D1ImageBrush;
const GUID IID_ID2D1ImageSource               = GUIDOF!ID2D1ImageSource;
const GUID IID_ID2D1ImageSourceFromWic        = GUIDOF!ID2D1ImageSourceFromWic;
const GUID IID_ID2D1Ink                       = GUIDOF!ID2D1Ink;
const GUID IID_ID2D1InkStyle                  = GUIDOF!ID2D1InkStyle;
const GUID IID_ID2D1Layer                     = GUIDOF!ID2D1Layer;
const GUID IID_ID2D1LinearGradientBrush       = GUIDOF!ID2D1LinearGradientBrush;
const GUID IID_ID2D1LookupTable3D             = GUIDOF!ID2D1LookupTable3D;
const GUID IID_ID2D1Mesh                      = GUIDOF!ID2D1Mesh;
const GUID IID_ID2D1Multithread               = GUIDOF!ID2D1Multithread;
const GUID IID_ID2D1OffsetTransform           = GUIDOF!ID2D1OffsetTransform;
const GUID IID_ID2D1PathGeometry              = GUIDOF!ID2D1PathGeometry;
const GUID IID_ID2D1PathGeometry1             = GUIDOF!ID2D1PathGeometry1;
const GUID IID_ID2D1PrintControl              = GUIDOF!ID2D1PrintControl;
const GUID IID_ID2D1Properties                = GUIDOF!ID2D1Properties;
const GUID IID_ID2D1RadialGradientBrush       = GUIDOF!ID2D1RadialGradientBrush;
const GUID IID_ID2D1RectangleGeometry         = GUIDOF!ID2D1RectangleGeometry;
const GUID IID_ID2D1RenderInfo                = GUIDOF!ID2D1RenderInfo;
const GUID IID_ID2D1RenderTarget              = GUIDOF!ID2D1RenderTarget;
const GUID IID_ID2D1Resource                  = GUIDOF!ID2D1Resource;
const GUID IID_ID2D1ResourceTexture           = GUIDOF!ID2D1ResourceTexture;
const GUID IID_ID2D1RoundedRectangleGeometry  = GUIDOF!ID2D1RoundedRectangleGeometry;
const GUID IID_ID2D1SimplifiedGeometrySink    = GUIDOF!ID2D1SimplifiedGeometrySink;
const GUID IID_ID2D1SolidColorBrush           = GUIDOF!ID2D1SolidColorBrush;
const GUID IID_ID2D1SourceTransform           = GUIDOF!ID2D1SourceTransform;
const GUID IID_ID2D1SpriteBatch               = GUIDOF!ID2D1SpriteBatch;
const GUID IID_ID2D1StrokeStyle               = GUIDOF!ID2D1StrokeStyle;
const GUID IID_ID2D1StrokeStyle1              = GUIDOF!ID2D1StrokeStyle1;
const GUID IID_ID2D1SvgAttribute              = GUIDOF!ID2D1SvgAttribute;
const GUID IID_ID2D1SvgDocument               = GUIDOF!ID2D1SvgDocument;
const GUID IID_ID2D1SvgElement                = GUIDOF!ID2D1SvgElement;
const GUID IID_ID2D1SvgGlyphStyle             = GUIDOF!ID2D1SvgGlyphStyle;
const GUID IID_ID2D1SvgPaint                  = GUIDOF!ID2D1SvgPaint;
const GUID IID_ID2D1SvgPathData               = GUIDOF!ID2D1SvgPathData;
const GUID IID_ID2D1SvgPointCollection        = GUIDOF!ID2D1SvgPointCollection;
const GUID IID_ID2D1SvgStrokeDashArray        = GUIDOF!ID2D1SvgStrokeDashArray;
const GUID IID_ID2D1TessellationSink          = GUIDOF!ID2D1TessellationSink;
const GUID IID_ID2D1Transform                 = GUIDOF!ID2D1Transform;
const GUID IID_ID2D1TransformGraph            = GUIDOF!ID2D1TransformGraph;
const GUID IID_ID2D1TransformNode             = GUIDOF!ID2D1TransformNode;
const GUID IID_ID2D1TransformedGeometry       = GUIDOF!ID2D1TransformedGeometry;
const GUID IID_ID2D1TransformedImageSource    = GUIDOF!ID2D1TransformedImageSource;
const GUID IID_ID2D1VertexBuffer              = GUIDOF!ID2D1VertexBuffer;
const GUID IID_IDirect3D9                     = GUIDOF!IDirect3D9;
const GUID IID_IDirect3D9Ex                   = GUIDOF!IDirect3D9Ex;
const GUID IID_IDirect3DBaseTexture9          = GUIDOF!IDirect3DBaseTexture9;
const GUID IID_IDirect3DCubeTexture9          = GUIDOF!IDirect3DCubeTexture9;
const GUID IID_IDirect3DDevice9               = GUIDOF!IDirect3DDevice9;
const GUID IID_IDirect3DDevice9Ex             = GUIDOF!IDirect3DDevice9Ex;
const GUID IID_IDirect3DIndexBuffer9          = GUIDOF!IDirect3DIndexBuffer9;
const GUID IID_IDirect3DPixelShader9          = GUIDOF!IDirect3DPixelShader9;
const GUID IID_IDirect3DQuery9                = GUIDOF!IDirect3DQuery9;
const GUID IID_IDirect3DResource9             = GUIDOF!IDirect3DResource9;
const GUID IID_IDirect3DStateBlock9           = GUIDOF!IDirect3DStateBlock9;
const GUID IID_IDirect3DSurface9              = GUIDOF!IDirect3DSurface9;
const GUID IID_IDirect3DSwapChain9            = GUIDOF!IDirect3DSwapChain9;
const GUID IID_IDirect3DSwapChain9Ex          = GUIDOF!IDirect3DSwapChain9Ex;
const GUID IID_IDirect3DTexture9              = GUIDOF!IDirect3DTexture9;
const GUID IID_IDirect3DVertexBuffer9         = GUIDOF!IDirect3DVertexBuffer9;
const GUID IID_IDirect3DVertexDeclaration9    = GUIDOF!IDirect3DVertexDeclaration9;
const GUID IID_IDirect3DVertexShader9         = GUIDOF!IDirect3DVertexShader9;
const GUID IID_IDirect3DVolume9               = GUIDOF!IDirect3DVolume9;
const GUID IID_IDirect3DVolumeTexture9        = GUIDOF!IDirect3DVolumeTexture9;
