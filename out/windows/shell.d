module windows.shell;

public import windows.core;
public import windows.activedirectory : BFFCALLBACK;
public import windows.audio : IPropertyStore;
public import windows.automation : BSTR, DISPPARAMS, EXCEPINFO, IDispatch, IPropertyBag, VARIANT;
public import windows.com : BYTE_BLOB, FORMATETC, HRESULT, IBindCtx, IBindStatusCallback, IConnectionPoint, IDataObject,
                            IDropSource, IDropTarget, IEnumFORMATETC, IEnumGUID, IEnumString, IEnumUnknown, IMalloc,
                            IMoniker, IOleCommandTarget, IOleInPlaceSite, IOleObject, IOleWindow, IPersist, IUnknown,
                            OleMenuGroupWidths;
public import windows.controls : HIMAGELIST, HPROPSHEETPAGE, LPFNADDPROPSHEETPAGE, NMHDR, TBBUTTON;
public import windows.dbg : IEnumPrivacyRecords;
public import windows.displaydevices : POINT, POINTL, RECT, RECTL, SIZE;
public import windows.filesystem : WIN32_FIND_DATAA, WIN32_FIND_DATAW;
public import windows.gdi : HBITMAP, HDC, HICON, HPALETTE;
public import windows.intl : CANDIDATEFORM, CANDIDATELIST, COMPOSITIONFORM, HIMCC__, HIMC__, IMEMENUITEMINFOA,
                             IMEMENUITEMINFOW, REGISTERWORDA, REGISTERWORDW, STYLEBUFA, STYLEBUFW;
public import windows.iphelper : NET_ADDRESS_INFO;
public import windows.menusandresources : HACCEL, HMENU;
public import windows.search : ICondition;
public import windows.security : NETRESOURCEA, SID_AND_ATTRIBUTES;
public import windows.structuredstorage : IPropertySetStorage, IStorage, IStream, PROPVARIANT;
public import windows.systemservices : BOOL, COORD, HANDLE, HINSTANCE, IServiceProvider, LARGE_INTEGER,
                                       LPTHREAD_START_ROUTINE, LRESULT, LSTATUS, NTSTATUS, OVERLAPPED,
                                       PROCESS_INFORMATION, SECURITY_ATTRIBUTES, STARTUPINFOW, ULARGE_INTEGER;
public import windows.windowsandmessaging : CREATESTRUCTW, HWND, LPARAM, MSG, WPARAM;
public import windows.windowsprogramming : FILETIME, HKEY, IWebBrowser2, IXMLDOMDocument, SYSTEMTIME;
public import windows.windowspropertiessystem : GETPROPERTYSTOREFLAGS, IPropertyChangeArray, IPropertyDescriptionList,
                                                IPropertyStoreFactory, PDOPSTATUS, PROPERTYKEY, SERIALIZEDPROPSTORAGE;

extern(Windows):


// Enums


enum : int
{
    ASSOCCLASS_SHELL_KEY        = 0x00000000,
    ASSOCCLASS_PROGID_KEY       = 0x00000001,
    ASSOCCLASS_PROGID_STR       = 0x00000002,
    ASSOCCLASS_CLSID_KEY        = 0x00000003,
    ASSOCCLASS_CLSID_STR        = 0x00000004,
    ASSOCCLASS_APP_KEY          = 0x00000005,
    ASSOCCLASS_APP_STR          = 0x00000006,
    ASSOCCLASS_SYSTEM_STR       = 0x00000007,
    ASSOCCLASS_FOLDER           = 0x00000008,
    ASSOCCLASS_STAR             = 0x00000009,
    ASSOCCLASS_FIXED_PROGID_STR = 0x0000000a,
    ASSOCCLASS_PROTOCOL_STR     = 0x0000000b,
}
alias ASSOCCLASS = int;

enum : int
{
    QUNS_NOT_PRESENT             = 0x00000001,
    QUNS_BUSY                    = 0x00000002,
    QUNS_RUNNING_D3D_FULL_SCREEN = 0x00000003,
    QUNS_PRESENTATION_MODE       = 0x00000004,
    QUNS_ACCEPTS_NOTIFICATIONS   = 0x00000005,
    QUNS_QUIET_TIME              = 0x00000006,
    QUNS_APP                     = 0x00000007,
}
alias QUERY_USER_NOTIFICATION_STATE = int;

enum : int
{
    SIID_DOCNOASSOC        = 0x00000000,
    SIID_DOCASSOC          = 0x00000001,
    SIID_APPLICATION       = 0x00000002,
    SIID_FOLDER            = 0x00000003,
    SIID_FOLDEROPEN        = 0x00000004,
    SIID_DRIVE525          = 0x00000005,
    SIID_DRIVE35           = 0x00000006,
    SIID_DRIVEREMOVE       = 0x00000007,
    SIID_DRIVEFIXED        = 0x00000008,
    SIID_DRIVENET          = 0x00000009,
    SIID_DRIVENETDISABLED  = 0x0000000a,
    SIID_DRIVECD           = 0x0000000b,
    SIID_DRIVERAM          = 0x0000000c,
    SIID_WORLD             = 0x0000000d,
    SIID_SERVER            = 0x0000000f,
    SIID_PRINTER           = 0x00000010,
    SIID_MYNETWORK         = 0x00000011,
    SIID_FIND              = 0x00000016,
    SIID_HELP              = 0x00000017,
    SIID_SHARE             = 0x0000001c,
    SIID_LINK              = 0x0000001d,
    SIID_SLOWFILE          = 0x0000001e,
    SIID_RECYCLER          = 0x0000001f,
    SIID_RECYCLERFULL      = 0x00000020,
    SIID_MEDIACDAUDIO      = 0x00000028,
    SIID_LOCK              = 0x0000002f,
    SIID_AUTOLIST          = 0x00000031,
    SIID_PRINTERNET        = 0x00000032,
    SIID_SERVERSHARE       = 0x00000033,
    SIID_PRINTERFAX        = 0x00000034,
    SIID_PRINTERFAXNET     = 0x00000035,
    SIID_PRINTERFILE       = 0x00000036,
    SIID_STACK             = 0x00000037,
    SIID_MEDIASVCD         = 0x00000038,
    SIID_STUFFEDFOLDER     = 0x00000039,
    SIID_DRIVEUNKNOWN      = 0x0000003a,
    SIID_DRIVEDVD          = 0x0000003b,
    SIID_MEDIADVD          = 0x0000003c,
    SIID_MEDIADVDRAM       = 0x0000003d,
    SIID_MEDIADVDRW        = 0x0000003e,
    SIID_MEDIADVDR         = 0x0000003f,
    SIID_MEDIADVDROM       = 0x00000040,
    SIID_MEDIACDAUDIOPLUS  = 0x00000041,
    SIID_MEDIACDRW         = 0x00000042,
    SIID_MEDIACDR          = 0x00000043,
    SIID_MEDIACDBURN       = 0x00000044,
    SIID_MEDIABLANKCD      = 0x00000045,
    SIID_MEDIACDROM        = 0x00000046,
    SIID_AUDIOFILES        = 0x00000047,
    SIID_IMAGEFILES        = 0x00000048,
    SIID_VIDEOFILES        = 0x00000049,
    SIID_MIXEDFILES        = 0x0000004a,
    SIID_FOLDERBACK        = 0x0000004b,
    SIID_FOLDERFRONT       = 0x0000004c,
    SIID_SHIELD            = 0x0000004d,
    SIID_WARNING           = 0x0000004e,
    SIID_INFO              = 0x0000004f,
    SIID_ERROR             = 0x00000050,
    SIID_KEY               = 0x00000051,
    SIID_SOFTWARE          = 0x00000052,
    SIID_RENAME            = 0x00000053,
    SIID_DELETE            = 0x00000054,
    SIID_MEDIAAUDIODVD     = 0x00000055,
    SIID_MEDIAMOVIEDVD     = 0x00000056,
    SIID_MEDIAENHANCEDCD   = 0x00000057,
    SIID_MEDIAENHANCEDDVD  = 0x00000058,
    SIID_MEDIAHDDVD        = 0x00000059,
    SIID_MEDIABLURAY       = 0x0000005a,
    SIID_MEDIAVCD          = 0x0000005b,
    SIID_MEDIADVDPLUSR     = 0x0000005c,
    SIID_MEDIADVDPLUSRW    = 0x0000005d,
    SIID_DESKTOPPC         = 0x0000005e,
    SIID_MOBILEPC          = 0x0000005f,
    SIID_USERS             = 0x00000060,
    SIID_MEDIASMARTMEDIA   = 0x00000061,
    SIID_MEDIACOMPACTFLASH = 0x00000062,
    SIID_DEVICECELLPHONE   = 0x00000063,
    SIID_DEVICECAMERA      = 0x00000064,
    SIID_DEVICEVIDEOCAMERA = 0x00000065,
    SIID_DEVICEAUDIOPLAYER = 0x00000066,
    SIID_NETWORKCONNECT    = 0x00000067,
    SIID_INTERNET          = 0x00000068,
    SIID_ZIPFILE           = 0x00000069,
    SIID_SETTINGS          = 0x0000006a,
    SIID_DRIVEHDDVD        = 0x00000084,
    SIID_DRIVEBD           = 0x00000085,
    SIID_MEDIAHDDVDROM     = 0x00000086,
    SIID_MEDIAHDDVDR       = 0x00000087,
    SIID_MEDIAHDDVDRAM     = 0x00000088,
    SIID_MEDIABDROM        = 0x00000089,
    SIID_MEDIABDR          = 0x0000008a,
    SIID_MEDIABDRE         = 0x0000008b,
    SIID_CLUSTEREDDRIVE    = 0x0000008c,
    SIID_MAX_ICONS         = 0x000000b5,
}
alias SHSTOCKICONID = int;

enum : int
{
    STRRET_WSTR   = 0x00000000,
    STRRET_OFFSET = 0x00000001,
    STRRET_CSTR   = 0x00000002,
}
alias STRRET_TYPE = int;

enum : int
{
    PERCEIVED_TYPE_FIRST       = 0xfffffffd,
    PERCEIVED_TYPE_CUSTOM      = 0xfffffffd,
    PERCEIVED_TYPE_UNSPECIFIED = 0xfffffffe,
    PERCEIVED_TYPE_FOLDER      = 0xffffffff,
    PERCEIVED_TYPE_UNKNOWN     = 0x00000000,
    PERCEIVED_TYPE_TEXT        = 0x00000001,
    PERCEIVED_TYPE_IMAGE       = 0x00000002,
    PERCEIVED_TYPE_AUDIO       = 0x00000003,
    PERCEIVED_TYPE_VIDEO       = 0x00000004,
    PERCEIVED_TYPE_COMPRESSED  = 0x00000005,
    PERCEIVED_TYPE_DOCUMENT    = 0x00000006,
    PERCEIVED_TYPE_SYSTEM      = 0x00000007,
    PERCEIVED_TYPE_APPLICATION = 0x00000008,
    PERCEIVED_TYPE_GAMEMEDIA   = 0x00000009,
    PERCEIVED_TYPE_CONTACTS    = 0x0000000a,
    PERCEIVED_TYPE_LAST        = 0x0000000a,
}
alias PERCEIVED = int;

enum : int
{
    SHCOLSTATE_DEFAULT            = 0x00000000,
    SHCOLSTATE_TYPE_STR           = 0x00000001,
    SHCOLSTATE_TYPE_INT           = 0x00000002,
    SHCOLSTATE_TYPE_DATE          = 0x00000003,
    SHCOLSTATE_TYPEMASK           = 0x0000000f,
    SHCOLSTATE_ONBYDEFAULT        = 0x00000010,
    SHCOLSTATE_SLOW               = 0x00000020,
    SHCOLSTATE_EXTENDED           = 0x00000040,
    SHCOLSTATE_SECONDARYUI        = 0x00000080,
    SHCOLSTATE_HIDDEN             = 0x00000100,
    SHCOLSTATE_PREFER_VARCMP      = 0x00000200,
    SHCOLSTATE_PREFER_FMTCMP      = 0x00000400,
    SHCOLSTATE_NOSORTBYFOLDERNESS = 0x00000800,
    SHCOLSTATE_VIEWONLY           = 0x00010000,
    SHCOLSTATE_BATCHREAD          = 0x00020000,
    SHCOLSTATE_NO_GROUPBY         = 0x00040000,
    SHCOLSTATE_FIXED_WIDTH        = 0x00001000,
    SHCOLSTATE_NODPISCALE         = 0x00002000,
    SHCOLSTATE_FIXED_RATIO        = 0x00004000,
    SHCOLSTATE_DISPLAYMASK        = 0x0000f000,
}
alias SHCOLSTATE = int;

enum : int
{
    DEVICE_SCALE_FACTOR_INVALID = 0x00000000,
    SCALE_100_PERCENT           = 0x00000064,
    SCALE_120_PERCENT           = 0x00000078,
    SCALE_125_PERCENT           = 0x0000007d,
    SCALE_140_PERCENT           = 0x0000008c,
    SCALE_150_PERCENT           = 0x00000096,
    SCALE_160_PERCENT           = 0x000000a0,
    SCALE_175_PERCENT           = 0x000000af,
    SCALE_180_PERCENT           = 0x000000b4,
    SCALE_200_PERCENT           = 0x000000c8,
    SCALE_225_PERCENT           = 0x000000e1,
    SCALE_250_PERCENT           = 0x000000fa,
    SCALE_300_PERCENT           = 0x0000012c,
    SCALE_350_PERCENT           = 0x0000015e,
    SCALE_400_PERCENT           = 0x00000190,
    SCALE_450_PERCENT           = 0x000001c2,
    SCALE_500_PERCENT           = 0x000001f4,
}
alias DEVICE_SCALE_FACTOR = int;

enum : int
{
    SHGDN_NORMAL        = 0x00000000,
    SHGDN_INFOLDER      = 0x00000001,
    SHGDN_FOREDITING    = 0x00001000,
    SHGDN_FORADDRESSBAR = 0x00004000,
    SHGDN_FORPARSING    = 0x00008000,
}
alias _SHGDNF = int;

enum : int
{
    SHCONTF_CHECKING_FOR_CHILDREN = 0x00000010,
    SHCONTF_FOLDERS               = 0x00000020,
    SHCONTF_NONFOLDERS            = 0x00000040,
    SHCONTF_INCLUDEHIDDEN         = 0x00000080,
    SHCONTF_INIT_ON_FIRST_NEXT    = 0x00000100,
    SHCONTF_NETPRINTERSRCH        = 0x00000200,
    SHCONTF_SHAREABLE             = 0x00000400,
    SHCONTF_STORAGE               = 0x00000800,
    SHCONTF_NAVIGATION_ENUM       = 0x00001000,
    SHCONTF_FASTITEMS             = 0x00002000,
    SHCONTF_FLATLIST              = 0x00004000,
    SHCONTF_ENABLE_ASYNC          = 0x00008000,
    SHCONTF_INCLUDESUPERHIDDEN    = 0x00010000,
}
alias _SHCONTF = int;

enum : int
{
    SPFF_NONE                   = 0x00000000,
    SPFF_DOWNLOAD_BY_DEFAULT    = 0x00000001,
    SPFF_CREATED_ON_THIS_DEVICE = 0x00000002,
}
alias STORAGE_PROVIDER_FILE_FLAGS = int;

enum : int
{
    MUS_COMPLETE        = 0x00000000,
    MUS_USERINPUTNEEDED = 0x00000001,
    MUS_FAILED          = 0x00000002,
}
alias MERGE_UPDATE_STATUS = int;

enum : int
{
    FEM_VIEWRESULT = 0x00000000,
    FEM_NAVIGATION = 0x00000001,
}
alias FOLDER_ENUM_MODE = int;

enum : int
{
    FWF_NONE                = 0x00000000,
    FWF_AUTOARRANGE         = 0x00000001,
    FWF_ABBREVIATEDNAMES    = 0x00000002,
    FWF_SNAPTOGRID          = 0x00000004,
    FWF_OWNERDATA           = 0x00000008,
    FWF_BESTFITWINDOW       = 0x00000010,
    FWF_DESKTOP             = 0x00000020,
    FWF_SINGLESEL           = 0x00000040,
    FWF_NOSUBFOLDERS        = 0x00000080,
    FWF_TRANSPARENT         = 0x00000100,
    FWF_NOCLIENTEDGE        = 0x00000200,
    FWF_NOSCROLL            = 0x00000400,
    FWF_ALIGNLEFT           = 0x00000800,
    FWF_NOICONS             = 0x00001000,
    FWF_SHOWSELALWAYS       = 0x00002000,
    FWF_NOVISIBLE           = 0x00004000,
    FWF_SINGLECLICKACTIVATE = 0x00008000,
    FWF_NOWEBVIEW           = 0x00010000,
    FWF_HIDEFILENAMES       = 0x00020000,
    FWF_CHECKSELECT         = 0x00040000,
    FWF_NOENUMREFRESH       = 0x00080000,
    FWF_NOGROUPING          = 0x00100000,
    FWF_FULLROWSELECT       = 0x00200000,
    FWF_NOFILTERS           = 0x00400000,
    FWF_NOCOLUMNHEADER      = 0x00800000,
    FWF_NOHEADERINALLVIEWS  = 0x01000000,
    FWF_EXTENDEDTILES       = 0x02000000,
    FWF_TRICHECKSELECT      = 0x04000000,
    FWF_AUTOCHECKSELECT     = 0x08000000,
    FWF_NOBROWSERVIEWSTATE  = 0x10000000,
    FWF_SUBSETGROUPS        = 0x20000000,
    FWF_USESEARCHFOLDER     = 0x40000000,
    FWF_ALLOWRTLREADING     = 0x80000000,
}
alias FOLDERFLAGS = int;

enum : int
{
    FVM_AUTO       = 0xffffffff,
    FVM_FIRST      = 0x00000001,
    FVM_ICON       = 0x00000001,
    FVM_SMALLICON  = 0x00000002,
    FVM_LIST       = 0x00000003,
    FVM_DETAILS    = 0x00000004,
    FVM_THUMBNAIL  = 0x00000005,
    FVM_TILE       = 0x00000006,
    FVM_THUMBSTRIP = 0x00000007,
    FVM_CONTENT    = 0x00000008,
    FVM_LAST       = 0x00000008,
}
alias FOLDERVIEWMODE = int;

enum : int
{
    FLVM_UNSPECIFIED = 0xffffffff,
    FLVM_FIRST       = 0x00000001,
    FLVM_DETAILS     = 0x00000001,
    FLVM_TILES       = 0x00000002,
    FLVM_ICONS       = 0x00000003,
    FLVM_LIST        = 0x00000004,
    FLVM_CONTENT     = 0x00000005,
    FLVM_LAST        = 0x00000005,
}
alias FOLDERLOGICALVIEWMODE = int;

enum : int
{
    SVSI_DESELECT       = 0x00000000,
    SVSI_SELECT         = 0x00000001,
    SVSI_EDIT           = 0x00000003,
    SVSI_DESELECTOTHERS = 0x00000004,
    SVSI_ENSUREVISIBLE  = 0x00000008,
    SVSI_FOCUSED        = 0x00000010,
    SVSI_TRANSLATEPT    = 0x00000020,
    SVSI_SELECTIONMARK  = 0x00000040,
    SVSI_POSITIONITEM   = 0x00000080,
    SVSI_CHECK          = 0x00000100,
    SVSI_CHECK2         = 0x00000200,
    SVSI_KEYBOARDSELECT = 0x00000401,
    SVSI_NOTAKEFOCUS    = 0x40000000,
}
alias _SVSIF = int;

enum : int
{
    SVGIO_BACKGROUND     = 0x00000000,
    SVGIO_SELECTION      = 0x00000001,
    SVGIO_ALLVIEW        = 0x00000002,
    SVGIO_CHECKED        = 0x00000003,
    SVGIO_TYPE_MASK      = 0x0000000f,
    SVGIO_FLAG_VIEWORDER = 0x80000000,
}
alias _SVGIO = int;

enum : int
{
    SVUIA_DEACTIVATE       = 0x00000000,
    SVUIA_ACTIVATE_NOFOCUS = 0x00000001,
    SVUIA_ACTIVATE_FOCUS   = 0x00000002,
    SVUIA_INPLACEACTIVATE  = 0x00000003,
}
alias SVUIA_STATUS = int;

enum : int
{
    SORT_DESCENDING = 0xffffffff,
    SORT_ASCENDING  = 0x00000001,
}
alias tagSORTDIRECTION = int;

enum : int
{
    FVST_EMPTYTEXT = 0x00000000,
}
alias FVTEXTTYPE = int;

enum : int
{
    CM_MASK_WIDTH        = 0x00000001,
    CM_MASK_DEFAULTWIDTH = 0x00000002,
    CM_MASK_IDEALWIDTH   = 0x00000004,
    CM_MASK_NAME         = 0x00000008,
    CM_MASK_STATE        = 0x00000010,
}
alias CM_MASK = int;

enum : int
{
    CM_STATE_NONE               = 0x00000000,
    CM_STATE_VISIBLE            = 0x00000001,
    CM_STATE_FIXEDWIDTH         = 0x00000002,
    CM_STATE_NOSORTBYFOLDERNESS = 0x00000004,
    CM_STATE_ALWAYSVISIBLE      = 0x00000008,
}
alias CM_STATE = int;

enum : int
{
    CM_ENUM_ALL     = 0x00000001,
    CM_ENUM_VISIBLE = 0x00000002,
}
alias CM_ENUM_FLAGS = int;

enum : int
{
    CM_WIDTH_USEDEFAULT = 0xffffffff,
    CM_WIDTH_AUTOSIZE   = 0xfffffffe,
}
alias CM_SET_WIDTH_VALUE = int;

enum : int
{
    SIGDN_NORMALDISPLAY               = 0x00000000,
    SIGDN_PARENTRELATIVEPARSING       = 0x80018001,
    SIGDN_DESKTOPABSOLUTEPARSING      = 0x80028000,
    SIGDN_PARENTRELATIVEEDITING       = 0x80031001,
    SIGDN_DESKTOPABSOLUTEEDITING      = 0x8004c000,
    SIGDN_FILESYSPATH                 = 0x80058000,
    SIGDN_URL                         = 0x80068000,
    SIGDN_PARENTRELATIVEFORADDRESSBAR = 0x8007c001,
    SIGDN_PARENTRELATIVE              = 0x80080001,
    SIGDN_PARENTRELATIVEFORUI         = 0x80094001,
}
alias SIGDN = int;

enum : int
{
    SICHINT_DISPLAY                       = 0x00000000,
    SICHINT_ALLFIELDS                     = 0x80000000,
    SICHINT_CANONICAL                     = 0x10000000,
    SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL = 0x20000000,
}
alias _SICHINTF = int;

enum : int
{
    DOGIF_DEFAULT       = 0x00000000,
    DOGIF_TRAVERSE_LINK = 0x00000001,
    DOGIF_NO_HDROP      = 0x00000002,
    DOGIF_NO_URL        = 0x00000004,
    DOGIF_ONLY_IF_ONE   = 0x00000008,
}
alias DATAOBJ_GET_ITEM_FLAGS = int;

enum : int
{
    SIIGBF_RESIZETOFIT    = 0x00000000,
    SIIGBF_BIGGERSIZEOK   = 0x00000001,
    SIIGBF_MEMORYONLY     = 0x00000002,
    SIIGBF_ICONONLY       = 0x00000004,
    SIIGBF_THUMBNAILONLY  = 0x00000008,
    SIIGBF_INCACHEONLY    = 0x00000010,
    SIIGBF_CROPTOSQUARE   = 0x00000020,
    SIIGBF_WIDETHUMBNAILS = 0x00000040,
    SIIGBF_ICONBACKGROUND = 0x00000080,
    SIIGBF_SCALEUP        = 0x00000100,
}
alias _SIIGBF = int;

enum : int
{
    STGOP_MOVE            = 0x00000001,
    STGOP_COPY            = 0x00000002,
    STGOP_SYNC            = 0x00000003,
    STGOP_REMOVE          = 0x00000005,
    STGOP_RENAME          = 0x00000006,
    STGOP_APPLYPROPERTIES = 0x00000008,
    STGOP_NEW             = 0x0000000a,
}
alias STGOP = int;

enum : int
{
    TSF_NORMAL                     = 0x00000000,
    TSF_FAIL_EXIST                 = 0x00000000,
    TSF_RENAME_EXIST               = 0x00000001,
    TSF_OVERWRITE_EXIST            = 0x00000002,
    TSF_ALLOW_DECRYPTION           = 0x00000004,
    TSF_NO_SECURITY                = 0x00000008,
    TSF_COPY_CREATION_TIME         = 0x00000010,
    TSF_COPY_WRITE_TIME            = 0x00000020,
    TSF_USE_FULL_ACCESS            = 0x00000040,
    TSF_DELETE_RECYCLE_IF_POSSIBLE = 0x00000080,
    TSF_COPY_HARD_LINK             = 0x00000100,
    TSF_COPY_LOCALIZED_NAME        = 0x00000200,
    TSF_MOVE_AS_COPY_DELETE        = 0x00000400,
    TSF_SUSPEND_SHELLEVENTS        = 0x00000800,
}
alias _TRANSFER_SOURCE_FLAGS = int;

enum : int
{
    TS_NONE          = 0x00000000,
    TS_PERFORMING    = 0x00000001,
    TS_PREPARING     = 0x00000002,
    TS_INDETERMINATE = 0x00000004,
}
alias _TRANSFER_ADVISE_STATE = int;

enum : int
{
    SIATTRIBFLAGS_AND       = 0x00000001,
    SIATTRIBFLAGS_OR        = 0x00000002,
    SIATTRIBFLAGS_APPCOMPAT = 0x00000003,
    SIATTRIBFLAGS_MASK      = 0x00000003,
    SIATTRIBFLAGS_ALLITEMS  = 0x00004000,
}
alias SIATTRIBFLAGS = int;

enum : int
{
    PUIFNF_DEFAULT  = 0x00000000,
    PUIFNF_MNEMONIC = 0x00000001,
}
alias _PROPERTYUI_NAME_FLAGS = int;

enum : int
{
    PUIFFDF_DEFAULT      = 0x00000000,
    PUIFFDF_RIGHTTOLEFT  = 0x00000001,
    PUIFFDF_SHORTFORMAT  = 0x00000002,
    PUIFFDF_NOTIME       = 0x00000004,
    PUIFFDF_FRIENDLYDATE = 0x00000008,
}
alias _PROPERTYUI_FORMAT_FLAGS = int;

enum : int
{
    CATINFO_NORMAL          = 0x00000000,
    CATINFO_COLLAPSED       = 0x00000001,
    CATINFO_HIDDEN          = 0x00000002,
    CATINFO_EXPANDED        = 0x00000004,
    CATINFO_NOHEADER        = 0x00000008,
    CATINFO_NOTCOLLAPSIBLE  = 0x00000010,
    CATINFO_NOHEADERCOUNT   = 0x00000020,
    CATINFO_SUBSETTED       = 0x00000040,
    CATINFO_SEPARATE_IMAGES = 0x00000080,
    CATINFO_SHOWEMPTY       = 0x00000100,
}
alias CATEGORYINFO_FLAGS = int;

enum : int
{
    CATSORT_DEFAULT = 0x00000000,
    CATSORT_NAME    = 0x00000001,
}
alias CATSORT_FLAGS = int;

enum : int
{
    SLR_NONE                      = 0x00000000,
    SLR_NO_UI                     = 0x00000001,
    SLR_ANY_MATCH                 = 0x00000002,
    SLR_UPDATE                    = 0x00000004,
    SLR_NOUPDATE                  = 0x00000008,
    SLR_NOSEARCH                  = 0x00000010,
    SLR_NOTRACK                   = 0x00000020,
    SLR_NOLINKINFO                = 0x00000040,
    SLR_INVOKE_MSI                = 0x00000080,
    SLR_NO_UI_WITH_MSG_PUMP       = 0x00000101,
    SLR_OFFER_DELETE_WITHOUT_FILE = 0x00000200,
    SLR_KNOWNFOLDER               = 0x00000400,
    SLR_MACHINE_IN_LOCAL_TARGET   = 0x00000800,
    SLR_UPDATE_MACHINE_AND_SID    = 0x00001000,
    SLR_NO_OBJECT_ID              = 0x00002000,
}
alias SLR_FLAGS = int;

enum : int
{
    SLGP_SHORTPATH        = 0x00000001,
    SLGP_UNCPRIORITY      = 0x00000002,
    SLGP_RAWPATH          = 0x00000004,
    SLGP_RELATIVEPRIORITY = 0x00000008,
}
alias SLGP_FLAGS = int;

enum : int
{
    SPINITF_NORMAL     = 0x00000000,
    SPINITF_MODAL      = 0x00000001,
    SPINITF_NOMINIMIZE = 0x00000008,
}
alias _SPINITF = int;

enum : int
{
    SPBEGINF_NORMAL          = 0x00000000,
    SPBEGINF_AUTOTIME        = 0x00000002,
    SPBEGINF_NOPROGRESSBAR   = 0x00000010,
    SPBEGINF_MARQUEEPROGRESS = 0x00000020,
    SPBEGINF_NOCANCELBUTTON  = 0x00000040,
}
alias _SPBEGINF = int;

enum : int
{
    SPACTION_NONE               = 0x00000000,
    SPACTION_MOVING             = 0x00000001,
    SPACTION_COPYING            = 0x00000002,
    SPACTION_RECYCLING          = 0x00000003,
    SPACTION_APPLYINGATTRIBS    = 0x00000004,
    SPACTION_DOWNLOADING        = 0x00000005,
    SPACTION_SEARCHING_INTERNET = 0x00000006,
    SPACTION_CALCULATING        = 0x00000007,
    SPACTION_UPLOADING          = 0x00000008,
    SPACTION_SEARCHING_FILES    = 0x00000009,
    SPACTION_DELETING           = 0x0000000a,
    SPACTION_RENAMING           = 0x0000000b,
    SPACTION_FORMATTING         = 0x0000000c,
    SPACTION_COPY_MOVING        = 0x0000000d,
}
alias SPACTION = int;

enum : int
{
    SPTEXT_ACTIONDESCRIPTION = 0x00000001,
    SPTEXT_ACTIONDETAIL      = 0x00000002,
}
alias SPTEXT = int;

enum : int
{
    EXPPS_FILETYPES = 0x00000001,
}
alias _EXPPS = int;

enum : int
{
    DBID_BANDINFOCHANGED = 0x00000000,
    DBID_SHOWONLY        = 0x00000001,
    DBID_MAXIMIZEBAND    = 0x00000002,
    DBID_PUSHCHEVRON     = 0x00000003,
    DBID_DELAYINIT       = 0x00000004,
    DBID_FINISHINIT      = 0x00000005,
    DBID_SETWINDOWTHEME  = 0x00000006,
    DBID_PERMITAUTOHIDE  = 0x00000007,
}
alias tagDESKBANDCID = int;

enum : int
{
    THBF_ENABLED        = 0x00000000,
    THBF_DISABLED       = 0x00000001,
    THBF_DISMISSONCLICK = 0x00000002,
    THBF_NOBACKGROUND   = 0x00000004,
    THBF_HIDDEN         = 0x00000008,
    THBF_NONINTERACTIVE = 0x00000010,
}
alias THUMBBUTTONFLAGS = int;

enum : int
{
    THB_BITMAP  = 0x00000001,
    THB_ICON    = 0x00000002,
    THB_TOOLTIP = 0x00000004,
    THB_FLAGS   = 0x00000008,
}
alias THUMBBUTTONMASK = int;

enum : int
{
    TBPF_NOPROGRESS    = 0x00000000,
    TBPF_INDETERMINATE = 0x00000001,
    TBPF_NORMAL        = 0x00000002,
    TBPF_ERROR         = 0x00000004,
    TBPF_PAUSED        = 0x00000008,
}
alias TBPFLAG = int;

enum : int
{
    STPF_NONE                      = 0x00000000,
    STPF_USEAPPTHUMBNAILALWAYS     = 0x00000001,
    STPF_USEAPPTHUMBNAILWHENACTIVE = 0x00000002,
    STPF_USEAPPPEEKALWAYS          = 0x00000004,
    STPF_USEAPPPEEKWHENACTIVE      = 0x00000008,
}
alias STPFLAG = int;

enum : int
{
    EBO_NONE               = 0x00000000,
    EBO_NAVIGATEONCE       = 0x00000001,
    EBO_SHOWFRAMES         = 0x00000002,
    EBO_ALWAYSNAVIGATE     = 0x00000004,
    EBO_NOTRAVELLOG        = 0x00000008,
    EBO_NOWRAPPERWINDOW    = 0x00000010,
    EBO_HTMLSHAREPOINTVIEW = 0x00000020,
    EBO_NOBORDER           = 0x00000040,
    EBO_NOPERSISTVIEWSTATE = 0x00000080,
}
alias EXPLORER_BROWSER_OPTIONS = int;

enum : int
{
    EBF_NONE                 = 0x00000000,
    EBF_SELECTFROMDATAOBJECT = 0x00000100,
    EBF_NODROPTARGET         = 0x00000200,
}
alias EXPLORER_BROWSER_FILL_FLAGS = int;

enum : int
{
    OPPROGDLG_DEFAULT               = 0x00000000,
    OPPROGDLG_ENABLEPAUSE           = 0x00000080,
    OPPROGDLG_ALLOWUNDO             = 0x00000100,
    OPPROGDLG_DONTDISPLAYSOURCEPATH = 0x00000200,
    OPPROGDLG_DONTDISPLAYDESTPATH   = 0x00000400,
    OPPROGDLG_NOMULTIDAYESTIMATES   = 0x00000800,
    OPPROGDLG_DONTDISPLAYLOCATIONS  = 0x00001000,
}
alias _OPPROGDLGF = int;

enum : int
{
    PDM_DEFAULT        = 0x00000000,
    PDM_RUN            = 0x00000001,
    PDM_PREFLIGHT      = 0x00000002,
    PDM_UNDOING        = 0x00000004,
    PDM_ERRORSBLOCKING = 0x00000008,
    PDM_INDETERMINATE  = 0x00000010,
}
alias _PDMODE = int;

enum : int
{
    FOF2_NONE                    = 0x00000000,
    FOF2_MERGEFOLDERSONCOLLISION = 0x00000001,
}
alias FILE_OPERATION_FLAGS2 = int;

enum : int
{
    NSWF_DEFAULT                        = 0x00000000,
    NSWF_NONE_IMPLIES_ALL               = 0x00000001,
    NSWF_ONE_IMPLIES_ALL                = 0x00000002,
    NSWF_DONT_TRAVERSE_LINKS            = 0x00000004,
    NSWF_DONT_ACCUMULATE_RESULT         = 0x00000008,
    NSWF_TRAVERSE_STREAM_JUNCTIONS      = 0x00000010,
    NSWF_FILESYSTEM_ONLY                = 0x00000020,
    NSWF_SHOW_PROGRESS                  = 0x00000040,
    NSWF_FLAG_VIEWORDER                 = 0x00000080,
    NSWF_IGNORE_AUTOPLAY_HIDA           = 0x00000100,
    NSWF_ASYNC                          = 0x00000200,
    NSWF_DONT_RESOLVE_LINKS             = 0x00000400,
    NSWF_ACCUMULATE_FOLDERS             = 0x00000800,
    NSWF_DONT_SORT                      = 0x00001000,
    NSWF_USE_TRANSFER_MEDIUM            = 0x00002000,
    NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = 0x00004000,
    NSWF_ANY_IMPLIES_ALL                = 0x00008000,
}
alias NAMESPACEWALKFLAG = int;

enum : int
{
    BSID_BANDADDED   = 0x00000000,
    BSID_BANDREMOVED = 0x00000001,
}
alias tagBANDSITECID = int;

enum : int
{
    MBHANDCID_PIDLSELECT = 0x00000000,
}
alias tagMENUBANDHANDLERCID = int;

enum : int
{
    MPOS_EXECUTE       = 0x00000000,
    MPOS_FULLCANCEL    = 0x00000001,
    MPOS_CANCELLEVEL   = 0x00000002,
    MPOS_SELECTLEFT    = 0x00000003,
    MPOS_SELECTRIGHT   = 0x00000004,
    MPOS_CHILDTRACKING = 0x00000005,
}
alias tagMENUPOPUPSELECT = int;

enum : int
{
    MPPF_SETFOCUS      = 0x00000001,
    MPPF_INITIALSELECT = 0x00000002,
    MPPF_NOANIMATE     = 0x00000004,
    MPPF_KEYBOARD      = 0x00000010,
    MPPF_REPOSITION    = 0x00000020,
    MPPF_FORCEZORDER   = 0x00000040,
    MPPF_FINALSELECT   = 0x00000080,
    MPPF_TOP           = 0x20000000,
    MPPF_LEFT          = 0x40000000,
    MPPF_RIGHT         = 0x60000000,
    MPPF_BOTTOM        = 0x80000000,
    MPPF_POS_MASK      = 0xe0000000,
    MPPF_ALIGN_LEFT    = 0x02000000,
    MPPF_ALIGN_RIGHT   = 0x04000000,
}
alias tagMENUPOPUPPOPUPFLAGS = int;

enum : int
{
    FUT_PLAYING = 0x00000000,
    FUT_EDITING = 0x00000001,
    FUT_GENERIC = 0x00000002,
}
alias FILE_USAGE_TYPE = int;

enum : int
{
    FDEOR_DEFAULT = 0x00000000,
    FDEOR_ACCEPT  = 0x00000001,
    FDEOR_REFUSE  = 0x00000002,
}
alias FDE_OVERWRITE_RESPONSE = int;

enum : int
{
    FDESVR_DEFAULT = 0x00000000,
    FDESVR_ACCEPT  = 0x00000001,
    FDESVR_REFUSE  = 0x00000002,
}
alias FDE_SHAREVIOLATION_RESPONSE = int;

enum : int
{
    FDAP_BOTTOM = 0x00000000,
    FDAP_TOP    = 0x00000001,
}
alias FDAP = int;

enum : int
{
    FOS_OVERWRITEPROMPT          = 0x00000002,
    FOS_STRICTFILETYPES          = 0x00000004,
    FOS_NOCHANGEDIR              = 0x00000008,
    FOS_PICKFOLDERS              = 0x00000020,
    FOS_FORCEFILESYSTEM          = 0x00000040,
    FOS_ALLNONSTORAGEITEMS       = 0x00000080,
    FOS_NOVALIDATE               = 0x00000100,
    FOS_ALLOWMULTISELECT         = 0x00000200,
    FOS_PATHMUSTEXIST            = 0x00000800,
    FOS_FILEMUSTEXIST            = 0x00001000,
    FOS_CREATEPROMPT             = 0x00002000,
    FOS_SHAREAWARE               = 0x00004000,
    FOS_NOREADONLYRETURN         = 0x00008000,
    FOS_NOTESTFILECREATE         = 0x00010000,
    FOS_HIDEMRUPLACES            = 0x00020000,
    FOS_HIDEPINNEDPLACES         = 0x00040000,
    FOS_NODEREFERENCELINKS       = 0x00100000,
    FOS_OKBUTTONNEEDSINTERACTION = 0x00200000,
    FOS_DONTADDTORECENT          = 0x02000000,
    FOS_FORCESHOWHIDDEN          = 0x10000000,
    FOS_DEFAULTNOMINIMODE        = 0x20000000,
    FOS_FORCEPREVIEWPANEON       = 0x40000000,
    FOS_SUPPORTSTREAMABLEITEMS   = 0x80000000,
}
alias _FILEOPENDIALOGOPTIONS = int;

enum : int
{
    CDCS_INACTIVE       = 0x00000000,
    CDCS_ENABLED        = 0x00000001,
    CDCS_VISIBLE        = 0x00000002,
    CDCS_ENABLEDVISIBLE = 0x00000003,
}
alias CDCONTROLSTATEF = int;

enum : int
{
    AL_MACHINE   = 0x00000000,
    AL_EFFECTIVE = 0x00000001,
    AL_USER      = 0x00000002,
}
alias ASSOCIATIONLEVEL = int;

enum : int
{
    AT_FILEEXTENSION   = 0x00000000,
    AT_URLPROTOCOL     = 0x00000001,
    AT_STARTMENUCLIENT = 0x00000002,
    AT_MIMETYPE        = 0x00000003,
}
alias ASSOCIATIONTYPE = int;

enum : int
{
    BFO_NONE                             = 0x00000000,
    BFO_BROWSER_PERSIST_SETTINGS         = 0x00000001,
    BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = 0x00000002,
    BFO_BOTH_OPTIONS                     = 0x00000004,
    BIF_PREFER_INTERNET_SHORTCUT         = 0x00000008,
    BFO_BROWSE_NO_IN_NEW_PROCESS         = 0x00000010,
    BFO_ENABLE_HYPERLINK_TRACKING        = 0x00000020,
    BFO_USE_IE_OFFLINE_SUPPORT           = 0x00000040,
    BFO_SUBSTITUE_INTERNET_START_PAGE    = 0x00000080,
    BFO_USE_IE_LOGOBANDING               = 0x00000100,
    BFO_ADD_IE_TOCAPTIONBAR              = 0x00000200,
    BFO_USE_DIALUP_REF                   = 0x00000400,
    BFO_USE_IE_TOOLBAR                   = 0x00000800,
    BFO_NO_PARENT_FOLDER_SUPPORT         = 0x00001000,
    BFO_NO_REOPEN_NEXT_RESTART           = 0x00002000,
    BFO_GO_HOME_PAGE                     = 0x00004000,
    BFO_PREFER_IEPROCESS                 = 0x00008000,
    BFO_SHOW_NAVIGATION_CANCELLED        = 0x00010000,
    BFO_USE_IE_STATUSBAR                 = 0x00020000,
    BFO_QUERY_ALL                        = 0xffffffff,
}
alias _BROWSERFRAMEOPTIONS = int;

enum : int
{
    NWMF_UNLOADING       = 0x00000001,
    NWMF_USERINITED      = 0x00000002,
    NWMF_FIRST           = 0x00000004,
    NWMF_OVERRIDEKEY     = 0x00000008,
    NWMF_SHOWHELP        = 0x00000010,
    NWMF_HTMLDIALOG      = 0x00000020,
    NWMF_FROMDIALOGCHILD = 0x00000040,
    NWMF_USERREQUESTED   = 0x00000080,
    NWMF_USERALLOWED     = 0x00000100,
    NWMF_FORCEWINDOW     = 0x00010000,
    NWMF_FORCETAB        = 0x00020000,
    NWMF_SUGGESTWINDOW   = 0x00040000,
    NWMF_SUGGESTTAB      = 0x00080000,
    NWMF_INACTIVETAB     = 0x00100000,
}
alias NWMF = int;

enum : int
{
    ATTACHMENT_PROMPT_NONE         = 0x00000000,
    ATTACHMENT_PROMPT_SAVE         = 0x00000001,
    ATTACHMENT_PROMPT_EXEC         = 0x00000002,
    ATTACHMENT_PROMPT_EXEC_OR_SAVE = 0x00000003,
}
alias ATTACHMENT_PROMPT = int;

enum : int
{
    ATTACHMENT_ACTION_CANCEL = 0x00000000,
    ATTACHMENT_ACTION_SAVE   = 0x00000001,
    ATTACHMENT_ACTION_EXEC   = 0x00000002,
}
alias ATTACHMENT_ACTION = int;

enum : int
{
    SMIM_TYPE  = 0x00000001,
    SMIM_FLAGS = 0x00000002,
    SMIM_ICON  = 0x00000004,
}
alias tagSMINFOMASK = int;

enum : int
{
    SMIT_SEPARATOR = 0x00000001,
    SMIT_STRING    = 0x00000002,
}
alias tagSMINFOTYPE = int;

enum : int
{
    SMIF_ICON        = 0x00000001,
    SMIF_ACCELERATOR = 0x00000002,
    SMIF_DROPTARGET  = 0x00000004,
    SMIF_SUBMENU     = 0x00000008,
    SMIF_CHECKED     = 0x00000020,
    SMIF_DROPCASCADE = 0x00000040,
    SMIF_HIDDEN      = 0x00000080,
    SMIF_DISABLED    = 0x00000100,
    SMIF_TRACKPOPUP  = 0x00000200,
    SMIF_DEMOTED     = 0x00000400,
    SMIF_ALTSTATE    = 0x00000800,
    SMIF_DRAGNDROP   = 0x00001000,
    SMIF_NEW         = 0x00002000,
}
alias tagSMINFOFLAGS = int;

enum : int
{
    KF_CATEGORY_VIRTUAL = 0x00000001,
    KF_CATEGORY_FIXED   = 0x00000002,
    KF_CATEGORY_COMMON  = 0x00000003,
    KF_CATEGORY_PERUSER = 0x00000004,
}
alias KF_CATEGORY = int;

enum : int
{
    KFDF_LOCAL_REDIRECT_ONLY = 0x00000002,
    KFDF_ROAMABLE            = 0x00000004,
    KFDF_PRECREATE           = 0x00000008,
    KFDF_STREAM              = 0x00000010,
    KFDF_PUBLISHEXPANDEDPATH = 0x00000020,
    KFDF_NO_REDIRECT_UI      = 0x00000040,
}
alias _KF_DEFINITION_FLAGS = int;

enum : int
{
    KF_REDIRECT_USER_EXCLUSIVE               = 0x00000001,
    KF_REDIRECT_COPY_SOURCE_DACL             = 0x00000002,
    KF_REDIRECT_OWNER_USER                   = 0x00000004,
    KF_REDIRECT_SET_OWNER_EXPLICIT           = 0x00000008,
    KF_REDIRECT_CHECK_ONLY                   = 0x00000010,
    KF_REDIRECT_WITH_UI                      = 0x00000020,
    KF_REDIRECT_UNPIN                        = 0x00000040,
    KF_REDIRECT_PIN                          = 0x00000080,
    KF_REDIRECT_COPY_CONTENTS                = 0x00000200,
    KF_REDIRECT_DEL_SOURCE_CONTENTS          = 0x00000400,
    KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS = 0x00000800,
}
alias _KF_REDIRECT_FLAGS = int;

enum : int
{
    KF_REDIRECTION_CAPABILITIES_ALLOW_ALL              = 0x000000ff,
    KF_REDIRECTION_CAPABILITIES_REDIRECTABLE           = 0x00000001,
    KF_REDIRECTION_CAPABILITIES_DENY_ALL               = 0x000fff00,
    KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED = 0x00000100,
    KF_REDIRECTION_CAPABILITIES_DENY_POLICY            = 0x00000200,
    KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS       = 0x00000400,
}
alias _KF_REDIRECTION_CAPABILITIES = int;

enum : int
{
    FFFP_EXACTMATCH         = 0x00000000,
    FFFP_NEARESTPARENTMATCH = 0x00000001,
}
alias FFFP_MODE = int;

enum : int
{
    SHARE_ROLE_INVALID     = 0xffffffff,
    SHARE_ROLE_READER      = 0x00000000,
    SHARE_ROLE_CONTRIBUTOR = 0x00000001,
    SHARE_ROLE_CO_OWNER    = 0x00000002,
    SHARE_ROLE_OWNER       = 0x00000003,
    SHARE_ROLE_CUSTOM      = 0x00000004,
    SHARE_ROLE_MIXED       = 0x00000005,
}
alias SHARE_ROLE = int;

enum : int
{
    DEFSHAREID_USERS  = 0x00000001,
    DEFSHAREID_PUBLIC = 0x00000002,
}
alias DEF_SHARE_ID = int;

enum : int
{
    NMCII_NONE    = 0x00000000,
    NMCII_ITEMS   = 0x00000001,
    NMCII_FOLDERS = 0x00000002,
}
alias _NMCII_FLAGS = int;

enum : int
{
    NMCSAEI_SELECT = 0x00000000,
    NMCSAEI_EDIT   = 0x00000001,
}
alias _NMCSAEI_FLAGS = int;

enum : int
{
    NSTCS_HASEXPANDOS         = 0x00000001,
    NSTCS_HASLINES            = 0x00000002,
    NSTCS_SINGLECLICKEXPAND   = 0x00000004,
    NSTCS_FULLROWSELECT       = 0x00000008,
    NSTCS_SPRINGEXPAND        = 0x00000010,
    NSTCS_HORIZONTALSCROLL    = 0x00000020,
    NSTCS_ROOTHASEXPANDO      = 0x00000040,
    NSTCS_SHOWSELECTIONALWAYS = 0x00000080,
    NSTCS_NOINFOTIP           = 0x00000200,
    NSTCS_EVENHEIGHT          = 0x00000400,
    NSTCS_NOREPLACEOPEN       = 0x00000800,
    NSTCS_DISABLEDRAGDROP     = 0x00001000,
    NSTCS_NOORDERSTREAM       = 0x00002000,
    NSTCS_RICHTOOLTIP         = 0x00004000,
    NSTCS_BORDER              = 0x00008000,
    NSTCS_NOEDITLABELS        = 0x00010000,
    NSTCS_TABSTOP             = 0x00020000,
    NSTCS_FAVORITESMODE       = 0x00080000,
    NSTCS_AUTOHSCROLL         = 0x00100000,
    NSTCS_FADEINOUTEXPANDOS   = 0x00200000,
    NSTCS_EMPTYTEXT           = 0x00400000,
    NSTCS_CHECKBOXES          = 0x00800000,
    NSTCS_PARTIALCHECKBOXES   = 0x01000000,
    NSTCS_EXCLUSIONCHECKBOXES = 0x02000000,
    NSTCS_DIMMEDCHECKBOXES    = 0x04000000,
    NSTCS_NOINDENTCHECKS      = 0x08000000,
    NSTCS_ALLOWJUNCTIONS      = 0x10000000,
    NSTCS_SHOWTABSBUTTON      = 0x20000000,
    NSTCS_SHOWDELETEBUTTON    = 0x40000000,
    NSTCS_SHOWREFRESHBUTTON   = 0x80000000,
}
alias _NSTCSTYLE = int;

enum : int
{
    NSTCRS_VISIBLE  = 0x00000000,
    NSTCRS_HIDDEN   = 0x00000001,
    NSTCRS_EXPANDED = 0x00000002,
}
alias _NSTCROOTSTYLE = int;

enum : int
{
    NSTCIS_NONE             = 0x00000000,
    NSTCIS_SELECTED         = 0x00000001,
    NSTCIS_EXPANDED         = 0x00000002,
    NSTCIS_BOLD             = 0x00000004,
    NSTCIS_DISABLED         = 0x00000008,
    NSTCIS_SELECTEDNOEXPAND = 0x00000010,
}
alias _NSTCITEMSTATE = int;

enum : int
{
    NSTCGNI_NEXT         = 0x00000000,
    NSTCGNI_NEXTVISIBLE  = 0x00000001,
    NSTCGNI_PREV         = 0x00000002,
    NSTCGNI_PREVVISIBLE  = 0x00000003,
    NSTCGNI_PARENT       = 0x00000004,
    NSTCGNI_CHILD        = 0x00000005,
    NSTCGNI_FIRSTVISIBLE = 0x00000006,
    NSTCGNI_LASTVISIBLE  = 0x00000007,
}
alias NSTCGNI = int;

enum : int
{
    NSTCFC_NONE                  = 0x00000000,
    NSTCFC_PINNEDITEMFILTERING   = 0x00000001,
    NSTCFC_DELAY_REGISTER_NOTIFY = 0x00000002,
}
alias NSTCFOLDERCAPABILITIES = int;

enum : int
{
    EPS_DONTCARE     = 0x00000000,
    EPS_DEFAULT_ON   = 0x00000001,
    EPS_DEFAULT_OFF  = 0x00000002,
    EPS_STATEMASK    = 0x0000ffff,
    EPS_INITIALSTATE = 0x00010000,
    EPS_FORCE        = 0x00020000,
}
alias _EXPLORERPANESTATE = int;

enum : int
{
    ECS_ENABLED    = 0x00000000,
    ECS_DISABLED   = 0x00000001,
    ECS_HIDDEN     = 0x00000002,
    ECS_CHECKBOX   = 0x00000004,
    ECS_CHECKED    = 0x00000008,
    ECS_RADIOCHECK = 0x00000010,
}
alias _EXPCMDSTATE = int;

enum : int
{
    ECF_DEFAULT         = 0x00000000,
    ECF_HASSUBCOMMANDS  = 0x00000001,
    ECF_HASSPLITBUTTON  = 0x00000002,
    ECF_HIDELABEL       = 0x00000004,
    ECF_ISSEPARATOR     = 0x00000008,
    ECF_HASLUASHIELD    = 0x00000010,
    ECF_SEPARATORBEFORE = 0x00000020,
    ECF_SEPARATORAFTER  = 0x00000040,
    ECF_ISDROPDOWN      = 0x00000080,
    ECF_TOGGLEABLE      = 0x00000100,
    ECF_AUTOMENUICONS   = 0x00000200,
}
alias _EXPCMDFLAGS = int;

enum : int
{
    CPVIEW_CLASSIC  = 0x00000000,
    CPVIEW_ALLITEMS = 0x00000000,
    CPVIEW_CATEGORY = 0x00000001,
    CPVIEW_HOME     = 0x00000001,
}
alias CPVIEW = int;

enum : int
{
    KDC_FREQUENT = 0x00000001,
    KDC_RECENT   = 0x00000002,
}
alias KNOWNDESTCATEGORY = int;

enum : int
{
    ADLT_RECENT   = 0x00000000,
    ADLT_FREQUENT = 0x00000001,
}
alias APPDOCLISTTYPE = int;

enum : int
{
    DSO_SHUFFLEIMAGES = 0x00000001,
}
alias DESKTOP_SLIDESHOW_OPTIONS = int;

enum : int
{
    DSS_ENABLED                    = 0x00000001,
    DSS_SLIDESHOW                  = 0x00000002,
    DSS_DISABLED_BY_REMOTE_SESSION = 0x00000004,
}
alias DESKTOP_SLIDESHOW_STATE = int;

enum : int
{
    DSD_FORWARD  = 0x00000000,
    DSD_BACKWARD = 0x00000001,
}
alias DESKTOP_SLIDESHOW_DIRECTION = int;

enum : int
{
    DWPOS_CENTER  = 0x00000000,
    DWPOS_TILE    = 0x00000001,
    DWPOS_STRETCH = 0x00000002,
    DWPOS_FIT     = 0x00000003,
    DWPOS_FILL    = 0x00000004,
    DWPOS_SPAN    = 0x00000005,
}
alias DESKTOP_WALLPAPER_POSITION = int;

enum : int
{
    HGSC_NONE             = 0x00000000,
    HGSC_MUSICLIBRARY     = 0x00000001,
    HGSC_PICTURESLIBRARY  = 0x00000002,
    HGSC_VIDEOSLIBRARY    = 0x00000004,
    HGSC_DOCUMENTSLIBRARY = 0x00000008,
    HGSC_PRINTERS         = 0x00000010,
}
alias HOMEGROUPSHARINGCHOICES = int;

enum : int
{
    LFF_FORCEFILESYSTEM = 0x00000001,
    LFF_STORAGEITEMS    = 0x00000002,
    LFF_ALLITEMS        = 0x00000003,
}
alias LIBRARYFOLDERFILTER = int;

enum : int
{
    LOF_DEFAULT         = 0x00000000,
    LOF_PINNEDTONAVPANE = 0x00000001,
    LOF_MASK_ALL        = 0x00000001,
}
alias LIBRARYOPTIONFLAGS = int;

enum : int
{
    DSFT_DETECT  = 0x00000001,
    DSFT_PRIVATE = 0x00000002,
    DSFT_PUBLIC  = 0x00000003,
}
alias DEFAULTSAVEFOLDERTYPE = int;

enum : int
{
    LSF_FAILIFTHERE      = 0x00000000,
    LSF_OVERRIDEEXISTING = 0x00000001,
    LSF_MAKEUNIQUENAME   = 0x00000002,
}
alias LIBRARYSAVEFLAGS = int;

enum : int
{
    DFMR_DEFAULT                        = 0x00000000,
    DFMR_NO_STATIC_VERBS                = 0x00000008,
    DFMR_STATIC_VERBS_ONLY              = 0x00000010,
    DFMR_NO_RESOURCE_VERBS              = 0x00000020,
    DFMR_OPTIN_HANDLERS_ONLY            = 0x00000040,
    DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY = 0x00000080,
    DFMR_USE_SPECIFIED_HANDLERS         = 0x00000100,
    DFMR_USE_SPECIFIED_VERBS            = 0x00000200,
    DFMR_NO_ASYNC_VERBS                 = 0x00000400,
    DFMR_NO_NATIVECPU_VERBS             = 0x00000800,
}
alias DEFAULT_FOLDER_MENU_RESTRICTIONS = int;

enum : int
{
    AO_NONE           = 0x00000000,
    AO_DESIGNMODE     = 0x00000001,
    AO_NOERRORUI      = 0x00000002,
    AO_NOSPLASHSCREEN = 0x00000004,
    AO_PRELAUNCH      = 0x02000000,
}
alias ACTIVATEOPTIONS = int;

enum : int
{
    LMD_DEFAULT                          = 0x00000000,
    LMD_ALLOWUNINDEXABLENETWORKLOCATIONS = 0x00000001,
}
alias LIBRARYMANAGEDIALOGOPTIONS = int;

enum : int
{
    AHTYPE_UNDEFINED         = 0x00000000,
    AHTYPE_USER_APPLICATION  = 0x00000008,
    AHTYPE_ANY_APPLICATION   = 0x00000010,
    AHTYPE_MACHINEDEFAULT    = 0x00000020,
    AHTYPE_PROGID            = 0x00000040,
    AHTYPE_APPLICATION       = 0x00000080,
    AHTYPE_CLASS_APPLICATION = 0x00000100,
    AHTYPE_ANY_PROGID        = 0x00000200,
}
alias AHTYPE = int;

enum : int
{
    ASSOC_FILTER_NONE        = 0x00000000,
    ASSOC_FILTER_RECOMMENDED = 0x00000001,
}
alias ASSOC_FILTER = int;

enum : int
{
    MAV_UNKNOWN        = 0x00000000,
    MAV_NO_APP_VISIBLE = 0x00000001,
    MAV_APP_VISIBLE    = 0x00000002,
}
alias MONITOR_APP_VISIBILITY = int;

enum : int
{
    PES_UNKNOWN    = 0x00000000,
    PES_RUNNING    = 0x00000001,
    PES_SUSPENDING = 0x00000002,
    PES_SUSPENDED  = 0x00000003,
    PES_TERMINATED = 0x00000004,
}
alias PACKAGE_EXECUTION_STATE = int;

enum : int
{
    AHE_DESKTOP   = 0x00000000,
    AHE_IMMERSIVE = 0x00000001,
}
alias AHE_TYPE = int;

enum : int
{
    ECHUIM_DESKTOP         = 0x00000000,
    ECHUIM_IMMERSIVE       = 0x00000001,
    ECHUIM_SYSTEM_LAUNCHER = 0x00000002,
}
alias EC_HOST_UI_MODE = int;

enum : int
{
    AVS_FULLSCREEN_LANDSCAPE = 0x00000000,
    AVS_FILLED               = 0x00000001,
    AVS_SNAPPED              = 0x00000002,
    AVS_FULLSCREEN_PORTRAIT  = 0x00000003,
}
alias APPLICATION_VIEW_STATE = int;

enum : int
{
    EGK_TOUCH    = 0x00000000,
    EGK_KEYBOARD = 0x00000001,
    EGK_MOUSE    = 0x00000002,
}
alias EDGE_GESTURE_KIND = int;

enum : int
{
    NDO_LANDSCAPE = 0x00000000,
    NDO_PORTRAIT  = 0x00000001,
}
alias NATIVE_DISPLAY_ORIENTATION = int;

enum : int
{
    AVO_LANDSCAPE = 0x00000000,
    AVO_PORTRAIT  = 0x00000001,
}
alias APPLICATION_VIEW_ORIENTATION = int;

enum : int
{
    ADE_NONE  = 0x00000000,
    ADE_LEFT  = 0x00000001,
    ADE_RIGHT = 0x00000002,
}
alias ADJACENT_DISPLAY_EDGES = int;

enum : int
{
    AVMW_DEFAULT = 0x00000000,
    AVMW_320     = 0x00000001,
    AVMW_500     = 0x00000002,
}
alias APPLICATION_VIEW_MIN_WIDTH = int;

enum : int
{
    AVSP_DEFAULT     = 0x00000000,
    AVSP_USE_LESS    = 0x00000001,
    AVSP_USE_HALF    = 0x00000002,
    AVSP_USE_MORE    = 0x00000003,
    AVSP_USE_MINIMUM = 0x00000004,
    AVSP_USE_NONE    = 0x00000005,
    AVSP_CUSTOM      = 0x00000006,
}
alias APPLICATION_VIEW_SIZE_PREFERENCE = int;

enum : int
{
    FP_DEFAULT = 0x00000000,
    FP_ABOVE   = 0x00000001,
    FP_BELOW   = 0x00000002,
    FP_LEFT    = 0x00000003,
    FP_RIGHT   = 0x00000004,
}
alias FLYOUT_PLACEMENT = int;

enum : int
{
    BNE_Rendered       = 0x00000000,
    BNE_Hovered        = 0x00000001,
    BNE_Closed         = 0x00000002,
    BNE_Dismissed      = 0x00000003,
    BNE_Button1Clicked = 0x00000004,
    BNE_Button2Clicked = 0x00000005,
}
alias BANNER_NOTIFICATION_EVENT = int;

enum : int
{
    SOT_DEFAULT           = 0x00000000,
    SOT_IGNORE_FOLDERNESS = 0x00000001,
}
alias SORT_ORDER_TYPE = int;

enum : int
{
    FVO_DEFAULT           = 0x00000000,
    FVO_VISTALAYOUT       = 0x00000001,
    FVO_CUSTOMPOSITION    = 0x00000002,
    FVO_CUSTOMORDERING    = 0x00000004,
    FVO_SUPPORTHYPERLINKS = 0x00000008,
    FVO_NOANIMATIONS      = 0x00000010,
    FVO_NOSCROLLTIPS      = 0x00000020,
}
alias FOLDERVIEWOPTIONS = int;

enum : int
{
    SV3CVW3_DEFAULT          = 0x00000000,
    SV3CVW3_NONINTERACTIVE   = 0x00000001,
    SV3CVW3_FORCEVIEWMODE    = 0x00000002,
    SV3CVW3_FORCEFOLDERFLAGS = 0x00000004,
}
alias _SV3CVW3_FLAGS = int;

enum : int
{
    VPWF_DEFAULT    = 0x00000000,
    VPWF_ALPHABLEND = 0x00000001,
}
alias VPWATERMARKFLAGS = int;

enum : int
{
    VPCF_TEXT           = 0x00000001,
    VPCF_BACKGROUND     = 0x00000002,
    VPCF_SORTCOLUMN     = 0x00000003,
    VPCF_SUBTEXT        = 0x00000004,
    VPCF_TEXTBACKGROUND = 0x00000005,
}
alias VPCOLORFLAGS = int;

enum : int
{
    DSH_ALLOWDROPDESCRIPTIONTEXT = 0x00000001,
}
alias DSH_FLAGS = int;

enum : int
{
    CDBE_RET_DEFAULT          = 0x00000000,
    CDBE_RET_DONTRUNOTHEREXTS = 0x00000001,
    CDBE_RET_STOPWIZARD       = 0x00000002,
}
alias tagCDBURNINGEXTENSIONRET = int;

enum : int
{
    CDBE_TYPE_MUSIC = 0x00000001,
    CDBE_TYPE_DATA  = 0x00000002,
    CDBE_TYPE_ALL   = 0xffffffff,
}
alias _CDBE_ACTIONS = int;

enum : int
{
    NSTCS2_DEFAULT                  = 0x00000000,
    NSTCS2_INTERRUPTNOTIFICATIONS   = 0x00000001,
    NSTCS2_SHOWNULLSPACEMENU        = 0x00000002,
    NSTCS2_DISPLAYPADDING           = 0x00000004,
    NSTCS2_DISPLAYPINNEDONLY        = 0x00000008,
    NTSCS2_NOSINGLETONAUTOEXPAND    = 0x00000010,
    NTSCS2_NEVERINSERTNONENUMERATED = 0x00000020,
}
alias NSTCSTYLE2 = int;

enum : int
{
    NSTCEHT_NOWHERE         = 0x00000001,
    NSTCEHT_ONITEMICON      = 0x00000002,
    NSTCEHT_ONITEMLABEL     = 0x00000004,
    NSTCEHT_ONITEMINDENT    = 0x00000008,
    NSTCEHT_ONITEMBUTTON    = 0x00000010,
    NSTCEHT_ONITEMRIGHT     = 0x00000020,
    NSTCEHT_ONITEMSTATEICON = 0x00000040,
    NSTCEHT_ONITEM          = 0x00000046,
    NSTCEHT_ONITEMTABBUTTON = 0x00001000,
}
alias _NSTCEHITTEST = int;

enum : int
{
    NSTCECT_LBUTTON  = 0x00000001,
    NSTCECT_MBUTTON  = 0x00000002,
    NSTCECT_RBUTTON  = 0x00000003,
    NSTCECT_BUTTON   = 0x00000003,
    NSTCECT_DBLCLICK = 0x00000004,
}
alias _NSTCECLICKTYPE = int;

enum : int
{
    UR_RESOLUTION_CHANGE  = 0x00000000,
    UR_MONITOR_DISCONNECT = 0x00000001,
}
alias UNDOCK_REASON = int;

enum OfflineFolderStatus : int
{
    OFS_INACTIVE   = 0xffffffff,
    OFS_ONLINE     = 0x00000000,
    OFS_OFFLINE    = 0x00000001,
    OFS_SERVERBACK = 0x00000002,
    OFS_DIRTYCACHE = 0x00000003,
}

enum ShellFolderViewOptions : int
{
    SFVVO_SHOWALLOBJECTS       = 0x00000001,
    SFVVO_SHOWEXTENSIONS       = 0x00000002,
    SFVVO_SHOWCOMPCOLOR        = 0x00000008,
    SFVVO_SHOWSYSFILES         = 0x00000020,
    SFVVO_WIN95CLASSIC         = 0x00000040,
    SFVVO_DOUBLECLICKINWEBVIEW = 0x00000080,
    SFVVO_DESKTOPHTML          = 0x00000200,
}

enum ShellSpecialFolderConstants : int
{
    ssfDESKTOP          = 0x00000000,
    ssfPROGRAMS         = 0x00000002,
    ssfCONTROLS         = 0x00000003,
    ssfPRINTERS         = 0x00000004,
    ssfPERSONAL         = 0x00000005,
    ssfFAVORITES        = 0x00000006,
    ssfSTARTUP          = 0x00000007,
    ssfRECENT           = 0x00000008,
    ssfSENDTO           = 0x00000009,
    ssfBITBUCKET        = 0x0000000a,
    ssfSTARTMENU        = 0x0000000b,
    ssfDESKTOPDIRECTORY = 0x00000010,
    ssfDRIVES           = 0x00000011,
    ssfNETWORK          = 0x00000012,
    ssfNETHOOD          = 0x00000013,
    ssfFONTS            = 0x00000014,
    ssfTEMPLATES        = 0x00000015,
    ssfCOMMONSTARTMENU  = 0x00000016,
    ssfCOMMONPROGRAMS   = 0x00000017,
    ssfCOMMONSTARTUP    = 0x00000018,
    ssfCOMMONDESKTOPDIR = 0x00000019,
    ssfAPPDATA          = 0x0000001a,
    ssfPRINTHOOD        = 0x0000001b,
    ssfLOCALAPPDATA     = 0x0000001c,
    ssfALTSTARTUP       = 0x0000001d,
    ssfCOMMONALTSTARTUP = 0x0000001e,
    ssfCOMMONFAVORITES  = 0x0000001f,
    ssfINTERNETCACHE    = 0x00000020,
    ssfCOOKIES          = 0x00000021,
    ssfHISTORY          = 0x00000022,
    ssfCOMMONAPPDATA    = 0x00000023,
    ssfWINDOWS          = 0x00000024,
    ssfSYSTEM           = 0x00000025,
    ssfPROGRAMFILES     = 0x00000026,
    ssfMYPICTURES       = 0x00000027,
    ssfPROFILE          = 0x00000028,
    ssfSYSTEMx86        = 0x00000029,
    ssfPROGRAMFILESx86  = 0x00000030,
}

enum : int
{
    ACO_NONE               = 0x00000000,
    ACO_AUTOSUGGEST        = 0x00000001,
    ACO_AUTOAPPEND         = 0x00000002,
    ACO_SEARCH             = 0x00000004,
    ACO_FILTERPREFIXES     = 0x00000008,
    ACO_USETAB             = 0x00000010,
    ACO_UPDOWNKEYDROPSLIST = 0x00000020,
    ACO_RTLREADING         = 0x00000040,
    ACO_WORD_FILTER        = 0x00000080,
    ACO_NOPREFIXFILTERING  = 0x00000100,
}
alias AUTOCOMPLETEOPTIONS = int;

enum : int
{
    ACEO_NONE            = 0x00000000,
    ACEO_MOSTRECENTFIRST = 0x00000001,
    ACEO_FIRSTUNUSED     = 0x00010000,
}
alias ACENUMOPTION = int;

enum : int
{
    SLDF_DEFAULT                               = 0x00000000,
    SLDF_HAS_ID_LIST                           = 0x00000001,
    SLDF_HAS_LINK_INFO                         = 0x00000002,
    SLDF_HAS_NAME                              = 0x00000004,
    SLDF_HAS_RELPATH                           = 0x00000008,
    SLDF_HAS_WORKINGDIR                        = 0x00000010,
    SLDF_HAS_ARGS                              = 0x00000020,
    SLDF_HAS_ICONLOCATION                      = 0x00000040,
    SLDF_UNICODE                               = 0x00000080,
    SLDF_FORCE_NO_LINKINFO                     = 0x00000100,
    SLDF_HAS_EXP_SZ                            = 0x00000200,
    SLDF_RUN_IN_SEPARATE                       = 0x00000400,
    SLDF_HAS_DARWINID                          = 0x00001000,
    SLDF_RUNAS_USER                            = 0x00002000,
    SLDF_HAS_EXP_ICON_SZ                       = 0x00004000,
    SLDF_NO_PIDL_ALIAS                         = 0x00008000,
    SLDF_FORCE_UNCNAME                         = 0x00010000,
    SLDF_RUN_WITH_SHIMLAYER                    = 0x00020000,
    SLDF_FORCE_NO_LINKTRACK                    = 0x00040000,
    SLDF_ENABLE_TARGET_METADATA                = 0x00080000,
    SLDF_DISABLE_LINK_PATH_TRACKING            = 0x00100000,
    SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = 0x00200000,
    SLDF_NO_KF_ALIAS                           = 0x00400000,
    SLDF_ALLOW_LINK_TO_LINK                    = 0x00800000,
    SLDF_UNALIAS_ON_SAVE                       = 0x01000000,
    SLDF_PREFER_ENVIRONMENT_PATH               = 0x02000000,
    SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET      = 0x04000000,
    SLDF_PERSIST_VOLUME_ID_RELATIVE            = 0x08000000,
    SLDF_VALID                                 = 0x0ffff7ff,
    SLDF_RESERVED                              = 0x80000000,
}
alias SHELL_LINK_DATA_FLAGS = int;

enum : int
{
    SHGFP_TYPE_CURRENT = 0x00000000,
    SHGFP_TYPE_DEFAULT = 0x00000001,
}
alias SHGFP_TYPE = int;

enum : int
{
    KF_FLAG_DEFAULT                          = 0x00000000,
    KF_FLAG_FORCE_APP_DATA_REDIRECTION       = 0x00080000,
    KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET = 0x00040000,
    KF_FLAG_FORCE_PACKAGE_REDIRECTION        = 0x00020000,
    KF_FLAG_NO_PACKAGE_REDIRECTION           = 0x00010000,
    KF_FLAG_FORCE_APPCONTAINER_REDIRECTION   = 0x00020000,
    KF_FLAG_NO_APPCONTAINER_REDIRECTION      = 0x00010000,
    KF_FLAG_CREATE                           = 0x00008000,
    KF_FLAG_DONT_VERIFY                      = 0x00004000,
    KF_FLAG_DONT_UNEXPAND                    = 0x00002000,
    KF_FLAG_NO_ALIAS                         = 0x00001000,
    KF_FLAG_INIT                             = 0x00000800,
    KF_FLAG_DEFAULT_PATH                     = 0x00000400,
    KF_FLAG_NOT_PARENT_RELATIVE              = 0x00000200,
    KF_FLAG_SIMPLE_IDLIST                    = 0x00000100,
    KF_FLAG_ALIAS_ONLY                       = 0x80000000,
}
alias KNOWN_FOLDER_FLAG = int;

enum : int
{
    ACLO_NONE             = 0x00000000,
    ACLO_CURRENTDIR       = 0x00000001,
    ACLO_MYCOMPUTER       = 0x00000002,
    ACLO_DESKTOP          = 0x00000004,
    ACLO_FAVORITES        = 0x00000008,
    ACLO_FILESYSONLY      = 0x00000010,
    ACLO_FILESYSDIRS      = 0x00000020,
    ACLO_VIRTUALNAMESPACE = 0x00000040,
}
alias AUTOCOMPLETELISTOPTIONS = int;

enum : int
{
    FD_CLSID      = 0x00000001,
    FD_SIZEPOINT  = 0x00000002,
    FD_ATTRIBUTES = 0x00000004,
    FD_CREATETIME = 0x00000008,
    FD_ACCESSTIME = 0x00000010,
    FD_WRITESTIME = 0x00000020,
    FD_FILESIZE   = 0x00000040,
    FD_PROGRESSUI = 0x00004000,
    FD_LINKUI     = 0x00008000,
    FD_UNICODE    = 0x80000000,
}
alias FD_FLAGS = int;

enum : int
{
    DROPIMAGE_INVALID = 0xffffffff,
    DROPIMAGE_NONE    = 0x00000000,
    DROPIMAGE_COPY    = 0x00000001,
    DROPIMAGE_MOVE    = 0x00000002,
    DROPIMAGE_LINK    = 0x00000004,
    DROPIMAGE_LABEL   = 0x00000006,
    DROPIMAGE_WARNING = 0x00000007,
    DROPIMAGE_NOIMAGE = 0x00000008,
}
alias DROPIMAGETYPE = int;

enum : int
{
    SHARD_PIDL            = 0x00000001,
    SHARD_PATHA           = 0x00000002,
    SHARD_PATHW           = 0x00000003,
    SHARD_APPIDINFO       = 0x00000004,
    SHARD_APPIDINFOIDLIST = 0x00000005,
    SHARD_LINK            = 0x00000006,
    SHARD_APPIDINFOLINK   = 0x00000007,
    SHARD_SHELLITEM       = 0x00000008,
}
alias SHARD = int;

enum : int
{
    SCNRT_ENABLE  = 0x00000000,
    SCNRT_DISABLE = 0x00000001,
}
alias SCNRT_STATUS = int;

enum : int
{
    REST_NONE                       = 0x00000000,
    REST_NORUN                      = 0x00000001,
    REST_NOCLOSE                    = 0x00000002,
    REST_NOSAVESET                  = 0x00000004,
    REST_NOFILEMENU                 = 0x00000008,
    REST_NOSETFOLDERS               = 0x00000010,
    REST_NOSETTASKBAR               = 0x00000020,
    REST_NODESKTOP                  = 0x00000040,
    REST_NOFIND                     = 0x00000080,
    REST_NODRIVES                   = 0x00000100,
    REST_NODRIVEAUTORUN             = 0x00000200,
    REST_NODRIVETYPEAUTORUN         = 0x00000400,
    REST_NONETHOOD                  = 0x00000800,
    REST_STARTBANNER                = 0x00001000,
    REST_RESTRICTRUN                = 0x00002000,
    REST_NOPRINTERTABS              = 0x00004000,
    REST_NOPRINTERDELETE            = 0x00008000,
    REST_NOPRINTERADD               = 0x00010000,
    REST_NOSTARTMENUSUBFOLDERS      = 0x00020000,
    REST_MYDOCSONNET                = 0x00040000,
    REST_NOEXITTODOS                = 0x00080000,
    REST_ENFORCESHELLEXTSECURITY    = 0x00100000,
    REST_LINKRESOLVEIGNORELINKINFO  = 0x00200000,
    REST_NOCOMMONGROUPS             = 0x00400000,
    REST_SEPARATEDESKTOPPROCESS     = 0x00800000,
    REST_NOWEB                      = 0x01000000,
    REST_NOTRAYCONTEXTMENU          = 0x02000000,
    REST_NOVIEWCONTEXTMENU          = 0x04000000,
    REST_NONETCONNECTDISCONNECT     = 0x08000000,
    REST_STARTMENULOGOFF            = 0x10000000,
    REST_NOSETTINGSASSIST           = 0x20000000,
    REST_NOINTERNETICON             = 0x40000001,
    REST_NORECENTDOCSHISTORY        = 0x40000002,
    REST_NORECENTDOCSMENU           = 0x40000003,
    REST_NOACTIVEDESKTOP            = 0x40000004,
    REST_NOACTIVEDESKTOPCHANGES     = 0x40000005,
    REST_NOFAVORITESMENU            = 0x40000006,
    REST_CLEARRECENTDOCSONEXIT      = 0x40000007,
    REST_CLASSICSHELL               = 0x40000008,
    REST_NOCUSTOMIZEWEBVIEW         = 0x40000009,
    REST_NOHTMLWALLPAPER            = 0x40000010,
    REST_NOCHANGINGWALLPAPER        = 0x40000011,
    REST_NODESKCOMP                 = 0x40000012,
    REST_NOADDDESKCOMP              = 0x40000013,
    REST_NODELDESKCOMP              = 0x40000014,
    REST_NOCLOSEDESKCOMP            = 0x40000015,
    REST_NOCLOSE_DRAGDROPBAND       = 0x40000016,
    REST_NOMOVINGBAND               = 0x40000017,
    REST_NOEDITDESKCOMP             = 0x40000018,
    REST_NORESOLVESEARCH            = 0x40000019,
    REST_NORESOLVETRACK             = 0x4000001a,
    REST_FORCECOPYACLWITHFILE       = 0x4000001b,
    REST_NOFORGETSOFTWAREUPDATE     = 0x4000001d,
    REST_NOSETACTIVEDESKTOP         = 0x4000001e,
    REST_NOUPDATEWINDOWS            = 0x4000001f,
    REST_NOCHANGESTARMENU           = 0x40000020,
    REST_NOFOLDEROPTIONS            = 0x40000021,
    REST_HASFINDCOMPUTERS           = 0x40000022,
    REST_INTELLIMENUS               = 0x40000023,
    REST_RUNDLGMEMCHECKBOX          = 0x40000024,
    REST_ARP_ShowPostSetup          = 0x40000025,
    REST_NOCSC                      = 0x40000026,
    REST_NOCONTROLPANEL             = 0x40000027,
    REST_ENUMWORKGROUP              = 0x40000028,
    REST_ARP_NOARP                  = 0x40000029,
    REST_ARP_NOREMOVEPAGE           = 0x4000002a,
    REST_ARP_NOADDPAGE              = 0x4000002b,
    REST_ARP_NOWINSETUPPAGE         = 0x4000002c,
    REST_GREYMSIADS                 = 0x4000002d,
    REST_NOCHANGEMAPPEDDRIVELABEL   = 0x4000002e,
    REST_NOCHANGEMAPPEDDRIVECOMMENT = 0x4000002f,
    REST_MaxRecentDocs              = 0x40000030,
    REST_NONETWORKCONNECTIONS       = 0x40000031,
    REST_FORCESTARTMENULOGOFF       = 0x40000032,
    REST_NOWEBVIEW                  = 0x40000033,
    REST_NOCUSTOMIZETHISFOLDER      = 0x40000034,
    REST_NOENCRYPTION               = 0x40000035,
    REST_DONTSHOWSUPERHIDDEN        = 0x40000037,
    REST_NOSHELLSEARCHBUTTON        = 0x40000038,
    REST_NOHARDWARETAB              = 0x40000039,
    REST_NORUNASINSTALLPROMPT       = 0x4000003a,
    REST_PROMPTRUNASINSTALLNETPATH  = 0x4000003b,
    REST_NOMANAGEMYCOMPUTERVERB     = 0x4000003c,
    REST_DISALLOWRUN                = 0x4000003e,
    REST_NOWELCOMESCREEN            = 0x4000003f,
    REST_RESTRICTCPL                = 0x40000040,
    REST_DISALLOWCPL                = 0x40000041,
    REST_NOSMBALLOONTIP             = 0x40000042,
    REST_NOSMHELP                   = 0x40000043,
    REST_NOWINKEYS                  = 0x40000044,
    REST_NOENCRYPTONMOVE            = 0x40000045,
    REST_NOLOCALMACHINERUN          = 0x40000046,
    REST_NOCURRENTUSERRUN           = 0x40000047,
    REST_NOLOCALMACHINERUNONCE      = 0x40000048,
    REST_NOCURRENTUSERRUNONCE       = 0x40000049,
    REST_FORCEACTIVEDESKTOPON       = 0x4000004a,
    REST_NOVIEWONDRIVE              = 0x4000004c,
    REST_NONETCRAWL                 = 0x4000004d,
    REST_NOSHAREDDOCUMENTS          = 0x4000004e,
    REST_NOSMMYDOCS                 = 0x4000004f,
    REST_NOSMMYPICS                 = 0x40000050,
    REST_ALLOWBITBUCKDRIVES         = 0x40000051,
    REST_NONLEGACYSHELLMODE         = 0x40000052,
    REST_NOCONTROLPANELBARRICADE    = 0x40000053,
    REST_NOSTARTPAGE                = 0x40000054,
    REST_NOAUTOTRAYNOTIFY           = 0x40000055,
    REST_NOTASKGROUPING             = 0x40000056,
    REST_NOCDBURNING                = 0x40000057,
    REST_MYCOMPNOPROP               = 0x40000058,
    REST_MYDOCSNOPROP               = 0x40000059,
    REST_NOSTARTPANEL               = 0x4000005a,
    REST_NODISPLAYAPPEARANCEPAGE    = 0x4000005b,
    REST_NOTHEMESTAB                = 0x4000005c,
    REST_NOVISUALSTYLECHOICE        = 0x4000005d,
    REST_NOSIZECHOICE               = 0x4000005e,
    REST_NOCOLORCHOICE              = 0x4000005f,
    REST_SETVISUALSTYLE             = 0x40000060,
    REST_STARTRUNNOHOMEPATH         = 0x40000061,
    REST_NOUSERNAMEINSTARTPANEL     = 0x40000062,
    REST_NOMYCOMPUTERICON           = 0x40000063,
    REST_NOSMNETWORKPLACES          = 0x40000064,
    REST_NOSMPINNEDLIST             = 0x40000065,
    REST_NOSMMYMUSIC                = 0x40000066,
    REST_NOSMEJECTPC                = 0x40000067,
    REST_NOSMMOREPROGRAMS           = 0x40000068,
    REST_NOSMMFUPROGRAMS            = 0x40000069,
    REST_NOTRAYITEMSDISPLAY         = 0x4000006a,
    REST_NOTOOLBARSONTASKBAR        = 0x4000006b,
    REST_NOSMCONFIGUREPROGRAMS      = 0x4000006f,
    REST_HIDECLOCK                  = 0x40000070,
    REST_NOLOWDISKSPACECHECKS       = 0x40000071,
    REST_NOENTIRENETWORK            = 0x40000072,
    REST_NODESKTOPCLEANUP           = 0x40000073,
    REST_BITBUCKNUKEONDELETE        = 0x40000074,
    REST_BITBUCKCONFIRMDELETE       = 0x40000075,
    REST_BITBUCKNOPROP              = 0x40000076,
    REST_NODISPBACKGROUND           = 0x40000077,
    REST_NODISPSCREENSAVEPG         = 0x40000078,
    REST_NODISPSETTINGSPG           = 0x40000079,
    REST_NODISPSCREENSAVEPREVIEW    = 0x4000007a,
    REST_NODISPLAYCPL               = 0x4000007b,
    REST_HIDERUNASVERB              = 0x4000007c,
    REST_NOTHUMBNAILCACHE           = 0x4000007d,
    REST_NOSTRCMPLOGICAL            = 0x4000007e,
    REST_NOPUBLISHWIZARD            = 0x4000007f,
    REST_NOONLINEPRINTSWIZARD       = 0x40000080,
    REST_NOWEBSERVICES              = 0x40000081,
    REST_ALLOWUNHASHEDWEBVIEW       = 0x40000082,
    REST_ALLOWLEGACYWEBVIEW         = 0x40000083,
    REST_REVERTWEBVIEWSECURITY      = 0x40000084,
    REST_INHERITCONSOLEHANDLES      = 0x40000086,
    REST_NOREMOTERECURSIVEEVENTS    = 0x40000089,
    REST_NOREMOTECHANGENOTIFY       = 0x40000091,
    REST_NOENUMENTIRENETWORK        = 0x40000093,
    REST_NOINTERNETOPENWITH         = 0x40000095,
    REST_DONTRETRYBADNETNAME        = 0x4000009b,
    REST_ALLOWFILECLSIDJUNCTIONS    = 0x4000009c,
    REST_NOUPNPINSTALL              = 0x4000009d,
    REST_ARP_DONTGROUPPATCHES       = 0x400000ac,
    REST_ARP_NOCHOOSEPROGRAMSPAGE   = 0x400000ad,
    REST_NODISCONNECT               = 0x41000001,
    REST_NOSECURITY                 = 0x41000002,
    REST_NOFILEASSOCIATE            = 0x41000003,
    REST_ALLOWCOMMENTTOGGLE         = 0x41000004,
}
alias RESTRICTIONS = int;

enum : int
{
    OAIF_ALLOW_REGISTRATION = 0x00000001,
    OAIF_REGISTER_EXT       = 0x00000002,
    OAIF_EXEC               = 0x00000004,
    OAIF_FORCE_REGISTRATION = 0x00000008,
    OAIF_HIDE_REGISTRATION  = 0x00000020,
    OAIF_URL_PROTOCOL       = 0x00000040,
    OAIF_FILE_IS_URI        = 0x00000080,
}
alias tagOPEN_AS_INFO_FLAGS = int;

enum : int
{
    IESHORTCUT_NEWBROWSER    = 0x00000001,
    IESHORTCUT_OPENNEWTAB    = 0x00000002,
    IESHORTCUT_FORCENAVIGATE = 0x00000004,
    IESHORTCUT_BACKGROUNDTAB = 0x00000008,
}
alias IESHORTCUTFLAGS = int;

enum : int
{
    DEVICE_PRIMARY   = 0x00000000,
    DEVICE_IMMERSIVE = 0x00000001,
}
alias DISPLAY_DEVICE_TYPE = int;

enum : int
{
    SCF_VALUE_NONE = 0x00000000,
    SCF_SCALE      = 0x00000001,
    SCF_PHYSICAL   = 0x00000002,
}
alias SCALE_CHANGE_FLAGS = int;

enum : int
{
    SHELL_UI_COMPONENT_TASKBARS         = 0x00000000,
    SHELL_UI_COMPONENT_NOTIFICATIONAREA = 0x00000001,
    SHELL_UI_COMPONENT_DESKBAND         = 0x00000002,
}
alias SHELL_UI_COMPONENT = int;

enum : int
{
    SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT    = 0x00000001,
    SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = 0x00000002,
}
alias tagSFBS_FLAGS = int;

enum : int
{
    URL_SCHEME_INVALID       = 0xffffffff,
    URL_SCHEME_UNKNOWN       = 0x00000000,
    URL_SCHEME_FTP           = 0x00000001,
    URL_SCHEME_HTTP          = 0x00000002,
    URL_SCHEME_GOPHER        = 0x00000003,
    URL_SCHEME_MAILTO        = 0x00000004,
    URL_SCHEME_NEWS          = 0x00000005,
    URL_SCHEME_NNTP          = 0x00000006,
    URL_SCHEME_TELNET        = 0x00000007,
    URL_SCHEME_WAIS          = 0x00000008,
    URL_SCHEME_FILE          = 0x00000009,
    URL_SCHEME_MK            = 0x0000000a,
    URL_SCHEME_HTTPS         = 0x0000000b,
    URL_SCHEME_SHELL         = 0x0000000c,
    URL_SCHEME_SNEWS         = 0x0000000d,
    URL_SCHEME_LOCAL         = 0x0000000e,
    URL_SCHEME_JAVASCRIPT    = 0x0000000f,
    URL_SCHEME_VBSCRIPT      = 0x00000010,
    URL_SCHEME_ABOUT         = 0x00000011,
    URL_SCHEME_RES           = 0x00000012,
    URL_SCHEME_MSSHELLROOTED = 0x00000013,
    URL_SCHEME_MSSHELLIDLIST = 0x00000014,
    URL_SCHEME_MSHELP        = 0x00000015,
    URL_SCHEME_MSSHELLDEVICE = 0x00000016,
    URL_SCHEME_WILDCARD      = 0x00000017,
    URL_SCHEME_SEARCH_MS     = 0x00000018,
    URL_SCHEME_SEARCH        = 0x00000019,
    URL_SCHEME_KNOWNFOLDER   = 0x0000001a,
    URL_SCHEME_MAXVALUE      = 0x0000001b,
}
alias URL_SCHEME = int;

enum : int
{
    URL_PART_NONE     = 0x00000000,
    URL_PART_SCHEME   = 0x00000001,
    URL_PART_HOSTNAME = 0x00000002,
    URL_PART_USERNAME = 0x00000003,
    URL_PART_PASSWORD = 0x00000004,
    URL_PART_PORT     = 0x00000005,
    URL_PART_QUERY    = 0x00000006,
}
alias URL_PART = int;

enum : int
{
    URLIS_URL       = 0x00000000,
    URLIS_OPAQUE    = 0x00000001,
    URLIS_NOHISTORY = 0x00000002,
    URLIS_FILEURL   = 0x00000003,
    URLIS_APPLIABLE = 0x00000004,
    URLIS_DIRECTORY = 0x00000005,
    URLIS_HASQUERY  = 0x00000006,
}
alias URLIS = int;

enum : int
{
    SHREGDEL_DEFAULT = 0x00000000,
    SHREGDEL_HKCU    = 0x00000001,
    SHREGDEL_HKLM    = 0x00000010,
    SHREGDEL_BOTH    = 0x00000011,
}
alias SHREGDEL_FLAGS = int;

enum : int
{
    SHREGENUM_DEFAULT = 0x00000000,
    SHREGENUM_HKCU    = 0x00000001,
    SHREGENUM_HKLM    = 0x00000010,
    SHREGENUM_BOTH    = 0x00000011,
}
alias SHREGENUM_FLAGS = int;

enum : int
{
    ASSOCSTR_COMMAND                 = 0x00000001,
    ASSOCSTR_EXECUTABLE              = 0x00000002,
    ASSOCSTR_FRIENDLYDOCNAME         = 0x00000003,
    ASSOCSTR_FRIENDLYAPPNAME         = 0x00000004,
    ASSOCSTR_NOOPEN                  = 0x00000005,
    ASSOCSTR_SHELLNEWVALUE           = 0x00000006,
    ASSOCSTR_DDECOMMAND              = 0x00000007,
    ASSOCSTR_DDEIFEXEC               = 0x00000008,
    ASSOCSTR_DDEAPPLICATION          = 0x00000009,
    ASSOCSTR_DDETOPIC                = 0x0000000a,
    ASSOCSTR_INFOTIP                 = 0x0000000b,
    ASSOCSTR_QUICKTIP                = 0x0000000c,
    ASSOCSTR_TILEINFO                = 0x0000000d,
    ASSOCSTR_CONTENTTYPE             = 0x0000000e,
    ASSOCSTR_DEFAULTICON             = 0x0000000f,
    ASSOCSTR_SHELLEXTENSION          = 0x00000010,
    ASSOCSTR_DROPTARGET              = 0x00000011,
    ASSOCSTR_DELEGATEEXECUTE         = 0x00000012,
    ASSOCSTR_SUPPORTED_URI_PROTOCOLS = 0x00000013,
    ASSOCSTR_PROGID                  = 0x00000014,
    ASSOCSTR_APPID                   = 0x00000015,
    ASSOCSTR_APPPUBLISHER            = 0x00000016,
    ASSOCSTR_APPICONREFERENCE        = 0x00000017,
    ASSOCSTR_MAX                     = 0x00000018,
}
alias ASSOCSTR = int;

enum : int
{
    ASSOCKEY_SHELLEXECCLASS = 0x00000001,
    ASSOCKEY_APP            = 0x00000002,
    ASSOCKEY_CLASS          = 0x00000003,
    ASSOCKEY_BASECLASS      = 0x00000004,
    ASSOCKEY_MAX            = 0x00000005,
}
alias ASSOCKEY = int;

enum : int
{
    ASSOCDATA_MSIDESCRIPTOR     = 0x00000001,
    ASSOCDATA_NOACTIVATEHANDLER = 0x00000002,
    ASSOCDATA_UNUSED1           = 0x00000003,
    ASSOCDATA_HASPERUSERASSOC   = 0x00000004,
    ASSOCDATA_EDITFLAGS         = 0x00000005,
    ASSOCDATA_VALUE             = 0x00000006,
    ASSOCDATA_MAX               = 0x00000007,
}
alias ASSOCDATA = int;

enum : int
{
    ASSOCENUM_NONE = 0x00000000,
}
alias ASSOCENUM = int;

enum : int
{
    FTA_None                  = 0x00000000,
    FTA_Exclude               = 0x00000001,
    FTA_Show                  = 0x00000002,
    FTA_HasExtension          = 0x00000004,
    FTA_NoEdit                = 0x00000008,
    FTA_NoRemove              = 0x00000010,
    FTA_NoNewVerb             = 0x00000020,
    FTA_NoEditVerb            = 0x00000040,
    FTA_NoRemoveVerb          = 0x00000080,
    FTA_NoEditDesc            = 0x00000100,
    FTA_NoEditIcon            = 0x00000200,
    FTA_NoEditDflt            = 0x00000400,
    FTA_NoEditVerbCmd         = 0x00000800,
    FTA_NoEditVerbExe         = 0x00001000,
    FTA_NoDDE                 = 0x00002000,
    FTA_NoEditMIME            = 0x00008000,
    FTA_OpenIsSafe            = 0x00010000,
    FTA_AlwaysUnsafe          = 0x00020000,
    FTA_NoRecentDocs          = 0x00100000,
    FTA_SafeForElevation      = 0x00200000,
    FTA_AlwaysUseDirectInvoke = 0x00400000,
}
alias FILETYPEATTRIBUTEFLAGS = int;

enum : int
{
    GLOBALCOUNTER_SEARCHMANAGER                                      = 0x00000000,
    GLOBALCOUNTER_SEARCHOPTIONS                                      = 0x00000001,
    GLOBALCOUNTER_FOLDERSETTINGSCHANGE                               = 0x00000002,
    GLOBALCOUNTER_RATINGS                                            = 0x00000003,
    GLOBALCOUNTER_APPROVEDSITES                                      = 0x00000004,
    GLOBALCOUNTER_RESTRICTIONS                                       = 0x00000005,
    GLOBALCOUNTER_SHELLSETTINGSCHANGED                               = 0x00000006,
    GLOBALCOUNTER_SYSTEMPIDLCHANGE                                   = 0x00000007,
    GLOBALCOUNTER_OVERLAYMANAGER                                     = 0x00000008,
    GLOBALCOUNTER_QUERYASSOCIATIONS                                  = 0x00000009,
    GLOBALCOUNTER_IESESSIONS                                         = 0x0000000a,
    GLOBALCOUNTER_IEONLY_SESSIONS                                    = 0x0000000b,
    GLOBALCOUNTER_APPLICATION_DESTINATIONS                           = 0x0000000c,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS             = 0x0000000d,
    GLOBALCOUNTER_BITBUCKETNUMDELETERS                               = 0x0000000e,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES                           = 0x0000000f,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A                          = 0x00000010,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B                          = 0x00000011,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C                          = 0x00000012,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D                          = 0x00000013,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E                          = 0x00000014,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F                          = 0x00000015,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G                          = 0x00000016,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H                          = 0x00000017,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I                          = 0x00000018,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J                          = 0x00000019,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K                          = 0x0000001a,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L                          = 0x0000001b,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M                          = 0x0000001c,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N                          = 0x0000001d,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O                          = 0x0000001e,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P                          = 0x0000001f,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q                          = 0x00000020,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R                          = 0x00000021,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S                          = 0x00000022,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T                          = 0x00000023,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U                          = 0x00000024,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V                          = 0x00000025,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W                          = 0x00000026,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X                          = 0x00000027,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y                          = 0x00000028,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z                          = 0x00000029,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = 0x0000002a,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT       = 0x0000002b,
    GLOBALCOUNTER_RECYCLEBINENUM                                     = 0x0000002c,
    GLOBALCOUNTER_RECYCLEBINCORRUPTED                                = 0x0000002d,
    GLOBALCOUNTER_RATINGS_STATECOUNTER                               = 0x0000002e,
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE                              = 0x0000002f,
    GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT                             = 0x00000030,
    GLOBALCOUNTER_FOLDERDEFINITION_CACHE                             = 0x00000031,
    GLOBALCOUNTER_COMMONPLACES_LIST_CACHE                            = 0x00000032,
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE                  = 0x00000033,
    GLOBALCOUNTER_ASSOCCHANGED                                       = 0x00000034,
    GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE                        = 0x00000035,
    GLOBALCOUNTER_SETTINGSYNC_ENABLED                                = 0x00000036,
    GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER             = 0x00000037,
    GLOBALCOUNTER_USERINFOCHANGED                                    = 0x00000038,
    GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE          = 0x00000039,
    GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE                = 0x0000003a,
    GLOBALCOUNTER_MAXIMUMVALUE                                       = 0x0000003b,
}
alias SHGLOBALCOUNTER = int;

enum : int
{
    AIM_DISPLAYNAME       = 0x00000001,
    AIM_VERSION           = 0x00000002,
    AIM_PUBLISHER         = 0x00000004,
    AIM_PRODUCTID         = 0x00000008,
    AIM_REGISTEREDOWNER   = 0x00000010,
    AIM_REGISTEREDCOMPANY = 0x00000020,
    AIM_LANGUAGE          = 0x00000040,
    AIM_SUPPORTURL        = 0x00000080,
    AIM_SUPPORTTELEPHONE  = 0x00000100,
    AIM_HELPLINK          = 0x00000200,
    AIM_INSTALLLOCATION   = 0x00000400,
    AIM_INSTALLSOURCE     = 0x00000800,
    AIM_INSTALLDATE       = 0x00001000,
    AIM_CONTACT           = 0x00004000,
    AIM_COMMENTS          = 0x00008000,
    AIM_IMAGE             = 0x00020000,
    AIM_READMEURL         = 0x00040000,
    AIM_UPDATEINFOURL     = 0x00080000,
}
alias APPINFODATAFLAGS = int;

enum : int
{
    APPACTION_INSTALL      = 0x00000001,
    APPACTION_UNINSTALL    = 0x00000002,
    APPACTION_MODIFY       = 0x00000004,
    APPACTION_REPAIR       = 0x00000008,
    APPACTION_UPGRADE      = 0x00000010,
    APPACTION_CANGETSIZE   = 0x00000020,
    APPACTION_MODIFYREMOVE = 0x00000080,
    APPACTION_ADDLATER     = 0x00000100,
    APPACTION_UNSCHEDULE   = 0x00000200,
}
alias APPACTIONFLAGS = int;

enum : int
{
    PAI_SOURCE        = 0x00000001,
    PAI_ASSIGNEDTIME  = 0x00000002,
    PAI_PUBLISHEDTIME = 0x00000004,
    PAI_SCHEDULEDTIME = 0x00000008,
    PAI_EXPIRETIME    = 0x00000010,
}
alias PUBAPPINFOFLAGS = int;

enum : int
{
    CPUS_INVALID            = 0x00000000,
    CPUS_LOGON              = 0x00000001,
    CPUS_UNLOCK_WORKSTATION = 0x00000002,
    CPUS_CHANGE_PASSWORD    = 0x00000003,
    CPUS_CREDUI             = 0x00000004,
    CPUS_PLAP               = 0x00000005,
}
alias CREDENTIAL_PROVIDER_USAGE_SCENARIO = int;

enum : int
{
    CPFT_INVALID       = 0x00000000,
    CPFT_LARGE_TEXT    = 0x00000001,
    CPFT_SMALL_TEXT    = 0x00000002,
    CPFT_COMMAND_LINK  = 0x00000003,
    CPFT_EDIT_TEXT     = 0x00000004,
    CPFT_PASSWORD_TEXT = 0x00000005,
    CPFT_TILE_IMAGE    = 0x00000006,
    CPFT_CHECKBOX      = 0x00000007,
    CPFT_COMBOBOX      = 0x00000008,
    CPFT_SUBMIT_BUTTON = 0x00000009,
}
alias CREDENTIAL_PROVIDER_FIELD_TYPE = int;

enum : int
{
    CPFS_HIDDEN                     = 0x00000000,
    CPFS_DISPLAY_IN_SELECTED_TILE   = 0x00000001,
    CPFS_DISPLAY_IN_DESELECTED_TILE = 0x00000002,
    CPFS_DISPLAY_IN_BOTH            = 0x00000003,
}
alias CREDENTIAL_PROVIDER_FIELD_STATE = int;

enum : int
{
    CPFIS_NONE     = 0x00000000,
    CPFIS_READONLY = 0x00000001,
    CPFIS_DISABLED = 0x00000002,
    CPFIS_FOCUSED  = 0x00000003,
}
alias CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE = int;

enum : int
{
    CPGSR_NO_CREDENTIAL_NOT_FINISHED    = 0x00000000,
    CPGSR_NO_CREDENTIAL_FINISHED        = 0x00000001,
    CPGSR_RETURN_CREDENTIAL_FINISHED    = 0x00000002,
    CPGSR_RETURN_NO_CREDENTIAL_FINISHED = 0x00000003,
}
alias CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE = int;

enum : int
{
    CPSI_NONE    = 0x00000000,
    CPSI_ERROR   = 0x00000001,
    CPSI_WARNING = 0x00000002,
    CPSI_SUCCESS = 0x00000003,
}
alias CREDENTIAL_PROVIDER_STATUS_ICON = int;

enum : int
{
    CPAO_NONE            = 0x00000000,
    CPAO_EMPTY_LOCAL     = 0x00000001,
    CPAO_EMPTY_CONNECTED = 0x00000002,
}
alias CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS = int;

enum : int
{
    CPCFO_NONE                              = 0x00000000,
    CPCFO_ENABLE_PASSWORD_REVEAL            = 0x00000001,
    CPCFO_IS_EMAIL_ADDRESS                  = 0x00000002,
    CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = 0x00000004,
    CPCFO_NUMBERS_ONLY                      = 0x00000008,
    CPCFO_SHOW_ENGLISH_KEYBOARD             = 0x00000010,
}
alias CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS = int;

enum : int
{
    SYNCMGR_HCM_NONE                         = 0x00000000,
    SYNCMGR_HCM_PROVIDES_ICON                = 0x00000001,
    SYNCMGR_HCM_EVENT_STORE                  = 0x00000002,
    SYNCMGR_HCM_CONFLICT_STORE               = 0x00000004,
    SYNCMGR_HCM_SUPPORTS_CONCURRENT_SESSIONS = 0x00000010,
    SYNCMGR_HCM_CAN_BROWSE_CONTENT           = 0x00010000,
    SYNCMGR_HCM_CAN_SHOW_SCHEDULE            = 0x00020000,
    SYNCMGR_HCM_QUERY_BEFORE_ACTIVATE        = 0x00100000,
    SYNCMGR_HCM_QUERY_BEFORE_DEACTIVATE      = 0x00200000,
    SYNCMGR_HCM_QUERY_BEFORE_ENABLE          = 0x00400000,
    SYNCMGR_HCM_QUERY_BEFORE_DISABLE         = 0x00800000,
    SYNCMGR_HCM_VALID_MASK                   = 0x00f30017,
}
alias SYNCMGR_HANDLER_CAPABILITIES = int;

enum : int
{
    SYNCMGR_HPM_NONE                 = 0x00000000,
    SYNCMGR_HPM_PREVENT_ACTIVATE     = 0x00000001,
    SYNCMGR_HPM_PREVENT_DEACTIVATE   = 0x00000002,
    SYNCMGR_HPM_PREVENT_ENABLE       = 0x00000004,
    SYNCMGR_HPM_PREVENT_DISABLE      = 0x00000008,
    SYNCMGR_HPM_PREVENT_START_SYNC   = 0x00000010,
    SYNCMGR_HPM_PREVENT_STOP_SYNC    = 0x00000020,
    SYNCMGR_HPM_DISABLE_ENABLE       = 0x00000100,
    SYNCMGR_HPM_DISABLE_DISABLE      = 0x00000200,
    SYNCMGR_HPM_DISABLE_START_SYNC   = 0x00000400,
    SYNCMGR_HPM_DISABLE_STOP_SYNC    = 0x00000800,
    SYNCMGR_HPM_DISABLE_BROWSE       = 0x00001000,
    SYNCMGR_HPM_DISABLE_SCHEDULE     = 0x00002000,
    SYNCMGR_HPM_HIDDEN_BY_DEFAULT    = 0x00010000,
    SYNCMGR_HPM_BACKGROUND_SYNC_ONLY = 0x00000030,
    SYNCMGR_HPM_VALID_MASK           = 0x00012f3f,
}
alias SYNCMGR_HANDLER_POLICIES = int;

enum : int
{
    SYNCMGR_HT_UNSPECIFIED = 0x00000000,
    SYNCMGR_HT_APPLICATION = 0x00000001,
    SYNCMGR_HT_DEVICE      = 0x00000002,
    SYNCMGR_HT_FOLDER      = 0x00000003,
    SYNCMGR_HT_SERVICE     = 0x00000004,
    SYNCMGR_HT_COMPUTER    = 0x00000005,
    SYNCMGR_HT_MIN         = 0x00000000,
    SYNCMGR_HT_MAX         = 0x00000005,
}
alias SYNCMGR_HANDLER_TYPE = int;

enum : int
{
    SYNCMGR_ICM_NONE                 = 0x00000000,
    SYNCMGR_ICM_PROVIDES_ICON        = 0x00000001,
    SYNCMGR_ICM_EVENT_STORE          = 0x00000002,
    SYNCMGR_ICM_CONFLICT_STORE       = 0x00000004,
    SYNCMGR_ICM_CAN_DELETE           = 0x00000010,
    SYNCMGR_ICM_CAN_BROWSE_CONTENT   = 0x00010000,
    SYNCMGR_ICM_QUERY_BEFORE_ENABLE  = 0x00100000,
    SYNCMGR_ICM_QUERY_BEFORE_DISABLE = 0x00200000,
    SYNCMGR_ICM_QUERY_BEFORE_DELETE  = 0x00400000,
    SYNCMGR_ICM_VALID_MASK           = 0x00710017,
}
alias SYNCMGR_ITEM_CAPABILITIES = int;

enum : int
{
    SYNCMGR_IPM_NONE               = 0x00000000,
    SYNCMGR_IPM_PREVENT_ENABLE     = 0x00000001,
    SYNCMGR_IPM_PREVENT_DISABLE    = 0x00000002,
    SYNCMGR_IPM_PREVENT_START_SYNC = 0x00000004,
    SYNCMGR_IPM_PREVENT_STOP_SYNC  = 0x00000008,
    SYNCMGR_IPM_DISABLE_ENABLE     = 0x00000010,
    SYNCMGR_IPM_DISABLE_DISABLE    = 0x00000020,
    SYNCMGR_IPM_DISABLE_START_SYNC = 0x00000040,
    SYNCMGR_IPM_DISABLE_STOP_SYNC  = 0x00000080,
    SYNCMGR_IPM_DISABLE_BROWSE     = 0x00000100,
    SYNCMGR_IPM_DISABLE_DELETE     = 0x00000200,
    SYNCMGR_IPM_HIDDEN_BY_DEFAULT  = 0x00010000,
    SYNCMGR_IPM_VALID_MASK         = 0x000102ff,
}
alias SYNCMGR_ITEM_POLICIES = int;

enum : int
{
    SYNCMGR_PS_UPDATING               = 0x00000001,
    SYNCMGR_PS_UPDATING_INDETERMINATE = 0x00000002,
    SYNCMGR_PS_SUCCEEDED              = 0x00000003,
    SYNCMGR_PS_FAILED                 = 0x00000004,
    SYNCMGR_PS_CANCELED               = 0x00000005,
    SYNCMGR_PS_DISCONNECTED           = 0x00000006,
    SYNCMGR_PS_MAX                    = 0x00000006,
}
alias SYNCMGR_PROGRESS_STATUS = int;

enum : int
{
    SYNCMGR_CR_NONE        = 0x00000000,
    SYNCMGR_CR_CANCEL_ITEM = 0x00000001,
    SYNCMGR_CR_CANCEL_ALL  = 0x00000002,
    SYNCMGR_CR_MAX         = 0x00000002,
}
alias SYNCMGR_CANCEL_REQUEST = int;

enum : int
{
    SYNCMGR_EL_INFORMATION = 0x00000001,
    SYNCMGR_EL_WARNING     = 0x00000002,
    SYNCMGR_EL_ERROR       = 0x00000003,
    SYNCMGR_EL_MAX         = 0x00000003,
}
alias SYNCMGR_EVENT_LEVEL = int;

enum : int
{
    SYNCMGR_EF_NONE  = 0x00000000,
    SYNCMGR_EF_VALID = 0x00000000,
}
alias SYNCMGR_EVENT_FLAGS = int;

enum : int
{
    SYNCMGR_CF_NONE   = 0x00000000,
    SYNCMGR_CF_NOWAIT = 0x00000000,
    SYNCMGR_CF_WAIT   = 0x00000001,
    SYNCMGR_CF_NOUI   = 0x00000002,
    SYNCMGR_CF_VALID  = 0x00000003,
}
alias SYNCMGR_CONTROL_FLAGS = int;

enum : int
{
    SYNCMGR_SCF_NONE                      = 0x00000000,
    SYNCMGR_SCF_IGNORE_IF_ALREADY_SYNCING = 0x00000001,
    SYNCMGR_SCF_VALID                     = 0x00000001,
}
alias SYNCMGR_SYNC_CONTROL_FLAGS = int;

enum : int
{
    SYNCMGR_UR_ADDED   = 0x00000000,
    SYNCMGR_UR_CHANGED = 0x00000001,
    SYNCMGR_UR_REMOVED = 0x00000002,
    SYNCMGR_UR_MAX     = 0x00000002,
}
alias SYNCMGR_UPDATE_REASON = int;

enum : int
{
    SYNCMGR_CIT_UPDATED = 0x00000001,
    SYNCMGR_CIT_DELETED = 0x00000002,
}
alias SYNCMGR_CONFLICT_ITEM_TYPE = int;

enum : int
{
    SYNCMGR_RA_KEEPOTHER         = 0x00000001,
    SYNCMGR_RA_KEEPRECENT        = 0x00000002,
    SYNCMGR_RA_REMOVEFROMSYNCSET = 0x00000004,
    SYNCMGR_RA_KEEP_SINGLE       = 0x00000008,
    SYNCMGR_RA_KEEP_MULTIPLE     = 0x00000010,
    SYNCMGR_RA_VALID             = 0x0000001f,
}
alias SYNCMGR_RESOLUTION_ABILITIES = int;

enum : int
{
    SYNCMGR_RF_CONTINUE = 0x00000000,
    SYNCMGR_RF_REFRESH  = 0x00000001,
    SYNCMGR_RF_CANCEL   = 0x00000002,
}
alias SYNCMGR_RESOLUTION_FEEDBACK = int;

enum : int
{
    SYNCMGR_PNS_CONTINUE = 0x00000000,
    SYNCMGR_PNS_DEFAULT  = 0x00000001,
    SYNCMGR_PNS_CANCEL   = 0x00000002,
}
alias SYNCMGR_PRESENTER_NEXT_STEP = int;

enum : int
{
    SYNCMGR_PC_NO_CHOICE            = 0x00000000,
    SYNCMGR_PC_KEEP_ONE             = 0x00000001,
    SYNCMGR_PC_KEEP_MULTIPLE        = 0x00000002,
    SYNCMGR_PC_KEEP_RECENT          = 0x00000003,
    SYNCMGR_PC_REMOVE_FROM_SYNC_SET = 0x00000004,
    SYNCMGR_PC_SKIP                 = 0x00000005,
}
alias SYNCMGR_PRESENTER_CHOICE = int;

enum : int
{
    WTS_NONE                 = 0x00000000,
    WTS_EXTRACT              = 0x00000000,
    WTS_INCACHEONLY          = 0x00000001,
    WTS_FASTEXTRACT          = 0x00000002,
    WTS_FORCEEXTRACTION      = 0x00000004,
    WTS_SLOWRECLAIM          = 0x00000008,
    WTS_EXTRACTDONOTCACHE    = 0x00000020,
    WTS_SCALETOREQUESTEDSIZE = 0x00000040,
    WTS_SKIPFASTEXTRACT      = 0x00000080,
    WTS_EXTRACTINPROC        = 0x00000100,
    WTS_CROPTOSQUARE         = 0x00000200,
    WTS_INSTANCESURROGATE    = 0x00000400,
    WTS_REQUIRESURROGATE     = 0x00000800,
    WTS_APPSTYLE             = 0x00002000,
    WTS_WIDETHUMBNAILS       = 0x00004000,
    WTS_IDEALCACHESIZEONLY   = 0x00008000,
    WTS_SCALEUP              = 0x00010000,
}
alias WTS_FLAGS = int;

enum : int
{
    WTS_DEFAULT    = 0x00000000,
    WTS_LOWQUALITY = 0x00000001,
    WTS_CACHED     = 0x00000002,
}
alias WTS_CACHEFLAGS = int;

enum : int
{
    WTSCF_DEFAULT  = 0x00000000,
    WTSCF_APPSTYLE = 0x00000001,
    WTSCF_SQUARE   = 0x00000002,
    WTSCF_WIDE     = 0x00000004,
    WTSCF_FAST     = 0x00000008,
}
alias WTS_CONTEXTFLAGS = int;

enum : int
{
    WTSAT_UNKNOWN = 0x00000000,
    WTSAT_RGB     = 0x00000001,
    WTSAT_ARGB    = 0x00000002,
}
alias WTS_ALPHATYPE = int;

enum : int
{
    SYNCMGRSTATUS_STOPPED                = 0x00000000,
    SYNCMGRSTATUS_SKIPPED                = 0x00000001,
    SYNCMGRSTATUS_PENDING                = 0x00000002,
    SYNCMGRSTATUS_UPDATING               = 0x00000003,
    SYNCMGRSTATUS_SUCCEEDED              = 0x00000004,
    SYNCMGRSTATUS_FAILED                 = 0x00000005,
    SYNCMGRSTATUS_PAUSED                 = 0x00000006,
    SYNCMGRSTATUS_RESUMING               = 0x00000007,
    SYNCMGRSTATUS_UPDATING_INDETERMINATE = 0x00000008,
    SYNCMGRSTATUS_DELETED                = 0x00000100,
}
alias SYNCMGRSTATUS = int;

enum : int
{
    SYNCMGRLOGLEVEL_INFORMATION = 0x00000001,
    SYNCMGRLOGLEVEL_WARNING     = 0x00000002,
    SYNCMGRLOGLEVEL_ERROR       = 0x00000003,
    SYNCMGRLOGLEVEL_LOGLEVELMAX = 0x00000003,
}
alias SYNCMGRLOGLEVEL = int;

enum : int
{
    SYNCMGRERRORFLAG_ENABLEJUMPTEXT = 0x00000001,
}
alias SYNCMGRERRORFLAGS = int;

enum : int
{
    SYNCMGRITEM_HASPROPERTIES  = 0x00000001,
    SYNCMGRITEM_TEMPORARY      = 0x00000002,
    SYNCMGRITEM_ROAMINGUSER    = 0x00000004,
    SYNCMGRITEM_LASTUPDATETIME = 0x00000008,
    SYNCMGRITEM_MAYDELETEITEM  = 0x00000010,
    SYNCMGRITEM_HIDDEN         = 0x00000020,
}
alias SYNCMGRITEMFLAGS = int;

enum : int
{
    SYNCMGRFLAG_CONNECT           = 0x00000001,
    SYNCMGRFLAG_PENDINGDISCONNECT = 0x00000002,
    SYNCMGRFLAG_MANUAL            = 0x00000003,
    SYNCMGRFLAG_IDLE              = 0x00000004,
    SYNCMGRFLAG_INVOKE            = 0x00000005,
    SYNCMGRFLAG_SCHEDULED         = 0x00000006,
    SYNCMGRFLAG_EVENTMASK         = 0x000000ff,
    SYNCMGRFLAG_SETTINGS          = 0x00000100,
    SYNCMGRFLAG_MAYBOTHERUSER     = 0x00000200,
}
alias SYNCMGRFLAG = int;

enum : int
{
    SYNCMGRHANDLER_HASPROPERTIES          = 0x00000001,
    SYNCMGRHANDLER_MAYESTABLISHCONNECTION = 0x00000002,
    SYNCMGRHANDLER_ALWAYSLISTHANDLER      = 0x00000004,
    SYNCMGRHANDLER_HIDDEN                 = 0x00000008,
}
alias SYNCMGRHANDLERFLAGS = int;

enum : int
{
    SYNCMGRITEMSTATE_UNCHECKED = 0x00000000,
    SYNCMGRITEMSTATE_CHECKED   = 0x00000001,
}
alias SYNCMGRITEMSTATE = int;

enum : int
{
    SYNCMGRINVOKE_STARTSYNC = 0x00000002,
    SYNCMGRINVOKE_MINIMIZED = 0x00000004,
}
alias SYNCMGRINVOKEFLAGS = int;

enum : int
{
    SYNCMGRREGISTERFLAG_CONNECT           = 0x00000001,
    SYNCMGRREGISTERFLAG_PENDINGDISCONNECT = 0x00000002,
    SYNCMGRREGISTERFLAG_IDLE              = 0x00000004,
}
alias SYNCMGRREGISTERFLAGS = int;

enum ThumbnailStreamCacheOptions : int
{
    ExtractIfNotCached = 0x00000000,
    ReturnOnlyIfCached = 0x00000001,
    ResizeThumbnail    = 0x00000002,
    AllowSmallerSize   = 0x00000004,
}

enum : int
{
    TLEF_RELATIVE_INCLUDE_CURRENT = 0x00000001,
    TLEF_RELATIVE_BACK            = 0x00000010,
    TLEF_RELATIVE_FORE            = 0x00000020,
    TLEF_INCLUDE_UNINVOKEABLE     = 0x00000040,
    TLEF_ABSOLUTE                 = 0x00000031,
    TLEF_EXCLUDE_SUBFRAME_ENTRIES = 0x00000080,
    TLEF_EXCLUDE_ABOUT_PAGES      = 0x00000100,
}
alias tagTLENUMF = int;

enum : int
{
    HLSR_HOME          = 0x00000000,
    HLSR_SEARCHPAGE    = 0x00000001,
    HLSR_HISTORYFOLDER = 0x00000002,
}
alias _HLSR_NOREDEF10 = int;

enum : int
{
    HLSHORTCUTF_DEFAULT                     = 0x00000000,
    HLSHORTCUTF_DONTACTUALLYCREATE          = 0x00000001,
    HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = 0x00000002,
    HLSHORTCUTF_USEUNIQUEFILENAME           = 0x00000004,
    HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT      = 0x00000008,
}
alias _HLSHORTCUTF__NOREDEF10 = int;

enum : int
{
    HLTRANSLATEF_DEFAULT                = 0x00000000,
    HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = 0x00000001,
}
alias _HLTRANSLATEF_NOREDEF10 = int;

enum : int
{
    HLNF_INTERNALJUMP          = 0x00000001,
    HLNF_OPENINNEWWINDOW       = 0x00000002,
    HLNF_NAVIGATINGBACK        = 0x00000004,
    HLNF_NAVIGATINGFORWARD     = 0x00000008,
    HLNF_NAVIGATINGTOSTACKITEM = 0x00000010,
    HLNF_CREATENOHISTORY       = 0x00000020,
}
alias __MIDL_IHlink_0001 = int;

enum : int
{
    HLINKGETREF_DEFAULT  = 0x00000000,
    HLINKGETREF_ABSOLUTE = 0x00000001,
    HLINKGETREF_RELATIVE = 0x00000002,
}
alias __MIDL_IHlink_0002 = int;

enum : int
{
    HLFNAMEF_DEFAULT          = 0x00000000,
    HLFNAMEF_TRYCACHE         = 0x00000001,
    HLFNAMEF_TRYPRETTYTARGET  = 0x00000002,
    HLFNAMEF_TRYFULLTARGET    = 0x00000004,
    HLFNAMEF_TRYWIN95SHORTCUT = 0x00000008,
}
alias __MIDL_IHlink_0003 = int;

enum : int
{
    HLINKMISC_RELATIVE = 0x00000001,
}
alias __MIDL_IHlink_0004 = int;

enum : int
{
    HLINKSETF_TARGET   = 0x00000001,
    HLINKSETF_LOCATION = 0x00000002,
}
alias __MIDL_IHlink_0005 = int;

enum : int
{
    HLINKWHICHMK_CONTAINER = 0x00000001,
    HLINKWHICHMK_BASE      = 0x00000002,
}
alias __MIDL_IHlinkSite_0001 = int;

enum : int
{
    HLTB_DOCKEDLEFT   = 0x00000000,
    HLTB_DOCKEDTOP    = 0x00000001,
    HLTB_DOCKEDRIGHT  = 0x00000002,
    HLTB_DOCKEDBOTTOM = 0x00000003,
    HLTB_FLOATING     = 0x00000004,
}
alias __MIDL_IHlinkBrowseContext_0001 = int;

enum : int
{
    HLBWIF_HASFRAMEWNDINFO   = 0x00000001,
    HLBWIF_HASDOCWNDINFO     = 0x00000002,
    HLBWIF_FRAMEWNDMAXIMIZED = 0x00000004,
    HLBWIF_DOCWNDMAXIMIZED   = 0x00000008,
    HLBWIF_HASWEBTOOLBARINFO = 0x00000010,
    HLBWIF_WEBTOOLBARHIDDEN  = 0x00000020,
}
alias __MIDL_IHlinkBrowseContext_0002 = int;

enum : int
{
    HLID_INVALID     = 0x00000000,
    HLID_PREVIOUS    = 0xffffffff,
    HLID_NEXT        = 0xfffffffe,
    HLID_CURRENT     = 0xfffffffd,
    HLID_STACKBOTTOM = 0xfffffffc,
    HLID_STACKTOP    = 0xfffffffb,
}
alias __MIDL_IHlinkBrowseContext_0003 = int;

enum : int
{
    HLQF_ISVALID   = 0x00000001,
    HLQF_ISCURRENT = 0x00000002,
}
alias __MIDL_IHlinkBrowseContext_0004 = int;

enum : int
{
    BNS_NORMAL         = 0x00000000,
    BNS_BEGIN_NAVIGATE = 0x00000001,
    BNS_NAVIGATE       = 0x00000002,
}
alias BNSTATE = int;

enum : int
{
    SBSC_HIDE   = 0x00000000,
    SBSC_SHOW   = 0x00000001,
    SBSC_TOGGLE = 0x00000002,
    SBSC_QUERY  = 0x00000003,
}
alias SHELLBROWSERSHOWCONTROL = int;

enum : int
{
    SECURELOCK_NOCHANGE                 = 0xffffffff,
    SECURELOCK_SET_UNSECURE             = 0x00000000,
    SECURELOCK_SET_MIXED                = 0x00000001,
    SECURELOCK_SET_SECUREUNKNOWNBIT     = 0x00000002,
    SECURELOCK_SET_SECURE40BIT          = 0x00000003,
    SECURELOCK_SET_SECURE56BIT          = 0x00000004,
    SECURELOCK_SET_FORTEZZA             = 0x00000005,
    SECURELOCK_SET_SECURE128BIT         = 0x00000006,
    SECURELOCK_FIRSTSUGGEST             = 0x00000007,
    SECURELOCK_SUGGEST_UNSECURE         = 0x00000007,
    SECURELOCK_SUGGEST_MIXED            = 0x00000008,
    SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = 0x00000009,
    SECURELOCK_SUGGEST_SECURE40BIT      = 0x0000000a,
    SECURELOCK_SUGGEST_SECURE56BIT      = 0x0000000b,
    SECURELOCK_SUGGEST_FORTEZZA         = 0x0000000c,
    SECURELOCK_SUGGEST_SECURE128BIT     = 0x0000000d,
}
alias SECURELOCKCODE = int;

enum : int
{
    IEPDN_BINDINGUI = 0x00000001,
}
alias IEPDNFLAGS = int;

enum : int
{
    TI_BITMAP = 0x00000001,
    TI_JPEG   = 0x00000002,
}
alias TI_FLAGS = int;

enum : int
{
    PATHCCH_NONE                            = 0x00000000,
    PATHCCH_ALLOW_LONG_PATHS                = 0x00000001,
    PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS  = 0x00000002,
    PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS = 0x00000004,
    PATHCCH_DO_NOT_NORMALIZE_SEGMENTS       = 0x00000008,
    PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH  = 0x00000010,
    PATHCCH_ENSURE_TRAILING_SLASH           = 0x00000020,
}
alias PATHCCH_OPTIONS = int;

enum : int
{
    IURL_SETURL_FL_GUESS_PROTOCOL       = 0x00000001,
    IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = 0x00000002,
}
alias iurl_seturl_flags = int;

enum : int
{
    IURL_INVOKECOMMAND_FL_ALLOW_UI         = 0x00000001,
    IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = 0x00000002,
    IURL_INVOKECOMMAND_FL_DDEWAIT          = 0x00000004,
    IURL_INVOKECOMMAND_FL_ASYNCOK          = 0x00000008,
    IURL_INVOKECOMMAND_FL_LOG_USAGE        = 0x00000010,
}
alias iurl_invokecommand_flags = int;

enum : int
{
    TRANSLATEURL_FL_GUESS_PROTOCOL       = 0x00000001,
    TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL = 0x00000002,
}
alias translateurl_in_flags = int;

enum : int
{
    URLASSOCDLG_FL_USE_DEFAULT_NAME = 0x00000001,
    URLASSOCDLG_FL_REGISTER_ASSOC   = 0x00000002,
}
alias urlassociationdialog_in_flags = int;

enum : int
{
    MIMEASSOCDLG_FL_REGISTER_ASSOC = 0x00000001,
}
alias mimeassociationdialog_in_flags = int;

enum ShellWindowTypeConstants : int
{
    SWC_EXPLORER = 0x00000000,
    SWC_BROWSER  = 0x00000001,
    SWC_3RDPARTY = 0x00000002,
    SWC_CALLBACK = 0x00000004,
    SWC_DESKTOP  = 0x00000008,
}

enum ShellWindowFindWindowOptions : int
{
    SWFO_NEEDDISPATCH   = 0x00000001,
    SWFO_INCLUDEPENDING = 0x00000002,
    SWFO_COOKIEPASSED   = 0x00000004,
}

// Constants


enum : int
{
    GPFIDL_DEFAULT    = 0x00000000,
    GPFIDL_ALTNAME    = 0x00000001,
    GPFIDL_UNCPRINTER = 0x00000002,
}

enum : int
{
    ISHCUTCMDID_INTSHORTCUTCREATE = 0x00000001,
    ISHCUTCMDID_COMMITHISTORY     = 0x00000002,
    ISHCUTCMDID_SETUSERAWURL      = 0x00000003,
}

enum : int
{
    DBCID_EMPTY      = 0x00000000,
    DBCID_ONDRAG     = 0x00000001,
    DBCID_CLSIDOFBAR = 0x00000002,
}

enum int DBCID_GETBAR = 0x00000004;
enum int BMICON_SMALL = 0x00000001;

enum : int
{
    ASSOCF_INIT_NOREMAPCLSID = 0x00000001,
    ASSOCF_INIT_BYEXENAME    = 0x00000002,
}

enum : int
{
    ASSOCF_INIT_DEFAULTTOSTAR   = 0x00000004,
    ASSOCF_INIT_DEFAULTTOFOLDER = 0x00000008,
}

enum : int
{
    ASSOCF_NOTRUNCATE  = 0x00000020,
    ASSOCF_VERIFY      = 0x00000040,
    ASSOCF_REMAPRUNDLL = 0x00000080,
}

enum int ASSOCF_IGNOREBASECLASS = 0x00000200;
enum int ASSOCF_INIT_FIXED_PROGID = 0x00000800;
enum int ASSOCF_INIT_FOR_FILE = 0x00002000;
enum int ASSOCF_PER_MACHINE_ONLY = 0x00008000;
enum int CTF_INSIST = 0x00000001;
enum int CTF_PROCESS_REF = 0x00000004;
enum int CTF_COINIT = 0x00000008;
enum int CTF_REF_COUNTED = 0x00000020;
enum int CTF_UNUSED = 0x00000080;
enum int CTF_WAIT_NO_REENTRANCY = 0x00000200;
enum int CTF_OLEINITIALIZE = 0x00000800;
enum int CTF_NOADDREFLIB = 0x00002000;

// Callbacks

alias SUBCLASSPROC = LRESULT function(HWND hWnd, uint uMsg, WPARAM wParam, LPARAM lParam, size_t uIdSubclass, 
                                      size_t dwRefData);
alias PFNCANSHAREFOLDERW = HRESULT function(const(wchar)* pszPath);
alias PFNSHOWSHAREFOLDERUIW = HRESULT function(HWND hwndParent, const(wchar)* pszPath);
alias LPFNSVADDPROPSHEETPAGE = BOOL function();
alias LPFNDFMCALLBACK = HRESULT function(IShellFolder psf, HWND hwnd, IDataObject pdtobj, uint uMsg, WPARAM wParam, 
                                         LPARAM lParam);
alias LPFNVIEWCALLBACK = HRESULT function(IShellView psvOuter, IShellFolder psf, HWND hwndMain, uint uMsg, 
                                          WPARAM wParam, LPARAM lParam);
alias DLLGETVERSIONPROC = HRESULT function(DLLVERSIONINFO* param0);
alias APPLET_PROC = int function(HWND hwndCpl, uint msg, LPARAM lParam1, LPARAM lParam2);
alias PAPPSTATE_CHANGE_ROUTINE = void function(ubyte Quiesced, void* Context);
alias PAPPCONSTRAIN_CHANGE_ROUTINE = void function(ubyte Constrained, void* Context);

// Structs


struct LOGFONTA
{
    int      lfHeight;
    int      lfWidth;
    int      lfEscapement;
    int      lfOrientation;
    int      lfWeight;
    ubyte    lfItalic;
    ubyte    lfUnderline;
    ubyte    lfStrikeOut;
    ubyte    lfCharSet;
    ubyte    lfOutPrecision;
    ubyte    lfClipPrecision;
    ubyte    lfQuality;
    ubyte    lfPitchAndFamily;
    byte[32] lfFaceName;
}

struct LOGFONTW
{
    int        lfHeight;
    int        lfWidth;
    int        lfEscapement;
    int        lfOrientation;
    int        lfWeight;
    ubyte      lfItalic;
    ubyte      lfUnderline;
    ubyte      lfStrikeOut;
    ubyte      lfCharSet;
    ubyte      lfOutPrecision;
    ubyte      lfClipPrecision;
    ubyte      lfQuality;
    ubyte      lfPitchAndFamily;
    ushort[32] lfFaceName;
}

struct SOFTDISTINFO
{
    uint          cbSize;
    uint          dwFlags;
    uint          dwAdState;
    const(wchar)* szTitle;
    const(wchar)* szAbstract;
    const(wchar)* szHREF;
    uint          dwInstalledVersionMS;
    uint          dwInstalledVersionLS;
    uint          dwUpdateVersionMS;
    uint          dwUpdateVersionLS;
    uint          dwAdvertisedVersionMS;
    uint          dwAdvertisedVersionLS;
    uint          dwReserved;
}

alias ShFindChangeNotifcationHandle = ptrdiff_t;

struct HELPINFO
{
    uint   cbSize;
    int    iContextType;
    int    iCtrlId;
    HANDLE hItemHandle;
    size_t dwContextId;
    POINT  MousePos;
}

struct MULTIKEYHELPA
{
    uint    mkSize;
    byte    mkKeylist;
    byte[1] szKeyphrase;
}

struct MULTIKEYHELPW
{
    uint      mkSize;
    ushort    mkKeylist;
    ushort[1] szKeyphrase;
}

struct HELPWININFOA
{
    int     wStructSize;
    int     x;
    int     y;
    int     dx;
    int     dy;
    int     wMax;
    byte[2] rgchMember;
}

struct HELPWININFOW
{
    int       wStructSize;
    int       x;
    int       y;
    int       dx;
    int       dy;
    int       wMax;
    ushort[2] rgchMember;
}

struct APPCATEGORYINFO
{
    uint          Locale;
    const(wchar)* pszDescription;
    GUID          AppCategoryId;
}

struct APPCATEGORYINFOLIST
{
    uint             cCategory;
    APPCATEGORYINFO* pCategoryInfo;
}

struct HDROP__
{
align (1):
    int unused;
}

struct DRAGINFOA
{
align (1):
    uint         uSize;
    POINT        pt;
    BOOL         fNC;
    const(char)* lpFileList;
    uint         grfKeyState;
}

struct DRAGINFOW
{
align (1):
    uint          uSize;
    POINT         pt;
    BOOL          fNC;
    const(wchar)* lpFileList;
    uint          grfKeyState;
}

struct APPBARDATA
{
align (1):
    uint   cbSize;
    HWND   hWnd;
    uint   uCallbackMessage;
    uint   uEdge;
    RECT   rc;
    LPARAM lParam;
}

struct SHFILEOPSTRUCTA
{
align (1):
    HWND         hwnd;
    uint         wFunc;
    byte*        pFrom;
    byte*        pTo;
    ushort       fFlags;
    BOOL         fAnyOperationsAborted;
    void*        hNameMappings;
    const(char)* lpszProgressTitle;
}

struct SHFILEOPSTRUCTW
{
align (1):
    HWND          hwnd;
    uint          wFunc;
    const(wchar)* pFrom;
    const(wchar)* pTo;
    ushort        fFlags;
    BOOL          fAnyOperationsAborted;
    void*         hNameMappings;
    const(wchar)* lpszProgressTitle;
}

struct SHNAMEMAPPINGA
{
align (1):
    const(char)* pszOldPath;
    const(char)* pszNewPath;
    int          cchOldPath;
    int          cchNewPath;
}

struct SHNAMEMAPPINGW
{
align (1):
    const(wchar)* pszOldPath;
    const(wchar)* pszNewPath;
    int           cchOldPath;
    int           cchNewPath;
}

struct SHELLEXECUTEINFOA
{
align (1):
    uint         cbSize;
    uint         fMask;
    HWND         hwnd;
    const(char)* lpVerb;
    const(char)* lpFile;
    const(char)* lpParameters;
    const(char)* lpDirectory;
    int          nShow;
    HINSTANCE    hInstApp;
    void*        lpIDList;
    const(char)* lpClass;
    HKEY         hkeyClass;
    uint         dwHotKey;
    union
    {
    align (1):
        HANDLE hIcon;
        HANDLE hMonitor;
    }
    HANDLE       hProcess;
}

struct SHELLEXECUTEINFOW
{
align (1):
    uint          cbSize;
    uint          fMask;
    HWND          hwnd;
    const(wchar)* lpVerb;
    const(wchar)* lpFile;
    const(wchar)* lpParameters;
    const(wchar)* lpDirectory;
    int           nShow;
    HINSTANCE     hInstApp;
    void*         lpIDList;
    const(wchar)* lpClass;
    HKEY          hkeyClass;
    uint          dwHotKey;
    union
    {
    align (1):
        HANDLE hIcon;
        HANDLE hMonitor;
    }
    HANDLE        hProcess;
}

struct SHCREATEPROCESSINFOW
{
align (1):
    uint                 cbSize;
    uint                 fMask;
    HWND                 hwnd;
    const(wchar)*        pszFile;
    const(wchar)*        pszParameters;
    const(wchar)*        pszCurrentDirectory;
    HANDLE               hUserToken;
    SECURITY_ATTRIBUTES* lpProcessAttributes;
    SECURITY_ATTRIBUTES* lpThreadAttributes;
    BOOL                 bInheritHandles;
    uint                 dwCreationFlags;
    STARTUPINFOW*        lpStartupInfo;
    PROCESS_INFORMATION* lpProcessInformation;
}

struct ASSOCIATIONELEMENT
{
align (1):
    ASSOCCLASS    ac;
    HKEY          hkClass;
    const(wchar)* pszClass;
}

struct SHQUERYRBINFO
{
align (1):
    uint cbSize;
    long i64Size;
    long i64NumItems;
}

struct NOTIFYICONDATAA
{
align (1):
    uint      cbSize;
    HWND      hWnd;
    uint      uID;
    uint      uFlags;
    uint      uCallbackMessage;
    HICON     hIcon;
    byte[128] szTip;
    uint      dwState;
    uint      dwStateMask;
    byte[256] szInfo;
    union
    {
    align (1):
        uint uTimeout;
        uint uVersion;
    }
    byte[64]  szInfoTitle;
    uint      dwInfoFlags;
    GUID      guidItem;
    HICON     hBalloonIcon;
}

struct NOTIFYICONDATAW
{
align (1):
    uint        cbSize;
    HWND        hWnd;
    uint        uID;
    uint        uFlags;
    uint        uCallbackMessage;
    HICON       hIcon;
    ushort[128] szTip;
    uint        dwState;
    uint        dwStateMask;
    ushort[256] szInfo;
    union
    {
    align (1):
        uint uTimeout;
        uint uVersion;
    }
    ushort[64]  szInfoTitle;
    uint        dwInfoFlags;
    GUID        guidItem;
    HICON       hBalloonIcon;
}

struct NOTIFYICONIDENTIFIER
{
align (1):
    uint cbSize;
    HWND hWnd;
    uint uID;
    GUID guidItem;
}

struct SHFILEINFOA
{
align (1):
    HICON     hIcon;
    int       iIcon;
    uint      dwAttributes;
    byte[260] szDisplayName;
    byte[80]  szTypeName;
}

struct SHFILEINFOW
{
align (1):
    HICON       hIcon;
    int         iIcon;
    uint        dwAttributes;
    ushort[260] szDisplayName;
    ushort[80]  szTypeName;
}

struct SHSTOCKICONINFO
{
align (1):
    uint        cbSize;
    HICON       hIcon;
    int         iSysImageIndex;
    int         iIcon;
    ushort[260] szPath;
}

struct OPEN_PRINTER_PROPS_INFOA
{
align (1):
    uint         dwSize;
    const(char)* pszSheetName;
    uint         uSheetIndex;
    uint         dwFlags;
    BOOL         bModal;
}

struct OPEN_PRINTER_PROPS_INFOW
{
align (1):
    uint          dwSize;
    const(wchar)* pszSheetName;
    uint          uSheetIndex;
    uint          dwFlags;
    BOOL          bModal;
}

struct IMarkupCallback
{
}

struct IControlMarkup
{
}

struct SHITEMID
{
align (1):
    ushort   cb;
    ubyte[1] abID;
}

struct ITEMIDLIST
{
    SHITEMID mkid;
}

struct STRRET
{
    uint uType;
    union
    {
        const(wchar)* pOleStr;
        uint          uOffset;
        byte[260]     cStr;
    }
}

struct SHELLDETAILS
{
align (1):
    int    fmt;
    int    cxChar;
    STRRET str;
}

struct COMDLG_FILTERSPEC
{
    const(wchar)* pszName;
    const(wchar)* pszSpec;
}

struct CMINVOKECOMMANDINFO
{
    uint         cbSize;
    uint         fMask;
    HWND         hwnd;
    const(char)* lpVerb;
    const(char)* lpParameters;
    const(char)* lpDirectory;
    int          nShow;
    uint         dwHotKey;
    HANDLE       hIcon;
}

struct CMINVOKECOMMANDINFOEX
{
    uint          cbSize;
    uint          fMask;
    HWND          hwnd;
    const(char)*  lpVerb;
    const(char)*  lpParameters;
    const(char)*  lpDirectory;
    int           nShow;
    uint          dwHotKey;
    HANDLE        hIcon;
    const(char)*  lpTitle;
    const(wchar)* lpVerbW;
    const(wchar)* lpParametersW;
    const(wchar)* lpDirectoryW;
    const(wchar)* lpTitleW;
    POINT         ptInvoke;
}

struct PERSIST_FOLDER_TARGET_INFO
{
    ITEMIDLIST* pidlTargetFolder;
    ushort[260] szTargetParsingName;
    ushort[260] szNetworkProvider;
    uint        dwAttributes;
    int         csidl;
}

struct EXTRASEARCH
{
    GUID         guidSearch;
    ushort[80]   wszFriendlyName;
    ushort[2084] wszUrl;
}

struct FOLDERSETTINGS
{
    uint ViewMode;
    uint fFlags;
}

struct SV2CVW2_PARAMS
{
    uint            cbSize;
    IShellView      psvPrev;
    FOLDERSETTINGS* pfs;
    IShellBrowser   psbOwner;
    RECT*           prcView;
    const(GUID)*    pvid;
    HWND            hwndView;
}

struct SORTCOLUMN
{
    PROPERTYKEY propkey;
    int         direction;
}

struct CM_COLUMNINFO
{
    uint       cbSize;
    uint       dwMask;
    uint       dwState;
    uint       uWidth;
    uint       uDefaultWidth;
    uint       uIdealWidth;
    ushort[80] wszName;
}

struct SHELL_ITEM_RESOURCE
{
    GUID        guidType;
    ushort[260] szName;
}

struct CATEGORY_INFO
{
    CATEGORYINFO_FLAGS cif;
    ushort[260]        wszName;
}

struct SHDRAGIMAGE
{
    SIZE    sizeDragImage;
    POINT   ptOffset;
    HBITMAP hbmpDragImage;
    uint    crColorKey;
}

struct DESKBANDINFO
{
    uint        dwMask;
    POINTL      ptMinSize;
    POINTL      ptMaxSize;
    POINTL      ptIntegral;
    POINTL      ptActual;
    ushort[256] wszTitle;
    uint        dwModeFlags;
    uint        crBkgnd;
}

struct THUMBBUTTON
{
    THUMBBUTTONMASK  dwMask;
    uint             iId;
    uint             iBitmap;
    HICON            hIcon;
    ushort[260]      szTip;
    THUMBBUTTONFLAGS dwFlags;
}

struct BANDSITEINFO
{
    uint dwMask;
    uint dwState;
    uint dwStyle;
}

struct DELEGATEITEMID
{
align (1):
    ushort   cbSize;
    ushort   wOuter;
    ushort   cbInner;
    ubyte[1] rgb;
}

struct SMDATA
{
    uint         dwMask;
    uint         dwFlags;
    HMENU        hmenu;
    HWND         hwnd;
    uint         uId;
    uint         uIdParent;
    uint         uIdAncestor;
    IUnknown     punk;
    ITEMIDLIST*  pidlFolder;
    ITEMIDLIST*  pidlItem;
    IShellFolder psf;
    void*        pvUserData;
}

struct SMINFO
{
    uint dwMask;
    uint dwType;
    uint dwFlags;
    int  iIcon;
}

struct SMCSHCHANGENOTIFYSTRUCT
{
    int         lEvent;
    ITEMIDLIST* pidl1;
    ITEMIDLIST* pidl2;
}

struct KNOWNFOLDER_DEFINITION
{
    KF_CATEGORY   category;
    const(wchar)* pszName;
    const(wchar)* pszDescription;
    GUID          fidParent;
    const(wchar)* pszRelativePath;
    const(wchar)* pszParsingName;
    const(wchar)* pszTooltip;
    const(wchar)* pszLocalizedName;
    const(wchar)* pszIcon;
    const(wchar)* pszSecurity;
    uint          dwAttributes;
    uint          kfdFlags;
    GUID          ftidType;
}

struct PREVIEWHANDLERFRAMEINFO
{
    HACCEL haccel;
    uint   cAccelEntries;
}

struct BANNER_NOTIFICATION
{
    BANNER_NOTIFICATION_EVENT event;
    const(wchar)* providerIdentity;
    const(wchar)* contentId;
}

struct NSTCCUSTOMDRAW
{
    IShellItem    psi;
    uint          uItemState;
    uint          nstcis;
    const(wchar)* pszText;
    int           iImage;
    HIMAGELIST    himl;
    int           iLevel;
    int           iIndent;
}

struct DATABLOCK_HEADER
{
align (1):
    uint cbSize;
    uint dwSignature;
}

struct NT_CONSOLE_PROPS
{
align (1):
    DATABLOCK_HEADER dbh;
    ushort           wFillAttribute;
    ushort           wPopupFillAttribute;
    COORD            dwScreenBufferSize;
    COORD            dwWindowSize;
    COORD            dwWindowOrigin;
    uint             nFont;
    uint             nInputBufferSize;
    COORD            dwFontSize;
    uint             uFontFamily;
    uint             uFontWeight;
    ushort[32]       FaceName;
    uint             uCursorSize;
    BOOL             bFullScreen;
    BOOL             bQuickEdit;
    BOOL             bInsertMode;
    BOOL             bAutoPosition;
    uint             uHistoryBufferSize;
    uint             uNumberOfHistoryBuffers;
    BOOL             bHistoryNoDup;
    uint[16]         ColorTable;
}

struct NT_FE_CONSOLE_PROPS
{
align (1):
    DATABLOCK_HEADER dbh;
    uint             uCodePage;
}

struct EXP_DARWIN_LINK
{
align (1):
    DATABLOCK_HEADER dbh;
    byte[260]        szDarwinID;
    ushort[260]      szwDarwinID;
}

struct EXP_SPECIAL_FOLDER
{
align (1):
    uint cbSize;
    uint dwSignature;
    uint idSpecialFolder;
    uint cbOffset;
}

struct EXP_SZ_LINK
{
align (1):
    uint        cbSize;
    uint        dwSignature;
    byte[260]   szTarget;
    ushort[260] swzTarget;
}

struct EXP_PROPERTYSTORAGE
{
align (1):
    uint     cbSize;
    uint     dwSignature;
    ubyte[1] abPropertyStorage;
}

struct SHFOLDERCUSTOMSETTINGS
{
    uint          dwSize;
    uint          dwMask;
    GUID*         pvid;
    const(wchar)* pszWebViewTemplate;
    uint          cchWebViewTemplate;
    const(wchar)* pszWebViewTemplateVersion;
    const(wchar)* pszInfoTip;
    uint          cchInfoTip;
    GUID*         pclsid;
    uint          dwFlags;
    const(wchar)* pszIconFile;
    uint          cchIconFile;
    int           iIconIndex;
    const(wchar)* pszLogo;
    uint          cchLogo;
}

struct BROWSEINFOA
{
    HWND         hwndOwner;
    ITEMIDLIST*  pidlRoot;
    const(char)* pszDisplayName;
    const(char)* lpszTitle;
    uint         ulFlags;
    BFFCALLBACK  lpfn;
    LPARAM       lParam;
    int          iImage;
}

struct BROWSEINFOW
{
    HWND          hwndOwner;
    ITEMIDLIST*   pidlRoot;
    const(wchar)* pszDisplayName;
    const(wchar)* lpszTitle;
    uint          ulFlags;
    BFFCALLBACK   lpfn;
    LPARAM        lParam;
    int           iImage;
}

struct NRESARRAY
{
    uint            cItems;
    NETRESOURCEA[1] nr;
}

struct CIDA
{
align (1):
    uint    cidl;
    uint[1] aoffset;
}

struct FILEDESCRIPTORA
{
align (1):
    uint      dwFlags;
    GUID      clsid;
    SIZE      sizel;
    POINTL    pointl;
    uint      dwFileAttributes;
    FILETIME  ftCreationTime;
    FILETIME  ftLastAccessTime;
    FILETIME  ftLastWriteTime;
    uint      nFileSizeHigh;
    uint      nFileSizeLow;
    byte[260] cFileName;
}

struct FILEDESCRIPTORW
{
align (1):
    uint        dwFlags;
    GUID        clsid;
    SIZE        sizel;
    POINTL      pointl;
    uint        dwFileAttributes;
    FILETIME    ftCreationTime;
    FILETIME    ftLastAccessTime;
    FILETIME    ftLastWriteTime;
    uint        nFileSizeHigh;
    uint        nFileSizeLow;
    ushort[260] cFileName;
}

struct FILEGROUPDESCRIPTORA
{
align (1):
    uint               cItems;
    FILEDESCRIPTORA[1] fgd;
}

struct FILEGROUPDESCRIPTORW
{
align (1):
    uint               cItems;
    FILEDESCRIPTORW[1] fgd;
}

struct DROPFILES
{
align (1):
    uint  pFiles;
    POINT pt;
    BOOL  fNC;
    BOOL  fWide;
}

struct FILE_ATTRIBUTES_ARRAY
{
align (1):
    uint    cItems;
    uint    dwSumFileAttributes;
    uint    dwProductFileAttributes;
    uint[1] rgdwFileAttributes;
}

struct DROPDESCRIPTION
{
align (1):
    DROPIMAGETYPE type;
    ushort[260]   szMessage;
    ushort[260]   szInsert;
}

struct SHChangeNotifyEntry
{
align (1):
    ITEMIDLIST* pidl;
    BOOL        fRecursive;
}

struct SHARDAPPIDINFO
{
align (1):
    IShellItem    psi;
    const(wchar)* pszAppID;
}

struct SHARDAPPIDINFOIDLIST
{
align (1):
    ITEMIDLIST*   pidl;
    const(wchar)* pszAppID;
}

struct SHARDAPPIDINFOLINK
{
align (1):
    IShellLinkA   psl;
    const(wchar)* pszAppID;
}

struct SHChangeDWORDAsIDList
{
align (1):
    ushort cb;
    uint   dwItem1;
    uint   dwItem2;
    ushort cbZero;
}

struct SHChangeUpdateImageIDList
{
align (1):
    ushort      cb;
    int         iIconIndex;
    int         iCurIndex;
    uint        uFlags;
    uint        dwProcessID;
    ushort[260] szName;
    ushort      cbZero;
}

struct SHDESCRIPTIONID
{
    uint dwDescriptionId;
    GUID clsid;
}

struct AUTO_SCROLL_DATA
{
align (1):
    int      iNextSample;
    uint     dwLastScroll;
    BOOL     bFull;
    POINT[3] pts;
    uint[3]  dwTimes;
}

struct CABINETSTATE
{
align (1):
    ushort cLength;
    ushort nVersion;
    int    _bitfield101;
    uint   fMenuEnumFilter;
}

struct HPSXA__
{
align (1):
    int unused;
}

struct OPENASINFO
{
    const(wchar)* pcszFile;
    const(wchar)* pcszClass;
    int           oaifInFlags;
}

struct QCMINFO_IDMAP_PLACEMENT
{
    uint id;
    uint fFlags;
}

struct QCMINFO_IDMAP
{
    uint nMaxIds;
    QCMINFO_IDMAP_PLACEMENT[1] pIdList;
}

struct QCMINFO
{
    HMENU hmenu;
    uint  indexMenu;
    uint  idCmdFirst;
    uint  idCmdLast;
    const(QCMINFO_IDMAP)* pIdMap;
}

struct DETAILSINFO
{
    ITEMIDLIST* pidl;
    int         fmt;
    int         cxChar;
    STRRET      str;
    int         iImage;
}

struct SFVM_PROPPAGE_DATA
{
    uint                 dwReserved;
    LPFNADDPROPSHEETPAGE pfn;
    LPARAM               lParam;
}

struct SFVM_HELPTOPIC_DATA
{
    ushort[260] wszHelpFile;
    ushort[260] wszHelpTopic;
}

struct ITEMSPACING
{
    int cxSmall;
    int cySmall;
    int cxLarge;
    int cyLarge;
}

struct SFV_CREATE
{
    uint               cbSize;
    IShellFolder       pshf;
    IShellView         psvOuter;
    IShellFolderViewCB psfvcb;
}

struct DEFCONTEXTMENU
{
    HWND              hwnd;
    IContextMenuCB    pcmcb;
    ITEMIDLIST*       pidlFolder;
    IShellFolder      psf;
    uint              cidl;
    ITEMIDLIST**      apidl;
    IUnknown          punkAssociationInfo;
    uint              cKeys;
    const(ptrdiff_t)* aKeys;
}

struct DFMICS
{
    uint                 cbSize;
    uint                 fMask;
    LPARAM               lParam;
    uint                 idCmdFirst;
    uint                 idDefMax;
    CMINVOKECOMMANDINFO* pici;
    IUnknown             punkSite;
}

struct CSFV
{
    uint             cbSize;
    IShellFolder     pshf;
    IShellView       psvOuter;
    ITEMIDLIST*      pidl;
    int              lEvents;
    LPFNVIEWCALLBACK pfnCallback;
    FOLDERVIEWMODE   fvm;
}

struct SHELLSTATEA
{
align (1):
    int  _bitfield1;
    uint dwWin95Unused;
    uint uWin95Unused;
    int  lParamSort;
    int  iSortDirection;
    uint version_;
    uint uNotUsed;
    int  _bitfield2;
}

struct SHELLSTATEW
{
align (1):
    int  _bitfield1;
    uint dwWin95Unused;
    uint uWin95Unused;
    int  lParamSort;
    int  iSortDirection;
    uint version_;
    uint uNotUsed;
    int  _bitfield2;
}

struct SHELLFLAGSTATE
{
align (1):
    int _bitfield102;
}

struct BANDINFOSFB
{
    uint         dwMask;
    uint         dwStateMask;
    uint         dwState;
    uint         crBkgnd;
    uint         crBtnLt;
    uint         crBtnDk;
    ushort       wViewMode;
    ushort       wAlign;
    IShellFolder psf;
    ITEMIDLIST*  pidl;
}

struct SHCOLUMNINFO
{
align (1):
    PROPERTYKEY scid;
    ushort      vt;
    uint        fmt;
    uint        cChars;
    uint        csFlags;
    ushort[80]  wszTitle;
    ushort[128] wszDescription;
}

struct SHCOLUMNINIT
{
    uint        dwFlags;
    uint        dwReserved;
    ushort[260] wszFolder;
}

struct SHCOLUMNDATA
{
    uint        dwFlags;
    uint        dwFileAttributes;
    uint        dwReserved;
    ushort*     pwszExt;
    ushort[260] wszFile;
}

struct SHChangeProductKeyAsIDList
{
align (1):
    ushort     cb;
    ushort[39] wszProductKey;
    ushort     cbZero;
}

struct TBINFO
{
    uint cbuttons;
    uint uFlags;
}

struct SFV_SETITEMPOS
{
    ITEMIDLIST* pidl;
    POINT       pt;
}

struct AASHELLMENUFILENAME
{
    short     cbTotal;
    ubyte[12] rgbReserved;
    ushort[1] szFileName;
}

struct AASHELLMENUITEM
{
    void*                lpReserved1;
    int                  iReserved;
    uint                 uiReserved;
    AASHELLMENUFILENAME* lpName;
    const(wchar)*        psz;
}

struct PARSEDURLA
{
    uint         cbSize;
    const(char)* pszProtocol;
    uint         cchProtocol;
    const(char)* pszSuffix;
    uint         cchSuffix;
    uint         nScheme;
}

struct PARSEDURLW
{
    uint          cbSize;
    const(wchar)* pszProtocol;
    uint          cchProtocol;
    const(wchar)* pszSuffix;
    uint          cchSuffix;
    uint          nScheme;
}

struct QITAB
{
    const(GUID)* piid;
    uint         dwOffset;
}

struct DLLVERSIONINFO
{
    uint cbSize;
    uint dwMajorVersion;
    uint dwMinorVersion;
    uint dwBuildNumber;
    uint dwPlatformID;
}

struct DLLVERSIONINFO2
{
    DLLVERSIONINFO info1;
    uint           dwFlags;
    ulong          ullVersion;
}

struct APPINFODATA
{
    uint          cbSize;
    uint          dwMask;
    const(wchar)* pszDisplayName;
    const(wchar)* pszVersion;
    const(wchar)* pszPublisher;
    const(wchar)* pszProductID;
    const(wchar)* pszRegisteredOwner;
    const(wchar)* pszRegisteredCompany;
    const(wchar)* pszLanguage;
    const(wchar)* pszSupportUrl;
    const(wchar)* pszSupportTelephone;
    const(wchar)* pszHelpLink;
    const(wchar)* pszInstallLocation;
    const(wchar)* pszInstallSource;
    const(wchar)* pszInstallDate;
    const(wchar)* pszContact;
    const(wchar)* pszComments;
    const(wchar)* pszImage;
    const(wchar)* pszReadmeUrl;
    const(wchar)* pszUpdateInfoUrl;
}

struct SLOWAPPINFO
{
    ulong         ullSize;
    FILETIME      ftLastUsed;
    int           iTimesUsed;
    const(wchar)* pszImage;
}

struct PUBAPPINFO
{
    uint          cbSize;
    uint          dwMask;
    const(wchar)* pszSource;
    SYSTEMTIME    stAssigned;
    SYSTEMTIME    stPublished;
    SYSTEMTIME    stScheduled;
    SYSTEMTIME    stExpire;
}

struct CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR
{
    uint          dwFieldID;
    CREDENTIAL_PROVIDER_FIELD_TYPE cpft;
    const(wchar)* pszLabel;
    GUID          guidFieldType;
}

struct CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION
{
    uint   ulAuthenticationPackage;
    GUID   clsidCredentialProvider;
    uint   cbSerialization;
    ubyte* rgbSerialization;
}

struct SYNCMGR_CONFLICT_ID_INFO
{
    BYTE_BLOB* pblobID;
    BYTE_BLOB* pblobExtra;
}

struct CONFIRM_CONFLICT_ITEM
{
    IShellItem2   pShellItem;
    const(wchar)* pszOriginalName;
    const(wchar)* pszAlternateName;
    const(wchar)* pszLocationShort;
    const(wchar)* pszLocationFull;
    SYNCMGR_CONFLICT_ITEM_TYPE nType;
}

struct CONFIRM_CONFLICT_RESULT_INFO
{
    const(wchar)* pszNewName;
    uint          iItemIndex;
}

struct WTS_THUMBNAILID
{
    ubyte[16] rgbKey;
}

struct SYNCMGRPROGRESSITEM
{
    uint          cbSize;
    uint          mask;
    const(wchar)* lpcStatusText;
    uint          dwStatusType;
    int           iProgValue;
    int           iMaxValue;
}

struct SYNCMGRLOGERRORINFO
{
    uint cbSize;
    uint mask;
    uint dwSyncMgrErrorFlags;
    GUID ErrorID;
    GUID ItemID;
}

struct SYNCMGRITEM
{
    uint        cbSize;
    uint        dwFlags;
    GUID        ItemID;
    uint        dwItemState;
    HICON       hIcon;
    ushort[128] wszItemName;
    FILETIME    ftLastUpdate;
}

struct SYNCMGRHANDLERINFO
{
    uint       cbSize;
    HICON      hIcon;
    uint       SyncMgrHandlerFlags;
    ushort[32] wszHandlerName;
}

struct WINDOWDATA
{
    uint          dwWindowID;
    uint          uiCP;
    ITEMIDLIST*   pidl;
    const(wchar)* lpszUrl;
    const(wchar)* lpszUrlLocation;
    const(wchar)* lpszTitle;
}

struct HLITEM
{
    uint          uHLID;
    const(wchar)* pwzFriendlyName;
}

struct HLTBINFO
{
    uint uDockType;
    RECT rcTbPos;
}

struct HLBWINFO
{
    uint     cbSize;
    uint     grfHLBWIF;
    RECT     rcFramePos;
    RECT     rcDocPos;
    HLTBINFO hltbinfo;
}

struct BASEBROWSERDATAXP
{
    HWND              _hwnd;
    ITravelLog        _ptl;
    IHlinkFrame       _phlf;
    IWebBrowser2      _pautoWB2;
    IExpDispSupportXP _pautoEDS;
    IShellService     _pautoSS;
    int               _eSecureLockIcon;
    uint              _bitfield103;
    uint              _uActivateState;
    ITEMIDLIST*       _pidlViewState;
    IOleCommandTarget _pctView;
    ITEMIDLIST*       _pidlCur;
    IShellView        _psv;
    IShellFolder      _psf;
    HWND              _hwndView;
    const(wchar)*     _pszTitleCur;
    ITEMIDLIST*       _pidlPending;
    IShellView        _psvPending;
    IShellFolder      _psfPending;
    HWND              _hwndViewPending;
    const(wchar)*     _pszTitlePending;
    BOOL              _fIsViewMSHTML;
    BOOL              _fPrivacyImpacted;
    GUID              _clsidView;
    GUID              _clsidViewPending;
    HWND              _hwndFrame;
}

struct BASEBROWSERDATALH
{
    HWND              _hwnd;
    ITravelLog        _ptl;
    IHlinkFrame       _phlf;
    IWebBrowser2      _pautoWB2;
    IExpDispSupport   _pautoEDS;
    IShellService     _pautoSS;
    int               _eSecureLockIcon;
    uint              _bitfield104;
    uint              _uActivateState;
    ITEMIDLIST*       _pidlViewState;
    IOleCommandTarget _pctView;
    ITEMIDLIST*       _pidlCur;
    IShellView        _psv;
    IShellFolder      _psf;
    HWND              _hwndView;
    const(wchar)*     _pszTitleCur;
    ITEMIDLIST*       _pidlPending;
    IShellView        _psvPending;
    IShellFolder      _psfPending;
    HWND              _hwndViewPending;
    const(wchar)*     _pszTitlePending;
    BOOL              _fIsViewMSHTML;
    BOOL              _fPrivacyImpacted;
    GUID              _clsidView;
    GUID              _clsidViewPending;
    HWND              _hwndFrame;
    int               _lPhishingFilterStatus;
}

struct FOLDERSETDATA
{
    FOLDERSETTINGS _fs;
    GUID           _vidRestore;
    uint           _dwViewPriority;
}

struct TOOLBARITEM
{
    IDockingWindow ptbar;
    RECT           rcBorderTool;
    const(wchar)*  pwszItem;
    BOOL           fShow;
    ptrdiff_t      hMon;
}

struct CPLINFO
{
align (1):
    int       idIcon;
    int       idName;
    int       idInfo;
    ptrdiff_t lData;
}

struct NEWCPLINFOA
{
align (1):
    uint      dwSize;
    uint      dwFlags;
    uint      dwHelpContext;
    ptrdiff_t lData;
    HICON     hIcon;
    byte[32]  szName;
    byte[64]  szInfo;
    byte[128] szHelpFile;
}

struct NEWCPLINFOW
{
align (1):
    uint        dwSize;
    uint        dwFlags;
    uint        dwHelpContext;
    ptrdiff_t   lData;
    HICON       hIcon;
    ushort[32]  szName;
    ushort[64]  szInfo;
    ushort[128] szHelpFile;
}

struct PROFILEINFOA
{
    uint         dwSize;
    uint         dwFlags;
    const(char)* lpUserName;
    const(char)* lpProfilePath;
    const(char)* lpDefaultPath;
    const(char)* lpServerName;
    const(char)* lpPolicyPath;
    HANDLE       hProfile;
}

struct PROFILEINFOW
{
    uint          dwSize;
    uint          dwFlags;
    const(wchar)* lpUserName;
    const(wchar)* lpProfilePath;
    const(wchar)* lpDefaultPath;
    const(wchar)* lpServerName;
    const(wchar)* lpPolicyPath;
    HANDLE        hProfile;
}

struct urlinvokecommandinfoA
{
    uint         dwcbSize;
    uint         dwFlags;
    HWND         hwndParent;
    const(char)* pcszVerb;
}

struct urlinvokecommandinfoW
{
    uint          dwcbSize;
    uint          dwFlags;
    HWND          hwndParent;
    const(wchar)* pcszVerb;
}

struct _APPSTATE_REGISTRATION
{
}

struct _APPCONSTRAIN_REGISTRATION
{
}

struct __MIDL___MIDL_itf_dimm_0000_0000_0012
{
    HWND             hWnd;
    BOOL             fOpen;
    POINT            ptStatusWndPos;
    POINT            ptSoftKbdPos;
    uint             fdwConversion;
    uint             fdwSentence;
    union lfFont
    {
        LOGFONTA A;
        LOGFONTW W;
    }
    COMPOSITIONFORM  cfCompForm;
    CANDIDATEFORM[4] cfCandForm;
    HIMCC__*         hCompStr;
    HIMCC__*         hCandInfo;
    HIMCC__*         hGuideLine;
    HIMCC__*         hPrivate;
    uint             dwNumMsgBuf;
    HIMCC__*         hMsgBuf;
    uint             fdwInit;
    uint[3]          dwReserve;
}

struct __MIDL___MIDL_itf_dimm_0000_0000_0014
{
    uint dwPrivateDataSize;
    uint fdwProperty;
    uint fdwConversionCaps;
    uint fdwSentenceCaps;
    uint fdwUICaps;
    uint fdwSCSCaps;
    uint fdwSelectCaps;
}

struct NC_ADDRESS
{
    NET_ADDRESS_INFO* pAddrInfo;
    ushort            PortNumber;
    ubyte             PrefixLength;
}

struct SERIALIZEDPROPERTYVALUE
{
    uint     dwType;
    ubyte[1] rgb;
}

// Functions

@DllImport("COMCTL32")
BOOL SetWindowSubclass(HWND hWnd, SUBCLASSPROC pfnSubclass, size_t uIdSubclass, size_t dwRefData);

@DllImport("COMCTL32")
BOOL GetWindowSubclass(HWND hWnd, SUBCLASSPROC pfnSubclass, size_t uIdSubclass, size_t* pdwRefData);

@DllImport("COMCTL32")
BOOL RemoveWindowSubclass(HWND hWnd, SUBCLASSPROC pfnSubclass, size_t uIdSubclass);

@DllImport("COMCTL32")
LRESULT DefSubclassProc(HWND hWnd, uint uMsg, WPARAM wParam, LPARAM lParam);

@DllImport("USER32")
BOOL SetWindowContextHelpId(HWND param0, uint param1);

@DllImport("USER32")
uint GetWindowContextHelpId(HWND param0);

@DllImport("USER32")
BOOL SetMenuContextHelpId(HMENU param0, uint param1);

@DllImport("USER32")
uint GetMenuContextHelpId(HMENU param0);

@DllImport("USER32")
BOOL WinHelpA(HWND hWndMain, const(char)* lpszHelp, uint uCommand, size_t dwData);

@DllImport("USER32")
BOOL WinHelpW(HWND hWndMain, const(wchar)* lpszHelp, uint uCommand, size_t dwData);

@DllImport("USERENV")
BOOL LoadUserProfileA(HANDLE hToken, PROFILEINFOA* lpProfileInfo);

@DllImport("USERENV")
BOOL LoadUserProfileW(HANDLE hToken, PROFILEINFOW* lpProfileInfo);

@DllImport("USERENV")
BOOL UnloadUserProfile(HANDLE hToken, HANDLE hProfile);

@DllImport("USERENV")
BOOL GetProfilesDirectoryA(const(char)* lpProfileDir, uint* lpcchSize);

@DllImport("USERENV")
BOOL GetProfilesDirectoryW(const(wchar)* lpProfileDir, uint* lpcchSize);

@DllImport("USERENV")
BOOL GetProfileType(uint* dwFlags);

@DllImport("USERENV")
BOOL DeleteProfileA(const(char)* lpSidString, const(char)* lpProfilePath, const(char)* lpComputerName);

@DllImport("USERENV")
BOOL DeleteProfileW(const(wchar)* lpSidString, const(wchar)* lpProfilePath, const(wchar)* lpComputerName);

@DllImport("USERENV")
HRESULT CreateProfile(const(wchar)* pszUserSid, const(wchar)* pszUserName, const(wchar)* pszProfilePath, 
                      uint cchProfilePath);

@DllImport("USERENV")
BOOL GetDefaultUserProfileDirectoryA(const(char)* lpProfileDir, uint* lpcchSize);

@DllImport("USERENV")
BOOL GetDefaultUserProfileDirectoryW(const(wchar)* lpProfileDir, uint* lpcchSize);

@DllImport("USERENV")
BOOL GetAllUsersProfileDirectoryA(const(char)* lpProfileDir, uint* lpcchSize);

@DllImport("USERENV")
BOOL GetAllUsersProfileDirectoryW(const(wchar)* lpProfileDir, uint* lpcchSize);

@DllImport("USERENV")
BOOL GetUserProfileDirectoryA(HANDLE hToken, const(char)* lpProfileDir, uint* lpcchSize);

@DllImport("USERENV")
BOOL GetUserProfileDirectoryW(HANDLE hToken, const(wchar)* lpProfileDir, uint* lpcchSize);

@DllImport("USERENV")
BOOL CreateEnvironmentBlock(void** lpEnvironment, HANDLE hToken, BOOL bInherit);

@DllImport("USERENV")
BOOL DestroyEnvironmentBlock(void* lpEnvironment);

@DllImport("USERENV")
BOOL ExpandEnvironmentStringsForUserA(HANDLE hToken, const(char)* lpSrc, const(char)* lpDest, uint dwSize);

@DllImport("USERENV")
BOOL ExpandEnvironmentStringsForUserW(HANDLE hToken, const(wchar)* lpSrc, const(wchar)* lpDest, uint dwSize);

@DllImport("USERENV")
HRESULT CreateAppContainerProfile(const(wchar)* pszAppContainerName, const(wchar)* pszDisplayName, 
                                  const(wchar)* pszDescription, char* pCapabilities, uint dwCapabilityCount, 
                                  void** ppSidAppContainerSid);

@DllImport("USERENV")
HRESULT DeleteAppContainerProfile(const(wchar)* pszAppContainerName);

@DllImport("USERENV")
HRESULT GetAppContainerRegistryLocation(uint desiredAccess, HKEY* phAppContainerKey);

@DllImport("USERENV")
HRESULT GetAppContainerFolderPath(const(wchar)* pszAppContainerSid, ushort** ppszPath);

@DllImport("USERENV")
HRESULT DeriveAppContainerSidFromAppContainerName(const(wchar)* pszAppContainerName, void** ppsidAppContainerSid);

@DllImport("USERENV")
HRESULT DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName(void* psidAppContainerSid, 
                                                                            const(wchar)* pszRestrictedAppContainerName, 
                                                                            void** ppsidRestrictedAppContainerSid);

@DllImport("SHELL32")
ushort** CommandLineToArgvW(const(wchar)* lpCmdLine, int* pNumArgs);

@DllImport("SHELL32")
uint DragQueryFileA(HDROP__* hDrop, uint iFile, const(char)* lpszFile, uint cch);

@DllImport("SHELL32")
uint DragQueryFileW(HDROP__* hDrop, uint iFile, const(wchar)* lpszFile, uint cch);

@DllImport("SHELL32")
BOOL DragQueryPoint(HDROP__* hDrop, POINT* ppt);

@DllImport("SHELL32")
void DragFinish(HDROP__* hDrop);

@DllImport("SHELL32")
void DragAcceptFiles(HWND hWnd, BOOL fAccept);

@DllImport("SHELL32")
HINSTANCE ShellExecuteA(HWND hwnd, const(char)* lpOperation, const(char)* lpFile, const(char)* lpParameters, 
                        const(char)* lpDirectory, int nShowCmd);

@DllImport("SHELL32")
HINSTANCE ShellExecuteW(HWND hwnd, const(wchar)* lpOperation, const(wchar)* lpFile, const(wchar)* lpParameters, 
                        const(wchar)* lpDirectory, int nShowCmd);

@DllImport("SHELL32")
HINSTANCE FindExecutableA(const(char)* lpFile, const(char)* lpDirectory, const(char)* lpResult);

@DllImport("SHELL32")
HINSTANCE FindExecutableW(const(wchar)* lpFile, const(wchar)* lpDirectory, const(wchar)* lpResult);

@DllImport("SHELL32")
int ShellAboutA(HWND hWnd, const(char)* szApp, const(char)* szOtherStuff, HICON hIcon);

@DllImport("SHELL32")
int ShellAboutW(HWND hWnd, const(wchar)* szApp, const(wchar)* szOtherStuff, HICON hIcon);

@DllImport("SHELL32")
HICON DuplicateIcon(HINSTANCE hInst, HICON hIcon);

@DllImport("SHELL32")
HICON ExtractAssociatedIconA(HINSTANCE hInst, const(char)* pszIconPath, ushort* piIcon);

@DllImport("SHELL32")
HICON ExtractAssociatedIconW(HINSTANCE hInst, const(wchar)* pszIconPath, ushort* piIcon);

@DllImport("SHELL32")
HICON ExtractAssociatedIconExA(HINSTANCE hInst, const(char)* pszIconPath, ushort* piIconIndex, ushort* piIconId);

@DllImport("SHELL32")
HICON ExtractAssociatedIconExW(HINSTANCE hInst, const(wchar)* pszIconPath, ushort* piIconIndex, ushort* piIconId);

@DllImport("SHELL32")
HICON ExtractIconA(HINSTANCE hInst, const(char)* pszExeFileName, uint nIconIndex);

@DllImport("SHELL32")
HICON ExtractIconW(HINSTANCE hInst, const(wchar)* pszExeFileName, uint nIconIndex);

@DllImport("SHELL32")
size_t SHAppBarMessage(uint dwMessage, APPBARDATA* pData);

@DllImport("SHELL32")
uint DoEnvironmentSubstA(const(char)* pszSrc, uint cchSrc);

@DllImport("SHELL32")
uint DoEnvironmentSubstW(const(wchar)* pszSrc, uint cchSrc);

@DllImport("SHELL32")
uint ExtractIconExA(const(char)* lpszFile, int nIconIndex, char* phiconLarge, char* phiconSmall, uint nIcons);

@DllImport("SHELL32")
uint ExtractIconExW(const(wchar)* lpszFile, int nIconIndex, char* phiconLarge, char* phiconSmall, uint nIcons);

@DllImport("SHELL32")
int SHFileOperationA(SHFILEOPSTRUCTA* lpFileOp);

@DllImport("SHELL32")
int SHFileOperationW(SHFILEOPSTRUCTW* lpFileOp);

@DllImport("SHELL32")
void SHFreeNameMappings(HANDLE hNameMappings);

@DllImport("SHELL32")
BOOL ShellExecuteExA(SHELLEXECUTEINFOA* pExecInfo);

@DllImport("SHELL32")
BOOL ShellExecuteExW(SHELLEXECUTEINFOW* pExecInfo);

@DllImport("SHELL32")
BOOL SHCreateProcessAsUserW(SHCREATEPROCESSINFOW* pscpi);

@DllImport("SHELL32")
HRESULT SHEvaluateSystemCommandTemplate(const(wchar)* pszCmdTemplate, ushort** ppszApplication, 
                                        ushort** ppszCommandLine, ushort** ppszParameters);

@DllImport("SHELL32")
HRESULT AssocCreateForClasses(char* rgClasses, uint cClasses, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHQueryRecycleBinA(const(char)* pszRootPath, SHQUERYRBINFO* pSHQueryRBInfo);

@DllImport("SHELL32")
HRESULT SHQueryRecycleBinW(const(wchar)* pszRootPath, SHQUERYRBINFO* pSHQueryRBInfo);

@DllImport("SHELL32")
HRESULT SHEmptyRecycleBinA(HWND hwnd, const(char)* pszRootPath, uint dwFlags);

@DllImport("SHELL32")
HRESULT SHEmptyRecycleBinW(HWND hwnd, const(wchar)* pszRootPath, uint dwFlags);

@DllImport("SHELL32")
HRESULT SHQueryUserNotificationState(QUERY_USER_NOTIFICATION_STATE* pquns);

@DllImport("SHELL32")
BOOL Shell_NotifyIconA(uint dwMessage, NOTIFYICONDATAA* lpData);

@DllImport("SHELL32")
BOOL Shell_NotifyIconW(uint dwMessage, NOTIFYICONDATAW* lpData);

@DllImport("SHELL32")
HRESULT Shell_NotifyIconGetRect(const(NOTIFYICONIDENTIFIER)* identifier, RECT* iconLocation);

@DllImport("SHELL32")
size_t SHGetFileInfoA(const(char)* pszPath, uint dwFileAttributes, char* psfi, uint cbFileInfo, uint uFlags);

@DllImport("SHELL32")
size_t SHGetFileInfoW(const(wchar)* pszPath, uint dwFileAttributes, char* psfi, uint cbFileInfo, uint uFlags);

@DllImport("SHELL32")
HRESULT SHGetStockIconInfo(SHSTOCKICONID siid, uint uFlags, SHSTOCKICONINFO* psii);

@DllImport("SHELL32")
BOOL SHGetDiskFreeSpaceExA(const(char)* pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, 
                           ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);

@DllImport("SHELL32")
BOOL SHGetDiskFreeSpaceExW(const(wchar)* pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, 
                           ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);

@DllImport("SHELL32")
BOOL SHGetNewLinkInfoA(const(char)* pszLinkTo, const(char)* pszDir, const(char)* pszName, int* pfMustCopy, 
                       uint uFlags);

@DllImport("SHELL32")
BOOL SHGetNewLinkInfoW(const(wchar)* pszLinkTo, const(wchar)* pszDir, const(wchar)* pszName, int* pfMustCopy, 
                       uint uFlags);

@DllImport("SHELL32")
BOOL SHInvokePrinterCommandA(HWND hwnd, uint uAction, const(char)* lpBuf1, const(char)* lpBuf2, BOOL fModal);

@DllImport("SHELL32")
BOOL SHInvokePrinterCommandW(HWND hwnd, uint uAction, const(wchar)* lpBuf1, const(wchar)* lpBuf2, BOOL fModal);

@DllImport("SHELL32")
HRESULT SHLoadNonloadedIconOverlayIdentifiers();

@DllImport("SHELL32")
HRESULT SHIsFileAvailableOffline(const(wchar)* pwszPath, uint* pdwStatus);

@DllImport("SHELL32")
HRESULT SHSetLocalizedName(const(wchar)* pszPath, const(wchar)* pszResModule, int idsRes);

@DllImport("SHELL32")
HRESULT SHRemoveLocalizedName(const(wchar)* pszPath);

@DllImport("SHELL32")
HRESULT SHGetLocalizedName(const(wchar)* pszPath, const(wchar)* pszResModule, uint cch, int* pidsRes);

@DllImport("SHLWAPI")
int ShellMessageBoxA(HINSTANCE hAppInst, HWND hWnd, const(char)* lpcText, const(char)* lpcTitle, uint fuStyle);

@DllImport("SHLWAPI")
int ShellMessageBoxW(HINSTANCE hAppInst, HWND hWnd, const(wchar)* lpcText, const(wchar)* lpcTitle, uint fuStyle);

@DllImport("SHELL32")
BOOL IsLFNDriveA(const(char)* pszPath);

@DllImport("SHELL32")
BOOL IsLFNDriveW(const(wchar)* pszPath);

@DllImport("SHELL32")
HRESULT SHEnumerateUnreadMailAccountsW(HKEY hKeyUser, uint dwIndex, const(wchar)* pszMailAddress, 
                                       int cchMailAddress);

@DllImport("SHELL32")
HRESULT SHGetUnreadMailCountW(HKEY hKeyUser, const(wchar)* pszMailAddress, uint* pdwCount, FILETIME* pFileTime, 
                              const(wchar)* pszShellExecuteCommand, int cchShellExecuteCommand);

@DllImport("SHELL32")
HRESULT SHSetUnreadMailCountW(const(wchar)* pszMailAddress, uint dwCount, const(wchar)* pszShellExecuteCommand);

@DllImport("SHELL32")
BOOL SHTestTokenMembership(HANDLE hToken, uint ulRID);

@DllImport("SHELL32")
HRESULT SHGetImageList(int iImageList, const(GUID)* riid, void** ppvObj);

@DllImport("SHELL32")
BOOL InitNetworkAddressControl();

@DllImport("SHELL32")
HRESULT SHGetDriveMedia(const(wchar)* pszDrive, uint* pdwMediaContent);

@DllImport("SHELL32")
ITEMIDLIST* SHSimpleIDListFromPath(const(wchar)* pszPath);

@DllImport("SHELL32")
HRESULT SHCreateItemFromIDList(ITEMIDLIST* pidl, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHCreateItemFromParsingName(const(wchar)* pszPath, IBindCtx pbc, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHCreateItemWithParent(ITEMIDLIST* pidlParent, IShellFolder psfParent, ITEMIDLIST* pidl, const(GUID)* riid, 
                               void** ppvItem);

@DllImport("SHELL32")
HRESULT SHCreateItemFromRelativeName(IShellItem psiParent, const(wchar)* pszName, IBindCtx pbc, const(GUID)* riid, 
                                     void** ppv);

@DllImport("SHELL32")
HRESULT SHCreateItemInKnownFolder(const(GUID)* kfid, uint dwKFFlags, const(wchar)* pszItem, const(GUID)* riid, 
                                  void** ppv);

@DllImport("SHELL32")
HRESULT SHGetIDListFromObject(IUnknown punk, ITEMIDLIST** ppidl);

@DllImport("SHELL32")
HRESULT SHGetItemFromObject(IUnknown punk, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHGetNameFromIDList(ITEMIDLIST* pidl, SIGDN sigdnName, ushort** ppszName);

@DllImport("SHELL32")
HRESULT SHGetItemFromDataObject(IDataObject pdtobj, DATAOBJ_GET_ITEM_FLAGS dwFlags, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHCreateShellItemArray(ITEMIDLIST* pidlParent, IShellFolder psf, uint cidl, char* ppidl, 
                               IShellItemArray* ppsiItemArray);

@DllImport("SHELL32")
HRESULT SHCreateShellItemArrayFromDataObject(IDataObject pdo, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHCreateShellItemArrayFromIDLists(uint cidl, char* rgpidl, IShellItemArray* ppsiItemArray);

@DllImport("SHELL32")
HRESULT SHCreateShellItemArrayFromShellItem(IShellItem psi, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHCreateAssociationRegistration(const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHCreateDefaultExtractIcon(const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SetCurrentProcessExplicitAppUserModelID(const(wchar)* AppID);

@DllImport("SHELL32")
HRESULT GetCurrentProcessExplicitAppUserModelID(ushort** AppID);

@DllImport("SHELL32")
HRESULT SHGetTemporaryPropertyForItem(IShellItem psi, const(PROPERTYKEY)* propkey, PROPVARIANT* ppropvar);

@DllImport("SHELL32")
HRESULT SHSetTemporaryPropertyForItem(IShellItem psi, const(PROPERTYKEY)* propkey, const(PROPVARIANT)* propvar);

@DllImport("SHELL32")
HRESULT SHShowManageLibraryUI(IShellItem psiLibrary, HWND hwndOwner, const(wchar)* pszTitle, 
                              const(wchar)* pszInstruction, LIBRARYMANAGEDIALOGOPTIONS lmdOptions);

@DllImport("SHELL32")
HRESULT SHResolveLibrary(IShellItem psiLibrary);

@DllImport("SHELL32")
HRESULT SHAssocEnumHandlers(const(wchar)* pszExtra, ASSOC_FILTER afFilter, IEnumAssocHandlers* ppEnumHandler);

@DllImport("SHELL32")
HRESULT SHAssocEnumHandlersForProtocolByApplication(const(wchar)* protocol, const(GUID)* riid, void** enumHandlers);

@DllImport("OLE32")
uint HMONITOR_UserSize(uint* param0, uint param1, ptrdiff_t* param2);

@DllImport("OLE32")
ubyte* HMONITOR_UserMarshal(uint* param0, ubyte* param1, ptrdiff_t* param2);

@DllImport("OLE32")
ubyte* HMONITOR_UserUnmarshal(uint* param0, char* param1, ptrdiff_t* param2);

@DllImport("OLE32")
void HMONITOR_UserFree(uint* param0, ptrdiff_t* param1);

@DllImport("OLE32")
uint HMONITOR_UserSize64(uint* param0, uint param1, ptrdiff_t* param2);

@DllImport("OLE32")
ubyte* HMONITOR_UserMarshal64(uint* param0, ubyte* param1, ptrdiff_t* param2);

@DllImport("OLE32")
ubyte* HMONITOR_UserUnmarshal64(uint* param0, char* param1, ptrdiff_t* param2);

@DllImport("OLE32")
void HMONITOR_UserFree64(uint* param0, ptrdiff_t* param1);

@DllImport("SHELL32")
HRESULT SHCreateDefaultPropertiesOp(IShellItem psi, IFileOperation* ppFileOp);

@DllImport("SHELL32")
HRESULT SHSetDefaultProperties(HWND hwnd, IShellItem psi, uint dwFileOpFlags, IFileOperationProgressSink pfops);

@DllImport("SHELL32")
HRESULT SHGetMalloc(IMalloc* ppMalloc);

@DllImport("SHELL32")
void* SHAlloc(size_t cb);

@DllImport("SHELL32")
void SHFree(void* pv);

@DllImport("SHELL32")
int SHGetIconOverlayIndexA(const(char)* pszIconPath, int iIconIndex);

@DllImport("SHELL32")
int SHGetIconOverlayIndexW(const(wchar)* pszIconPath, int iIconIndex);

@DllImport("SHELL32")
ITEMIDLIST* ILClone(ITEMIDLIST* pidl);

@DllImport("SHELL32")
ITEMIDLIST* ILCloneFirst(ITEMIDLIST* pidl);

@DllImport("SHELL32")
ITEMIDLIST* ILCombine(ITEMIDLIST* pidl1, ITEMIDLIST* pidl2);

@DllImport("SHELL32")
void ILFree(ITEMIDLIST* pidl);

@DllImport("SHELL32")
ITEMIDLIST* ILGetNext(ITEMIDLIST* pidl);

@DllImport("SHELL32")
uint ILGetSize(ITEMIDLIST* pidl);

@DllImport("SHELL32")
ITEMIDLIST* ILFindChild(ITEMIDLIST* pidlParent, ITEMIDLIST* pidlChild);

@DllImport("SHELL32")
ITEMIDLIST* ILFindLastID(ITEMIDLIST* pidl);

@DllImport("SHELL32")
BOOL ILRemoveLastID(ITEMIDLIST* pidl);

@DllImport("SHELL32")
BOOL ILIsEqual(ITEMIDLIST* pidl1, ITEMIDLIST* pidl2);

@DllImport("SHELL32")
BOOL ILIsParent(ITEMIDLIST* pidl1, ITEMIDLIST* pidl2, BOOL fImmediate);

@DllImport("SHELL32")
HRESULT ILSaveToStream(IStream pstm, ITEMIDLIST* pidl);

@DllImport("SHELL32")
HRESULT ILLoadFromStreamEx(IStream pstm, ITEMIDLIST** pidl);

@DllImport("SHELL32")
ITEMIDLIST* ILCreateFromPathA(const(char)* pszPath);

@DllImport("SHELL32")
ITEMIDLIST* ILCreateFromPathW(const(wchar)* pszPath);

@DllImport("SHELL32")
HRESULT SHILCreateFromPath(const(wchar)* pszPath, ITEMIDLIST** ppidl, uint* rgfInOut);

@DllImport("SHELL32")
ITEMIDLIST* ILAppendID(ITEMIDLIST* pidl, SHITEMID* pmkid, BOOL fAppend);

@DllImport("SHELL32")
BOOL SHGetPathFromIDListEx(ITEMIDLIST* pidl, const(wchar)* pszPath, uint cchPath, int uOpts);

@DllImport("SHELL32")
BOOL SHGetPathFromIDListA(ITEMIDLIST* pidl, const(char)* pszPath);

@DllImport("SHELL32")
BOOL SHGetPathFromIDListW(ITEMIDLIST* pidl, const(wchar)* pszPath);

@DllImport("SHELL32")
int SHCreateDirectory(HWND hwnd, const(wchar)* pszPath);

@DllImport("SHELL32")
int SHCreateDirectoryExA(HWND hwnd, const(char)* pszPath, const(SECURITY_ATTRIBUTES)* psa);

@DllImport("SHELL32")
int SHCreateDirectoryExW(HWND hwnd, const(wchar)* pszPath, const(SECURITY_ATTRIBUTES)* psa);

@DllImport("SHELL32")
HRESULT SHOpenFolderAndSelectItems(ITEMIDLIST* pidlFolder, uint cidl, char* apidl, uint dwFlags);

@DllImport("SHELL32")
HRESULT SHCreateShellItem(ITEMIDLIST* pidlParent, IShellFolder psfParent, ITEMIDLIST* pidl, IShellItem* ppsi);

@DllImport("SHELL32")
HRESULT SHGetSpecialFolderLocation(HWND hwnd, int csidl, ITEMIDLIST** ppidl);

@DllImport("SHELL32")
ITEMIDLIST* SHCloneSpecialIDList(HWND hwnd, int csidl, BOOL fCreate);

@DllImport("SHELL32")
BOOL SHGetSpecialFolderPathA(HWND hwnd, const(char)* pszPath, int csidl, BOOL fCreate);

@DllImport("SHELL32")
BOOL SHGetSpecialFolderPathW(HWND hwnd, const(wchar)* pszPath, int csidl, BOOL fCreate);

@DllImport("SHELL32")
void SHFlushSFCache();

@DllImport("SHELL32")
HRESULT SHGetFolderPathA(HWND hwnd, int csidl, HANDLE hToken, uint dwFlags, const(char)* pszPath);

@DllImport("SHELL32")
HRESULT SHGetFolderPathW(HWND hwnd, int csidl, HANDLE hToken, uint dwFlags, const(wchar)* pszPath);

@DllImport("SHELL32")
HRESULT SHGetFolderLocation(HWND hwnd, int csidl, HANDLE hToken, uint dwFlags, ITEMIDLIST** ppidl);

@DllImport("SHELL32")
HRESULT SHSetFolderPathA(int csidl, HANDLE hToken, uint dwFlags, const(char)* pszPath);

@DllImport("SHELL32")
HRESULT SHSetFolderPathW(int csidl, HANDLE hToken, uint dwFlags, const(wchar)* pszPath);

@DllImport("SHELL32")
HRESULT SHGetFolderPathAndSubDirA(HWND hwnd, int csidl, HANDLE hToken, uint dwFlags, const(char)* pszSubDir, 
                                  const(char)* pszPath);

@DllImport("SHELL32")
HRESULT SHGetFolderPathAndSubDirW(HWND hwnd, int csidl, HANDLE hToken, uint dwFlags, const(wchar)* pszSubDir, 
                                  const(wchar)* pszPath);

@DllImport("SHELL32")
HRESULT SHGetKnownFolderIDList(const(GUID)* rfid, uint dwFlags, HANDLE hToken, ITEMIDLIST** ppidl);

@DllImport("SHELL32")
HRESULT SHSetKnownFolderPath(const(GUID)* rfid, uint dwFlags, HANDLE hToken, const(wchar)* pszPath);

@DllImport("SHELL32")
HRESULT SHGetKnownFolderPath(const(GUID)* rfid, uint dwFlags, HANDLE hToken, ushort** ppszPath);

@DllImport("SHELL32")
HRESULT SHGetKnownFolderItem(const(GUID)* rfid, KNOWN_FOLDER_FLAG flags, HANDLE hToken, const(GUID)* riid, 
                             void** ppv);

@DllImport("SHELL32")
HRESULT SHGetSetFolderCustomSettings(SHFOLDERCUSTOMSETTINGS* pfcs, const(wchar)* pszPath, uint dwReadWrite);

@DllImport("SHELL32")
ITEMIDLIST* SHBrowseForFolderA(BROWSEINFOA* lpbi);

@DllImport("SHELL32")
ITEMIDLIST* SHBrowseForFolderW(BROWSEINFOW* lpbi);

@DllImport("SHELL32")
HRESULT SHLoadInProc(const(GUID)* rclsid);

@DllImport("SHELL32")
HRESULT SHGetDesktopFolder(IShellFolder* ppshf);

@DllImport("SHELL32")
void SHChangeNotify(int wEventId, uint uFlags, void* dwItem1, void* dwItem2);

@DllImport("SHELL32")
void SHAddToRecentDocs(uint uFlags, void* pv);

@DllImport("SHELL32")
int SHHandleUpdateImage(ITEMIDLIST* pidlExtra);

@DllImport("SHELL32")
void SHUpdateImageA(const(char)* pszHashItem, int iIndex, uint uFlags, int iImageIndex);

@DllImport("SHELL32")
void SHUpdateImageW(const(wchar)* pszHashItem, int iIndex, uint uFlags, int iImageIndex);

@DllImport("SHELL32")
uint SHChangeNotifyRegister(HWND hwnd, int fSources, int fEvents, uint wMsg, int cEntries, 
                            const(SHChangeNotifyEntry)* pshcne);

@DllImport("SHELL32")
BOOL SHChangeNotifyDeregister(uint ulID);

@DllImport("SHELL32")
ShFindChangeNotifcationHandle SHChangeNotification_Lock(HANDLE hChange, uint dwProcId, ITEMIDLIST*** pppidl, 
                                                        int* plEvent);

@DllImport("SHELL32")
BOOL SHChangeNotification_Unlock(HANDLE hLock);

@DllImport("SHELL32")
HRESULT SHGetRealIDL(IShellFolder psf, ITEMIDLIST* pidlSimple, ITEMIDLIST** ppidlReal);

@DllImport("SHELL32")
HRESULT SHGetInstanceExplorer(IUnknown* ppunk);

@DllImport("SHELL32")
HRESULT SHGetDataFromIDListA(IShellFolder psf, ITEMIDLIST* pidl, int nFormat, char* pv, int cb);

@DllImport("SHELL32")
HRESULT SHGetDataFromIDListW(IShellFolder psf, ITEMIDLIST* pidl, int nFormat, char* pv, int cb);

@DllImport("SHELL32")
int RestartDialog(HWND hwnd, const(wchar)* pszPrompt, uint dwReturn);

@DllImport("SHELL32")
int RestartDialogEx(HWND hwnd, const(wchar)* pszPrompt, uint dwReturn, uint dwReasonCode);

@DllImport("SHELL32")
HRESULT SHCoCreateInstance(const(wchar)* pszCLSID, const(GUID)* pclsid, IUnknown pUnkOuter, const(GUID)* riid, 
                           void** ppv);

@DllImport("SHELL32")
HRESULT SHCreateDataObject(ITEMIDLIST* pidlFolder, uint cidl, char* apidl, IDataObject pdtInner, const(GUID)* riid, 
                           void** ppv);

@DllImport("SHELL32")
HRESULT CIDLData_CreateFromIDArray(ITEMIDLIST* pidlFolder, uint cidl, char* apidl, IDataObject* ppdtobj);

@DllImport("SHELL32")
HRESULT SHCreateStdEnumFmtEtc(uint cfmt, char* afmt, IEnumFORMATETC* ppenumFormatEtc);

@DllImport("SHELL32")
HRESULT SHDoDragDrop(HWND hwnd, IDataObject pdata, IDropSource pdsrc, uint dwEffect, uint* pdwEffect);

@DllImport("SHELL32")
BOOL DAD_SetDragImage(HIMAGELIST him, POINT* pptOffset);

@DllImport("SHELL32")
BOOL DAD_DragEnterEx(HWND hwndTarget, const(POINT) ptStart);

@DllImport("SHELL32")
BOOL DAD_DragEnterEx2(HWND hwndTarget, const(POINT) ptStart, IDataObject pdtObject);

@DllImport("SHELL32")
BOOL DAD_ShowDragImage(BOOL fShow);

@DllImport("SHELL32")
BOOL DAD_DragMove(POINT pt);

@DllImport("SHELL32")
BOOL DAD_DragLeave();

@DllImport("SHELL32")
BOOL DAD_AutoScroll(HWND hwnd, AUTO_SCROLL_DATA* pad, const(POINT)* pptNow);

@DllImport("SHELL32")
BOOL ReadCabinetState(char* pcs, int cLength);

@DllImport("SHELL32")
BOOL WriteCabinetState(CABINETSTATE* pcs);

@DllImport("SHELL32")
BOOL PathMakeUniqueName(const(wchar)* pszUniqueName, uint cchMax, const(wchar)* pszTemplate, 
                        const(wchar)* pszLongPlate, const(wchar)* pszDir);

@DllImport("SHELL32")
BOOL PathIsExe(const(wchar)* pszPath);

@DllImport("SHELL32")
int PathCleanupSpec(const(wchar)* pszDir, const(wchar)* pszSpec);

@DllImport("SHELL32")
int PathResolve(const(wchar)* pszPath, ushort** dirs, uint fFlags);

@DllImport("SHELL32")
BOOL GetFileNameFromBrowse(HWND hwnd, const(wchar)* pszFilePath, uint cchFilePath, const(wchar)* pszWorkingDir, 
                           const(wchar)* pszDefExt, const(wchar)* pszFilters, const(wchar)* pszTitle);

@DllImport("SHELL32")
int DriveType(int iDrive);

@DllImport("SHELL32")
int RealDriveType(int iDrive, BOOL fOKToHitNet);

@DllImport("SHELL32")
int IsNetDrive(int iDrive);

@DllImport("SHELL32")
uint Shell_MergeMenus(HMENU hmDst, HMENU hmSrc, uint uInsert, uint uIDAdjust, uint uIDAdjustMax, uint uFlags);

@DllImport("SHELL32")
BOOL SHObjectProperties(HWND hwnd, uint shopObjectType, const(wchar)* pszObjectName, const(wchar)* pszPropertyPage);

@DllImport("SHELL32")
uint SHFormatDrive(HWND hwnd, uint drive, uint fmtID, uint options);

@DllImport("SHELL32")
void SHDestroyPropSheetExtArray(HPSXA__* hpsxa);

@DllImport("SHELL32")
uint SHAddFromPropSheetExtArray(HPSXA__* hpsxa, LPFNADDPROPSHEETPAGE lpfnAddPage, LPARAM lParam);

@DllImport("SHELL32")
uint SHReplaceFromPropSheetExtArray(HPSXA__* hpsxa, uint uPageID, LPFNADDPROPSHEETPAGE lpfnReplaceWith, 
                                    LPARAM lParam);

@DllImport("SHELL32")
IStream OpenRegStream(HKEY hkey, const(wchar)* pszSubkey, const(wchar)* pszValue, uint grfMode);

@DllImport("SHELL32")
BOOL SHFindFiles(ITEMIDLIST* pidlFolder, ITEMIDLIST* pidlSaveFile);

@DllImport("SHELL32")
void PathGetShortPath(const(wchar)* pszLongPath);

@DllImport("SHELL32")
BOOL PathYetAnotherMakeUniqueName(const(wchar)* pszUniqueName, const(wchar)* pszPath, const(wchar)* pszShort, 
                                  const(wchar)* pszFileSpec);

@DllImport("SHELL32")
BOOL Win32DeleteFile(const(wchar)* pszPath);

@DllImport("SHELL32")
uint SHRestricted(RESTRICTIONS rest);

@DllImport("SHELL32")
BOOL SignalFileOpen(ITEMIDLIST* pidl);

@DllImport("SHELL32")
HRESULT AssocGetDetailsOfPropKey(IShellFolder psf, ITEMIDLIST* pidl, const(PROPERTYKEY)* pkey, VARIANT* pv, 
                                 int* pfFoundPropKey);

@DllImport("SHELL32")
HRESULT SHStartNetConnectionDialogW(HWND hwnd, const(wchar)* pszRemoteName, uint dwType);

@DllImport("SHELL32")
HRESULT SHDefExtractIconA(const(char)* pszIconFile, int iIndex, uint uFlags, HICON* phiconLarge, 
                          HICON* phiconSmall, uint nIconSize);

@DllImport("SHELL32")
HRESULT SHDefExtractIconW(const(wchar)* pszIconFile, int iIndex, uint uFlags, HICON* phiconLarge, 
                          HICON* phiconSmall, uint nIconSize);

@DllImport("SHELL32")
HRESULT SHOpenWithDialog(HWND hwndParent, const(OPENASINFO)* poainfo);

@DllImport("SHELL32")
BOOL Shell_GetImageLists(HIMAGELIST* phiml, HIMAGELIST* phimlSmall);

@DllImport("SHELL32")
int Shell_GetCachedImageIndex(const(wchar)* pwszIconPath, int iIconIndex, uint uIconFlags);

@DllImport("SHELL32")
int Shell_GetCachedImageIndexA(const(char)* pszIconPath, int iIconIndex, uint uIconFlags);

@DllImport("SHELL32")
int Shell_GetCachedImageIndexW(const(wchar)* pszIconPath, int iIconIndex, uint uIconFlags);

@DllImport("SHELL32")
BOOL SHValidateUNC(HWND hwndOwner, const(wchar)* pszFile, uint fConnect);

@DllImport("SHELL32")
void SHSetInstanceExplorer(IUnknown punk);

@DllImport("SHELL32")
BOOL IsUserAnAdmin();

@DllImport("SHELL32")
LRESULT SHShellFolderView_Message(HWND hwndMain, uint uMsg, LPARAM lParam);

@DllImport("SHELL32")
HRESULT SHCreateShellFolderView(const(SFV_CREATE)* pcsfv, IShellView* ppsv);

@DllImport("SHELL32")
HRESULT CDefFolderMenu_Create2(ITEMIDLIST* pidlFolder, HWND hwnd, uint cidl, char* apidl, IShellFolder psf, 
                               LPFNDFMCALLBACK pfn, uint nKeys, char* ahkeys, IContextMenu* ppcm);

@DllImport("SHELL32")
HRESULT SHCreateDefaultContextMenu(const(DEFCONTEXTMENU)* pdcm, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
IContextMenu SHFind_InitMenuPopup(HMENU hmenu, HWND hwndOwner, uint idCmdFirst, uint idCmdLast);

@DllImport("SHELL32")
HRESULT SHCreateShellFolderViewEx(CSFV* pcsfv, IShellView* ppsv);

@DllImport("SHELL32")
void SHGetSetSettings(SHELLSTATEA* lpss, uint dwMask, BOOL bSet);

@DllImport("SHELL32")
void SHGetSettings(SHELLFLAGSTATE* psfs, uint dwMask);

@DllImport("SHELL32")
HRESULT SHBindToParent(ITEMIDLIST* pidl, const(GUID)* riid, void** ppv, ITEMIDLIST** ppidlLast);

@DllImport("SHELL32")
HRESULT SHBindToFolderIDListParent(IShellFolder psfRoot, ITEMIDLIST* pidl, const(GUID)* riid, void** ppv, 
                                   ITEMIDLIST** ppidlLast);

@DllImport("SHELL32")
HRESULT SHBindToFolderIDListParentEx(IShellFolder psfRoot, ITEMIDLIST* pidl, IBindCtx ppbc, const(GUID)* riid, 
                                     void** ppv, ITEMIDLIST** ppidlLast);

@DllImport("SHELL32")
HRESULT SHBindToObject(IShellFolder psf, ITEMIDLIST* pidl, IBindCtx pbc, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHParseDisplayName(const(wchar)* pszName, IBindCtx pbc, ITEMIDLIST** ppidl, uint sfgaoIn, uint* psfgaoOut);

@DllImport("SHELL32")
HRESULT SHPathPrepareForWriteA(HWND hwnd, IUnknown punkEnableModless, const(char)* pszPath, uint dwFlags);

@DllImport("SHELL32")
HRESULT SHPathPrepareForWriteW(HWND hwnd, IUnknown punkEnableModless, const(wchar)* pszPath, uint dwFlags);

@DllImport("SHELL32")
HRESULT SHCreateFileExtractIconW(const(wchar)* pszFile, uint dwFileAttributes, const(GUID)* riid, void** ppv);

@DllImport("SHELL32")
HRESULT SHLimitInputEdit(HWND hwndEdit, IShellFolder psf);

@DllImport("SHELL32")
HRESULT SHGetAttributesFromDataObject(IDataObject pdo, uint dwAttributeMask, uint* pdwAttributes, uint* pcItems);

@DllImport("SHELL32")
int SHMapPIDLToSystemImageListIndex(IShellFolder pshf, ITEMIDLIST* pidl, int* piIndexSel);

@DllImport("SHELL32")
HRESULT SHCLSIDFromString(const(wchar)* psz, GUID* pclsid);

@DllImport("SHELL32")
int PickIconDlg(HWND hwnd, const(wchar)* pszIconPath, uint cchIconPath, int* piIconIndex);

@DllImport("SHELL32")
HRESULT StgMakeUniqueName(IStorage pstgParent, const(wchar)* pszFileSpec, uint grfMode, const(GUID)* riid, 
                          void** ppv);

@DllImport("SHELL32")
void SHChangeNotifyRegisterThread(SCNRT_STATUS status);

@DllImport("SHELL32")
void PathQualify(const(wchar)* psz);

@DllImport("SHELL32")
BOOL PathIsSlowA(const(char)* pszFile, uint dwAttr);

@DllImport("SHELL32")
BOOL PathIsSlowW(const(wchar)* pszFile, uint dwAttr);

@DllImport("SHELL32")
HPSXA__* SHCreatePropSheetExtArray(HKEY hKey, const(wchar)* pszSubKey, uint max_iface);

@DllImport("SHELL32")
BOOL SHOpenPropSheetW(const(wchar)* pszCaption, char* ahkeys, uint ckeys, const(GUID)* pclsidDefault, 
                      IDataObject pdtobj, IShellBrowser psb, const(wchar)* pStartPage);

@DllImport("SHDOCVW")
uint SoftwareUpdateMessageBox(HWND hWnd, const(wchar)* pszDistUnit, uint dwFlags, SOFTDISTINFO* psdi);

@DllImport("SHELL32")
HRESULT SHMultiFileProperties(IDataObject pdtobj, uint dwFlags);

@DllImport("SHELL32")
HRESULT SHCreateQueryCancelAutoPlayMoniker(IMoniker* ppmoniker);

@DllImport("SHDOCVW")
BOOL ImportPrivacySettings(const(wchar)* pszFilename, int* pfParsePrivacyPreferences, int* pfParsePerSiteRules);

@DllImport("SHDOCVW")
HRESULT DoPrivacyDlg(HWND hwndOwner, const(wchar)* pszUrl, IEnumPrivacyRecords pPrivacyEnum, BOOL fReportAllSites);

@DllImport("api-ms-win-shcore-scaling-l1-1-0")
DEVICE_SCALE_FACTOR GetScaleFactorForDevice(DISPLAY_DEVICE_TYPE deviceType);

@DllImport("api-ms-win-shcore-scaling-l1-1-0")
HRESULT RegisterScaleChangeNotifications(DISPLAY_DEVICE_TYPE displayDevice, HWND hwndNotify, uint uMsgNotify, 
                                         uint* pdwCookie);

@DllImport("api-ms-win-shcore-scaling-l1-1-0")
HRESULT RevokeScaleChangeNotifications(DISPLAY_DEVICE_TYPE displayDevice, uint dwCookie);

@DllImport("api-ms-win-shcore-scaling-l1-1-1")
HRESULT GetScaleFactorForMonitor(ptrdiff_t hMon, DEVICE_SCALE_FACTOR* pScale);

@DllImport("api-ms-win-shcore-scaling-l1-1-1")
HRESULT RegisterScaleChangeEvent(HANDLE hEvent, size_t* pdwCookie);

@DllImport("api-ms-win-shcore-scaling-l1-1-1")
HRESULT UnregisterScaleChangeEvent(size_t dwCookie);

@DllImport("api-ms-win-shcore-scaling-l1-1-2")
uint GetDpiForShellUIComponent(SHELL_UI_COMPONENT param0);

@DllImport("SHLWAPI")
byte* StrChrA(const(char)* pszStart, ushort wMatch);

@DllImport("SHLWAPI")
ushort* StrChrW(const(wchar)* pszStart, ushort wMatch);

@DllImport("SHLWAPI")
byte* StrChrIA(const(char)* pszStart, ushort wMatch);

@DllImport("SHLWAPI")
ushort* StrChrIW(const(wchar)* pszStart, ushort wMatch);

@DllImport("SHLWAPI")
ushort* StrChrNW(const(wchar)* pszStart, ushort wMatch, uint cchMax);

@DllImport("SHLWAPI")
ushort* StrChrNIW(const(wchar)* pszStart, ushort wMatch, uint cchMax);

@DllImport("SHLWAPI")
int StrCmpNA(const(char)* psz1, const(char)* psz2, int nChar);

@DllImport("SHLWAPI")
int StrCmpNW(const(wchar)* psz1, const(wchar)* psz2, int nChar);

@DllImport("SHLWAPI")
int StrCmpNIA(const(char)* psz1, const(char)* psz2, int nChar);

@DllImport("SHLWAPI")
int StrCmpNIW(const(wchar)* psz1, const(wchar)* psz2, int nChar);

@DllImport("SHLWAPI")
int StrCSpnA(const(char)* pszStr, const(char)* pszSet);

@DllImport("SHLWAPI")
int StrCSpnW(const(wchar)* pszStr, const(wchar)* pszSet);

@DllImport("SHLWAPI")
int StrCSpnIA(const(char)* pszStr, const(char)* pszSet);

@DllImport("SHLWAPI")
int StrCSpnIW(const(wchar)* pszStr, const(wchar)* pszSet);

@DllImport("SHLWAPI")
byte* StrDupA(const(char)* pszSrch);

@DllImport("SHLWAPI")
ushort* StrDupW(const(wchar)* pszSrch);

@DllImport("SHLWAPI")
HRESULT StrFormatByteSizeEx(ulong ull, int flags, const(wchar)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
byte* StrFormatByteSizeA(uint dw, const(char)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
byte* StrFormatByteSize64A(long qdw, const(char)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
ushort* StrFormatByteSizeW(long qdw, const(wchar)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
ushort* StrFormatKBSizeW(long qdw, const(wchar)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
byte* StrFormatKBSizeA(long qdw, const(char)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
int StrFromTimeIntervalA(const(char)* pszOut, uint cchMax, uint dwTimeMS, int digits);

@DllImport("SHLWAPI")
int StrFromTimeIntervalW(const(wchar)* pszOut, uint cchMax, uint dwTimeMS, int digits);

@DllImport("SHLWAPI")
BOOL StrIsIntlEqualA(BOOL fCaseSens, const(char)* pszString1, const(char)* pszString2, int nChar);

@DllImport("SHLWAPI")
BOOL StrIsIntlEqualW(BOOL fCaseSens, const(wchar)* pszString1, const(wchar)* pszString2, int nChar);

@DllImport("SHLWAPI")
byte* StrNCatA(const(char)* psz1, const(char)* psz2, int cchMax);

@DllImport("SHLWAPI")
ushort* StrNCatW(const(wchar)* psz1, const(wchar)* psz2, int cchMax);

@DllImport("SHLWAPI")
byte* StrPBrkA(const(char)* psz, const(char)* pszSet);

@DllImport("SHLWAPI")
ushort* StrPBrkW(const(wchar)* psz, const(wchar)* pszSet);

@DllImport("SHLWAPI")
byte* StrRChrA(const(char)* pszStart, const(char)* pszEnd, ushort wMatch);

@DllImport("SHLWAPI")
ushort* StrRChrW(const(wchar)* pszStart, const(wchar)* pszEnd, ushort wMatch);

@DllImport("SHLWAPI")
byte* StrRChrIA(const(char)* pszStart, const(char)* pszEnd, ushort wMatch);

@DllImport("SHLWAPI")
ushort* StrRChrIW(const(wchar)* pszStart, const(wchar)* pszEnd, ushort wMatch);

@DllImport("SHLWAPI")
byte* StrRStrIA(const(char)* pszSource, const(char)* pszLast, const(char)* pszSrch);

@DllImport("SHLWAPI")
ushort* StrRStrIW(const(wchar)* pszSource, const(wchar)* pszLast, const(wchar)* pszSrch);

@DllImport("SHLWAPI")
int StrSpnA(const(char)* psz, const(char)* pszSet);

@DllImport("SHLWAPI")
int StrSpnW(const(wchar)* psz, const(wchar)* pszSet);

@DllImport("SHLWAPI")
byte* StrStrA(const(char)* pszFirst, const(char)* pszSrch);

@DllImport("SHLWAPI")
ushort* StrStrW(const(wchar)* pszFirst, const(wchar)* pszSrch);

@DllImport("SHLWAPI")
byte* StrStrIA(const(char)* pszFirst, const(char)* pszSrch);

@DllImport("SHLWAPI")
ushort* StrStrIW(const(wchar)* pszFirst, const(wchar)* pszSrch);

@DllImport("SHLWAPI")
ushort* StrStrNW(const(wchar)* pszFirst, const(wchar)* pszSrch, uint cchMax);

@DllImport("SHLWAPI")
ushort* StrStrNIW(const(wchar)* pszFirst, const(wchar)* pszSrch, uint cchMax);

@DllImport("SHLWAPI")
int StrToIntA(const(char)* pszSrc);

@DllImport("SHLWAPI")
int StrToIntW(const(wchar)* pszSrc);

@DllImport("SHLWAPI")
BOOL StrToIntExA(const(char)* pszString, int dwFlags, int* piRet);

@DllImport("SHLWAPI")
BOOL StrToIntExW(const(wchar)* pszString, int dwFlags, int* piRet);

@DllImport("SHLWAPI")
BOOL StrToInt64ExA(const(char)* pszString, int dwFlags, long* pllRet);

@DllImport("SHLWAPI")
BOOL StrToInt64ExW(const(wchar)* pszString, int dwFlags, long* pllRet);

@DllImport("SHLWAPI")
BOOL StrTrimA(const(char)* psz, const(char)* pszTrimChars);

@DllImport("SHLWAPI")
BOOL StrTrimW(const(wchar)* psz, const(wchar)* pszTrimChars);

@DllImport("SHLWAPI")
ushort* StrCatW(const(wchar)* psz1, const(wchar)* psz2);

@DllImport("SHLWAPI")
int StrCmpW(const(wchar)* psz1, const(wchar)* psz2);

@DllImport("SHLWAPI")
int StrCmpIW(const(wchar)* psz1, const(wchar)* psz2);

@DllImport("SHLWAPI")
ushort* StrCpyW(const(wchar)* psz1, const(wchar)* psz2);

@DllImport("SHLWAPI")
ushort* StrCpyNW(const(wchar)* pszDst, const(wchar)* pszSrc, int cchMax);

@DllImport("SHLWAPI")
ushort* StrCatBuffW(const(wchar)* pszDest, const(wchar)* pszSrc, int cchDestBuffSize);

@DllImport("SHLWAPI")
byte* StrCatBuffA(const(char)* pszDest, const(char)* pszSrc, int cchDestBuffSize);

@DllImport("SHLWAPI")
BOOL ChrCmpIA(ushort w1, ushort w2);

@DllImport("SHLWAPI")
BOOL ChrCmpIW(ushort w1, ushort w2);

@DllImport("SHLWAPI")
int wvnsprintfA(const(char)* pszDest, int cchDest, const(char)* pszFmt, byte* arglist);

@DllImport("SHLWAPI")
int wvnsprintfW(const(wchar)* pszDest, int cchDest, const(wchar)* pszFmt, byte* arglist);

@DllImport("SHLWAPI")
int wnsprintfA(const(char)* pszDest, int cchDest, const(char)* pszFmt);

@DllImport("SHLWAPI")
int wnsprintfW(const(wchar)* pszDest, int cchDest, const(wchar)* pszFmt);

@DllImport("SHLWAPI")
HRESULT StrRetToStrA(STRRET* pstr, ITEMIDLIST* pidl, byte** ppsz);

@DllImport("SHLWAPI")
HRESULT StrRetToStrW(STRRET* pstr, ITEMIDLIST* pidl, ushort** ppsz);

@DllImport("SHLWAPI")
HRESULT StrRetToBufA(STRRET* pstr, ITEMIDLIST* pidl, const(char)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
HRESULT StrRetToBufW(STRRET* pstr, ITEMIDLIST* pidl, const(wchar)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
HRESULT SHStrDupA(const(char)* psz, ushort** ppwsz);

@DllImport("SHLWAPI")
HRESULT SHStrDupW(const(wchar)* psz, ushort** ppwsz);

@DllImport("SHLWAPI")
int StrCmpLogicalW(const(wchar)* psz1, const(wchar)* psz2);

@DllImport("SHLWAPI")
uint StrCatChainW(const(wchar)* pszDst, uint cchDst, uint ichAt, const(wchar)* pszSrc);

@DllImport("SHLWAPI")
HRESULT StrRetToBSTR(STRRET* pstr, ITEMIDLIST* pidl, BSTR* pbstr);

@DllImport("SHLWAPI")
HRESULT SHLoadIndirectString(const(wchar)* pszSource, const(wchar)* pszOutBuf, uint cchOutBuf, void** ppvReserved);

@DllImport("SHLWAPI")
BOOL IsCharSpaceA(byte wch);

@DllImport("SHLWAPI")
BOOL IsCharSpaceW(ushort wch);

@DllImport("SHLWAPI")
int StrCmpCA(const(char)* pszStr1, const(char)* pszStr2);

@DllImport("SHLWAPI")
int StrCmpCW(const(wchar)* pszStr1, const(wchar)* pszStr2);

@DllImport("SHLWAPI")
int StrCmpICA(const(char)* pszStr1, const(char)* pszStr2);

@DllImport("SHLWAPI")
int StrCmpICW(const(wchar)* pszStr1, const(wchar)* pszStr2);

@DllImport("SHLWAPI")
int StrCmpNCA(const(char)* pszStr1, const(char)* pszStr2, int nChar);

@DllImport("SHLWAPI")
int StrCmpNCW(const(wchar)* pszStr1, const(wchar)* pszStr2, int nChar);

@DllImport("SHLWAPI")
int StrCmpNICA(const(char)* pszStr1, const(char)* pszStr2, int nChar);

@DllImport("SHLWAPI")
int StrCmpNICW(const(wchar)* pszStr1, const(wchar)* pszStr2, int nChar);

@DllImport("SHLWAPI")
BOOL IntlStrEqWorkerA(BOOL fCaseSens, const(char)* lpString1, const(char)* lpString2, int nChar);

@DllImport("SHLWAPI")
BOOL IntlStrEqWorkerW(BOOL fCaseSens, const(wchar)* lpString1, const(wchar)* lpString2, int nChar);

@DllImport("SHLWAPI")
byte* PathAddBackslashA(const(char)* pszPath);

@DllImport("SHLWAPI")
ushort* PathAddBackslashW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathAddExtensionA(const(char)* pszPath, const(char)* pszExt);

@DllImport("SHLWAPI")
BOOL PathAddExtensionW(const(wchar)* pszPath, const(wchar)* pszExt);

@DllImport("SHLWAPI")
BOOL PathAppendA(const(char)* pszPath, const(char)* pszMore);

@DllImport("SHLWAPI")
BOOL PathAppendW(const(wchar)* pszPath, const(wchar)* pszMore);

@DllImport("SHLWAPI")
byte* PathBuildRootA(const(char)* pszRoot, int iDrive);

@DllImport("SHLWAPI")
ushort* PathBuildRootW(const(wchar)* pszRoot, int iDrive);

@DllImport("SHLWAPI")
BOOL PathCanonicalizeA(const(char)* pszBuf, const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathCanonicalizeW(const(wchar)* pszBuf, const(wchar)* pszPath);

@DllImport("SHLWAPI")
byte* PathCombineA(const(char)* pszDest, const(char)* pszDir, const(char)* pszFile);

@DllImport("SHLWAPI")
ushort* PathCombineW(const(wchar)* pszDest, const(wchar)* pszDir, const(wchar)* pszFile);

@DllImport("SHLWAPI")
BOOL PathCompactPathA(HDC hDC, const(char)* pszPath, uint dx);

@DllImport("SHLWAPI")
BOOL PathCompactPathW(HDC hDC, const(wchar)* pszPath, uint dx);

@DllImport("SHLWAPI")
BOOL PathCompactPathExA(const(char)* pszOut, const(char)* pszSrc, uint cchMax, uint dwFlags);

@DllImport("SHLWAPI")
BOOL PathCompactPathExW(const(wchar)* pszOut, const(wchar)* pszSrc, uint cchMax, uint dwFlags);

@DllImport("SHLWAPI")
int PathCommonPrefixA(const(char)* pszFile1, const(char)* pszFile2, const(char)* achPath);

@DllImport("SHLWAPI")
int PathCommonPrefixW(const(wchar)* pszFile1, const(wchar)* pszFile2, const(wchar)* achPath);

@DllImport("SHLWAPI")
BOOL PathFileExistsA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathFileExistsW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
byte* PathFindExtensionA(const(char)* pszPath);

@DllImport("SHLWAPI")
ushort* PathFindExtensionW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
byte* PathFindFileNameA(const(char)* pszPath);

@DllImport("SHLWAPI")
ushort* PathFindFileNameW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
byte* PathFindNextComponentA(const(char)* pszPath);

@DllImport("SHLWAPI")
ushort* PathFindNextComponentW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathFindOnPathA(const(char)* pszPath, byte** ppszOtherDirs);

@DllImport("SHLWAPI")
BOOL PathFindOnPathW(const(wchar)* pszPath, ushort** ppszOtherDirs);

@DllImport("SHLWAPI")
byte* PathFindSuffixArrayA(const(char)* pszPath, char* apszSuffix, int iArraySize);

@DllImport("SHLWAPI")
ushort* PathFindSuffixArrayW(const(wchar)* pszPath, char* apszSuffix, int iArraySize);

@DllImport("SHLWAPI")
byte* PathGetArgsA(const(char)* pszPath);

@DllImport("SHLWAPI")
ushort* PathGetArgsW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsLFNFileSpecA(const(char)* pszName);

@DllImport("SHLWAPI")
BOOL PathIsLFNFileSpecW(const(wchar)* pszName);

@DllImport("SHLWAPI")
uint PathGetCharTypeA(ubyte ch);

@DllImport("SHLWAPI")
uint PathGetCharTypeW(ushort ch);

@DllImport("SHLWAPI")
int PathGetDriveNumberA(const(char)* pszPath);

@DllImport("SHLWAPI")
int PathGetDriveNumberW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsDirectoryA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsDirectoryW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsDirectoryEmptyA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsDirectoryEmptyW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsFileSpecA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsFileSpecW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsPrefixA(const(char)* pszPrefix, const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsPrefixW(const(wchar)* pszPrefix, const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsRelativeA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsRelativeW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsRootA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsRootW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsSameRootA(const(char)* pszPath1, const(char)* pszPath2);

@DllImport("SHLWAPI")
BOOL PathIsSameRootW(const(wchar)* pszPath1, const(wchar)* pszPath2);

@DllImport("SHLWAPI")
BOOL PathIsUNCA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsUNCW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsNetworkPathA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsNetworkPathW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsUNCServerA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsUNCServerW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsUNCServerShareA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsUNCServerShareW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsContentTypeA(const(char)* pszPath, const(char)* pszContentType);

@DllImport("SHLWAPI")
BOOL PathIsContentTypeW(const(wchar)* pszPath, const(wchar)* pszContentType);

@DllImport("SHLWAPI")
BOOL PathIsURLA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsURLW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathMakePrettyA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathMakePrettyW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathMatchSpecA(const(char)* pszFile, const(char)* pszSpec);

@DllImport("SHLWAPI")
BOOL PathMatchSpecW(const(wchar)* pszFile, const(wchar)* pszSpec);

@DllImport("SHLWAPI")
HRESULT PathMatchSpecExA(const(char)* pszFile, const(char)* pszSpec, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT PathMatchSpecExW(const(wchar)* pszFile, const(wchar)* pszSpec, uint dwFlags);

@DllImport("SHLWAPI")
int PathParseIconLocationA(const(char)* pszIconFile);

@DllImport("SHLWAPI")
int PathParseIconLocationW(const(wchar)* pszIconFile);

@DllImport("SHLWAPI")
BOOL PathQuoteSpacesA(const(char)* lpsz);

@DllImport("SHLWAPI")
BOOL PathQuoteSpacesW(const(wchar)* lpsz);

@DllImport("SHLWAPI")
BOOL PathRelativePathToA(const(char)* pszPath, const(char)* pszFrom, uint dwAttrFrom, const(char)* pszTo, 
                         uint dwAttrTo);

@DllImport("SHLWAPI")
BOOL PathRelativePathToW(const(wchar)* pszPath, const(wchar)* pszFrom, uint dwAttrFrom, const(wchar)* pszTo, 
                         uint dwAttrTo);

@DllImport("SHLWAPI")
void PathRemoveArgsA(const(char)* pszPath);

@DllImport("SHLWAPI")
void PathRemoveArgsW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
byte* PathRemoveBackslashA(const(char)* pszPath);

@DllImport("SHLWAPI")
ushort* PathRemoveBackslashW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
void PathRemoveBlanksA(const(char)* pszPath);

@DllImport("SHLWAPI")
void PathRemoveBlanksW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
void PathRemoveExtensionA(const(char)* pszPath);

@DllImport("SHLWAPI")
void PathRemoveExtensionW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathRemoveFileSpecA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathRemoveFileSpecW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathRenameExtensionA(const(char)* pszPath, const(char)* pszExt);

@DllImport("SHLWAPI")
BOOL PathRenameExtensionW(const(wchar)* pszPath, const(wchar)* pszExt);

@DllImport("SHLWAPI")
BOOL PathSearchAndQualifyA(const(char)* pszPath, const(char)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
BOOL PathSearchAndQualifyW(const(wchar)* pszPath, const(wchar)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
void PathSetDlgItemPathA(HWND hDlg, int id, const(char)* pszPath);

@DllImport("SHLWAPI")
void PathSetDlgItemPathW(HWND hDlg, int id, const(wchar)* pszPath);

@DllImport("SHLWAPI")
byte* PathSkipRootA(const(char)* pszPath);

@DllImport("SHLWAPI")
ushort* PathSkipRootW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
void PathStripPathA(const(char)* pszPath);

@DllImport("SHLWAPI")
void PathStripPathW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathStripToRootA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathStripToRootW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathUnquoteSpacesA(const(char)* lpsz);

@DllImport("SHLWAPI")
BOOL PathUnquoteSpacesW(const(wchar)* lpsz);

@DllImport("SHLWAPI")
BOOL PathMakeSystemFolderA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathMakeSystemFolderW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathUnmakeSystemFolderA(const(char)* pszPath);

@DllImport("SHLWAPI")
BOOL PathUnmakeSystemFolderW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathIsSystemFolderA(const(char)* pszPath, uint dwAttrb);

@DllImport("SHLWAPI")
BOOL PathIsSystemFolderW(const(wchar)* pszPath, uint dwAttrb);

@DllImport("SHLWAPI")
void PathUndecorateA(const(char)* pszPath);

@DllImport("SHLWAPI")
void PathUndecorateW(const(wchar)* pszPath);

@DllImport("SHLWAPI")
BOOL PathUnExpandEnvStringsA(const(char)* pszPath, const(char)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
BOOL PathUnExpandEnvStringsW(const(wchar)* pszPath, const(wchar)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
int UrlCompareA(const(char)* psz1, const(char)* psz2, BOOL fIgnoreSlash);

@DllImport("SHLWAPI")
int UrlCompareW(const(wchar)* psz1, const(wchar)* psz2, BOOL fIgnoreSlash);

@DllImport("SHLWAPI")
HRESULT UrlCombineA(const(char)* pszBase, const(char)* pszRelative, const(char)* pszCombined, uint* pcchCombined, 
                    uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlCombineW(const(wchar)* pszBase, const(wchar)* pszRelative, const(wchar)* pszCombined, 
                    uint* pcchCombined, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlCanonicalizeA(const(char)* pszUrl, const(char)* pszCanonicalized, uint* pcchCanonicalized, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlCanonicalizeW(const(wchar)* pszUrl, const(wchar)* pszCanonicalized, uint* pcchCanonicalized, 
                         uint dwFlags);

@DllImport("SHLWAPI")
BOOL UrlIsOpaqueA(const(char)* pszURL);

@DllImport("SHLWAPI")
BOOL UrlIsOpaqueW(const(wchar)* pszURL);

@DllImport("SHLWAPI")
BOOL UrlIsNoHistoryA(const(char)* pszURL);

@DllImport("SHLWAPI")
BOOL UrlIsNoHistoryW(const(wchar)* pszURL);

@DllImport("SHLWAPI")
BOOL UrlIsA(const(char)* pszUrl, URLIS UrlIs);

@DllImport("SHLWAPI")
BOOL UrlIsW(const(wchar)* pszUrl, URLIS UrlIs);

@DllImport("SHLWAPI")
byte* UrlGetLocationA(const(char)* pszURL);

@DllImport("SHLWAPI")
ushort* UrlGetLocationW(const(wchar)* pszURL);

@DllImport("SHLWAPI")
HRESULT UrlUnescapeA(const(char)* pszUrl, const(char)* pszUnescaped, uint* pcchUnescaped, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlUnescapeW(const(wchar)* pszUrl, const(wchar)* pszUnescaped, uint* pcchUnescaped, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlEscapeA(const(char)* pszUrl, const(char)* pszEscaped, uint* pcchEscaped, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlEscapeW(const(wchar)* pszUrl, const(wchar)* pszEscaped, uint* pcchEscaped, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlCreateFromPathA(const(char)* pszPath, const(char)* pszUrl, uint* pcchUrl, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlCreateFromPathW(const(wchar)* pszPath, const(wchar)* pszUrl, uint* pcchUrl, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT PathCreateFromUrlA(const(char)* pszUrl, const(char)* pszPath, uint* pcchPath, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT PathCreateFromUrlW(const(wchar)* pszUrl, const(wchar)* pszPath, uint* pcchPath, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT PathCreateFromUrlAlloc(const(wchar)* pszIn, ushort** ppszOut, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlHashA(const(char)* pszUrl, char* pbHash, uint cbHash);

@DllImport("SHLWAPI")
HRESULT UrlHashW(const(wchar)* pszUrl, char* pbHash, uint cbHash);

@DllImport("SHLWAPI")
HRESULT UrlGetPartW(const(wchar)* pszIn, const(wchar)* pszOut, uint* pcchOut, uint dwPart, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlGetPartA(const(char)* pszIn, const(char)* pszOut, uint* pcchOut, uint dwPart, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlApplySchemeA(const(char)* pszIn, const(char)* pszOut, uint* pcchOut, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT UrlApplySchemeW(const(wchar)* pszIn, const(wchar)* pszOut, uint* pcchOut, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT HashData(char* pbData, uint cbData, char* pbHash, uint cbHash);

@DllImport("SHLWAPI")
HRESULT UrlFixupW(const(wchar)* pcszUrl, const(wchar)* pszTranslatedUrl, uint cchMax);

@DllImport("SHLWAPI")
HRESULT ParseURLA(const(char)* pcszURL, PARSEDURLA* ppu);

@DllImport("SHLWAPI")
HRESULT ParseURLW(const(wchar)* pcszURL, PARSEDURLW* ppu);

@DllImport("SHLWAPI")
LSTATUS SHDeleteEmptyKeyA(HKEY hkey, const(char)* pszSubKey);

@DllImport("SHLWAPI")
LSTATUS SHDeleteEmptyKeyW(HKEY hkey, const(wchar)* pszSubKey);

@DllImport("SHLWAPI")
LSTATUS SHDeleteKeyA(HKEY hkey, const(char)* pszSubKey);

@DllImport("SHLWAPI")
LSTATUS SHDeleteKeyW(HKEY hkey, const(wchar)* pszSubKey);

@DllImport("SHLWAPI")
HKEY SHRegDuplicateHKey(HKEY hkey);

@DllImport("SHLWAPI")
LSTATUS SHDeleteValueA(HKEY hkey, const(char)* pszSubKey, const(char)* pszValue);

@DllImport("SHLWAPI")
LSTATUS SHDeleteValueW(HKEY hkey, const(wchar)* pszSubKey, const(wchar)* pszValue);

@DllImport("SHLWAPI")
LSTATUS SHGetValueA(HKEY hkey, const(char)* pszSubKey, const(char)* pszValue, uint* pdwType, char* pvData, 
                    uint* pcbData);

@DllImport("SHLWAPI")
LSTATUS SHGetValueW(HKEY hkey, const(wchar)* pszSubKey, const(wchar)* pszValue, uint* pdwType, char* pvData, 
                    uint* pcbData);

@DllImport("SHLWAPI")
LSTATUS SHSetValueA(HKEY hkey, const(char)* pszSubKey, const(char)* pszValue, uint dwType, char* pvData, 
                    uint cbData);

@DllImport("SHLWAPI")
LSTATUS SHSetValueW(HKEY hkey, const(wchar)* pszSubKey, const(wchar)* pszValue, uint dwType, char* pvData, 
                    uint cbData);

@DllImport("SHLWAPI")
LSTATUS SHRegGetValueA(HKEY hkey, const(char)* pszSubKey, const(char)* pszValue, int srrfFlags, uint* pdwType, 
                       char* pvData, uint* pcbData);

@DllImport("SHLWAPI")
LSTATUS SHRegGetValueW(HKEY hkey, const(wchar)* pszSubKey, const(wchar)* pszValue, int srrfFlags, uint* pdwType, 
                       char* pvData, uint* pcbData);

@DllImport("SHLWAPI")
LSTATUS SHRegGetValueFromHKCUHKLM(const(wchar)* pwszKey, const(wchar)* pwszValue, int srrfFlags, uint* pdwType, 
                                  char* pvData, uint* pcbData);

@DllImport("SHLWAPI")
LSTATUS SHQueryValueExA(HKEY hkey, const(char)* pszValue, uint* pdwReserved, uint* pdwType, char* pvData, 
                        uint* pcbData);

@DllImport("SHLWAPI")
LSTATUS SHQueryValueExW(HKEY hkey, const(wchar)* pszValue, uint* pdwReserved, uint* pdwType, char* pvData, 
                        uint* pcbData);

@DllImport("SHLWAPI")
LSTATUS SHEnumKeyExA(HKEY hkey, uint dwIndex, const(char)* pszName, uint* pcchName);

@DllImport("SHLWAPI")
LSTATUS SHEnumKeyExW(HKEY hkey, uint dwIndex, const(wchar)* pszName, uint* pcchName);

@DllImport("SHLWAPI")
LSTATUS SHEnumValueA(HKEY hkey, uint dwIndex, const(char)* pszValueName, uint* pcchValueName, uint* pdwType, 
                     char* pvData, uint* pcbData);

@DllImport("SHLWAPI")
LSTATUS SHEnumValueW(HKEY hkey, uint dwIndex, const(wchar)* pszValueName, uint* pcchValueName, uint* pdwType, 
                     char* pvData, uint* pcbData);

@DllImport("SHLWAPI")
LSTATUS SHQueryInfoKeyA(HKEY hkey, uint* pcSubKeys, uint* pcchMaxSubKeyLen, uint* pcValues, 
                        uint* pcchMaxValueNameLen);

@DllImport("SHLWAPI")
LSTATUS SHQueryInfoKeyW(HKEY hkey, uint* pcSubKeys, uint* pcchMaxSubKeyLen, uint* pcValues, 
                        uint* pcchMaxValueNameLen);

@DllImport("SHLWAPI")
LSTATUS SHCopyKeyA(HKEY hkeySrc, const(char)* pszSrcSubKey, HKEY hkeyDest, uint fReserved);

@DllImport("SHLWAPI")
LSTATUS SHCopyKeyW(HKEY hkeySrc, const(wchar)* pszSrcSubKey, HKEY hkeyDest, uint fReserved);

@DllImport("SHLWAPI")
LSTATUS SHRegGetPathA(HKEY hKey, const(char)* pcszSubKey, const(char)* pcszValue, const(char)* pszPath, 
                      uint dwFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegGetPathW(HKEY hKey, const(wchar)* pcszSubKey, const(wchar)* pcszValue, const(wchar)* pszPath, 
                      uint dwFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegSetPathA(HKEY hKey, const(char)* pcszSubKey, const(char)* pcszValue, const(char)* pcszPath, 
                      uint dwFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegSetPathW(HKEY hKey, const(wchar)* pcszSubKey, const(wchar)* pcszValue, const(wchar)* pcszPath, 
                      uint dwFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegCreateUSKeyA(const(char)* pszPath, uint samDesired, ptrdiff_t hRelativeUSKey, ptrdiff_t* phNewUSKey, 
                          uint dwFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegCreateUSKeyW(const(wchar)* pwzPath, uint samDesired, ptrdiff_t hRelativeUSKey, ptrdiff_t* phNewUSKey, 
                          uint dwFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegOpenUSKeyA(const(char)* pszPath, uint samDesired, ptrdiff_t hRelativeUSKey, ptrdiff_t* phNewUSKey, 
                        BOOL fIgnoreHKCU);

@DllImport("SHLWAPI")
LSTATUS SHRegOpenUSKeyW(const(wchar)* pwzPath, uint samDesired, ptrdiff_t hRelativeUSKey, ptrdiff_t* phNewUSKey, 
                        BOOL fIgnoreHKCU);

@DllImport("SHLWAPI")
LSTATUS SHRegQueryUSValueA(ptrdiff_t hUSKey, const(char)* pszValue, uint* pdwType, char* pvData, uint* pcbData, 
                           BOOL fIgnoreHKCU, char* pvDefaultData, uint dwDefaultDataSize);

@DllImport("SHLWAPI")
LSTATUS SHRegQueryUSValueW(ptrdiff_t hUSKey, const(wchar)* pszValue, uint* pdwType, char* pvData, uint* pcbData, 
                           BOOL fIgnoreHKCU, char* pvDefaultData, uint dwDefaultDataSize);

@DllImport("SHLWAPI")
LSTATUS SHRegWriteUSValueA(ptrdiff_t hUSKey, const(char)* pszValue, uint dwType, char* pvData, uint cbData, 
                           uint dwFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegWriteUSValueW(ptrdiff_t hUSKey, const(wchar)* pwzValue, uint dwType, char* pvData, uint cbData, 
                           uint dwFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegDeleteUSValueA(ptrdiff_t hUSKey, const(char)* pszValue, SHREGDEL_FLAGS delRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegDeleteUSValueW(ptrdiff_t hUSKey, const(wchar)* pwzValue, SHREGDEL_FLAGS delRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegDeleteEmptyUSKeyW(ptrdiff_t hUSKey, const(wchar)* pwzSubKey, SHREGDEL_FLAGS delRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegDeleteEmptyUSKeyA(ptrdiff_t hUSKey, const(char)* pszSubKey, SHREGDEL_FLAGS delRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegEnumUSKeyA(ptrdiff_t hUSKey, uint dwIndex, const(char)* pszName, uint* pcchName, 
                        SHREGENUM_FLAGS enumRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegEnumUSKeyW(ptrdiff_t hUSKey, uint dwIndex, const(wchar)* pwzName, uint* pcchName, 
                        SHREGENUM_FLAGS enumRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegEnumUSValueA(ptrdiff_t hUSkey, uint dwIndex, const(char)* pszValueName, uint* pcchValueName, 
                          uint* pdwType, char* pvData, uint* pcbData, SHREGENUM_FLAGS enumRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegEnumUSValueW(ptrdiff_t hUSkey, uint dwIndex, const(wchar)* pszValueName, uint* pcchValueName, 
                          uint* pdwType, char* pvData, uint* pcbData, SHREGENUM_FLAGS enumRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegQueryInfoUSKeyA(ptrdiff_t hUSKey, uint* pcSubKeys, uint* pcchMaxSubKeyLen, uint* pcValues, 
                             uint* pcchMaxValueNameLen, SHREGENUM_FLAGS enumRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegQueryInfoUSKeyW(ptrdiff_t hUSKey, uint* pcSubKeys, uint* pcchMaxSubKeyLen, uint* pcValues, 
                             uint* pcchMaxValueNameLen, SHREGENUM_FLAGS enumRegFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegCloseUSKey(ptrdiff_t hUSKey);

@DllImport("SHLWAPI")
LSTATUS SHRegGetUSValueA(const(char)* pszSubKey, const(char)* pszValue, uint* pdwType, char* pvData, uint* pcbData, 
                         BOOL fIgnoreHKCU, char* pvDefaultData, uint dwDefaultDataSize);

@DllImport("SHLWAPI")
LSTATUS SHRegGetUSValueW(const(wchar)* pszSubKey, const(wchar)* pszValue, uint* pdwType, char* pvData, 
                         uint* pcbData, BOOL fIgnoreHKCU, char* pvDefaultData, uint dwDefaultDataSize);

@DllImport("SHLWAPI")
LSTATUS SHRegSetUSValueA(const(char)* pszSubKey, const(char)* pszValue, uint dwType, char* pvData, uint cbData, 
                         uint dwFlags);

@DllImport("SHLWAPI")
LSTATUS SHRegSetUSValueW(const(wchar)* pwzSubKey, const(wchar)* pwzValue, uint dwType, char* pvData, uint cbData, 
                         uint dwFlags);

@DllImport("SHLWAPI")
int SHRegGetIntW(HKEY hk, const(wchar)* pwzKey, int iDefault);

@DllImport("SHLWAPI")
BOOL SHRegGetBoolUSValueA(const(char)* pszSubKey, const(char)* pszValue, BOOL fIgnoreHKCU, BOOL fDefault);

@DllImport("SHLWAPI")
BOOL SHRegGetBoolUSValueW(const(wchar)* pszSubKey, const(wchar)* pszValue, BOOL fIgnoreHKCU, BOOL fDefault);

@DllImport("SHLWAPI")
HRESULT AssocCreate(GUID clsid, const(GUID)* riid, void** ppv);

@DllImport("SHLWAPI")
HRESULT AssocQueryStringA(uint flags, ASSOCSTR str, const(char)* pszAssoc, const(char)* pszExtra, 
                          const(char)* pszOut, uint* pcchOut);

@DllImport("SHLWAPI")
HRESULT AssocQueryStringW(uint flags, ASSOCSTR str, const(wchar)* pszAssoc, const(wchar)* pszExtra, 
                          const(wchar)* pszOut, uint* pcchOut);

@DllImport("SHLWAPI")
HRESULT AssocQueryStringByKeyA(uint flags, ASSOCSTR str, HKEY hkAssoc, const(char)* pszExtra, const(char)* pszOut, 
                               uint* pcchOut);

@DllImport("SHLWAPI")
HRESULT AssocQueryStringByKeyW(uint flags, ASSOCSTR str, HKEY hkAssoc, const(wchar)* pszExtra, 
                               const(wchar)* pszOut, uint* pcchOut);

@DllImport("SHLWAPI")
HRESULT AssocQueryKeyA(uint flags, ASSOCKEY key, const(char)* pszAssoc, const(char)* pszExtra, HKEY* phkeyOut);

@DllImport("SHLWAPI")
HRESULT AssocQueryKeyW(uint flags, ASSOCKEY key, const(wchar)* pszAssoc, const(wchar)* pszExtra, HKEY* phkeyOut);

@DllImport("SHLWAPI")
BOOL AssocIsDangerous(const(wchar)* pszAssoc);

@DllImport("SHLWAPI")
HRESULT AssocGetPerceivedType(const(wchar)* pszExt, PERCEIVED* ptype, uint* pflag, ushort** ppszType);

@DllImport("SHLWAPI")
IStream SHOpenRegStreamA(HKEY hkey, const(char)* pszSubkey, const(char)* pszValue, uint grfMode);

@DllImport("SHLWAPI")
IStream SHOpenRegStreamW(HKEY hkey, const(wchar)* pszSubkey, const(wchar)* pszValue, uint grfMode);

@DllImport("SHLWAPI")
IStream SHOpenRegStream2A(HKEY hkey, const(char)* pszSubkey, const(char)* pszValue, uint grfMode);

@DllImport("SHLWAPI")
IStream SHOpenRegStream2W(HKEY hkey, const(wchar)* pszSubkey, const(wchar)* pszValue, uint grfMode);

@DllImport("SHLWAPI")
HRESULT SHCreateStreamOnFileA(const(char)* pszFile, uint grfMode, IStream* ppstm);

@DllImport("SHLWAPI")
HRESULT SHCreateStreamOnFileW(const(wchar)* pszFile, uint grfMode, IStream* ppstm);

@DllImport("SHLWAPI")
HRESULT SHCreateStreamOnFileEx(const(wchar)* pszFile, uint grfMode, uint dwAttributes, BOOL fCreate, 
                               IStream pstmTemplate, IStream* ppstm);

@DllImport("SHLWAPI")
IStream SHCreateMemStream(char* pInit, uint cbInit);

@DllImport("SHLWAPI")
HRESULT GetAcceptLanguagesA(const(char)* pszLanguages, uint* pcchLanguages);

@DllImport("SHLWAPI")
HRESULT GetAcceptLanguagesW(const(wchar)* pszLanguages, uint* pcchLanguages);

@DllImport("SHLWAPI")
void IUnknown_Set(IUnknown* ppunk, IUnknown punk);

@DllImport("SHLWAPI")
void IUnknown_AtomicRelease(void** ppunk);

@DllImport("SHLWAPI")
HRESULT IUnknown_GetWindow(IUnknown punk, HWND* phwnd);

@DllImport("SHLWAPI")
HRESULT IUnknown_SetSite(IUnknown punk, IUnknown punkSite);

@DllImport("SHLWAPI")
HRESULT IUnknown_GetSite(IUnknown punk, const(GUID)* riid, void** ppv);

@DllImport("SHLWAPI")
HRESULT IUnknown_QueryService(IUnknown punk, const(GUID)* guidService, const(GUID)* riid, void** ppvOut);

@DllImport("SHLWAPI")
HRESULT IStream_Read(IStream pstm, char* pv, uint cb);

@DllImport("SHLWAPI")
HRESULT IStream_Write(IStream pstm, char* pv, uint cb);

@DllImport("SHLWAPI")
HRESULT IStream_Reset(IStream pstm);

@DllImport("SHLWAPI")
HRESULT IStream_Size(IStream pstm, ULARGE_INTEGER* pui);

@DllImport("SHLWAPI")
HRESULT ConnectToConnectionPoint(IUnknown punk, const(GUID)* riidEvent, BOOL fConnect, IUnknown punkTarget, 
                                 uint* pdwCookie, IConnectionPoint* ppcpOut);

@DllImport("SHLWAPI")
HRESULT IStream_ReadPidl(IStream pstm, ITEMIDLIST** ppidlOut);

@DllImport("SHLWAPI")
HRESULT IStream_WritePidl(IStream pstm, ITEMIDLIST* pidlWrite);

@DllImport("SHLWAPI")
HRESULT IStream_ReadStr(IStream pstm, ushort** ppsz);

@DllImport("SHLWAPI")
HRESULT IStream_WriteStr(IStream pstm, const(wchar)* psz);

@DllImport("SHLWAPI")
HRESULT IStream_Copy(IStream pstmFrom, IStream pstmTo, uint cb);

@DllImport("SHLWAPI")
HRESULT SHGetViewStatePropertyBag(ITEMIDLIST* pidl, const(wchar)* pszBagName, uint dwFlags, const(GUID)* riid, 
                                  void** ppv);

@DllImport("SHLWAPI")
int SHFormatDateTimeA(const(FILETIME)* pft, uint* pdwFlags, const(char)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
int SHFormatDateTimeW(const(FILETIME)* pft, uint* pdwFlags, const(wchar)* pszBuf, uint cchBuf);

@DllImport("SHLWAPI")
int SHAnsiToUnicode(const(char)* pszSrc, const(wchar)* pwszDst, int cwchBuf);

@DllImport("SHLWAPI")
int SHAnsiToAnsi(const(char)* pszSrc, const(char)* pszDst, int cchBuf);

@DllImport("SHLWAPI")
int SHUnicodeToAnsi(const(wchar)* pwszSrc, const(char)* pszDst, int cchBuf);

@DllImport("SHLWAPI")
int SHUnicodeToUnicode(const(wchar)* pwzSrc, const(wchar)* pwzDst, int cwchBuf);

@DllImport("SHLWAPI")
int SHMessageBoxCheckA(HWND hwnd, const(char)* pszText, const(char)* pszCaption, uint uType, int iDefault, 
                       const(char)* pszRegVal);

@DllImport("SHLWAPI")
int SHMessageBoxCheckW(HWND hwnd, const(wchar)* pszText, const(wchar)* pszCaption, uint uType, int iDefault, 
                       const(wchar)* pszRegVal);

@DllImport("SHLWAPI")
LRESULT SHSendMessageBroadcastA(uint uMsg, WPARAM wParam, LPARAM lParam);

@DllImport("SHLWAPI")
LRESULT SHSendMessageBroadcastW(uint uMsg, WPARAM wParam, LPARAM lParam);

@DllImport("SHLWAPI")
byte SHStripMneumonicA(const(char)* pszMenu);

@DllImport("SHLWAPI")
ushort SHStripMneumonicW(const(wchar)* pszMenu);

@DllImport("SHLWAPI")
BOOL IsOS(uint dwOS);

@DllImport("SHLWAPI")
int SHGlobalCounterGetValue(const(SHGLOBALCOUNTER) id);

@DllImport("SHLWAPI")
int SHGlobalCounterIncrement(const(SHGLOBALCOUNTER) id);

@DllImport("SHLWAPI")
int SHGlobalCounterDecrement(const(SHGLOBALCOUNTER) id);

@DllImport("SHLWAPI")
HANDLE SHAllocShared(char* pvData, uint dwSize, uint dwProcessId);

@DllImport("SHLWAPI")
BOOL SHFreeShared(HANDLE hData, uint dwProcessId);

@DllImport("SHLWAPI")
void* SHLockShared(HANDLE hData, uint dwProcessId);

@DllImport("SHLWAPI")
BOOL SHUnlockShared(char* pvData);

@DllImport("SHLWAPI")
uint WhichPlatform();

@DllImport("SHLWAPI")
HRESULT QISearch(void* that, QITAB* pqit, const(GUID)* riid, void** ppv);

@DllImport("SHLWAPI")
BOOL SHIsLowMemoryMachine(uint dwType);

@DllImport("SHLWAPI")
int GetMenuPosFromID(HMENU hmenu, uint id);

@DllImport("SHLWAPI")
HRESULT SHGetInverseCMAP(char* pbMap, uint cbMap);

@DllImport("SHLWAPI")
HRESULT SHAutoComplete(HWND hwndEdit, uint dwFlags);

@DllImport("SHLWAPI")
HRESULT SHCreateThreadRef(int* pcRef, IUnknown* ppunk);

@DllImport("SHLWAPI")
HRESULT SHSetThreadRef(IUnknown punk);

@DllImport("SHLWAPI")
HRESULT SHGetThreadRef(IUnknown* ppunk);

@DllImport("SHLWAPI")
BOOL SHSkipJunction(IBindCtx pbc, const(GUID)* pclsid);

@DllImport("SHLWAPI")
BOOL SHCreateThread(LPTHREAD_START_ROUTINE pfnThreadProc, void* pData, uint flags, 
                    LPTHREAD_START_ROUTINE pfnCallback);

@DllImport("SHLWAPI")
BOOL SHCreateThreadWithHandle(LPTHREAD_START_ROUTINE pfnThreadProc, void* pData, uint flags, 
                              LPTHREAD_START_ROUTINE pfnCallback, HANDLE* pHandle);

@DllImport("SHLWAPI")
HRESULT SHReleaseThreadRef();

@DllImport("SHLWAPI")
HPALETTE SHCreateShellPalette(HDC hdc);

@DllImport("SHLWAPI")
void ColorRGBToHLS(uint clrRGB, ushort* pwHue, ushort* pwLuminance, ushort* pwSaturation);

@DllImport("SHLWAPI")
uint ColorHLSToRGB(ushort wHue, ushort wLuminance, ushort wSaturation);

@DllImport("SHLWAPI")
uint ColorAdjustLuma(uint clrRGB, int n, BOOL fScale);

@DllImport("SHLWAPI")
BOOL IsInternetESCEnabled();

@DllImport("hlink")
HRESULT HlinkCreateFromMoniker(IMoniker pimkTrgt, const(wchar)* pwzLocation, const(wchar)* pwzFriendlyName, 
                               IHlinkSite pihlsite, uint dwSiteData, IUnknown piunkOuter, const(GUID)* riid, 
                               void** ppvObj);

@DllImport("hlink")
HRESULT HlinkCreateFromString(const(wchar)* pwzTarget, const(wchar)* pwzLocation, const(wchar)* pwzFriendlyName, 
                              IHlinkSite pihlsite, uint dwSiteData, IUnknown piunkOuter, const(GUID)* riid, 
                              void** ppvObj);

@DllImport("hlink")
HRESULT HlinkCreateFromData(IDataObject piDataObj, IHlinkSite pihlsite, uint dwSiteData, IUnknown piunkOuter, 
                            const(GUID)* riid, void** ppvObj);

@DllImport("hlink")
HRESULT HlinkQueryCreateFromData(IDataObject piDataObj);

@DllImport("hlink")
HRESULT HlinkClone(IHlink pihl, const(GUID)* riid, IHlinkSite pihlsiteForClone, uint dwSiteData, void** ppvObj);

@DllImport("hlink")
HRESULT HlinkCreateBrowseContext(IUnknown piunkOuter, const(GUID)* riid, void** ppvObj);

@DllImport("hlink")
HRESULT HlinkNavigateToStringReference(const(wchar)* pwzTarget, const(wchar)* pwzLocation, IHlinkSite pihlsite, 
                                       uint dwSiteData, IHlinkFrame pihlframe, uint grfHLNF, IBindCtx pibc, 
                                       IBindStatusCallback pibsc, IHlinkBrowseContext pihlbc);

@DllImport("hlink")
HRESULT HlinkNavigate(IHlink pihl, IHlinkFrame pihlframe, uint grfHLNF, IBindCtx pbc, IBindStatusCallback pibsc, 
                      IHlinkBrowseContext pihlbc);

@DllImport("hlink")
HRESULT HlinkOnNavigate(IHlinkFrame pihlframe, IHlinkBrowseContext pihlbc, uint grfHLNF, IMoniker pimkTarget, 
                        const(wchar)* pwzLocation, const(wchar)* pwzFriendlyName, uint* puHLID);

@DllImport("hlink")
HRESULT HlinkUpdateStackItem(IHlinkFrame pihlframe, IHlinkBrowseContext pihlbc, uint uHLID, IMoniker pimkTrgt, 
                             const(wchar)* pwzLocation, const(wchar)* pwzFriendlyName);

@DllImport("hlink")
HRESULT HlinkOnRenameDocument(uint dwReserved, IHlinkBrowseContext pihlbc, IMoniker pimkOld, IMoniker pimkNew);

@DllImport("hlink")
HRESULT HlinkResolveMonikerForData(IMoniker pimkReference, uint reserved, IBindCtx pibc, uint cFmtetc, 
                                   FORMATETC* rgFmtetc, IBindStatusCallback pibsc, IMoniker pimkBase);

@DllImport("hlink")
HRESULT HlinkResolveStringForData(const(wchar)* pwzReference, uint reserved, IBindCtx pibc, uint cFmtetc, 
                                  FORMATETC* rgFmtetc, IBindStatusCallback pibsc, IMoniker pimkBase);

@DllImport("hlink")
HRESULT HlinkParseDisplayName(IBindCtx pibc, const(wchar)* pwzDisplayName, BOOL fNoForceAbs, uint* pcchEaten, 
                              IMoniker* ppimk);

@DllImport("hlink")
HRESULT HlinkCreateExtensionServices(const(wchar)* pwzAdditionalHeaders, HWND phwnd, const(wchar)* pszUsername, 
                                     const(wchar)* pszPassword, IUnknown piunkOuter, const(GUID)* riid, 
                                     void** ppvObj);

@DllImport("hlink")
HRESULT HlinkPreprocessMoniker(IBindCtx pibc, IMoniker pimkIn, IMoniker* ppimkOut);

@DllImport("hlink")
HRESULT OleSaveToStreamEx(IUnknown piunk, IStream pistm, BOOL fClearDirty);

@DllImport("hlink")
HRESULT HlinkSetSpecialReference(uint uReference, const(wchar)* pwzReference);

@DllImport("hlink")
HRESULT HlinkGetSpecialReference(uint uReference, ushort** ppwzReference);

@DllImport("hlink")
HRESULT HlinkCreateShortcut(uint grfHLSHORTCUTF, IHlink pihl, const(wchar)* pwzDir, const(wchar)* pwzFileName, 
                            ushort** ppwzShortcutFile, uint dwReserved);

@DllImport("hlink")
HRESULT HlinkCreateShortcutFromMoniker(uint grfHLSHORTCUTF, IMoniker pimkTarget, const(wchar)* pwzLocation, 
                                       const(wchar)* pwzDir, const(wchar)* pwzFileName, ushort** ppwzShortcutFile, 
                                       uint dwReserved);

@DllImport("hlink")
HRESULT HlinkCreateShortcutFromString(uint grfHLSHORTCUTF, const(wchar)* pwzTarget, const(wchar)* pwzLocation, 
                                      const(wchar)* pwzDir, const(wchar)* pwzFileName, ushort** ppwzShortcutFile, 
                                      uint dwReserved);

@DllImport("hlink")
HRESULT HlinkResolveShortcut(const(wchar)* pwzShortcutFileName, IHlinkSite pihlsite, uint dwSiteData, 
                             IUnknown piunkOuter, const(GUID)* riid, void** ppvObj);

@DllImport("hlink")
HRESULT HlinkResolveShortcutToMoniker(const(wchar)* pwzShortcutFileName, IMoniker* ppimkTarget, 
                                      ushort** ppwzLocation);

@DllImport("hlink")
HRESULT HlinkResolveShortcutToString(const(wchar)* pwzShortcutFileName, ushort** ppwzTarget, ushort** ppwzLocation);

@DllImport("hlink")
HRESULT HlinkIsShortcut(const(wchar)* pwzFileName);

@DllImport("hlink")
HRESULT HlinkGetValueFromParams(const(wchar)* pwzParams, const(wchar)* pwzName, ushort** ppwzValue);

@DllImport("hlink")
HRESULT HlinkTranslateURL(const(wchar)* pwzURL, uint grfFlags, ushort** ppwzTranslatedURL);

@DllImport("api-ms-win-core-path-l1-1-0")
BOOL PathIsUNCEx(const(wchar)* pszPath, ushort** ppszServer);

@DllImport("api-ms-win-core-path-l1-1-0")
BOOL PathCchIsRoot(const(wchar)* pszPath);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchAddBackslashEx(const(wchar)* pszPath, size_t cchPath, ushort** ppszEnd, size_t* pcchRemaining);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchAddBackslash(const(wchar)* pszPath, size_t cchPath);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchRemoveBackslashEx(const(wchar)* pszPath, size_t cchPath, ushort** ppszEnd, size_t* pcchRemaining);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchRemoveBackslash(const(wchar)* pszPath, size_t cchPath);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchSkipRoot(const(wchar)* pszPath, ushort** ppszRootEnd);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchStripToRoot(const(wchar)* pszPath, size_t cchPath);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchRemoveFileSpec(const(wchar)* pszPath, size_t cchPath);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchFindExtension(const(wchar)* pszPath, size_t cchPath, ushort** ppszExt);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchAddExtension(const(wchar)* pszPath, size_t cchPath, const(wchar)* pszExt);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchRenameExtension(const(wchar)* pszPath, size_t cchPath, const(wchar)* pszExt);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchRemoveExtension(const(wchar)* pszPath, size_t cchPath);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchCanonicalizeEx(const(wchar)* pszPathOut, size_t cchPathOut, const(wchar)* pszPathIn, uint dwFlags);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchCanonicalize(const(wchar)* pszPathOut, size_t cchPathOut, const(wchar)* pszPathIn);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchCombineEx(const(wchar)* pszPathOut, size_t cchPathOut, const(wchar)* pszPathIn, 
                         const(wchar)* pszMore, uint dwFlags);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchCombine(const(wchar)* pszPathOut, size_t cchPathOut, const(wchar)* pszPathIn, const(wchar)* pszMore);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchAppendEx(const(wchar)* pszPath, size_t cchPath, const(wchar)* pszMore, uint dwFlags);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchAppend(const(wchar)* pszPath, size_t cchPath, const(wchar)* pszMore);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathCchStripPrefix(const(wchar)* pszPath, size_t cchPath);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathAllocCombine(const(wchar)* pszPathIn, const(wchar)* pszMore, uint dwFlags, ushort** ppszPathOut);

@DllImport("api-ms-win-core-path-l1-1-0")
HRESULT PathAllocCanonicalize(const(wchar)* pszPathIn, uint dwFlags, ushort** ppszPathOut);

@DllImport("api-ms-win-core-psm-appnotify-l1-1-0")
uint RegisterAppStateChangeNotification(PAPPSTATE_CHANGE_ROUTINE Routine, void* Context, 
                                        _APPSTATE_REGISTRATION** Registration);

@DllImport("api-ms-win-core-psm-appnotify-l1-1-0")
void UnregisterAppStateChangeNotification(_APPSTATE_REGISTRATION* Registration);

@DllImport("api-ms-win-core-psm-appnotify-l1-1-1")
uint RegisterAppConstrainedChangeNotification(PAPPCONSTRAIN_CHANGE_ROUTINE Routine, void* Context, 
                                              _APPCONSTRAIN_REGISTRATION** Registration);

@DllImport("api-ms-win-core-psm-appnotify-l1-1-1")
void UnregisterAppConstrainedChangeNotification(_APPCONSTRAIN_REGISTRATION* Registration);


// Interfaces

@GUID("331F1768-05A9-4DDD-B86E-DAE34DDC998A")
struct QueryCancelAutoPlay;

@GUID("3BB4118F-DDFD-4D30-A348-9FB5D6BF1AFE")
struct TimeCategorizer;

@GUID("3C2654C6-7372-4F6B-B310-55D6128F49D2")
struct AlphabeticalCategorizer;

@GUID("8E827C11-33E7-4BC1-B242-8CD9A1C2B304")
struct MergedCategorizer;

@GUID("7AB770C7-0E23-4D7A-8AA2-19BFAD479829")
struct ImageProperties;

@GUID("FBEB8A05-BEEE-4442-804E-409D6C4515E9")
struct CDBurn;

@GUID("A2A9545D-A0C2-42B4-9708-A0B2BADD77C8")
struct StartMenuPin;

@GUID("C827F149-55C1-4D28-935E-57E47CAED973")
struct WebWizardHost;

@GUID("CC6EEFFB-43F6-46C5-9619-51D571967F7D")
struct PublishDropTarget;

@GUID("6B33163C-76A5-4B6C-BF21-45DE9CD503A1")
struct PublishingWizard;

@GUID("ADD36AA8-751A-4579-A266-D66F5202CCBB")
struct InternetPrintOrdering;

@GUID("20B1CB23-6968-4EB9-B7D4-A66D00D07CEE")
struct FolderViewHost;

@GUID("71F96385-DDD6-48D3-A0C1-AE06E8B055FB")
struct ExplorerBrowser;

@GUID("6E33091C-D2F8-4740-B55E-2E11D1477A2C")
struct ImageRecompress;

@GUID("F60AD0A0-E5E1-45CB-B51A-E15B9F8B2934")
struct TrayBandSiteService;

@GUID("E6442437-6C68-4F52-94DD-2CFED267EFB9")
struct TrayDeskBand;

@GUID("4125DD96-E03A-4103-8F70-E0597D803B9C")
struct AttachmentServices;

@GUID("883373C3-BF89-11D1-BE35-080036B11A03")
struct DocPropShellExtension;

@GUID("D197380A-0A79-4DC8-A033-ED882C2FA14B")
struct FSCopyHandler;

@GUID("596AB062-B4D2-4215-9F74-E9109B0A8153")
struct PreviousVersions;

@GUID("AE054212-3535-4430-83ED-D501AA6680E6")
struct NamespaceTreeControl;

@GUID("ACE52D03-E5CD-4B20-82FF-E71B11BEAE1D")
struct IENamespaceTreeControl;

@GUID("1968106D-F3B5-44CF-890E-116FCB9ECEF1")
struct ApplicationAssociationRegistrationUI;

@GUID("924CCC1B-6562-4C85-8657-D177925222B6")
struct DesktopGadget;

@GUID("29CE1D46-B481-4AA0-A08A-D3EBC8ACA402")
struct AccessibilityDockingService;

@GUID("11DBB47C-A525-400B-9E80-A54615A090C0")
struct ExecuteFolder;

@GUID("AA509086-5CA9-4C25-8F95-589D3C07B48A")
struct VirtualDesktopManager;

@GUID("7CCDF9F4-E576-455A-8BC7-F6EC68D6F063")
struct StorageProviderBanners;

@GUID("C2CF3110-460E-4FC1-B9D0-8A1C0C9CC4BD")
struct DesktopWallpaper;

@GUID("00021400-0000-0000-C000-000000000046")
struct ShellDesktop;

@GUID("F3364BA0-65B9-11CE-A9BA-00AA004AE837")
struct ShellFSFolder;

@GUID("208D2C60-3AEA-1069-A2D7-08002B30309D")
struct NetworkPlaces;

@GUID("00021401-0000-0000-C000-000000000046")
struct ShellLink;

@GUID("94357B53-CA29-4B78-83AE-E8FE7409134F")
struct DriveSizeCategorizer;

@GUID("B0A8F3CF-4333-4BAB-8873-1CCB1CADA48B")
struct DriveTypeCategorizer;

@GUID("B5607793-24AC-44C7-82E2-831726AA6CB7")
struct FreeSpaceCategorizer;

@GUID("55D7B852-F6D1-42F2-AA75-8728A1B2D264")
struct SizeCategorizer;

@GUID("D912F8CF-0396-4915-884E-FB425D32943B")
struct PropertiesUI;

@GUID("0010890E-8789-413C-ADBC-48F5B511B3AF")
struct UserNotification;

@GUID("56FDF344-FD6D-11D0-958A-006097C9A090")
struct TaskbarList;

@GUID("9AC9FBE1-E0A2-4AD6-B4EE-E212013EA917")
struct ShellItem;

@GUID("72EB61E0-8672-4303-9175-F2E4C68B2E7C")
struct NamespaceWalker;

@GUID("3AD05575-8857-4850-9277-11B85BDB8E09")
struct FileOperation;

@GUID("DC1C5A9C-E88A-4DDE-A5A1-60F82A20AEF7")
struct FileOpenDialog;

@GUID("C0B4E2F3-BA21-4773-8DBA-335EC946EB8B")
struct FileSaveDialog;

@GUID("4DF0C730-DF9D-4AE3-9153-AA6B82E9795A")
struct KnownFolderManager;

@GUID("49F371E1-8C5C-4D9C-9A3B-54A6827F513C")
struct SharingConfigurationManager;

@GUID("7007ACC7-3202-11D1-AAD2-00805FC1270E")
struct NetworkConnections;

@GUID("D6277990-4C6A-11CF-8D87-00AA0060F5BF")
struct ScheduledTasks;

@GUID("591209C7-767B-42B2-9FBA-44EE4615F2C7")
struct ApplicationAssociationRegistration;

@GUID("14010E02-BBBD-41F0-88E3-EDA371216584")
struct SearchFolderItemFactory;

@GUID("06622D85-6856-4460-8DE1-A81921B41C4B")
struct OpenControlPanel;

@GUID("9E56BE60-C50F-11CF-9A2C-00A0C90A90CE")
struct MailRecipient;

@GUID("F02C1A0D-BE21-4350-88B0-7367FC96EF3C")
struct NetworkExplorerFolder;

@GUID("77F10CF0-3DB5-4966-B520-B7C54FD35ED6")
struct DestinationList;

@GUID("86C14003-4D6B-4EF3-A7B4-0506663B2E68")
struct ApplicationDestinations;

@GUID("86BEC222-30F2-47E0-9F25-60D11CD75C28")
struct ApplicationDocumentLists;

@GUID("DE77BA04-3C92-4D11-A1A5-42352A53E0E3")
struct HomeGroup;

@GUID("D9B3211D-E57F-4426-AAEF-30A806ADD397")
struct ShellLibrary;

@GUID("273EB5E7-88B0-4843-BFEF-E2C81D43AAE5")
struct AppStartupLink;

@GUID("2D3468C1-36A7-43B6-AC24-D3F02FD9607A")
struct EnumerableObjectCollection;

@GUID("D5120AA3-46BA-44C5-822D-CA8092C1FC72")
struct FrameworkInputPane;

@GUID("C63382BE-7933-48D0-9AC8-85FB46BE2FDD")
struct DefFolderMenu;

@GUID("7E5FE3D9-985F-4908-91F9-EE19F9FD1514")
struct AppVisibility;

@GUID("4ED3A719-CEA8-4BD9-910D-E252F997AFC2")
struct AppShellVerbHandler;

@GUID("E44E9428-BDBC-4987-A099-40DC8FD255E7")
struct ExecuteUnknown;

@GUID("B1AEC16F-2383-4852-B0E9-8F0B1DC66B4D")
struct PackageDebugSettings;

@GUID("6B273FC5-61FD-4918-95A2-C3B5E9D7F581")
struct SuspensionDependencyManager;

@GUID("45BA127D-10A8-46EA-8AB7-56EA9078943C")
struct ApplicationActivationManager;

@GUID("958A6FB5-DCB2-4FAF-AAFD-7FB054AD1A3B")
struct ApplicationDesignModeSettings;

@GUID("9BA05971-F6A8-11CF-A442-00A0C90A8F39")
struct ShellFolderViewOC;

@GUID("2FE352EA-FD1F-11D2-B1F4-00C04F8EEB3E")
struct ShellFolderItem;

@GUID("11219420-1768-11D1-95BE-00609797EA4F")
struct ShellLinkObject;

@GUID("62112AA1-EBE4-11CF-A5FB-0020AFE7292D")
struct ShellFolderView;

@GUID("13709620-C279-11CE-A49E-444553540000")
struct Shell;

@GUID("0A89A860-D7B1-11CE-8350-444553540000")
struct ShellDispatchInproc;

@GUID("C4EE31F3-4768-11D2-BE5C-00A0C9A83DA1")
struct FileSearchBand;

@GUID("60B78E88-EAD8-445C-9CFD-0B87F74EA6CD")
struct PasswordCredentialProvider;

@GUID("6F45DC1E-5384-457A-BC13-2CD81B0D28ED")
struct V1PasswordCredentialProvider;

@GUID("CB82EA12-9F71-446D-89E1-8D0924E1256E")
struct PINLogonCredentialProvider;

@GUID("3DD6BEC0-8193-4FFE-AE25-E08E39EA4063")
struct NPCredentialProvider;

@GUID("8FD7E19C-3BF7-489B-A72C-846AB3678C96")
struct SmartcardCredentialProvider;

@GUID("8BF9A910-A8FF-457F-999F-A5CA10B4A885")
struct V1SmartcardCredentialProvider;

@GUID("94596C7E-3744-41CE-893E-BBF09122F76A")
struct SmartcardPinProvider;

@GUID("1B283861-754F-4022-AD47-A5EAAA618894")
struct SmartcardReaderSelectionProvider;

@GUID("1EE7337F-85AC-45E2-A23C-37C753209769")
struct SmartcardWinRTProvider;

@GUID("25CBB996-92ED-457E-B28C-4774084BD562")
struct GenericCredentialProvider;

@GUID("5537E283-B1E7-4EF8-9C6E-7AB0AFE5056D")
struct RASProvider;

@GUID("07AA0886-CC8D-4E19-A410-1C75AF686E62")
struct OnexCredentialProvider;

@GUID("33C86CD6-705F-4BA1-9ADB-67070B837775")
struct OnexPlapSmartcardCredentialProvider;

@GUID("503739D0-4C5E-4CFD-B3BA-D881334F0DF2")
struct VaultProvider;

@GUID("BEC09223-B018-416D-A0AC-523971B639F5")
struct WinBioCredentialProvider;

@GUID("AC3AC249-E820-4343-A65B-377AC634DC09")
struct V1WinBioCredentialProvider;

@GUID("1202DB60-1DAC-42C5-AED5-1ABDD432248E")
struct SyncMgrClient;

@GUID("1A1F4206-0688-4E7F-BE03-D82EC69DF9A5")
struct SyncMgrControl;

@GUID("8D8B8E30-C451-421B-8553-D2976AFA648C")
struct SyncMgrScheduleWizard;

@GUID("9C73F5E5-7AE7-4E32-A8E8-8D23B85255BF")
struct SyncMgrFolder;

@GUID("2E9E59C0-B437-4981-A647-9C34B9B90891")
struct SyncSetupFolder;

@GUID("289978AC-A101-4341-A817-21EBA7FD046D")
struct ConflictFolder;

@GUID("71D99464-3B6B-475C-B241-E15883207529")
struct SyncResultsFolder;

@GUID("7A0F6AB7-ED84-46B6-B47E-02AA159A152B")
struct SimpleConflictPresenter;

@GUID("2853ADD3-F096-4C63-A78F-7FA3EA837FB7")
struct InputPanelConfiguration;

@GUID("50EF4544-AC9F-4A8E-B21B-8A26180DB13F")
struct LocalThumbnailCache;

@GUID("4DB26476-6787-4046-B836-E8412A9E8A27")
struct SharedBitmap;

@GUID("66E4E4FB-F385-4DD0-8D74-A2EFD1BC6178")
struct ShellImageDataFactory;

@GUID("6295DF27-35EE-11D1-8707-00C04FD93327")
struct SyncMgr;

@GUID("CBE0FED3-4B91-4E90-8354-8A8C84EC6872")
struct ThumbnailStreamCache;

@GUID("8278F931-2A3E-11D2-838F-00C04FD918D0")
struct TrackShellMenu;

@GUID("17B75166-928F-417D-9685-64AA135565C1")
struct ImageTranscode;

@GUID("4955DD33-B159-11D0-8FCF-00AA006BCC59")
struct CActiveIMM;

@GUID("99180163-DA16-101A-935C-444553540000")
interface INotifyReplica : IUnknown
{
    HRESULT YouAreAReplica(uint ulcOtherReplicas, char* rgpmkOtherReplicas);
}

@GUID("B7D14566-0509-4CCE-A71F-0A554233BD9B")
interface IInitializeWithFile : IUnknown
{
    HRESULT Initialize(const(wchar)* pszFilePath, uint grfMode);
}

@GUID("B824B49D-22AC-4161-AC8A-9916E8FA3F7F")
interface IInitializeWithStream : IUnknown
{
    HRESULT Initialize(IStream pstream, uint grfMode);
}

@GUID("71604B0F-97B0-4764-8577-2F13E98A1422")
interface INamedPropertyStore : IUnknown
{
    HRESULT GetNamedValue(const(wchar)* pszName, PROPVARIANT* ppropvar);
    HRESULT SetNamedValue(const(wchar)* pszName, const(PROPVARIANT)* propvar);
    HRESULT GetNameCount(uint* pdwCount);
    HRESULT GetNameAt(uint iProp, BSTR* pbstrName);
}

@GUID("FC0CA0A7-C316-4FD2-9031-3E628E6D4F23")
interface IObjectWithPropertyKey : IUnknown
{
    HRESULT SetPropertyKey(const(PROPERTYKEY)* key);
    HRESULT GetPropertyKey(PROPERTYKEY* pkey);
}

@GUID("40D4577F-E237-4BDB-BD69-58F089431B6A")
interface IDelayedPropertyStoreFactory : IPropertyStoreFactory
{
    HRESULT GetDelayedPropertyStore(GETPROPERTYSTOREFLAGS flags, uint dwStoreId, const(GUID)* riid, void** ppv);
}

@GUID("E318AD57-0AA0-450F-ACA5-6FAB7103D917")
interface IPersistSerializedPropStorage : IUnknown
{
    HRESULT SetFlags(int flags);
    HRESULT SetPropertyStorage(char* psps, uint cb);
    HRESULT GetPropertyStorage(SERIALIZEDPROPSTORAGE** ppsps, uint* pcb);
}

@GUID("77EFFA68-4F98-4366-BA72-573B3D880571")
interface IPersistSerializedPropStorage2 : IPersistSerializedPropStorage
{
    HRESULT GetPropertyStorageSize(uint* pcb);
    HRESULT GetPropertyStorageBuffer(char* psps, uint cb, uint* pcbWritten);
}

@GUID("75121952-E0D0-43E5-9380-1D80483ACF72")
interface ICreateObject : IUnknown
{
    HRESULT CreateObject(const(GUID)* clsid, IUnknown pUnkOuter, const(GUID)* riid, void** ppv);
}

@GUID("92CA9DCD-5622-4BBA-A805-5E9F541BD8C9")
interface IObjectArray : IUnknown
{
    HRESULT GetCount(uint* pcObjects);
    HRESULT GetAt(uint uiIndex, const(GUID)* riid, void** ppv);
}

@GUID("5632B1A4-E38A-400A-928A-D4CD63230295")
interface IObjectCollection : IObjectArray
{
    HRESULT AddObject(IUnknown punk);
    HRESULT AddFromArray(IObjectArray poaSource);
    HRESULT RemoveObjectAt(uint uiIndex);
    HRESULT Clear();
}

@GUID("000214E4-0000-0000-C000-000000000046")
interface IContextMenu : IUnknown
{
    HRESULT QueryContextMenu(HMENU hmenu, uint indexMenu, uint idCmdFirst, uint idCmdLast, uint uFlags);
    HRESULT InvokeCommand(CMINVOKECOMMANDINFO* pici);
    HRESULT GetCommandString(size_t idCmd, uint uType, uint* pReserved, char* pszName, uint cchMax);
}

@GUID("000214F4-0000-0000-C000-000000000046")
interface IContextMenu2 : IContextMenu
{
    HRESULT HandleMenuMsg(uint uMsg, WPARAM wParam, LPARAM lParam);
}

@GUID("BCFCE0A0-EC17-11D0-8D10-00A0C90F2719")
interface IContextMenu3 : IContextMenu2
{
    HRESULT HandleMenuMsg2(uint uMsg, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
}

@GUID("7F9185B0-CB92-43C5-80A9-92277A4F7B54")
interface IExecuteCommand : IUnknown
{
    HRESULT SetKeyState(uint grfKeyState);
    HRESULT SetParameters(const(wchar)* pszParameters);
    HRESULT SetPosition(POINT pt);
    HRESULT SetShowWindow(int nShow);
    HRESULT SetNoShowUI(BOOL fNoShowUI);
    HRESULT SetDirectory(const(wchar)* pszDirectory);
    HRESULT Execute();
}

@GUID("000214EA-0000-0000-C000-000000000046")
interface IPersistFolder : IPersist
{
    HRESULT Initialize(ITEMIDLIST* pidl);
}

@GUID("85788D00-6807-11D0-B810-00C04FD706EC")
interface IRunnableTask : IUnknown
{
    HRESULT Run();
    HRESULT Kill(BOOL bWait);
    HRESULT Suspend();
    HRESULT Resume();
    uint    IsRunning();
}

@GUID("6CCB7BE0-6807-11D0-B810-00C04FD706EC")
interface IShellTaskScheduler : IUnknown
{
    HRESULT AddTask(IRunnableTask prt, const(GUID)* rtoid, size_t lParam, uint dwPriority);
    HRESULT RemoveTasks(const(GUID)* rtoid, size_t lParam, BOOL bWaitIfRunning);
    uint    CountTasks(const(GUID)* rtoid);
    HRESULT Status(uint dwReleaseStatus, uint dwThreadTimeout);
}

@GUID("1AC3D9F0-175C-11D1-95BE-00609797EA4F")
interface IPersistFolder2 : IPersistFolder
{
    HRESULT GetCurFolder(ITEMIDLIST** ppidl);
}

@GUID("CEF04FDF-FE72-11D2-87A5-00C04F6837CF")
interface IPersistFolder3 : IPersistFolder2
{
    HRESULT InitializeEx(IBindCtx pbc, ITEMIDLIST* pidlRoot, const(PERSIST_FOLDER_TARGET_INFO)* ppfti);
    HRESULT GetFolderTargetInfo(PERSIST_FOLDER_TARGET_INFO* ppfti);
}

@GUID("1079ACFC-29BD-11D3-8E0D-00C04F6837D5")
interface IPersistIDList : IPersist
{
    HRESULT SetIDList(ITEMIDLIST* pidl);
    HRESULT GetIDList(ITEMIDLIST** ppidl);
}

@GUID("000214F2-0000-0000-C000-000000000046")
interface IEnumIDList : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumIDList* ppenum);
}

@GUID("D0191542-7954-4908-BC06-B2360BBE45BA")
interface IEnumFullIDList : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumFullIDList* ppenum);
}

@GUID("D97B5AAC-C792-433C-975D-35C4EADC7A9D")
interface IFileSyncMergeHandler : IUnknown
{
    HRESULT Merge(const(wchar)* localFilePath, const(wchar)* serverFilePath, MERGE_UPDATE_STATUS* updateStatus);
    HRESULT ShowResolveConflictUIAsync(const(wchar)* localFilePath, ptrdiff_t monitorToDisplayOn);
}

@GUID("6A9D9026-0E6E-464C-B000-42ECC07DE673")
interface IObjectWithFolderEnumMode : IUnknown
{
    HRESULT SetMode(FOLDER_ENUM_MODE feMode);
    HRESULT GetMode(FOLDER_ENUM_MODE* pfeMode);
}

@GUID("67EFED0E-E827-4408-B493-78F3982B685C")
interface IParseAndCreateItem : IUnknown
{
    HRESULT SetItem(IShellItem psi);
    HRESULT GetItem(const(GUID)* riid, void** ppv);
}

@GUID("000214E6-0000-0000-C000-000000000046")
interface IShellFolder : IUnknown
{
    HRESULT ParseDisplayName(HWND hwnd, IBindCtx pbc, const(wchar)* pszDisplayName, uint* pchEaten, 
                             ITEMIDLIST** ppidl, uint* pdwAttributes);
    HRESULT EnumObjects(HWND hwnd, uint grfFlags, IEnumIDList* ppenumIDList);
    HRESULT BindToObject(ITEMIDLIST* pidl, IBindCtx pbc, const(GUID)* riid, void** ppv);
    HRESULT BindToStorage(ITEMIDLIST* pidl, IBindCtx pbc, const(GUID)* riid, void** ppv);
    HRESULT CompareIDs(LPARAM lParam, ITEMIDLIST* pidl1, ITEMIDLIST* pidl2);
    HRESULT CreateViewObject(HWND hwndOwner, const(GUID)* riid, void** ppv);
    HRESULT GetAttributesOf(uint cidl, char* apidl, uint* rgfInOut);
    HRESULT GetUIObjectOf(HWND hwndOwner, uint cidl, char* apidl, const(GUID)* riid, uint* rgfReserved, void** ppv);
    HRESULT GetDisplayNameOf(ITEMIDLIST* pidl, uint uFlags, STRRET* pName);
    HRESULT SetNameOf(HWND hwnd, ITEMIDLIST* pidl, const(wchar)* pszName, uint uFlags, ITEMIDLIST** ppidlOut);
}

@GUID("0E700BE1-9DB6-11D1-A1CE-00C04FD75D13")
interface IEnumExtraSearch : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumExtraSearch* ppenum);
}

@GUID("93F2F68C-1D1B-11D3-A30E-00C04F79ABD1")
interface IShellFolder2 : IShellFolder
{
    HRESULT GetDefaultSearchGUID(GUID* pguid);
    HRESULT EnumSearches(IEnumExtraSearch* ppenum);
    HRESULT GetDefaultColumn(uint dwRes, uint* pSort, uint* pDisplay);
    HRESULT GetDefaultColumnState(uint iColumn, uint* pcsFlags);
    HRESULT GetDetailsEx(ITEMIDLIST* pidl, const(PROPERTYKEY)* pscid, VARIANT* pv);
    HRESULT GetDetailsOf(ITEMIDLIST* pidl, uint iColumn, SHELLDETAILS* psd);
    HRESULT MapColumnToSCID(uint iColumn, PROPERTYKEY* pscid);
}

@GUID("000214E3-0000-0000-C000-000000000046")
interface IShellView : IOleWindow
{
    HRESULT TranslateAcceleratorA(MSG* pmsg);
    HRESULT EnableModeless(BOOL fEnable);
    HRESULT UIActivate(uint uState);
    HRESULT Refresh();
    HRESULT CreateViewWindow(IShellView psvPrevious, FOLDERSETTINGS* pfs, IShellBrowser psb, RECT* prcView, 
                             HWND* phWnd);
    HRESULT DestroyViewWindow();
    HRESULT GetCurrentInfo(FOLDERSETTINGS* pfs);
    HRESULT AddPropertySheetPages(uint dwReserved, LPFNSVADDPROPSHEETPAGE pfn, LPARAM lparam);
    HRESULT SaveViewState();
    HRESULT SelectItem(ITEMIDLIST* pidlItem, uint uFlags);
    HRESULT GetItemObject(uint uItem, const(GUID)* riid, void** ppv);
}

@GUID("88E39E80-3578-11CF-AE69-08002B2E1262")
interface IShellView2 : IShellView
{
    HRESULT GetView(GUID* pvid, uint uView);
    HRESULT CreateViewWindow2(SV2CVW2_PARAMS* lpParams);
    HRESULT HandleRename(ITEMIDLIST* pidlNew);
    HRESULT SelectAndPositionItem(ITEMIDLIST* pidlItem, uint uFlags, POINT* ppt);
}

@GUID("CDE725B0-CCC9-4519-917E-325D72FAB4CE")
interface IFolderView : IUnknown
{
    HRESULT GetCurrentViewMode(uint* pViewMode);
    HRESULT SetCurrentViewMode(uint ViewMode);
    HRESULT GetFolder(const(GUID)* riid, void** ppv);
    HRESULT Item(int iItemIndex, ITEMIDLIST** ppidl);
    HRESULT ItemCount(uint uFlags, int* pcItems);
    HRESULT Items(uint uFlags, const(GUID)* riid, void** ppv);
    HRESULT GetSelectionMarkedItem(int* piItem);
    HRESULT GetFocusedItem(int* piItem);
    HRESULT GetItemPosition(ITEMIDLIST* pidl, POINT* ppt);
    HRESULT GetSpacing(POINT* ppt);
    HRESULT GetDefaultSpacing(POINT* ppt);
    HRESULT GetAutoArrange();
    HRESULT SelectItem(int iItem, uint dwFlags);
    HRESULT SelectAndPositionItems(uint cidl, char* apidl, char* apt, uint dwFlags);
}

@GUID("1AF3A467-214F-4298-908E-06B03E0B39F9")
interface IFolderView2 : IFolderView
{
    HRESULT SetGroupBy(const(PROPERTYKEY)* key, BOOL fAscending);
    HRESULT GetGroupBy(PROPERTYKEY* pkey, int* pfAscending);
    HRESULT SetViewProperty(ITEMIDLIST* pidl, const(PROPERTYKEY)* propkey, const(PROPVARIANT)* propvar);
    HRESULT GetViewProperty(ITEMIDLIST* pidl, const(PROPERTYKEY)* propkey, PROPVARIANT* ppropvar);
    HRESULT SetTileViewProperties(ITEMIDLIST* pidl, const(wchar)* pszPropList);
    HRESULT SetExtendedTileViewProperties(ITEMIDLIST* pidl, const(wchar)* pszPropList);
    HRESULT SetText(FVTEXTTYPE iType, const(wchar)* pwszText);
    HRESULT SetCurrentFolderFlags(uint dwMask, uint dwFlags);
    HRESULT GetCurrentFolderFlags(uint* pdwFlags);
    HRESULT GetSortColumnCount(int* pcColumns);
    HRESULT SetSortColumns(char* rgSortColumns, int cColumns);
    HRESULT GetSortColumns(char* rgSortColumns, int cColumns);
    HRESULT GetItem(int iItem, const(GUID)* riid, void** ppv);
    HRESULT GetVisibleItem(int iStart, BOOL fPrevious, int* piItem);
    HRESULT GetSelectedItem(int iStart, int* piItem);
    HRESULT GetSelection(BOOL fNoneImpliesFolder, IShellItemArray* ppsia);
    HRESULT GetSelectionState(ITEMIDLIST* pidl, uint* pdwFlags);
    HRESULT InvokeVerbOnSelection(const(char)* pszVerb);
    HRESULT SetViewModeAndIconSize(FOLDERVIEWMODE uViewMode, int iImageSize);
    HRESULT GetViewModeAndIconSize(FOLDERVIEWMODE* puViewMode, int* piImageSize);
    HRESULT SetGroupSubsetCount(uint cVisibleRows);
    HRESULT GetGroupSubsetCount(uint* pcVisibleRows);
    HRESULT SetRedraw(BOOL fRedrawOn);
    HRESULT IsMoveInSameFolder();
    HRESULT DoRename();
}

@GUID("AE8C987D-8797-4ED3-BE72-2A47DD938DB0")
interface IFolderViewSettings : IUnknown
{
    HRESULT GetColumnPropertyList(const(GUID)* riid, void** ppv);
    HRESULT GetGroupByProperty(PROPERTYKEY* pkey, int* pfGroupAscending);
    HRESULT GetViewMode(FOLDERLOGICALVIEWMODE* plvm);
    HRESULT GetIconSize(uint* puIconSize);
    HRESULT GetFolderFlags(FOLDERFLAGS* pfolderMask, FOLDERFLAGS* pfolderFlags);
    HRESULT GetSortColumns(char* rgSortColumns, uint cColumnsIn, uint* pcColumnsOut);
    HRESULT GetGroupSubsetCount(uint* pcVisibleRows);
}

@GUID("6E0F9881-42A8-4F2A-97F8-8AF4E026D92D")
interface IInitializeNetworkFolder : IUnknown
{
    HRESULT Initialize(ITEMIDLIST* pidl, ITEMIDLIST* pidlTarget, uint uDisplayType, const(wchar)* pszResName, 
                       const(wchar)* pszProvider);
}

@GUID("CEB38218-C971-47BB-A703-F0BC99CCDB81")
interface INetworkFolderInternal : IUnknown
{
    HRESULT GetResourceDisplayType(uint* displayType);
    HRESULT GetIDList(ITEMIDLIST** idList);
    HRESULT GetProvider(uint itemIdCount, char* itemIds, uint providerMaxLength, const(wchar)* provider);
}

@GUID("196BF9A5-B346-4EF0-AA1E-5DCDB76768B1")
interface IPreviewHandlerVisuals : IUnknown
{
    HRESULT SetBackgroundColor(uint color);
    HRESULT SetFont(const(LOGFONTW)* plf);
    HRESULT SetTextColor(uint color);
}

@GUID("000214F1-0000-0000-C000-000000000046")
interface ICommDlgBrowser : IUnknown
{
    HRESULT OnDefaultCommand(IShellView ppshv);
    HRESULT OnStateChange(IShellView ppshv, uint uChange);
    HRESULT IncludeObject(IShellView ppshv, ITEMIDLIST* pidl);
}

@GUID("10339516-2894-11D2-9039-00C04F8EEB3E")
interface ICommDlgBrowser2 : ICommDlgBrowser
{
    HRESULT Notify(IShellView ppshv, uint dwNotifyType);
    HRESULT GetDefaultMenuText(IShellView ppshv, const(wchar)* pszText, int cchMax);
    HRESULT GetViewFlags(uint* pdwFlags);
}

@GUID("D8EC27BB-3F3B-4042-B10A-4ACFD924D453")
interface IColumnManager : IUnknown
{
    HRESULT SetColumnInfo(const(PROPERTYKEY)* propkey, const(CM_COLUMNINFO)* pcmci);
    HRESULT GetColumnInfo(const(PROPERTYKEY)* propkey, CM_COLUMNINFO* pcmci);
    HRESULT GetColumnCount(CM_ENUM_FLAGS dwFlags, uint* puCount);
    HRESULT GetColumns(CM_ENUM_FLAGS dwFlags, char* rgkeyOrder, uint cColumns);
    HRESULT SetColumns(char* rgkeyOrder, uint cVisible);
}

@GUID("C0A651F5-B48B-11D2-B5ED-006097C686F6")
interface IFolderFilterSite : IUnknown
{
    HRESULT SetFilter(IUnknown punk);
}

@GUID("9CC22886-DC8E-11D2-B1D0-00C04F8EEB3E")
interface IFolderFilter : IUnknown
{
    HRESULT ShouldShow(IShellFolder psf, ITEMIDLIST* pidlFolder, ITEMIDLIST* pidlItem);
    HRESULT GetEnumFlags(IShellFolder psf, ITEMIDLIST* pidlFolder, HWND* phwnd, uint* pgrfFlags);
}

@GUID("F1DB8392-7331-11D0-8C99-00A0C92DBFE8")
interface IInputObjectSite : IUnknown
{
    HRESULT OnFocusChangeIS(IUnknown punkObj, BOOL fSetFocus);
}

@GUID("68284FAA-6A48-11D0-8C78-00C04FD918B4")
interface IInputObject : IUnknown
{
    HRESULT UIActivateIO(BOOL fActivate, MSG* pMsg);
    HRESULT HasFocusIO();
    HRESULT TranslateAcceleratorIO(MSG* pMsg);
}

@GUID("6915C085-510B-44CD-94AF-28DFA56CF92B")
interface IInputObject2 : IInputObject
{
    HRESULT TranslateAcceleratorGlobal(MSG* pMsg);
}

@GUID("000214E5-0000-0000-C000-000000000046")
interface IShellIcon : IUnknown
{
    HRESULT GetIconOf(ITEMIDLIST* pidl, uint flags, int* pIconIndex);
}

@GUID("000214E2-0000-0000-C000-000000000046")
interface IShellBrowser : IOleWindow
{
    HRESULT InsertMenusSB(HMENU hmenuShared, OleMenuGroupWidths* lpMenuWidths);
    HRESULT SetMenuSB(HMENU hmenuShared, ptrdiff_t holemenuRes, HWND hwndActiveObject);
    HRESULT RemoveMenusSB(HMENU hmenuShared);
    HRESULT SetStatusTextSB(const(wchar)* pszStatusText);
    HRESULT EnableModelessSB(BOOL fEnable);
    HRESULT TranslateAcceleratorSB(MSG* pmsg, ushort wID);
    HRESULT BrowseObject(ITEMIDLIST* pidl, uint wFlags);
    HRESULT GetViewStateStream(uint grfMode, IStream* ppStrm);
    HRESULT GetControlWindow(uint id, HWND* phwnd);
    HRESULT SendControlMsg(uint id, uint uMsg, WPARAM wParam, LPARAM lParam, LRESULT* pret);
    HRESULT QueryActiveShellView(IShellView* ppshv);
    HRESULT OnViewWindowActive(IShellView pshv);
    HRESULT SetToolbarItems(char* lpButtons, uint nButtons, uint uFlags);
}

@GUID("CB728B20-F786-11CE-92AD-00AA00A74CD0")
interface IProfferService : IUnknown
{
    HRESULT ProfferService(const(GUID)* guidService, IServiceProvider psp, uint* pdwCookie);
    HRESULT RevokeService(uint dwCookie);
}

@GUID("43826D1E-E718-42EE-BC55-A1E261C37BFE")
interface IShellItem : IUnknown
{
    HRESULT BindToHandler(IBindCtx pbc, const(GUID)* bhid, const(GUID)* riid, void** ppv);
    HRESULT GetParent(IShellItem* ppsi);
    HRESULT GetDisplayName(SIGDN sigdnName, ushort** ppszName);
    HRESULT GetAttributes(uint sfgaoMask, uint* psfgaoAttribs);
    HRESULT Compare(IShellItem psi, uint hint, int* piOrder);
}

@GUID("7E9FB0D3-919F-4307-AB2E-9B1860310C93")
interface IShellItem2 : IShellItem
{
    HRESULT GetPropertyStore(GETPROPERTYSTOREFLAGS flags, const(GUID)* riid, void** ppv);
    HRESULT GetPropertyStoreWithCreateObject(GETPROPERTYSTOREFLAGS flags, IUnknown punkCreateObject, 
                                             const(GUID)* riid, void** ppv);
    HRESULT GetPropertyStoreForKeys(char* rgKeys, uint cKeys, GETPROPERTYSTOREFLAGS flags, const(GUID)* riid, 
                                    void** ppv);
    HRESULT GetPropertyDescriptionList(const(PROPERTYKEY)* keyType, const(GUID)* riid, void** ppv);
    HRESULT Update(IBindCtx pbc);
    HRESULT GetProperty(const(PROPERTYKEY)* key, PROPVARIANT* ppropvar);
    HRESULT GetCLSID(const(PROPERTYKEY)* key, GUID* pclsid);
    HRESULT GetFileTime(const(PROPERTYKEY)* key, FILETIME* pft);
    HRESULT GetInt32(const(PROPERTYKEY)* key, int* pi);
    HRESULT GetString(const(PROPERTYKEY)* key, ushort** ppsz);
    HRESULT GetUInt32(const(PROPERTYKEY)* key, uint* pui);
    HRESULT GetUInt64(const(PROPERTYKEY)* key, ulong* pull);
    HRESULT GetBool(const(PROPERTYKEY)* key, int* pf);
}

@GUID("BCC18B79-BA16-442F-80C4-8A59C30C463B")
interface IShellItemImageFactory : IUnknown
{
    HRESULT GetImage(SIZE size, int flags, HBITMAP* phbm);
}

@GUID("70629033-E363-4A28-A567-0DB78006E6D7")
interface IEnumShellItems : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumShellItems* ppenum);
}

@GUID("D594D0D8-8DA7-457B-B3B4-CE5DBAAC0B88")
interface ITransferAdviseSink : IUnknown
{
    HRESULT UpdateProgress(ulong ullSizeCurrent, ulong ullSizeTotal, int nFilesCurrent, int nFilesTotal, 
                           int nFoldersCurrent, int nFoldersTotal);
    HRESULT UpdateTransferState(uint ts);
    HRESULT ConfirmOverwrite(IShellItem psiSource, IShellItem psiDestParent, const(wchar)* pszName);
    HRESULT ConfirmEncryptionLoss(IShellItem psiSource);
    HRESULT FileFailure(IShellItem psi, const(wchar)* pszItem, HRESULT hrError, const(wchar)* pszRename, 
                        uint cchRename);
    HRESULT SubStreamFailure(IShellItem psi, const(wchar)* pszStreamName, HRESULT hrError);
    HRESULT PropertyFailure(IShellItem psi, const(PROPERTYKEY)* pkey, HRESULT hrError);
}

@GUID("00ADB003-BDE9-45C6-8E29-D09F9353E108")
interface ITransferSource : IUnknown
{
    HRESULT Advise(ITransferAdviseSink psink, uint* pdwCookie);
    HRESULT Unadvise(uint dwCookie);
    HRESULT SetProperties(IPropertyChangeArray pproparray);
    HRESULT OpenItem(IShellItem psi, uint flags, const(GUID)* riid, void** ppv);
    HRESULT MoveItem(IShellItem psi, IShellItem psiParentDst, const(wchar)* pszNameDst, uint flags, 
                     IShellItem* ppsiNew);
    HRESULT RecycleItem(IShellItem psiSource, IShellItem psiParentDest, uint flags, IShellItem* ppsiNewDest);
    HRESULT RemoveItem(IShellItem psiSource, uint flags);
    HRESULT RenameItem(IShellItem psiSource, const(wchar)* pszNewName, uint flags, IShellItem* ppsiNewDest);
    HRESULT LinkItem(IShellItem psiSource, IShellItem psiParentDest, const(wchar)* pszNewName, uint flags, 
                     IShellItem* ppsiNewDest);
    HRESULT ApplyPropertiesToItem(IShellItem psiSource, IShellItem* ppsiNew);
    HRESULT GetDefaultDestinationName(IShellItem psiSource, IShellItem psiParentDest, ushort** ppszDestinationName);
    HRESULT EnterFolder(IShellItem psiChildFolderDest);
    HRESULT LeaveFolder(IShellItem psiChildFolderDest);
}

@GUID("2DD81FE3-A83C-4DA9-A330-47249D345BA1")
interface IEnumResources : IUnknown
{
    HRESULT Next(uint celt, char* psir, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumResources* ppenumr);
}

@GUID("FF5693BE-2CE0-4D48-B5C5-40817D1ACDB9")
interface IShellItemResources : IUnknown
{
    HRESULT GetAttributes(uint* pdwAttributes);
    HRESULT GetSize(ulong* pullSize);
    HRESULT GetTimes(FILETIME* pftCreation, FILETIME* pftWrite, FILETIME* pftAccess);
    HRESULT SetTimes(const(FILETIME)* pftCreation, const(FILETIME)* pftWrite, const(FILETIME)* pftAccess);
    HRESULT GetResourceDescription(const(SHELL_ITEM_RESOURCE)* pcsir, ushort** ppszDescription);
    HRESULT EnumResources(IEnumResources* ppenumr);
    HRESULT SupportsResource(const(SHELL_ITEM_RESOURCE)* pcsir);
    HRESULT OpenResource(const(SHELL_ITEM_RESOURCE)* pcsir, const(GUID)* riid, void** ppv);
    HRESULT CreateResource(const(SHELL_ITEM_RESOURCE)* pcsir, const(GUID)* riid, void** ppv);
    HRESULT MarkForDelete();
}

@GUID("48ADDD32-3CA5-4124-ABE3-B5A72531B207")
interface ITransferDestination : IUnknown
{
    HRESULT Advise(ITransferAdviseSink psink, uint* pdwCookie);
    HRESULT Unadvise(uint dwCookie);
    HRESULT CreateItem(const(wchar)* pszName, uint dwAttributes, ulong ullSize, uint flags, const(GUID)* riidItem, 
                       void** ppvItem, const(GUID)* riidResources, void** ppvResources);
}

@GUID("04B0F1A7-9490-44BC-96E1-4296A31252E2")
interface IFileOperationProgressSink : IUnknown
{
    HRESULT StartOperations();
    HRESULT FinishOperations(HRESULT hrResult);
    HRESULT PreRenameItem(uint dwFlags, IShellItem psiItem, const(wchar)* pszNewName);
    HRESULT PostRenameItem(uint dwFlags, IShellItem psiItem, const(wchar)* pszNewName, HRESULT hrRename, 
                           IShellItem psiNewlyCreated);
    HRESULT PreMoveItem(uint dwFlags, IShellItem psiItem, IShellItem psiDestinationFolder, 
                        const(wchar)* pszNewName);
    HRESULT PostMoveItem(uint dwFlags, IShellItem psiItem, IShellItem psiDestinationFolder, 
                         const(wchar)* pszNewName, HRESULT hrMove, IShellItem psiNewlyCreated);
    HRESULT PreCopyItem(uint dwFlags, IShellItem psiItem, IShellItem psiDestinationFolder, 
                        const(wchar)* pszNewName);
    HRESULT PostCopyItem(uint dwFlags, IShellItem psiItem, IShellItem psiDestinationFolder, 
                         const(wchar)* pszNewName, HRESULT hrCopy, IShellItem psiNewlyCreated);
    HRESULT PreDeleteItem(uint dwFlags, IShellItem psiItem);
    HRESULT PostDeleteItem(uint dwFlags, IShellItem psiItem, HRESULT hrDelete, IShellItem psiNewlyCreated);
    HRESULT PreNewItem(uint dwFlags, IShellItem psiDestinationFolder, const(wchar)* pszNewName);
    HRESULT PostNewItem(uint dwFlags, IShellItem psiDestinationFolder, const(wchar)* pszNewName, 
                        const(wchar)* pszTemplateName, uint dwFileAttributes, HRESULT hrNew, IShellItem psiNewItem);
    HRESULT UpdateProgress(uint iWorkTotal, uint iWorkSoFar);
    HRESULT ResetTimer();
    HRESULT PauseTimer();
    HRESULT ResumeTimer();
}

@GUID("B63EA76D-1F85-456F-A19C-48159EFA858B")
interface IShellItemArray : IUnknown
{
    HRESULT BindToHandler(IBindCtx pbc, const(GUID)* bhid, const(GUID)* riid, void** ppvOut);
    HRESULT GetPropertyStore(GETPROPERTYSTOREFLAGS flags, const(GUID)* riid, void** ppv);
    HRESULT GetPropertyDescriptionList(const(PROPERTYKEY)* keyType, const(GUID)* riid, void** ppv);
    HRESULT GetAttributes(SIATTRIBFLAGS AttribFlags, uint sfgaoMask, uint* psfgaoAttribs);
    HRESULT GetCount(uint* pdwNumItems);
    HRESULT GetItemAt(uint dwIndex, IShellItem* ppsi);
    HRESULT EnumItems(IEnumShellItems* ppenumShellItems);
}

@GUID("7F73BE3F-FB79-493C-A6C7-7EE14E245841")
interface IInitializeWithItem : IUnknown
{
    HRESULT Initialize(IShellItem psi, uint grfMode);
}

@GUID("1C9CD5BB-98E9-4491-A60F-31AACC72B83C")
interface IObjectWithSelection : IUnknown
{
    HRESULT SetSelection(IShellItemArray psia);
    HRESULT GetSelection(const(GUID)* riid, void** ppv);
}

@GUID("321A6A6A-D61F-4BF3-97AE-14BE2986BB36")
interface IObjectWithBackReferences : IUnknown
{
    HRESULT RemoveBackReferences();
}

@GUID("9AF64809-5864-4C26-A720-C1F78C086EE3")
interface ICategoryProvider : IUnknown
{
    HRESULT CanCategorizeOnSCID(const(PROPERTYKEY)* pscid);
    HRESULT GetDefaultCategory(GUID* pguid, PROPERTYKEY* pscid);
    HRESULT GetCategoryForSCID(const(PROPERTYKEY)* pscid, GUID* pguid);
    HRESULT EnumCategories(IEnumGUID* penum);
    HRESULT GetCategoryName(const(GUID)* pguid, const(wchar)* pszName, uint cch);
    HRESULT CreateCategory(const(GUID)* pguid, const(GUID)* riid, void** ppv);
}

@GUID("A3B14589-9174-49A8-89A3-06A1AE2B9BA7")
interface ICategorizer : IUnknown
{
    HRESULT GetDescription(const(wchar)* pszDesc, uint cch);
    HRESULT GetCategory(uint cidl, char* apidl, char* rgCategoryIds);
    HRESULT GetCategoryInfo(uint dwCategoryId, CATEGORY_INFO* pci);
    HRESULT CompareCategory(CATSORT_FLAGS csfFlags, uint dwCategoryId1, uint dwCategoryId2);
}

@GUID("4657278B-411B-11D2-839A-00C04FD918D0")
interface IDropTargetHelper : IUnknown
{
    HRESULT DragEnter(HWND hwndTarget, IDataObject pDataObject, POINT* ppt, uint dwEffect);
    HRESULT DragLeave();
    HRESULT DragOver(POINT* ppt, uint dwEffect);
    HRESULT Drop(IDataObject pDataObject, POINT* ppt, uint dwEffect);
    HRESULT Show(BOOL fShow);
}

@GUID("DE5BF786-477A-11D2-839D-00C04FD918D0")
interface IDragSourceHelper : IUnknown
{
    HRESULT InitializeFromBitmap(SHDRAGIMAGE* pshdi, IDataObject pDataObject);
    HRESULT InitializeFromWindow(HWND hwnd, POINT* ppt, IDataObject pDataObject);
}

@GUID("000214EE-0000-0000-C000-000000000046")
interface IShellLinkA : IUnknown
{
    HRESULT GetPath(const(char)* pszFile, int cch, WIN32_FIND_DATAA* pfd, uint fFlags);
    HRESULT GetIDList(ITEMIDLIST** ppidl);
    HRESULT SetIDList(ITEMIDLIST* pidl);
    HRESULT GetDescription(const(char)* pszName, int cch);
    HRESULT SetDescription(const(char)* pszName);
    HRESULT GetWorkingDirectory(const(char)* pszDir, int cch);
    HRESULT SetWorkingDirectory(const(char)* pszDir);
    HRESULT GetArguments(const(char)* pszArgs, int cch);
    HRESULT SetArguments(const(char)* pszArgs);
    HRESULT GetHotkey(ushort* pwHotkey);
    HRESULT SetHotkey(ushort wHotkey);
    HRESULT GetShowCmd(int* piShowCmd);
    HRESULT SetShowCmd(int iShowCmd);
    HRESULT GetIconLocation(const(char)* pszIconPath, int cch, int* piIcon);
    HRESULT SetIconLocation(const(char)* pszIconPath, int iIcon);
    HRESULT SetRelativePath(const(char)* pszPathRel, uint dwReserved);
    HRESULT Resolve(HWND hwnd, uint fFlags);
    HRESULT SetPath(const(char)* pszFile);
}

@GUID("000214F9-0000-0000-C000-000000000046")
interface IShellLinkW : IUnknown
{
    HRESULT GetPath(const(wchar)* pszFile, int cch, WIN32_FIND_DATAW* pfd, uint fFlags);
    HRESULT GetIDList(ITEMIDLIST** ppidl);
    HRESULT SetIDList(ITEMIDLIST* pidl);
    HRESULT GetDescription(const(wchar)* pszName, int cch);
    HRESULT SetDescription(const(wchar)* pszName);
    HRESULT GetWorkingDirectory(const(wchar)* pszDir, int cch);
    HRESULT SetWorkingDirectory(const(wchar)* pszDir);
    HRESULT GetArguments(const(wchar)* pszArgs, int cch);
    HRESULT SetArguments(const(wchar)* pszArgs);
    HRESULT GetHotkey(ushort* pwHotkey);
    HRESULT SetHotkey(ushort wHotkey);
    HRESULT GetShowCmd(int* piShowCmd);
    HRESULT SetShowCmd(int iShowCmd);
    HRESULT GetIconLocation(const(wchar)* pszIconPath, int cch, int* piIcon);
    HRESULT SetIconLocation(const(wchar)* pszIconPath, int iIcon);
    HRESULT SetRelativePath(const(wchar)* pszPathRel, uint dwReserved);
    HRESULT Resolve(HWND hwnd, uint fFlags);
    HRESULT SetPath(const(wchar)* pszFile);
}

@GUID("45E2B4AE-B1C3-11D0-B92F-00A0C90312E1")
interface IShellLinkDataList : IUnknown
{
    HRESULT AddDataBlock(void* pDataBlock);
    HRESULT CopyDataBlock(uint dwSig, void** ppDataBlock);
    HRESULT RemoveDataBlock(uint dwSig);
    HRESULT GetFlags(uint* pdwFlags);
    HRESULT SetFlags(uint dwFlags);
}

@GUID("5CD52983-9449-11D2-963A-00C04F79ADF0")
interface IResolveShellLink : IUnknown
{
    HRESULT ResolveShellLink(IUnknown punkLink, HWND hwnd, uint fFlags);
}

@GUID("49FF1172-EADC-446D-9285-156453A6431C")
interface IActionProgressDialog : IUnknown
{
    HRESULT Initialize(uint flags, const(wchar)* pszTitle, const(wchar)* pszCancel);
    HRESULT Stop();
}

@GUID("49FF1173-EADC-446D-9285-156453A6431C")
interface IActionProgress : IUnknown
{
    HRESULT Begin(SPACTION action, uint flags);
    HRESULT UpdateProgress(ulong ulCompleted, ulong ulTotal);
    HRESULT UpdateText(SPTEXT sptext, const(wchar)* pszText, BOOL fMayCompact);
    HRESULT QueryCancel(int* pfCancelled);
    HRESULT ResetCancel();
    HRESULT End();
}

@GUID("000214E8-0000-0000-C000-000000000046")
interface IShellExtInit : IUnknown
{
    HRESULT Initialize(ITEMIDLIST* pidlFolder, IDataObject pdtobj, HKEY hkeyProgID);
}

@GUID("000214E9-0000-0000-C000-000000000046")
interface IShellPropSheetExt : IUnknown
{
    HRESULT AddPages(LPFNSVADDPROPSHEETPAGE pfnAddPage, LPARAM lParam);
    HRESULT ReplacePage(uint uPageID, LPFNSVADDPROPSHEETPAGE pfnReplaceWith, LPARAM lParam);
}

@GUID("000214FE-0000-0000-C000-000000000046")
interface IRemoteComputer : IUnknown
{
    HRESULT Initialize(const(wchar)* pszMachine, BOOL bEnumerating);
}

@GUID("7307055C-B24A-486B-9F25-163E597A28A9")
interface IQueryContinue : IUnknown
{
    HRESULT QueryContinue();
}

@GUID("F279B885-0AE9-4B85-AC06-DDECF9408941")
interface IObjectWithCancelEvent : IUnknown
{
    HRESULT GetCancelEvent(HANDLE* phEvent);
}

@GUID("BA9711BA-5893-4787-A7E1-41277151550B")
interface IUserNotification : IUnknown
{
    HRESULT SetBalloonInfo(const(wchar)* pszTitle, const(wchar)* pszText, uint dwInfoFlags);
    HRESULT SetBalloonRetry(uint dwShowTime, uint dwInterval, uint cRetryCount);
    HRESULT SetIconInfo(HICON hIcon, const(wchar)* pszToolTip);
    HRESULT Show(IQueryContinue pqc, uint dwContinuePollInterval);
    HRESULT PlaySoundA(const(wchar)* pszSoundName);
}

@GUID("1DF0D7F1-B267-4D28-8B10-12E23202A5C4")
interface IItemNameLimits : IUnknown
{
    HRESULT GetValidCharacters(ushort** ppwszValidChars, ushort** ppwszInvalidChars);
    HRESULT GetMaxLength(const(wchar)* pszName, int* piMaxNameLen);
}

@GUID("A0FFBC28-5482-4366-BE27-3E81E78E06C2")
interface ISearchFolderItemFactory : IUnknown
{
    HRESULT SetDisplayName(const(wchar)* pszDisplayName);
    HRESULT SetFolderTypeID(GUID ftid);
    HRESULT SetFolderLogicalViewMode(FOLDERLOGICALVIEWMODE flvm);
    HRESULT SetIconSize(int iIconSize);
    HRESULT SetVisibleColumns(uint cVisibleColumns, char* rgKey);
    HRESULT SetSortColumns(uint cSortColumns, char* rgSortColumns);
    HRESULT SetGroupColumn(const(PROPERTYKEY)* keyGroup);
    HRESULT SetStacks(uint cStackKeys, char* rgStackKeys);
    HRESULT SetScope(IShellItemArray psiaScope);
    HRESULT SetCondition(ICondition pCondition);
    HRESULT GetShellItem(const(GUID)* riid, void** ppv);
    HRESULT GetIDList(ITEMIDLIST** ppidl);
}

@GUID("BB2E617C-0920-11D1-9A0B-00C04FC2D6C1")
interface IExtractImage : IUnknown
{
    HRESULT GetLocation(const(wchar)* pszPathBuffer, uint cch, uint* pdwPriority, const(SIZE)* prgSize, 
                        uint dwRecClrDepth, uint* pdwFlags);
    HRESULT Extract(HBITMAP* phBmpThumbnail);
}

@GUID("953BB1EE-93B4-11D1-98A3-00C04FB687DA")
interface IExtractImage2 : IExtractImage
{
    HRESULT GetDateStamp(FILETIME* pDateStamp);
}

@GUID("E35B4B2E-00DA-4BC1-9F13-38BC11F5D417")
interface IThumbnailHandlerFactory : IUnknown
{
    HRESULT GetThumbnailHandler(ITEMIDLIST* pidlChild, IBindCtx pbc, const(GUID)* riid, void** ppv);
}

@GUID("B3A4B685-B685-4805-99D9-5DEAD2873236")
interface IParentAndItem : IUnknown
{
    HRESULT SetParentAndItem(ITEMIDLIST* pidlParent, IShellFolder psf, ITEMIDLIST* pidlChild);
    HRESULT GetParentAndItem(ITEMIDLIST** ppidlParent, IShellFolder* ppsf, ITEMIDLIST** ppidlChild);
}

@GUID("012DD920-7B26-11D0-8CA9-00A0C92DBFE8")
interface IDockingWindow : IOleWindow
{
    HRESULT ShowDW(BOOL fShow);
    HRESULT CloseDW(uint dwReserved);
    HRESULT ResizeBorderDW(RECT* prcBorder, IUnknown punkToolbarSite, BOOL fReserved);
}

@GUID("EB0FE172-1A3A-11D0-89B3-00A0C90A90AC")
interface IDeskBand : IDockingWindow
{
    HRESULT GetBandInfo(uint dwBandID, uint dwViewMode, DESKBANDINFO* pdbi);
}

@GUID("77E425FC-CBF9-4307-BA6A-BB5727745661")
interface IDeskBandInfo : IUnknown
{
    HRESULT GetDefaultBandWidth(uint dwBandID, uint dwViewMode, int* pnWidth);
}

@GUID("56FDF342-FD6D-11D0-958A-006097C9A090")
interface ITaskbarList : IUnknown
{
    HRESULT HrInit();
    HRESULT AddTab(HWND hwnd);
    HRESULT DeleteTab(HWND hwnd);
    HRESULT ActivateTab(HWND hwnd);
    HRESULT SetActiveAlt(HWND hwnd);
}

@GUID("602D4995-B13A-429B-A66E-1935E44F4317")
interface ITaskbarList2 : ITaskbarList
{
    HRESULT MarkFullscreenWindow(HWND hwnd, BOOL fFullscreen);
}

@GUID("EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF")
interface ITaskbarList3 : ITaskbarList2
{
    HRESULT SetProgressValue(HWND hwnd, ulong ullCompleted, ulong ullTotal);
    HRESULT SetProgressState(HWND hwnd, TBPFLAG tbpFlags);
    HRESULT RegisterTab(HWND hwndTab, HWND hwndMDI);
    HRESULT UnregisterTab(HWND hwndTab);
    HRESULT SetTabOrder(HWND hwndTab, HWND hwndInsertBefore);
    HRESULT SetTabActive(HWND hwndTab, HWND hwndMDI, uint dwReserved);
    HRESULT ThumbBarAddButtons(HWND hwnd, uint cButtons, char* pButton);
    HRESULT ThumbBarUpdateButtons(HWND hwnd, uint cButtons, char* pButton);
    HRESULT ThumbBarSetImageList(HWND hwnd, HIMAGELIST himl);
    HRESULT SetOverlayIcon(HWND hwnd, HICON hIcon, const(wchar)* pszDescription);
    HRESULT SetThumbnailTooltip(HWND hwnd, const(wchar)* pszTip);
    HRESULT SetThumbnailClip(HWND hwnd, RECT* prcClip);
}

@GUID("C43DC798-95D1-4BEA-9030-BB99E2983A1A")
interface ITaskbarList4 : ITaskbarList3
{
    HRESULT SetTabProperties(HWND hwndTab, STPFLAG stpFlags);
}

@GUID("361BBDC7-E6EE-4E13-BE58-58E2240C810F")
interface IExplorerBrowserEvents : IUnknown
{
    HRESULT OnNavigationPending(ITEMIDLIST* pidlFolder);
    HRESULT OnViewCreated(IShellView psv);
    HRESULT OnNavigationComplete(ITEMIDLIST* pidlFolder);
    HRESULT OnNavigationFailed(ITEMIDLIST* pidlFolder);
}

@GUID("DFD3B6B5-C10C-4BE9-85F6-A66969F402F6")
interface IExplorerBrowser : IUnknown
{
    HRESULT Initialize(HWND hwndParent, const(RECT)* prc, const(FOLDERSETTINGS)* pfs);
    HRESULT Destroy();
    HRESULT SetRect(ptrdiff_t* phdwp, RECT rcBrowser);
    HRESULT SetPropertyBag(const(wchar)* pszPropertyBag);
    HRESULT SetEmptyText(const(wchar)* pszEmptyText);
    HRESULT SetFolderSettings(const(FOLDERSETTINGS)* pfs);
    HRESULT Advise(IExplorerBrowserEvents psbe, uint* pdwCookie);
    HRESULT Unadvise(uint dwCookie);
    HRESULT SetOptions(EXPLORER_BROWSER_OPTIONS dwFlag);
    HRESULT GetOptions(EXPLORER_BROWSER_OPTIONS* pdwFlag);
    HRESULT BrowseToIDList(ITEMIDLIST* pidl, uint uFlags);
    HRESULT BrowseToObject(IUnknown punk, uint uFlags);
    HRESULT FillFromObject(IUnknown punk, EXPLORER_BROWSER_FILL_FLAGS dwFlags);
    HRESULT RemoveAll();
    HRESULT GetCurrentView(const(GUID)* riid, void** ppv);
}

@GUID("2C1C7E2E-2D0E-4059-831E-1E6F82335C2E")
interface IEnumObjects : IUnknown
{
    HRESULT Next(uint celt, const(GUID)* riid, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumObjects* ppenum);
}

@GUID("0C9FB851-E5C9-43EB-A370-F0677B13874C")
interface IOperationsProgressDialog : IUnknown
{
    HRESULT StartProgressDialog(HWND hwndOwner, uint flags);
    HRESULT StopProgressDialog();
    HRESULT SetOperation(SPACTION action);
    HRESULT SetMode(uint mode);
    HRESULT UpdateProgress(ulong ullPointsCurrent, ulong ullPointsTotal, ulong ullSizeCurrent, ulong ullSizeTotal, 
                           ulong ullItemsCurrent, ulong ullItemsTotal);
    HRESULT UpdateLocations(IShellItem psiSource, IShellItem psiTarget, IShellItem psiItem);
    HRESULT ResetTimer();
    HRESULT PauseTimer();
    HRESULT ResumeTimer();
    HRESULT GetMilliseconds(ulong* pullElapsed, ulong* pullRemaining);
    HRESULT GetOperationStatus(PDOPSTATUS* popstatus);
}

@GUID("F5B0BF81-8CB5-4B1B-9449-1A159E0C733C")
interface IIOCancelInformation : IUnknown
{
    HRESULT SetCancelInformation(uint dwThreadID, uint uMsgCancel);
    HRESULT GetCancelInformation(uint* pdwThreadID, uint* puMsgCancel);
}

@GUID("947AAB5F-0A5C-4C13-B4D6-4BF7836FC9F8")
interface IFileOperation : IUnknown
{
    HRESULT Advise(IFileOperationProgressSink pfops, uint* pdwCookie);
    HRESULT Unadvise(uint dwCookie);
    HRESULT SetOperationFlags(uint dwOperationFlags);
    HRESULT SetProgressMessage(const(wchar)* pszMessage);
    HRESULT SetProgressDialog(IOperationsProgressDialog popd);
    HRESULT SetProperties(IPropertyChangeArray pproparray);
    HRESULT SetOwnerWindow(HWND hwndOwner);
    HRESULT ApplyPropertiesToItem(IShellItem psiItem);
    HRESULT ApplyPropertiesToItems(IUnknown punkItems);
    HRESULT RenameItem(IShellItem psiItem, const(wchar)* pszNewName, IFileOperationProgressSink pfopsItem);
    HRESULT RenameItems(IUnknown pUnkItems, const(wchar)* pszNewName);
    HRESULT MoveItem(IShellItem psiItem, IShellItem psiDestinationFolder, const(wchar)* pszNewName, 
                     IFileOperationProgressSink pfopsItem);
    HRESULT MoveItems(IUnknown punkItems, IShellItem psiDestinationFolder);
    HRESULT CopyItem(IShellItem psiItem, IShellItem psiDestinationFolder, const(wchar)* pszCopyName, 
                     IFileOperationProgressSink pfopsItem);
    HRESULT CopyItems(IUnknown punkItems, IShellItem psiDestinationFolder);
    HRESULT DeleteItem(IShellItem psiItem, IFileOperationProgressSink pfopsItem);
    HRESULT DeleteItems(IUnknown punkItems);
    HRESULT NewItem(IShellItem psiDestinationFolder, uint dwFileAttributes, const(wchar)* pszName, 
                    const(wchar)* pszTemplateName, IFileOperationProgressSink pfopsItem);
    HRESULT PerformOperations();
    HRESULT GetAnyOperationsAborted(int* pfAnyOperationsAborted);
}

@GUID("CD8F23C1-8F61-4916-909D-55BDD0918753")
interface IFileOperation2 : IFileOperation
{
    HRESULT SetOperationFlags2(FILE_OPERATION_FLAGS2 operationFlags2);
}

@GUID("A6087428-3BE3-4D73-B308-7C04A540BF1A")
interface IObjectProvider : IUnknown
{
    HRESULT QueryObject(const(GUID)* guidObject, const(GUID)* riid, void** ppvOut);
}

@GUID("D92995F8-CF5E-4A76-BF59-EAD39EA2B97E")
interface INamespaceWalkCB : IUnknown
{
    HRESULT FoundItem(IShellFolder psf, ITEMIDLIST* pidl);
    HRESULT EnterFolder(IShellFolder psf, ITEMIDLIST* pidl);
    HRESULT LeaveFolder(IShellFolder psf, ITEMIDLIST* pidl);
    HRESULT InitializeProgressDialog(ushort** ppszTitle, ushort** ppszCancel);
}

@GUID("7AC7492B-C38E-438A-87DB-68737844FF70")
interface INamespaceWalkCB2 : INamespaceWalkCB
{
    HRESULT WalkComplete(HRESULT hr);
}

@GUID("57CED8A7-3F4A-432C-9350-30F24483F74F")
interface INamespaceWalk : IUnknown
{
    HRESULT Walk(IUnknown punkToWalk, uint dwFlags, int cDepth, INamespaceWalkCB pnswcb);
    HRESULT GetIDArrayResult(uint* pcItems, char* prgpidl);
}

@GUID("4CF504B0-DE96-11D0-8B3F-00A0C911E8E5")
interface IBandSite : IUnknown
{
    HRESULT AddBand(IUnknown punk);
    HRESULT EnumBands(uint uBand, uint* pdwBandID);
    HRESULT QueryBand(uint dwBandID, IDeskBand* ppstb, uint* pdwState, const(wchar)* pszName, int cchName);
    HRESULT SetBandState(uint dwBandID, uint dwMask, uint dwState);
    HRESULT RemoveBand(uint dwBandID);
    HRESULT GetBandObject(uint dwBandID, const(GUID)* riid, void** ppv);
    HRESULT SetBandSiteInfo(const(BANDSITEINFO)* pbsinfo);
    HRESULT GetBandSiteInfo(BANDSITEINFO* pbsinfo);
}

@GUID("B4DB1657-70D7-485E-8E3E-6FCB5A5C1802")
interface IModalWindow : IUnknown
{
    HRESULT Show(HWND hwndOwner);
}

@GUID("0811AEBE-0B87-4C54-9E72-548CF649016B")
interface IContextMenuSite : IUnknown
{
    HRESULT DoContextMenuPopup(IUnknown punkContextMenu, uint fFlags, POINT pt);
}

@GUID("568804CD-CBD7-11D0-9816-00C04FD91972")
interface IMenuBand : IUnknown
{
    HRESULT IsMenuMessage(MSG* pmsg);
    HRESULT TranslateMenuMessage(MSG* pmsg, LRESULT* plRet);
}

@GUID("A9521922-0812-4D44-9EC3-7FD38C726F3D")
interface IRegTreeItem : IUnknown
{
    HRESULT GetCheckState(int* pbCheck);
    HRESULT SetCheckState(BOOL bCheck);
}

@GUID("EB0FE173-1A3A-11D0-89B3-00A0C90A90AC")
interface IDeskBar : IOleWindow
{
    HRESULT SetClient(IUnknown punkClient);
    HRESULT GetClient(IUnknown* ppunkClient);
    HRESULT OnPosRectChangeDB(RECT* prc);
}

@GUID("D1E7AFEB-6A2E-11D0-8C78-00C04FD918B4")
interface IMenuPopup : IDeskBar
{
    HRESULT Popup(POINTL* ppt, RECTL* prcExclude, int dwFlags);
    HRESULT OnSelect(uint dwSelectType);
    HRESULT SetSubMenu(IMenuPopup pmp, BOOL fSet);
}

@GUID("64A1CBF0-3A1A-4461-9158-376969693950")
interface IFileIsInUse : IUnknown
{
    HRESULT GetAppName(ushort** ppszName);
    HRESULT GetUsage(FILE_USAGE_TYPE* pfut);
    HRESULT GetCapabilities(uint* pdwCapFlags);
    HRESULT GetSwitchToHWND(HWND* phwnd);
    HRESULT CloseFile();
}

@GUID("973510DB-7D7F-452B-8975-74A85828D354")
interface IFileDialogEvents : IUnknown
{
    HRESULT OnFileOk(IFileDialog pfd);
    HRESULT OnFolderChanging(IFileDialog pfd, IShellItem psiFolder);
    HRESULT OnFolderChange(IFileDialog pfd);
    HRESULT OnSelectionChange(IFileDialog pfd);
    HRESULT OnShareViolation(IFileDialog pfd, IShellItem psi, FDE_SHAREVIOLATION_RESPONSE* pResponse);
    HRESULT OnTypeChange(IFileDialog pfd);
    HRESULT OnOverwrite(IFileDialog pfd, IShellItem psi, FDE_OVERWRITE_RESPONSE* pResponse);
}

@GUID("42F85136-DB7E-439C-85F1-E4075D135FC8")
interface IFileDialog : IModalWindow
{
    HRESULT SetFileTypes(uint cFileTypes, char* rgFilterSpec);
    HRESULT SetFileTypeIndex(uint iFileType);
    HRESULT GetFileTypeIndex(uint* piFileType);
    HRESULT Advise(IFileDialogEvents pfde, uint* pdwCookie);
    HRESULT Unadvise(uint dwCookie);
    HRESULT SetOptions(uint fos);
    HRESULT GetOptions(uint* pfos);
    HRESULT SetDefaultFolder(IShellItem psi);
    HRESULT SetFolder(IShellItem psi);
    HRESULT GetFolder(IShellItem* ppsi);
    HRESULT GetCurrentSelection(IShellItem* ppsi);
    HRESULT SetFileName(const(wchar)* pszName);
    HRESULT GetFileName(ushort** pszName);
    HRESULT SetTitle(const(wchar)* pszTitle);
    HRESULT SetOkButtonLabel(const(wchar)* pszText);
    HRESULT SetFileNameLabel(const(wchar)* pszLabel);
    HRESULT GetResult(IShellItem* ppsi);
    HRESULT AddPlace(IShellItem psi, FDAP fdap);
    HRESULT SetDefaultExtension(const(wchar)* pszDefaultExtension);
    HRESULT Close(HRESULT hr);
    HRESULT SetClientGuid(const(GUID)* guid);
    HRESULT ClearClientData();
    HRESULT SetFilter(IShellItemFilter pFilter);
}

@GUID("84BCCD23-5FDE-4CDB-AEA4-AF64B83D78AB")
interface IFileSaveDialog : IFileDialog
{
    HRESULT SetSaveAsItem(IShellItem psi);
    HRESULT SetProperties(IPropertyStore pStore);
    HRESULT SetCollectedProperties(IPropertyDescriptionList pList, BOOL fAppendDefault);
    HRESULT GetProperties(IPropertyStore* ppStore);
    HRESULT ApplyProperties(IShellItem psi, IPropertyStore pStore, HWND hwnd, IFileOperationProgressSink pSink);
}

@GUID("D57C7288-D4AD-4768-BE02-9D969532D960")
interface IFileOpenDialog : IFileDialog
{
    HRESULT GetResults(IShellItemArray* ppenum);
    HRESULT GetSelectedItems(IShellItemArray* ppsai);
}

@GUID("E6FDD21A-163F-4975-9C8C-A69F1BA37034")
interface IFileDialogCustomize : IUnknown
{
    HRESULT EnableOpenDropDown(uint dwIDCtl);
    HRESULT AddMenu(uint dwIDCtl, const(wchar)* pszLabel);
    HRESULT AddPushButton(uint dwIDCtl, const(wchar)* pszLabel);
    HRESULT AddComboBox(uint dwIDCtl);
    HRESULT AddRadioButtonList(uint dwIDCtl);
    HRESULT AddCheckButton(uint dwIDCtl, const(wchar)* pszLabel, BOOL bChecked);
    HRESULT AddEditBox(uint dwIDCtl, const(wchar)* pszText);
    HRESULT AddSeparator(uint dwIDCtl);
    HRESULT AddText(uint dwIDCtl, const(wchar)* pszText);
    HRESULT SetControlLabel(uint dwIDCtl, const(wchar)* pszLabel);
    HRESULT GetControlState(uint dwIDCtl, CDCONTROLSTATEF* pdwState);
    HRESULT SetControlState(uint dwIDCtl, CDCONTROLSTATEF dwState);
    HRESULT GetEditBoxText(uint dwIDCtl, ushort** ppszText);
    HRESULT SetEditBoxText(uint dwIDCtl, const(wchar)* pszText);
    HRESULT GetCheckButtonState(uint dwIDCtl, int* pbChecked);
    HRESULT SetCheckButtonState(uint dwIDCtl, BOOL bChecked);
    HRESULT AddControlItem(uint dwIDCtl, uint dwIDItem, const(wchar)* pszLabel);
    HRESULT RemoveControlItem(uint dwIDCtl, uint dwIDItem);
    HRESULT RemoveAllControlItems(uint dwIDCtl);
    HRESULT GetControlItemState(uint dwIDCtl, uint dwIDItem, CDCONTROLSTATEF* pdwState);
    HRESULT SetControlItemState(uint dwIDCtl, uint dwIDItem, CDCONTROLSTATEF dwState);
    HRESULT GetSelectedControlItem(uint dwIDCtl, uint* pdwIDItem);
    HRESULT SetSelectedControlItem(uint dwIDCtl, uint dwIDItem);
    HRESULT StartVisualGroup(uint dwIDCtl, const(wchar)* pszLabel);
    HRESULT EndVisualGroup();
    HRESULT MakeProminent(uint dwIDCtl);
    HRESULT SetControlItemText(uint dwIDCtl, uint dwIDItem, const(wchar)* pszLabel);
}

@GUID("4E530B0A-E611-4C77-A3AC-9031D022281B")
interface IApplicationAssociationRegistration : IUnknown
{
    HRESULT QueryCurrentDefault(const(wchar)* pszQuery, ASSOCIATIONTYPE atQueryType, ASSOCIATIONLEVEL alQueryLevel, 
                                ushort** ppszAssociation);
    HRESULT QueryAppIsDefault(const(wchar)* pszQuery, ASSOCIATIONTYPE atQueryType, ASSOCIATIONLEVEL alQueryLevel, 
                              const(wchar)* pszAppRegistryName, int* pfDefault);
    HRESULT QueryAppIsDefaultAll(ASSOCIATIONLEVEL alQueryLevel, const(wchar)* pszAppRegistryName, int* pfDefault);
    HRESULT SetAppAsDefault(const(wchar)* pszAppRegistryName, const(wchar)* pszSet, ASSOCIATIONTYPE atSetType);
    HRESULT SetAppAsDefaultAll(const(wchar)* pszAppRegistryName);
    HRESULT ClearUserAssociations();
}

@GUID("ADD8BA80-002B-11D0-8F0F-00C04FD7D062")
interface IDelegateFolder : IUnknown
{
    HRESULT SetItemAlloc(IMalloc pmalloc);
}

@GUID("10DF43C8-1DBE-11D3-8B34-006097DF5BD4")
interface IBrowserFrameOptions : IUnknown
{
    HRESULT GetFrameOptions(uint dwMask, uint* pdwOptions);
}

@GUID("D2BC4C84-3F72-4A52-A604-7BCBF3982CBB")
interface INewWindowManager : IUnknown
{
    HRESULT EvaluateNewWindow(const(wchar)* pszUrl, const(wchar)* pszName, const(wchar)* pszUrlContext, 
                              const(wchar)* pszFeatures, BOOL fReplace, uint dwFlags, uint dwUserActionTime);
}

@GUID("73DB1241-1E85-4581-8E4F-A81E1D0F8C57")
interface IAttachmentExecute : IUnknown
{
    HRESULT SetClientTitle(const(wchar)* pszTitle);
    HRESULT SetClientGuid(const(GUID)* guid);
    HRESULT SetLocalPath(const(wchar)* pszLocalPath);
    HRESULT SetFileName(const(wchar)* pszFileName);
    HRESULT SetSource(const(wchar)* pszSource);
    HRESULT SetReferrer(const(wchar)* pszReferrer);
    HRESULT CheckPolicy();
    HRESULT Prompt(HWND hwnd, ATTACHMENT_PROMPT prompt, ATTACHMENT_ACTION* paction);
    HRESULT Save();
    HRESULT Execute(HWND hwnd, const(wchar)* pszVerb, HANDLE* phProcess);
    HRESULT SaveWithUI(HWND hwnd);
    HRESULT ClearClientState();
}

@GUID("4CA300A1-9B8D-11D1-8B22-00C04FD918D0")
interface IShellMenuCallback : IUnknown
{
    HRESULT CallbackSM(SMDATA* psmd, uint uMsg, WPARAM wParam, LPARAM lParam);
}

@GUID("EE1F7637-E138-11D1-8379-00C04FD918D0")
interface IShellMenu : IUnknown
{
    HRESULT Initialize(IShellMenuCallback psmc, uint uId, uint uIdAncestor, uint dwFlags);
    HRESULT GetMenuInfo(IShellMenuCallback* ppsmc, uint* puId, uint* puIdAncestor, uint* pdwFlags);
    HRESULT SetShellFolder(IShellFolder psf, ITEMIDLIST* pidlFolder, HKEY hKey, uint dwFlags);
    HRESULT GetShellFolder(uint* pdwFlags, ITEMIDLIST** ppidl, const(GUID)* riid, void** ppv);
    HRESULT SetMenu(HMENU hmenu, HWND hwnd, uint dwFlags);
    HRESULT GetMenu(HMENU* phmenu, HWND* phwnd, uint* pdwFlags);
    HRESULT InvalidateItem(SMDATA* psmd, uint dwFlags);
    HRESULT GetState(SMDATA* psmd);
    HRESULT SetMenuToolbar(IUnknown punk, uint dwFlags);
}

@GUID("3AA7AF7E-9B36-420C-A8E3-F77D4674A488")
interface IKnownFolder : IUnknown
{
    HRESULT GetId(GUID* pkfid);
    HRESULT GetCategory(KF_CATEGORY* pCategory);
    HRESULT GetShellItem(uint dwFlags, const(GUID)* riid, void** ppv);
    HRESULT GetPath(uint dwFlags, ushort** ppszPath);
    HRESULT SetPath(uint dwFlags, const(wchar)* pszPath);
    HRESULT GetIDList(uint dwFlags, ITEMIDLIST** ppidl);
    HRESULT GetFolderType(GUID* pftid);
    HRESULT GetRedirectionCapabilities(uint* pCapabilities);
    HRESULT GetFolderDefinition(KNOWNFOLDER_DEFINITION* pKFD);
}

@GUID("8BE2D872-86AA-4D47-B776-32CCA40C7018")
interface IKnownFolderManager : IUnknown
{
    HRESULT FolderIdFromCsidl(int nCsidl, GUID* pfid);
    HRESULT FolderIdToCsidl(const(GUID)* rfid, int* pnCsidl);
    HRESULT GetFolderIds(char* ppKFId, uint* pCount);
    HRESULT GetFolder(const(GUID)* rfid, IKnownFolder* ppkf);
    HRESULT GetFolderByName(const(wchar)* pszCanonicalName, IKnownFolder* ppkf);
    HRESULT RegisterFolder(const(GUID)* rfid, const(KNOWNFOLDER_DEFINITION)* pKFD);
    HRESULT UnregisterFolder(const(GUID)* rfid);
    HRESULT FindFolderFromPath(const(wchar)* pszPath, FFFP_MODE mode, IKnownFolder* ppkf);
    HRESULT FindFolderFromIDList(ITEMIDLIST* pidl, IKnownFolder* ppkf);
    HRESULT Redirect(const(GUID)* rfid, HWND hwnd, uint flags, const(wchar)* pszTargetPath, uint cFolders, 
                     char* pExclusion, ushort** ppszError);
}

@GUID("B4CD448A-9C86-4466-9201-2E62105B87AE")
interface ISharingConfigurationManager : IUnknown
{
    HRESULT CreateShare(DEF_SHARE_ID dsid, SHARE_ROLE role);
    HRESULT DeleteShare(DEF_SHARE_ID dsid);
    HRESULT ShareExists(DEF_SHARE_ID dsid);
    HRESULT GetSharePermissions(DEF_SHARE_ID dsid, SHARE_ROLE* pRole);
    HRESULT SharePrinters();
    HRESULT StopSharingPrinters();
    HRESULT ArePrintersShared();
}

@GUID("A73CE67A-8AB1-44F1-8D43-D2FCBF6B1CD0")
interface IRelatedItem : IUnknown
{
    HRESULT GetItemIDList(ITEMIDLIST** ppidl);
    HRESULT GetItem(IShellItem* ppsi);
}

@GUID("7D903FCA-D6F9-4810-8332-946C0177E247")
interface IIdentityName : IRelatedItem
{
}

@GUID("3C5A1C94-C951-4CB7-BB6D-3B93F30CCE93")
interface IDelegateItem : IRelatedItem
{
}

@GUID("240A7174-D653-4A1D-A6D3-D4943CFBFE3D")
interface ICurrentItem : IRelatedItem
{
}

@GUID("77F295D5-2D6F-4E19-B8AE-322F3E721AB5")
interface ITransferMediumItem : IRelatedItem
{
}

@GUID("C6FD5997-9F6B-4888-8703-94E80E8CDE3F")
interface IDisplayItem : IRelatedItem
{
}

@GUID("9D264146-A94F-4195-9F9F-3BB12CE0C955")
interface IViewStateIdentityItem : IRelatedItem
{
}

@GUID("36149969-0A8F-49C8-8B00-4AECB20222FB")
interface IPreviewItem : IRelatedItem
{
}

@GUID("8A87781B-39A7-4A1F-AAB3-A39B9C34A7D9")
interface IDestinationStreamFactory : IUnknown
{
    HRESULT GetDestinationStream(IStream* ppstm);
}

@GUID("F6EF6140-E26F-4D82-BAC4-E9BA5FD239A8")
interface ICreateProcessInputs : IUnknown
{
    HRESULT GetCreateFlags(uint* pdwCreationFlags);
    HRESULT SetCreateFlags(uint dwCreationFlags);
    HRESULT AddCreateFlags(uint dwCreationFlags);
    HRESULT SetHotKey(ushort wHotKey);
    HRESULT AddStartupFlags(uint dwStartupInfoFlags);
    HRESULT SetTitle(const(wchar)* pszTitle);
    HRESULT SetEnvironmentVariableA(const(wchar)* pszName, const(wchar)* pszValue);
}

@GUID("C2B937A9-3110-4398-8A56-F34C6342D244")
interface ICreatingProcess : IUnknown
{
    HRESULT OnCreating(ICreateProcessInputs pcpi);
}

@GUID("1791E8F6-21C7-4340-882A-A6A93E3FD73B")
interface ILaunchUIContext : IUnknown
{
    HRESULT SetAssociatedWindow(HWND value);
    HRESULT SetTabGroupingPreference(uint value);
}

@GUID("0D12C4C8-A3D9-4E24-94C1-0E20C5A956C4")
interface ILaunchUIContextProvider : IUnknown
{
    HRESULT UpdateContext(ILaunchUIContext context);
}

@GUID("DCB07FDC-3BB5-451C-90BE-966644FED7B0")
interface INewMenuClient : IUnknown
{
    HRESULT IncludeItems(int* pflags);
    HRESULT SelectAndEditItem(ITEMIDLIST* pidlItem, int flags);
}

@GUID("71C0D2BC-726D-45CC-A6C0-2E31C1DB2159")
interface IInitializeWithBindCtx : IUnknown
{
    HRESULT Initialize(IBindCtx pbc);
}

@GUID("2659B475-EEB8-48B7-8F07-B378810F48CF")
interface IShellItemFilter : IUnknown
{
    HRESULT IncludeItem(IShellItem psi);
    HRESULT GetEnumFlagsForItem(IShellItem psi, uint* pgrfFlags);
}

@GUID("028212A3-B627-47E9-8856-C14265554E4F")
interface INameSpaceTreeControl : IUnknown
{
    HRESULT Initialize(HWND hwndParent, RECT* prc, uint nsctsFlags);
    HRESULT TreeAdvise(IUnknown punk, uint* pdwCookie);
    HRESULT TreeUnadvise(uint dwCookie);
    HRESULT AppendRoot(IShellItem psiRoot, uint grfEnumFlags, uint grfRootStyle, IShellItemFilter pif);
    HRESULT InsertRoot(int iIndex, IShellItem psiRoot, uint grfEnumFlags, uint grfRootStyle, IShellItemFilter pif);
    HRESULT RemoveRoot(IShellItem psiRoot);
    HRESULT RemoveAllRoots();
    HRESULT GetRootItems(IShellItemArray* ppsiaRootItems);
    HRESULT SetItemState(IShellItem psi, uint nstcisMask, uint nstcisFlags);
    HRESULT GetItemState(IShellItem psi, uint nstcisMask, uint* pnstcisFlags);
    HRESULT GetSelectedItems(IShellItemArray* psiaItems);
    HRESULT GetItemCustomState(IShellItem psi, int* piStateNumber);
    HRESULT SetItemCustomState(IShellItem psi, int iStateNumber);
    HRESULT EnsureItemVisible(IShellItem psi);
    HRESULT SetTheme(const(wchar)* pszTheme);
    HRESULT GetNextItem(IShellItem psi, NSTCGNI nstcgi, IShellItem* ppsiNext);
    HRESULT HitTest(POINT* ppt, IShellItem* ppsiOut);
    HRESULT GetItemRect(IShellItem psi, RECT* prect);
    HRESULT CollapseAll();
}

@GUID("E9701183-E6B3-4FF2-8568-813615FEC7BE")
interface INameSpaceTreeControlFolderCapabilities : IUnknown
{
    HRESULT GetFolderCapabilities(NSTCFOLDERCAPABILITIES nfcMask, NSTCFOLDERCAPABILITIES* pnfcValue);
}

@GUID("8895B1C6-B41F-4C1C-A562-0D564250836F")
interface IPreviewHandler : IUnknown
{
    HRESULT SetWindow(HWND hwnd, const(RECT)* prc);
    HRESULT SetRect(const(RECT)* prc);
    HRESULT DoPreview();
    HRESULT Unload();
    HRESULT SetFocus();
    HRESULT QueryFocus(HWND* phwnd);
    HRESULT TranslateAcceleratorA(MSG* pmsg);
}

@GUID("FEC87AAF-35F9-447A-ADB7-20234491401A")
interface IPreviewHandlerFrame : IUnknown
{
    HRESULT GetWindowContext(PREVIEWHANDLERFRAMEINFO* pinfo);
    HRESULT TranslateAcceleratorA(MSG* pmsg);
}

@GUID("E07010EC-BC17-44C0-97B0-46C7C95B9EDC")
interface IExplorerPaneVisibility : IUnknown
{
    HRESULT GetPaneState(const(GUID)* ep, uint* peps);
}

@GUID("3409E930-5A39-11D1-83FA-00A0C90DC849")
interface IContextMenuCB : IUnknown
{
    HRESULT CallBack(IShellFolder psf, HWND hwndOwner, IDataObject pdtobj, uint uMsg, WPARAM wParam, LPARAM lParam);
}

@GUID("41DED17D-D6B3-4261-997D-88C60E4B1D58")
interface IDefaultExtractIconInit : IUnknown
{
    HRESULT SetFlags(uint uFlags);
    HRESULT SetKey(HKEY hkey);
    HRESULT SetNormalIcon(const(wchar)* pszFile, int iIcon);
    HRESULT SetOpenIcon(const(wchar)* pszFile, int iIcon);
    HRESULT SetShortcutIcon(const(wchar)* pszFile, int iIcon);
    HRESULT SetDefaultIcon(const(wchar)* pszFile, int iIcon);
}

@GUID("A08CE4D0-FA25-44AB-B57C-C7B1C323E0B9")
interface IExplorerCommand : IUnknown
{
    HRESULT GetTitle(IShellItemArray psiItemArray, ushort** ppszName);
    HRESULT GetIcon(IShellItemArray psiItemArray, ushort** ppszIcon);
    HRESULT GetToolTip(IShellItemArray psiItemArray, ushort** ppszInfotip);
    HRESULT GetCanonicalName(GUID* pguidCommandName);
    HRESULT GetState(IShellItemArray psiItemArray, BOOL fOkToBeSlow, uint* pCmdState);
    HRESULT Invoke(IShellItemArray psiItemArray, IBindCtx pbc);
    HRESULT GetFlags(uint* pFlags);
    HRESULT EnumSubCommands(IEnumExplorerCommand* ppEnum);
}

@GUID("BDDACB60-7657-47AE-8445-D23E1ACF82AE")
interface IExplorerCommandState : IUnknown
{
    HRESULT GetState(IShellItemArray psiItemArray, BOOL fOkToBeSlow, uint* pCmdState);
}

@GUID("85075ACF-231F-40EA-9610-D26B7B58F638")
interface IInitializeCommand : IUnknown
{
    HRESULT Initialize(const(wchar)* pszCommandName, IPropertyBag ppb);
}

@GUID("A88826F8-186F-4987-AADE-EA0CEF8FBFE8")
interface IEnumExplorerCommand : IUnknown
{
    HRESULT Next(uint celt, char* pUICommand, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumExplorerCommand* ppenum);
}

@GUID("64961751-0835-43C0-8FFE-D57686530E64")
interface IExplorerCommandProvider : IUnknown
{
    HRESULT GetCommands(IUnknown punkSite, const(GUID)* riid, void** ppv);
    HRESULT GetCommand(const(GUID)* rguidCommandId, const(GUID)* riid, void** ppv);
}

@GUID("D11AD862-66DE-4DF4-BF6C-1F5621996AF1")
interface IOpenControlPanel : IUnknown
{
    HRESULT Open(const(wchar)* pszName, const(wchar)* pszPage, IUnknown punkSite);
    HRESULT GetPath(const(wchar)* pszName, const(wchar)* pszPath, uint cchPath);
    HRESULT GetCurrentView(CPVIEW* pView);
}

@GUID("01E18D10-4D8B-11D2-855D-006008059367")
interface IFileSystemBindData : IUnknown
{
    HRESULT SetFindData(const(WIN32_FIND_DATAW)* pfd);
    HRESULT GetFindData(WIN32_FIND_DATAW* pfd);
}

@GUID("3ACF075F-71DB-4AFA-81F0-3FC4FDF2A5B8")
interface IFileSystemBindData2 : IFileSystemBindData
{
    HRESULT SetFileID(LARGE_INTEGER liFileID);
    HRESULT GetFileID(LARGE_INTEGER* pliFileID);
    HRESULT SetJunctionCLSID(const(GUID)* clsid);
    HRESULT GetJunctionCLSID(GUID* pclsid);
}

@GUID("6332DEBF-87B5-4670-90C0-5E57B408A49E")
interface ICustomDestinationList : IUnknown
{
    HRESULT SetAppID(const(wchar)* pszAppID);
    HRESULT BeginList(uint* pcMinSlots, const(GUID)* riid, void** ppv);
    HRESULT AppendCategory(const(wchar)* pszCategory, IObjectArray poa);
    HRESULT AppendKnownCategory(KNOWNDESTCATEGORY category);
    HRESULT AddUserTasks(IObjectArray poa);
    HRESULT CommitList();
    HRESULT GetRemovedDestinations(const(GUID)* riid, void** ppv);
    HRESULT DeleteList(const(wchar)* pszAppID);
    HRESULT AbortList();
}

@GUID("12337D35-94C6-48A0-BCE7-6A9C69D4D600")
interface IApplicationDestinations : IUnknown
{
    HRESULT SetAppID(const(wchar)* pszAppID);
    HRESULT RemoveDestination(IUnknown punk);
    HRESULT RemoveAllDestinations();
}

@GUID("3C594F9F-9F30-47A1-979A-C9E83D3D0A06")
interface IApplicationDocumentLists : IUnknown
{
    HRESULT SetAppID(const(wchar)* pszAppID);
    HRESULT GetList(APPDOCLISTTYPE listtype, uint cItemsDesired, const(GUID)* riid, void** ppv);
}

@GUID("36DB0196-9665-46D1-9BA7-D3709EECF9ED")
interface IObjectWithAppUserModelID : IUnknown
{
    HRESULT SetAppID(const(wchar)* pszAppID);
    HRESULT GetAppID(ushort** ppszAppID);
}

@GUID("71E806FB-8DEE-46FC-BF8C-7748A8A1AE13")
interface IObjectWithProgID : IUnknown
{
    HRESULT SetProgID(const(wchar)* pszProgID);
    HRESULT GetProgID(ushort** ppszProgID);
}

@GUID("6589B6D2-5F8D-4B9E-B7E0-23CDD9717D8C")
interface IUpdateIDList : IUnknown
{
    HRESULT Update(IBindCtx pbc, ITEMIDLIST* pidlIn, ITEMIDLIST** ppidlOut);
}

@GUID("B92B56A9-8B55-4E14-9A89-0199BBB6F93B")
interface IDesktopWallpaper : IUnknown
{
    HRESULT SetWallpaper(const(wchar)* monitorID, const(wchar)* wallpaper);
    HRESULT GetWallpaper(const(wchar)* monitorID, ushort** wallpaper);
    HRESULT GetMonitorDevicePathAt(uint monitorIndex, ushort** monitorID);
    HRESULT GetMonitorDevicePathCount(uint* count);
    HRESULT GetMonitorRECT(const(wchar)* monitorID, RECT* displayRect);
    HRESULT SetBackgroundColor(uint color);
    HRESULT GetBackgroundColor(uint* color);
    HRESULT SetPosition(DESKTOP_WALLPAPER_POSITION position);
    HRESULT GetPosition(DESKTOP_WALLPAPER_POSITION* position);
    HRESULT SetSlideshow(IShellItemArray items);
    HRESULT GetSlideshow(IShellItemArray* items);
    HRESULT SetSlideshowOptions(DESKTOP_SLIDESHOW_OPTIONS options, uint slideshowTick);
    HRESULT GetSlideshowOptions(DESKTOP_SLIDESHOW_OPTIONS* options, uint* slideshowTick);
    HRESULT AdvanceSlideshow(const(wchar)* monitorID, DESKTOP_SLIDESHOW_DIRECTION direction);
    HRESULT GetStatus(DESKTOP_SLIDESHOW_STATE* state);
    HRESULT Enable(BOOL enable);
}

@GUID("7A3BD1D9-35A9-4FB3-A467-F48CAC35E2D0")
interface IHomeGroup : IUnknown
{
    HRESULT IsMember(int* member);
    HRESULT ShowSharingWizard(HWND owner, HOMEGROUPSHARINGCHOICES* sharingchoices);
}

@GUID("C3E12EB5-7D8D-44F8-B6DD-0E77B34D6DE4")
interface IInitializeWithPropertyStore : IUnknown
{
    HRESULT Initialize(IPropertyStore pps);
}

@GUID("F0EE7333-E6FC-479B-9F25-A860C234A38E")
interface IOpenSearchSource : IUnknown
{
    HRESULT GetResults(HWND hwnd, const(wchar)* pszQuery, uint dwStartIndex, uint dwCount, const(GUID)* riid, 
                       void** ppv);
}

@GUID("11A66EFA-382E-451A-9234-1E0E12EF3085")
interface IShellLibrary : IUnknown
{
    HRESULT LoadLibraryFromItem(IShellItem psiLibrary, uint grfMode);
    HRESULT LoadLibraryFromKnownFolder(const(GUID)* kfidLibrary, uint grfMode);
    HRESULT AddFolder(IShellItem psiLocation);
    HRESULT RemoveFolder(IShellItem psiLocation);
    HRESULT GetFolders(LIBRARYFOLDERFILTER lff, const(GUID)* riid, void** ppv);
    HRESULT ResolveFolder(IShellItem psiFolderToResolve, uint dwTimeout, const(GUID)* riid, void** ppv);
    HRESULT GetDefaultSaveFolder(DEFAULTSAVEFOLDERTYPE dsft, const(GUID)* riid, void** ppv);
    HRESULT SetDefaultSaveFolder(DEFAULTSAVEFOLDERTYPE dsft, IShellItem psi);
    HRESULT GetOptions(LIBRARYOPTIONFLAGS* plofOptions);
    HRESULT SetOptions(LIBRARYOPTIONFLAGS lofMask, LIBRARYOPTIONFLAGS lofOptions);
    HRESULT GetFolderType(GUID* pftid);
    HRESULT SetFolderType(const(GUID)* ftid);
    HRESULT GetIcon(ushort** ppszIcon);
    HRESULT SetIcon(const(wchar)* pszIcon);
    HRESULT Commit();
    HRESULT Save(IShellItem psiFolderToSaveIn, const(wchar)* pszLibraryName, LIBRARYSAVEFLAGS lsf, 
                 IShellItem* ppsiSavedTo);
    HRESULT SaveInKnownFolder(const(GUID)* kfidToSaveIn, const(wchar)* pszLibraryName, LIBRARYSAVEFLAGS lsf, 
                              IShellItem* ppsiSavedTo);
}

@GUID("7690AA79-F8FC-4615-A327-36F7D18F5D91")
interface IDefaultFolderMenuInitialize : IUnknown
{
    HRESULT Initialize(HWND hwnd, IContextMenuCB pcmcb, ITEMIDLIST* pidlFolder, IShellFolder psf, uint cidl, 
                       ITEMIDLIST** apidl, IUnknown punkAssociation, uint cKeys, const(ptrdiff_t)* aKeys);
    HRESULT SetMenuRestrictions(DEFAULT_FOLDER_MENU_RESTRICTIONS dfmrValues);
    HRESULT GetMenuRestrictions(DEFAULT_FOLDER_MENU_RESTRICTIONS dfmrMask, 
                                DEFAULT_FOLDER_MENU_RESTRICTIONS* pdfmrValues);
    HRESULT SetHandlerClsid(const(GUID)* rclsid);
}

@GUID("2E941141-7F97-4756-BA1D-9DECDE894A3D")
interface IApplicationActivationManager : IUnknown
{
    HRESULT ActivateApplication(const(wchar)* appUserModelId, const(wchar)* arguments, ACTIVATEOPTIONS options, 
                                uint* processId);
    HRESULT ActivateForFile(const(wchar)* appUserModelId, IShellItemArray itemArray, const(wchar)* verb, 
                            uint* processId);
    HRESULT ActivateForProtocol(const(wchar)* appUserModelId, IShellItemArray itemArray, uint* processId);
}

@GUID("A5CD92FF-29BE-454C-8D04-D82879FB3F1B")
interface IVirtualDesktopManager : IUnknown
{
    HRESULT IsWindowOnCurrentVirtualDesktop(HWND topLevelWindow, int* onCurrentDesktop);
    HRESULT GetWindowDesktopId(HWND topLevelWindow, GUID* desktopId);
    HRESULT MoveWindowToDesktop(HWND topLevelWindow, const(GUID)* desktopId);
}

@GUID("92218CAB-ECAA-4335-8133-807FD234C2EE")
interface IAssocHandlerInvoker : IUnknown
{
    HRESULT SupportsSelection();
    HRESULT Invoke();
}

@GUID("F04061AC-1659-4A3F-A954-775AA57FC083")
interface IAssocHandler : IUnknown
{
    HRESULT GetName(ushort** ppsz);
    HRESULT GetUIName(ushort** ppsz);
    HRESULT GetIconLocation(ushort** ppszPath, int* pIndex);
    HRESULT IsRecommended();
    HRESULT MakeDefault(const(wchar)* pszDescription);
    HRESULT Invoke(IDataObject pdo);
    HRESULT CreateInvoker(IDataObject pdo, IAssocHandlerInvoker* ppInvoker);
}

@GUID("973810AE-9599-4B88-9E4D-6EE98C9552DA")
interface IEnumAssocHandlers : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
}

@GUID("3D25F6D6-4B2A-433C-9184-7C33AD35D001")
interface IDataObjectProvider : IUnknown
{
    HRESULT GetDataObject(IDataObject* dataObject);
    HRESULT SetDataObject(IDataObject dataObject);
}

@GUID("3A3DCD6C-3EAB-43DC-BCDE-45671CE800C8")
interface IDataTransferManagerInterop : IUnknown
{
    HRESULT GetForWindow(HWND appWindow, const(GUID)* riid, void** dataTransferManager);
    HRESULT ShowShareUIForWindow(HWND appWindow);
}

@GUID("226C537B-1E76-4D9E-A760-33DB29922F18")
interface IFrameworkInputPaneHandler : IUnknown
{
    HRESULT Showing(RECT* prcInputPaneScreenLocation, BOOL fEnsureFocusedElementInView);
    HRESULT Hiding(BOOL fEnsureFocusedElementInView);
}

@GUID("5752238B-24F0-495A-82F1-2FD593056796")
interface IFrameworkInputPane : IUnknown
{
    HRESULT Advise(IUnknown pWindow, IFrameworkInputPaneHandler pHandler, uint* pdwCookie);
    HRESULT AdviseWithHWND(HWND hwnd, IFrameworkInputPaneHandler pHandler, uint* pdwCookie);
    HRESULT Unadvise(uint dwCookie);
    HRESULT Location(RECT* prcInputPaneScreenLocation);
}

@GUID("6584CE6B-7D82-49C2-89C9-C6BC02BA8C38")
interface IAppVisibilityEvents : IUnknown
{
    HRESULT AppVisibilityOnMonitorChanged(ptrdiff_t hMonitor, MONITOR_APP_VISIBILITY previousMode, 
                                          MONITOR_APP_VISIBILITY currentMode);
    HRESULT LauncherVisibilityChange(BOOL currentVisibleState);
}

@GUID("2246EA2D-CAEA-4444-A3C4-6DE827E44313")
interface IAppVisibility : IUnknown
{
    HRESULT GetAppVisibilityOnMonitor(ptrdiff_t hMonitor, MONITOR_APP_VISIBILITY* pMode);
    HRESULT IsLauncherVisible(int* pfVisible);
    HRESULT Advise(IAppVisibilityEvents pCallback, uint* pdwCookie);
    HRESULT Unadvise(uint dwCookie);
}

@GUID("1BB12A62-2AD8-432B-8CCF-0C2C52AFCD5B")
interface IPackageExecutionStateChangeNotification : IUnknown
{
    HRESULT OnStateChanged(const(wchar)* pszPackageFullName, PACKAGE_EXECUTION_STATE pesNewState);
}

@GUID("F27C3930-8029-4AD1-94E3-3DBA417810C1")
interface IPackageDebugSettings : IUnknown
{
    HRESULT EnableDebugging(const(wchar)* packageFullName, const(wchar)* debuggerCommandLine, 
                            const(wchar)* environment);
    HRESULT DisableDebugging(const(wchar)* packageFullName);
    HRESULT Suspend(const(wchar)* packageFullName);
    HRESULT Resume(const(wchar)* packageFullName);
    HRESULT TerminateAllProcesses(const(wchar)* packageFullName);
    HRESULT SetTargetSessionId(uint sessionId);
    HRESULT EnumerateBackgroundTasks(const(wchar)* packageFullName, uint* taskCount, GUID** taskIds, 
                                     ushort*** taskNames);
    HRESULT ActivateBackgroundTask(GUID* taskId);
    HRESULT StartServicing(const(wchar)* packageFullName);
    HRESULT StopServicing(const(wchar)* packageFullName);
    HRESULT StartSessionRedirection(const(wchar)* packageFullName, uint sessionId);
    HRESULT StopSessionRedirection(const(wchar)* packageFullName);
    HRESULT GetPackageExecutionState(const(wchar)* packageFullName, PACKAGE_EXECUTION_STATE* packageExecutionState);
    HRESULT RegisterForPackageStateChanges(const(wchar)* packageFullName, 
                                           IPackageExecutionStateChangeNotification pPackageExecutionStateChangeNotification, 
                                           uint* pdwCookie);
    HRESULT UnregisterForPackageStateChanges(uint dwCookie);
}

@GUID("6E3194BB-AB82-4D22-93F5-FABDA40E7B16")
interface IPackageDebugSettings2 : IPackageDebugSettings
{
    HRESULT EnumerateApps(const(wchar)* packageFullName, uint* appCount, ushort*** appUserModelIds, 
                          ushort*** appDisplayNames);
}

@GUID("52B83A42-2543-416A-81D9-C0DE7969C8B3")
interface ISuspensionDependencyManager : IUnknown
{
    HRESULT RegisterAsChild(HANDLE processHandle);
    HRESULT GroupChildWithParent(HANDLE childProcessHandle);
    HRESULT UngroupChildFromParent(HANDLE childProcessHandle);
}

@GUID("18B21AA9-E184-4FF0-9F5E-F882D03771B3")
interface IExecuteCommandApplicationHostEnvironment : IUnknown
{
    HRESULT GetValue(AHE_TYPE* pahe);
}

@GUID("4B6832A2-5F04-4C9D-B89D-727A15D103E7")
interface IExecuteCommandHost : IUnknown
{
    HRESULT GetUIMode(EC_HOST_UI_MODE* pUIMode);
}

@GUID("2A3DEE9A-E31D-46D6-8508-BCC597DB3557")
interface IApplicationDesignModeSettings : IUnknown
{
    HRESULT SetNativeDisplaySize(SIZE nativeDisplaySizePixels);
    HRESULT SetScaleFactor(DEVICE_SCALE_FACTOR scaleFactor);
    HRESULT SetApplicationViewState(APPLICATION_VIEW_STATE viewState);
    HRESULT ComputeApplicationSize(SIZE* applicationSizePixels);
    HRESULT IsApplicationViewStateSupported(APPLICATION_VIEW_STATE viewState, SIZE nativeDisplaySizePixels, 
                                            DEVICE_SCALE_FACTOR scaleFactor, int* supported);
    HRESULT TriggerEdgeGesture(EDGE_GESTURE_KIND edgeGestureKind);
}

@GUID("490514E1-675A-4D6E-A58D-E54901B4CA2F")
interface IApplicationDesignModeSettings2 : IApplicationDesignModeSettings
{
    HRESULT SetNativeDisplayOrientation(NATIVE_DISPLAY_ORIENTATION nativeDisplayOrientation);
    HRESULT SetApplicationViewOrientation(APPLICATION_VIEW_ORIENTATION viewOrientation);
    HRESULT SetAdjacentDisplayEdges(ADJACENT_DISPLAY_EDGES adjacentDisplayEdges);
    HRESULT SetIsOnLockScreen(BOOL isOnLockScreen);
    HRESULT SetApplicationViewMinWidth(APPLICATION_VIEW_MIN_WIDTH viewMinWidth);
    HRESULT GetApplicationSizeBounds(SIZE* minApplicationSizePixels, SIZE* maxApplicationSizePixels);
    HRESULT GetApplicationViewOrientation(SIZE applicationSizePixels, 
                                          APPLICATION_VIEW_ORIENTATION* viewOrientation);
}

@GUID("266FBC7E-490D-46ED-A96B-2274DB252003")
interface ILaunchTargetMonitor : IUnknown
{
    HRESULT GetMonitor(ptrdiff_t* monitor);
}

@GUID("E5AA01F7-1FB8-4830-8720-4E6734CBD5F3")
interface ILaunchSourceViewSizePreference : IUnknown
{
    HRESULT GetSourceViewToPosition(HWND* hwnd);
    HRESULT GetSourceViewSizePreference(APPLICATION_VIEW_SIZE_PREFERENCE* sourceSizeAfterLaunch);
}

@GUID("2F0666C6-12F7-4360-B511-A394A0553725")
interface ILaunchTargetViewSizePreference : IUnknown
{
    HRESULT GetTargetViewSizePreference(APPLICATION_VIEW_SIZE_PREFERENCE* targetSizeOnLaunch);
}

@GUID("989191AC-28FF-4CF0-9584-E0D078BC2396")
interface ILaunchSourceAppUserModelId : IUnknown
{
    HRESULT GetAppUserModelId(ushort** launchingApp);
}

@GUID("3E68D4BD-7135-4D10-8018-9FB6D9F33FA1")
interface IInitializeWithWindow : IUnknown
{
    HRESULT Initialize(HWND hwnd);
}

@GUID("997706EF-F880-453B-8118-39E1A2D2655A")
interface IHandlerInfo : IUnknown
{
    HRESULT GetApplicationDisplayName(ushort** value);
    HRESULT GetApplicationPublisher(ushort** value);
    HRESULT GetApplicationIconReference(ushort** value);
}

@GUID("31CCA04C-04D3-4EA9-90DE-97B15E87A532")
interface IHandlerInfo2 : IHandlerInfo
{
    HRESULT GetApplicationId(ushort** value);
}

@GUID("35094A87-8BB1-4237-96C6-C417EEBDB078")
interface IHandlerActivationHost : IUnknown
{
    HRESULT BeforeCoCreateInstance(const(GUID)* clsidHandler, IShellItemArray itemsBeingActivated, 
                                   IHandlerInfo handlerInfo);
    HRESULT BeforeCreateProcess(const(wchar)* applicationPath, const(wchar)* commandLine, IHandlerInfo handlerInfo);
}

@GUID("ABAD189D-9FA3-4278-B3CA-8CA448A88DCB")
interface IAppActivationUIInfo : IUnknown
{
    HRESULT GetMonitor(ptrdiff_t* value);
    HRESULT GetInvokePoint(POINT* value);
    HRESULT GetShowCommand(int* value);
    HRESULT GetShowUI(int* value);
    HRESULT GetKeyState(uint* value);
}

@GUID("99EACBA7-E073-43B6-A896-55AFE48A0833")
interface IContactManagerInterop : IUnknown
{
    HRESULT ShowContactCardForWindow(HWND appWindow, IUnknown contact, const(RECT)* selection, 
                                     FLYOUT_PLACEMENT preferredPlacement);
}

@GUID("0C6C4200-C589-11D0-999A-00C04FD655E1")
interface IShellIconOverlayIdentifier : IUnknown
{
    HRESULT IsMemberOf(const(wchar)* pwszPath, uint dwAttrib);
    HRESULT GetOverlayInfo(const(wchar)* pwszIconFile, int cchMax, int* pIndex, uint* pdwFlags);
    HRESULT GetPriority(int* pPriority);
}

@GUID("8D7B2BA7-DB05-46A8-823C-D2B6DE08EE91")
interface IBannerNotificationHandler : IUnknown
{
    HRESULT OnBannerEvent(const(BANNER_NOTIFICATION)* notification);
}

@GUID("6DFC60FB-F2E9-459B-BEB5-288F1A7C7D54")
interface ISortColumnArray : IUnknown
{
    HRESULT GetCount(uint* columnCount);
    HRESULT GetAt(uint index, SORTCOLUMN* sortcolumn);
    HRESULT GetSortType(SORT_ORDER_TYPE* type);
}

@GUID("75BD59AA-F23B-4963-ABA4-0B355752A91B")
interface IPropertyKeyStore : IUnknown
{
    HRESULT GetKeyCount(int* keyCount);
    HRESULT GetKeyAt(int index, PROPERTYKEY* pkey);
    HRESULT AppendKey(const(PROPERTYKEY)* key);
    HRESULT DeleteKey(int index);
    HRESULT IsKeyInStore(const(PROPERTYKEY)* key);
    HRESULT RemoveKey(const(PROPERTYKEY)* key);
}

@GUID("C7B236CE-EE80-11D0-985F-006008059382")
interface IQueryCodePage : IUnknown
{
    HRESULT GetCodePage(uint* puiCodePage);
    HRESULT SetCodePage(uint uiCodePage);
}

@GUID("3CC974D2-B302-4D36-AD3E-06D93F695D3F")
interface IFolderViewOptions : IUnknown
{
    HRESULT SetFolderViewOptions(FOLDERVIEWOPTIONS fvoMask, FOLDERVIEWOPTIONS fvoFlags);
    HRESULT GetFolderViewOptions(FOLDERVIEWOPTIONS* pfvoFlags);
}

@GUID("EC39FA88-F8AF-41C5-8421-38BED28F4673")
interface IShellView3 : IShellView2
{
    HRESULT CreateViewWindow3(IShellBrowser psbOwner, IShellView psvPrev, uint dwViewFlags, FOLDERFLAGS dwMask, 
                              FOLDERFLAGS dwFlags, FOLDERVIEWMODE fvMode, const(GUID)* pvid, const(RECT)* prcView, 
                              HWND* phwndView);
}

@GUID("6AF6E03F-D664-4EF4-9626-F7E0ED36755E")
interface ISearchBoxInfo : IUnknown
{
    HRESULT GetCondition(const(GUID)* riid, void** ppv);
    HRESULT GetText(ushort** ppsz);
}

@GUID("E693CF68-D967-4112-8763-99172AEE5E5A")
interface IVisualProperties : IUnknown
{
    HRESULT SetWatermark(HBITMAP hbmp, VPWATERMARKFLAGS vpwf);
    HRESULT SetColor(VPCOLORFLAGS vpcf, uint cr);
    HRESULT GetColor(VPCOLORFLAGS vpcf, uint* pcr);
    HRESULT SetItemHeight(int cyItemInPixels);
    HRESULT GetItemHeight(int* cyItemInPixels);
    HRESULT SetFont(const(LOGFONTW)* plf, BOOL bRedraw);
    HRESULT GetFont(LOGFONTW* plf);
    HRESULT SetTheme(const(wchar)* pszSubAppName, const(wchar)* pszSubIdList);
}

@GUID("C8AD25A1-3294-41EE-8165-71174BD01C57")
interface ICommDlgBrowser3 : ICommDlgBrowser2
{
    HRESULT OnColumnClicked(IShellView ppshv, int iColumn);
    HRESULT GetCurrentFilter(const(wchar)* pszFileSpec, int cchFileSpec);
    HRESULT OnPreViewCreated(IShellView ppshv);
}

@GUID("A561E69A-B4B8-4113-91A5-64C6BCCA3430")
interface IUserAccountChangeCallback : IUnknown
{
    HRESULT OnPictureChange(const(wchar)* pszUserName);
}

@GUID("FE0B6665-E0CA-49B9-A178-2B5CB48D92A5")
interface IStreamAsync : IStream
{
    HRESULT ReadAsync(char* pv, uint cb, uint* pcbRead, OVERLAPPED* lpOverlapped);
    HRESULT WriteAsync(char* lpBuffer, uint cb, uint* pcbWritten, OVERLAPPED* lpOverlapped);
    HRESULT OverlappedResult(OVERLAPPED* lpOverlapped, uint* lpNumberOfBytesTransferred, BOOL bWait);
    HRESULT CancelIo();
}

@GUID("8A68FDDA-1FDC-4C20-8CEB-416643B5A625")
interface IStreamUnbufferedInfo : IUnknown
{
    HRESULT GetSectorSize(uint* pcbSectorSize);
}

@GUID("83E07D0D-0C5F-4163-BF1A-60B274051E40")
interface IDragSourceHelper2 : IDragSourceHelper
{
    HRESULT SetFlags(uint dwFlags);
}

@GUID("C1FB73D0-EC3A-4BA2-B512-8CDB9187B6D1")
interface IHWEventHandler : IUnknown
{
    HRESULT Initialize(const(wchar)* pszParams);
    HRESULT HandleEvent(const(wchar)* pszDeviceID, const(wchar)* pszAltDeviceID, const(wchar)* pszEventType);
    HRESULT HandleEventWithContent(const(wchar)* pszDeviceID, const(wchar)* pszAltDeviceID, 
                                   const(wchar)* pszEventType, const(wchar)* pszContentTypeHandler, 
                                   IDataObject pdataobject);
}

@GUID("CFCC809F-295D-42E8-9FFC-424B33C487E6")
interface IHWEventHandler2 : IHWEventHandler
{
    HRESULT HandleEventWithHWND(const(wchar)* pszDeviceID, const(wchar)* pszAltDeviceID, 
                                const(wchar)* pszEventType, HWND hwndOwner);
}

@GUID("DDEFE873-6997-4E68-BE26-39B633ADBE12")
interface IQueryCancelAutoPlay : IUnknown
{
    HRESULT AllowAutoPlay(const(wchar)* pszPath, uint dwContentType, const(wchar)* pszLabel, uint dwSerialNumber);
}

@GUID("DC2601D7-059E-42FC-A09D-2AFD21B6D5F7")
interface IDynamicHWHandler : IUnknown
{
    HRESULT GetDynamicInfo(const(wchar)* pszDeviceID, uint dwContentType, ushort** ppszAction);
}

@GUID("19108294-0441-4AFF-8013-FA0A730B0BEA")
interface IUserNotificationCallback : IUnknown
{
    HRESULT OnBalloonUserClick(POINT* pt);
    HRESULT OnLeftClick(POINT* pt);
    HRESULT OnContextMenu(POINT* pt);
}

@GUID("215913CC-57EB-4FAB-AB5A-E5FA7BEA2A6C")
interface IUserNotification2 : IUnknown
{
    HRESULT SetBalloonInfo(const(wchar)* pszTitle, const(wchar)* pszText, uint dwInfoFlags);
    HRESULT SetBalloonRetry(uint dwShowTime, uint dwInterval, uint cRetryCount);
    HRESULT SetIconInfo(HICON hIcon, const(wchar)* pszToolTip);
    HRESULT Show(IQueryContinue pqc, uint dwContinuePollInterval, IUserNotificationCallback pSink);
    HRESULT PlaySoundA(const(wchar)* pszSoundName);
}

@GUID("79D16DE4-ABEE-4021-8D9D-9169B261D657")
interface IDeskBand2 : IDeskBand
{
    HRESULT CanRenderComposited(int* pfCanRenderComposited);
    HRESULT SetCompositionState(BOOL fCompositionEnabled);
    HRESULT GetCompositionState(int* pfCompositionEnabled);
}

@GUID("4CD19ADA-25A5-4A32-B3B7-347BEE5BE36B")
interface IStartMenuPinnedList : IUnknown
{
    HRESULT RemoveFromList(IShellItem pitem);
}

@GUID("3D73A659-E5D0-4D42-AFC0-5121BA425C8D")
interface ICDBurn : IUnknown
{
    HRESULT GetRecorderDriveLetter(const(wchar)* pszDrive, uint cch);
    HRESULT Burn(HWND hwnd);
    HRESULT HasRecordableDrive(int* pfHasRecorder);
}

@GUID("88960F5B-422F-4E7B-8013-73415381C3C3")
interface IWizardSite : IUnknown
{
    HRESULT GetPreviousPage(HPROPSHEETPAGE* phpage);
    HRESULT GetNextPage(HPROPSHEETPAGE* phpage);
    HRESULT GetCancelledPage(HPROPSHEETPAGE* phpage);
}

@GUID("C02EA696-86CC-491E-9B23-74394A0444A8")
interface IWizardExtension : IUnknown
{
    HRESULT AddPages(char* aPages, uint cPages, uint* pnPagesAdded);
    HRESULT GetFirstPage(HPROPSHEETPAGE* phpage);
    HRESULT GetLastPage(HPROPSHEETPAGE* phpage);
}

@GUID("0E6B3F66-98D1-48C0-A222-FBDE74E2FBC5")
interface IWebWizardExtension : IWizardExtension
{
    HRESULT SetInitialURL(const(wchar)* pszURL);
    HRESULT SetErrorURL(const(wchar)* pszErrorURL);
}

@GUID("AA9198BB-CCEC-472D-BEED-19A4F6733F7A")
interface IPublishingWizard : IWizardExtension
{
    HRESULT Initialize(IDataObject pdo, uint dwOptions, const(wchar)* pszServiceScope);
    HRESULT GetTransferManifest(int* phrFromTransfer, IXMLDOMDocument* pdocManifest);
}

@GUID("1EA58F02-D55A-411D-B09E-9E65AC21605B")
interface IFolderViewHost : IUnknown
{
    HRESULT Initialize(HWND hwndParent, IDataObject pdo, RECT* prc);
}

@GUID("95A391C5-9ED4-4C28-8401-AB9E06719E11")
interface IAccessibleObject : IUnknown
{
    HRESULT SetAccessibleName(const(wchar)* pszName);
}

@GUID("96E5AE6D-6AE1-4B1C-900C-C6480EAA8828")
interface IResultsFolder : IUnknown
{
    HRESULT AddItem(IShellItem psi);
    HRESULT AddIDList(ITEMIDLIST* pidl, ITEMIDLIST** ppidlAdded);
    HRESULT RemoveItem(IShellItem psi);
    HRESULT RemoveIDList(ITEMIDLIST* pidl);
    HRESULT RemoveAll();
}

@GUID("3CD141F4-3C6A-11D2-BCAA-00C04FD929DB")
interface IAutoCompleteDropDown : IUnknown
{
    HRESULT GetDropDownStatus(uint* pdwFlags, ushort** ppwszString);
    HRESULT ResetEnumerator();
}

@GUID("2271DCCA-74FC-4414-8FB7-C56B05ACE2D7")
interface ICDBurnExt : IUnknown
{
    HRESULT GetSupportedActionTypes(uint* pdwActions);
}

@GUID("61E00D45-8FFF-4E60-924E-6537B61612DD")
interface IEnumReadyCallback : IUnknown
{
    HRESULT EnumReady();
}

@GUID("8C8BF236-1AEC-495F-9894-91D57C3C686F")
interface IEnumerableView : IUnknown
{
    HRESULT SetEnumReadyCallback(IEnumReadyCallback percb);
    HRESULT CreateEnumIDListFromContents(ITEMIDLIST* pidlFolder, uint dwEnumFlags, IEnumIDList* ppEnumIDList);
}

@GUID("D2B57227-3D23-4B95-93C0-492BD454C356")
interface IInsertItem : IUnknown
{
    HRESULT InsertItem(ITEMIDLIST* pidl);
}

@GUID("47C01F95-E185-412C-B5C5-4F27DF965AEA")
interface IFolderBandPriv : IUnknown
{
    HRESULT SetCascade(BOOL fCascade);
    HRESULT SetAccelerators(BOOL fAccelerators);
    HRESULT SetNoIcons(BOOL fNoIcons);
    HRESULT SetNoText(BOOL fNoText);
}

@GUID("505F1513-6B3E-4892-A272-59F8889A4D3E")
interface IImageRecompress : IUnknown
{
    HRESULT RecompressImage(IShellItem psi, int cx, int cy, int iQuality, IStorage pstg, IStream* ppstrmOut);
}

@GUID("36116642-D713-4B97-9B83-7484A9D00433")
interface IFileDialogControlEvents : IUnknown
{
    HRESULT OnItemSelected(IFileDialogCustomize pfdc, uint dwIDCtl, uint dwIDItem);
    HRESULT OnButtonClicked(IFileDialogCustomize pfdc, uint dwIDCtl);
    HRESULT OnCheckButtonToggled(IFileDialogCustomize pfdc, uint dwIDCtl, BOOL bChecked);
    HRESULT OnControlActivating(IFileDialogCustomize pfdc, uint dwIDCtl);
}

@GUID("61744FC7-85B5-4791-A9B0-272276309B13")
interface IFileDialog2 : IFileDialog
{
    HRESULT SetCancelButtonLabel(const(wchar)* pszLabel);
    HRESULT SetNavigationRoot(IShellItem psi);
}

@GUID("1F76A169-F994-40AC-8FC8-0959E8874710")
interface IApplicationAssociationRegistrationUI : IUnknown
{
    HRESULT LaunchAdvancedAssociationUI(const(wchar)* pszAppRegistryName);
}

@GUID("FCE4BDE0-4B68-4B80-8E9C-7426315A7388")
interface IShellRunDll : IUnknown
{
    HRESULT Run(const(wchar)* pszArgs);
}

@GUID("76E54780-AD74-48E3-A695-3BA9A0AFF10D")
interface IPreviousVersionsInfo : IUnknown
{
    HRESULT AreSnapshotsAvailable(const(wchar)* pszPath, BOOL fOkToBeSlow, int* pfAvailable);
}

@GUID("05EDDA5C-98A3-4717-8ADB-C5E7DA991EB1")
interface IUseToBrowseItem : IRelatedItem
{
}

@GUID("7CC7AED8-290E-49BC-8945-C1401CC9306C")
interface INameSpaceTreeControl2 : INameSpaceTreeControl
{
    HRESULT SetControlStyle(uint nstcsMask, uint nstcsStyle);
    HRESULT GetControlStyle(uint nstcsMask, uint* pnstcsStyle);
    HRESULT SetControlStyle2(NSTCSTYLE2 nstcsMask, NSTCSTYLE2 nstcsStyle);
    HRESULT GetControlStyle2(NSTCSTYLE2 nstcsMask, NSTCSTYLE2* pnstcsStyle);
}

@GUID("93D77985-B3D8-4484-8318-672CDDA002CE")
interface INameSpaceTreeControlEvents : IUnknown
{
    HRESULT OnItemClick(IShellItem psi, uint nstceHitTest, uint nstceClickType);
    HRESULT OnPropertyItemCommit(IShellItem psi);
    HRESULT OnItemStateChanging(IShellItem psi, uint nstcisMask, uint nstcisState);
    HRESULT OnItemStateChanged(IShellItem psi, uint nstcisMask, uint nstcisState);
    HRESULT OnSelectionChanged(IShellItemArray psiaSelection);
    HRESULT OnKeyboardInput(uint uMsg, WPARAM wParam, LPARAM lParam);
    HRESULT OnBeforeExpand(IShellItem psi);
    HRESULT OnAfterExpand(IShellItem psi);
    HRESULT OnBeginLabelEdit(IShellItem psi);
    HRESULT OnEndLabelEdit(IShellItem psi);
    HRESULT OnGetToolTip(IShellItem psi, const(wchar)* pszTip, int cchTip);
    HRESULT OnBeforeItemDelete(IShellItem psi);
    HRESULT OnItemAdded(IShellItem psi, BOOL fIsRoot);
    HRESULT OnItemDeleted(IShellItem psi, BOOL fIsRoot);
    HRESULT OnBeforeContextMenu(IShellItem psi, const(GUID)* riid, void** ppv);
    HRESULT OnAfterContextMenu(IShellItem psi, IContextMenu pcmIn, const(GUID)* riid, void** ppv);
    HRESULT OnBeforeStateImageChange(IShellItem psi);
    HRESULT OnGetDefaultIconIndex(IShellItem psi, int* piDefaultIcon, int* piOpenIcon);
}

@GUID("F9C665D6-C2F2-4C19-BF33-8322D7352F51")
interface INameSpaceTreeControlDropHandler : IUnknown
{
    HRESULT OnDragEnter(IShellItem psiOver, IShellItemArray psiaData, BOOL fOutsideSource, uint grfKeyState, 
                        uint* pdwEffect);
    HRESULT OnDragOver(IShellItem psiOver, IShellItemArray psiaData, uint grfKeyState, uint* pdwEffect);
    HRESULT OnDragPosition(IShellItem psiOver, IShellItemArray psiaData, int iNewPosition, int iOldPosition);
    HRESULT OnDrop(IShellItem psiOver, IShellItemArray psiaData, int iPosition, uint grfKeyState, uint* pdwEffect);
    HRESULT OnDropPosition(IShellItem psiOver, IShellItemArray psiaData, int iNewPosition, int iOldPosition);
    HRESULT OnDragLeave(IShellItem psiOver);
}

@GUID("71F312DE-43ED-4190-8477-E9536B82350B")
interface INameSpaceTreeAccessible : IUnknown
{
    HRESULT OnGetDefaultAccessibilityAction(IShellItem psi, BSTR* pbstrDefaultAction);
    HRESULT OnDoDefaultAccessibilityAction(IShellItem psi);
    HRESULT OnGetAccessibilityRole(IShellItem psi, VARIANT* pvarRole);
}

@GUID("2D3BA758-33EE-42D5-BB7B-5F3431D86C78")
interface INameSpaceTreeControlCustomDraw : IUnknown
{
    HRESULT PrePaint(HDC hdc, RECT* prc, LRESULT* plres);
    HRESULT PostPaint(HDC hdc, RECT* prc);
    HRESULT ItemPrePaint(HDC hdc, RECT* prc, NSTCCUSTOMDRAW* pnstccdItem, uint* pclrText, uint* pclrTextBk, 
                         LRESULT* plres);
    HRESULT ItemPostPaint(HDC hdc, RECT* prc, NSTCCUSTOMDRAW* pnstccdItem);
}

@GUID("6D67E846-5B9C-4DB8-9CBC-DDE12F4254F1")
interface ITrayDeskBand : IUnknown
{
    HRESULT ShowDeskBand(const(GUID)* clsid);
    HRESULT HideDeskBand(const(GUID)* clsid);
    HRESULT IsDeskBandShown(const(GUID)* clsid);
    HRESULT DeskBandRegistrationChanged();
}

@GUID("B9075C7C-D48E-403F-AB99-D6C77A1084AC")
interface IBandHost : IUnknown
{
    HRESULT CreateBand(const(GUID)* rclsidBand, BOOL fAvailable, BOOL fVisible, const(GUID)* riid, void** ppv);
    HRESULT SetBandAvailability(const(GUID)* rclsidBand, BOOL fAvailable);
    HRESULT DestroyBand(const(GUID)* rclsidBand);
}

@GUID("0DF60D92-6818-46D6-B358-D66170DDE466")
interface IComputerInfoChangeNotify : IUnknown
{
    HRESULT ComputerInfoChanged();
}

@GUID("C1646BC4-F298-4F91-A204-EB2DD1709D1A")
interface IDesktopGadget : IUnknown
{
    HRESULT RunGadget(const(wchar)* gadgetPath);
}

@GUID("5EFB46D7-47C0-4B68-ACDA-DED47C90EC91")
interface IStorageProviderBanners : IUnknown
{
    HRESULT SetBanner(const(wchar)* providerIdentity, const(wchar)* subscriptionId, const(wchar)* contentId);
    HRESULT ClearBanner(const(wchar)* providerIdentity, const(wchar)* subscriptionId);
    HRESULT ClearAllBanners(const(wchar)* providerIdentity);
    HRESULT GetBanner(const(wchar)* providerIdentity, const(wchar)* subscriptionId, ushort** contentId);
}

@GUID("9BA05970-F6A8-11CF-A442-00A0C90A8F39")
interface IFolderViewOC : IDispatch
{
    HRESULT SetFolderView(IDispatch pdisp);
}

@GUID("62112AA2-EBE4-11CF-A5FB-0020AFE7292D")
interface DShellFolderViewEvents : IDispatch
{
}

@GUID("4A3DF050-23BD-11D2-939F-00A0C91EEDBA")
interface DFConstraint : IDispatch
{
    HRESULT get_Name(BSTR* pbs);
    HRESULT get_Value(VARIANT* pv);
}

@GUID("FAC32C80-CBE4-11CE-8350-444553540000")
interface FolderItem : IDispatch
{
    HRESULT get_Application(IDispatch* ppid);
    HRESULT get_Parent(IDispatch* ppid);
    HRESULT get_Name(BSTR* pbs);
    HRESULT put_Name(BSTR bs);
    HRESULT get_Path(BSTR* pbs);
    HRESULT get_GetLink(IDispatch* ppid);
    HRESULT get_GetFolder(IDispatch* ppid);
    HRESULT get_IsLink(short* pb);
    HRESULT get_IsFolder(short* pb);
    HRESULT get_IsFileSystem(short* pb);
    HRESULT get_IsBrowsable(short* pb);
    HRESULT get_ModifyDate(double* pdt);
    HRESULT put_ModifyDate(double dt);
    HRESULT get_Size(int* pul);
    HRESULT get_Type(BSTR* pbs);
    HRESULT Verbs(FolderItemVerbs* ppfic);
    HRESULT InvokeVerb(VARIANT vVerb);
}

@GUID("744129E0-CBE5-11CE-8350-444553540000")
interface FolderItems : IDispatch
{
    HRESULT get_Count(int* plCount);
    HRESULT get_Application(IDispatch* ppid);
    HRESULT get_Parent(IDispatch* ppid);
    HRESULT Item(VARIANT index, FolderItem* ppid);
    HRESULT _NewEnum(IUnknown* ppunk);
}

@GUID("08EC3E00-50B0-11CF-960C-0080C7F4EE85")
interface FolderItemVerb : IDispatch
{
    HRESULT get_Application(IDispatch* ppid);
    HRESULT get_Parent(IDispatch* ppid);
    HRESULT get_Name(BSTR* pbs);
    HRESULT DoIt();
}

@GUID("1F8352C0-50B0-11CF-960C-0080C7F4EE85")
interface FolderItemVerbs : IDispatch
{
    HRESULT get_Count(int* plCount);
    HRESULT get_Application(IDispatch* ppid);
    HRESULT get_Parent(IDispatch* ppid);
    HRESULT Item(VARIANT index, FolderItemVerb* ppid);
    HRESULT _NewEnum(IUnknown* ppunk);
}

@GUID("BBCBDE60-C3FF-11CE-8350-444553540000")
interface Folder : IDispatch
{
    HRESULT get_Title(BSTR* pbs);
    HRESULT get_Application(IDispatch* ppid);
    HRESULT get_Parent(IDispatch* ppid);
    HRESULT get_ParentFolder(Folder* ppsf);
    HRESULT Items(FolderItems* ppid);
    HRESULT ParseName(BSTR bName, FolderItem* ppid);
    HRESULT NewFolder(BSTR bName, VARIANT vOptions);
    HRESULT MoveHere(VARIANT vItem, VARIANT vOptions);
    HRESULT CopyHere(VARIANT vItem, VARIANT vOptions);
    HRESULT GetDetailsOf(VARIANT vItem, int iColumn, BSTR* pbs);
}

@GUID("F0D2D8EF-3890-11D2-BF8B-00C04FB93661")
interface Folder2 : Folder
{
    HRESULT get_Self(FolderItem* ppfi);
    HRESULT get_OfflineStatus(int* pul);
    HRESULT Synchronize();
    HRESULT get_HaveToShowWebViewBarricade(short* pbHaveToShowWebViewBarricade);
    HRESULT DismissedWebViewBarricade();
}

@GUID("A7AE5F64-C4D7-4D7F-9307-4D24EE54B841")
interface Folder3 : Folder2
{
    HRESULT get_ShowWebViewBarricade(short* pbShowWebViewBarricade);
    HRESULT put_ShowWebViewBarricade(short bShowWebViewBarricade);
}

@GUID("EDC817AA-92B8-11D1-B075-00C04FC33AA5")
interface FolderItem2 : FolderItem
{
    HRESULT InvokeVerbEx(VARIANT vVerb, VARIANT vArgs);
    HRESULT ExtendedProperty(BSTR bstrPropName, VARIANT* pvRet);
}

@GUID("C94F0AD0-F363-11D2-A327-00C04F8EEC7F")
interface FolderItems2 : FolderItems
{
    HRESULT InvokeVerbEx(VARIANT vVerb, VARIANT vArgs);
}

@GUID("EAA7C309-BBEC-49D5-821D-64D966CB667F")
interface FolderItems3 : FolderItems2
{
    HRESULT Filter(int grfFlags, BSTR bstrFileSpec);
    HRESULT get_Verbs(FolderItemVerbs* ppfic);
}

@GUID("88A05C00-F000-11CE-8350-444553540000")
interface IShellLinkDual : IDispatch
{
    HRESULT get_Path(BSTR* pbs);
    HRESULT put_Path(BSTR bs);
    HRESULT get_Description(BSTR* pbs);
    HRESULT put_Description(BSTR bs);
    HRESULT get_WorkingDirectory(BSTR* pbs);
    HRESULT put_WorkingDirectory(BSTR bs);
    HRESULT get_Arguments(BSTR* pbs);
    HRESULT put_Arguments(BSTR bs);
    HRESULT get_Hotkey(int* piHK);
    HRESULT put_Hotkey(int iHK);
    HRESULT get_ShowCommand(int* piShowCommand);
    HRESULT put_ShowCommand(int iShowCommand);
    HRESULT Resolve(int fFlags);
    HRESULT GetIconLocation(BSTR* pbs, int* piIcon);
    HRESULT SetIconLocation(BSTR bs, int iIcon);
    HRESULT Save(VARIANT vWhere);
}

@GUID("317EE249-F12E-11D2-B1E4-00C04F8EEB3E")
interface IShellLinkDual2 : IShellLinkDual
{
    HRESULT get_Target(FolderItem* ppfi);
}

@GUID("E7A1AF80-4D96-11CF-960C-0080C7F4EE85")
interface IShellFolderViewDual : IDispatch
{
    HRESULT get_Application(IDispatch* ppid);
    HRESULT get_Parent(IDispatch* ppid);
    HRESULT get_Folder(Folder* ppid);
    HRESULT SelectedItems(FolderItems* ppid);
    HRESULT get_FocusedItem(FolderItem* ppid);
    HRESULT SelectItem(VARIANT* pvfi, int dwFlags);
    HRESULT PopupItemMenu(FolderItem pfi, VARIANT vx, VARIANT vy, BSTR* pbs);
    HRESULT get_Script(IDispatch* ppDisp);
    HRESULT get_ViewOptions(int* plViewOptions);
}

@GUID("31C147B6-0ADE-4A3C-B514-DDF932EF6D17")
interface IShellFolderViewDual2 : IShellFolderViewDual
{
    HRESULT get_CurrentViewMode(uint* pViewMode);
    HRESULT put_CurrentViewMode(uint ViewMode);
    HRESULT SelectItemRelative(int iRelative);
}

@GUID("29EC8E6C-46D3-411F-BAAA-611A6C9CAC66")
interface IShellFolderViewDual3 : IShellFolderViewDual2
{
    HRESULT get_GroupBy(BSTR* pbstrGroupBy);
    HRESULT put_GroupBy(BSTR bstrGroupBy);
    HRESULT get_FolderFlags(uint* pdwFlags);
    HRESULT put_FolderFlags(uint dwFlags);
    HRESULT get_SortColumns(BSTR* pbstrSortColumns);
    HRESULT put_SortColumns(BSTR bstrSortColumns);
    HRESULT put_IconSize(int iIconSize);
    HRESULT get_IconSize(int* piIconSize);
    HRESULT FilterView(BSTR bstrFilterText);
}

@GUID("D8F015C0-C278-11CE-A49E-444553540000")
interface IShellDispatch : IDispatch
{
    HRESULT get_Application(IDispatch* ppid);
    HRESULT get_Parent(IDispatch* ppid);
    HRESULT NameSpace(VARIANT vDir, Folder* ppsdf);
    HRESULT BrowseForFolder(int Hwnd, BSTR Title, int Options, VARIANT RootFolder, Folder* ppsdf);
    HRESULT Windows(IDispatch* ppid);
    HRESULT Open(VARIANT vDir);
    HRESULT Explore(VARIANT vDir);
    HRESULT MinimizeAll();
    HRESULT UndoMinimizeALL();
    HRESULT FileRun();
    HRESULT CascadeWindows();
    HRESULT TileVertically();
    HRESULT TileHorizontally();
    HRESULT ShutdownWindows();
    HRESULT Suspend();
    HRESULT EjectPC();
    HRESULT SetTime();
    HRESULT TrayProperties();
    HRESULT Help();
    HRESULT FindFiles();
    HRESULT FindComputer();
    HRESULT RefreshMenu();
    HRESULT ControlPanelItem(BSTR bstrDir);
}

@GUID("A4C6892C-3BA9-11D2-9DEA-00C04FB16162")
interface IShellDispatch2 : IShellDispatch
{
    HRESULT IsRestricted(BSTR Group, BSTR Restriction, int* plRestrictValue);
    HRESULT ShellExecuteA(BSTR File, VARIANT vArgs, VARIANT vDir, VARIANT vOperation, VARIANT vShow);
    HRESULT FindPrinter(BSTR name, BSTR location, BSTR model);
    HRESULT GetSystemInformation(BSTR name, VARIANT* pv);
    HRESULT ServiceStart(BSTR ServiceName, VARIANT Persistent, VARIANT* pSuccess);
    HRESULT ServiceStop(BSTR ServiceName, VARIANT Persistent, VARIANT* pSuccess);
    HRESULT IsServiceRunning(BSTR ServiceName, VARIANT* pRunning);
    HRESULT CanStartStopService(BSTR ServiceName, VARIANT* pCanStartStop);
    HRESULT ShowBrowserBar(BSTR bstrClsid, VARIANT bShow, VARIANT* pSuccess);
}

@GUID("177160CA-BB5A-411C-841D-BD38FACDEAA0")
interface IShellDispatch3 : IShellDispatch2
{
    HRESULT AddToRecent(VARIANT varFile, BSTR bstrCategory);
}

@GUID("EFD84B2D-4BCF-4298-BE25-EB542A59FBDA")
interface IShellDispatch4 : IShellDispatch3
{
    HRESULT WindowsSecurity();
    HRESULT ToggleDesktop();
    HRESULT ExplorerPolicy(BSTR bstrPolicyName, VARIANT* pValue);
    HRESULT GetSetting(int lSetting, short* pResult);
}

@GUID("866738B9-6CF2-4DE8-8767-F794EBE74F4E")
interface IShellDispatch5 : IShellDispatch4
{
    HRESULT WindowSwitcher();
}

@GUID("286E6F1B-7113-4355-9562-96B7E9D64C54")
interface IShellDispatch6 : IShellDispatch5
{
    HRESULT SearchCommand();
}

@GUID("2D91EEA1-9932-11D2-BE86-00A0C9A83DA1")
interface IFileSearchBand : IDispatch
{
    HRESULT SetFocus();
    HRESULT SetSearchParameters(BSTR* pbstrSearchID, short bNavToResults, VARIANT* pvarScope, 
                                VARIANT* pvarQueryFile);
    HRESULT get_SearchID(BSTR* pbstrSearchID);
    HRESULT get_Scope(VARIANT* pvarScope);
    HRESULT get_QueryFile(VARIANT* pvarFile);
}

@GUID("18BCC359-4990-4BFB-B951-3C83702BE5F9")
interface IWebWizardHost : IDispatch
{
    HRESULT FinalBack();
    HRESULT FinalNext();
    HRESULT Cancel();
    HRESULT put_Caption(BSTR bstrCaption);
    HRESULT get_Caption(BSTR* pbstrCaption);
    HRESULT put_Property(BSTR bstrPropertyName, VARIANT* pvProperty);
    HRESULT get_Property(BSTR bstrPropertyName, VARIANT* pvProperty);
    HRESULT SetWizardButtons(short vfEnableBack, short vfEnableNext, short vfLastPage);
    HRESULT SetHeaderText(BSTR bstrHeaderTitle, BSTR bstrHeaderSubtitle);
}

@GUID("F9C013DC-3C23-4041-8E39-CFB402F7EA59")
interface IWebWizardHost2 : IWebWizardHost
{
    HRESULT SignString(BSTR value, BSTR* signedValue);
}

@GUID("0751C551-7568-41C9-8E5B-E22E38919236")
interface INewWDEvents : IWebWizardHost
{
    HRESULT PassportAuthenticate(BSTR bstrSignInUrl, short* pvfAuthenitcated);
}

@GUID("00BB2762-6A77-11D0-A535-00C04FD7D062")
interface IAutoComplete : IUnknown
{
    HRESULT Init(HWND hwndEdit, IUnknown punkACL, const(wchar)* pwszRegKeyPath, const(wchar)* pwszQuickComplete);
    HRESULT Enable(BOOL fEnable);
}

@GUID("EAC04BC0-3791-11D2-BB95-0060977B464C")
interface IAutoComplete2 : IAutoComplete
{
    HRESULT SetOptions(uint dwFlag);
    HRESULT GetOptions(uint* pdwFlag);
}

@GUID("8E74C210-CF9D-4EAF-A403-7356428F0A5A")
interface IEnumACString : IEnumString
{
    HRESULT NextItem(const(wchar)* pszUrl, uint cchMax, uint* pulSortIndex);
    HRESULT SetEnumOptions(uint dwOptions);
    HRESULT GetEnumOptions(uint* pdwOptions);
}

@GUID("3D8B0590-F691-11D2-8EA9-006097DF5BD4")
interface IDataObjectAsyncCapability : IUnknown
{
    HRESULT SetAsyncMode(BOOL fDoOpAsync);
    HRESULT GetAsyncMode(int* pfIsOpAsync);
    HRESULT StartOperation(IBindCtx pbcReserved);
    HRESULT InOperation(int* pfInAsyncOp);
    HRESULT EndOperation(HRESULT hResult, IBindCtx pbcReserved, uint dwEffects);
}

@GUID("000214EB-0000-0000-C000-000000000046")
interface IExtractIconA : IUnknown
{
    HRESULT GetIconLocation(uint uFlags, const(char)* pszIconFile, uint cchMax, int* piIndex, uint* pwFlags);
    HRESULT Extract(const(char)* pszFile, uint nIconIndex, HICON* phiconLarge, HICON* phiconSmall, uint nIconSize);
}

@GUID("000214FA-0000-0000-C000-000000000046")
interface IExtractIconW : IUnknown
{
    HRESULT GetIconLocation(uint uFlags, const(wchar)* pszIconFile, uint cchMax, int* piIndex, uint* pwFlags);
    HRESULT Extract(const(wchar)* pszFile, uint nIconIndex, HICON* phiconLarge, HICON* phiconSmall, uint nIconSize);
}

@GUID("F10B5E34-DD3B-42A7-AA7D-2F4EC54BB09B")
interface IShellIconOverlayManager : IUnknown
{
    HRESULT GetFileOverlayInfo(const(wchar)* pwszPath, uint dwAttrib, int* pIndex, uint dwflags);
    HRESULT GetReservedOverlayInfo(const(wchar)* pwszPath, uint dwAttrib, int* pIndex, uint dwflags, 
                                   int iReservedID);
    HRESULT RefreshOverlayImages(uint dwFlags);
    HRESULT LoadNonloadedOverlayIdentifiers();
    HRESULT OverlayIndexFromImageIndex(int iImage, int* piIndex, BOOL fAdd);
}

@GUID("7D688A70-C613-11D0-999B-00C04FD655E1")
interface IShellIconOverlay : IUnknown
{
    HRESULT GetOverlayIndex(ITEMIDLIST* pidl, int* pIndex);
    HRESULT GetOverlayIconIndex(ITEMIDLIST* pidl, int* pIconIndex);
}

@GUID("000214F5-0000-0000-C000-000000000046")
interface IShellExecuteHookA : IUnknown
{
    HRESULT Execute(SHELLEXECUTEINFOA* pei);
}

@GUID("000214FB-0000-0000-C000-000000000046")
interface IShellExecuteHookW : IUnknown
{
    HRESULT Execute(SHELLEXECUTEINFOW* pei);
}

@GUID("AC60F6A0-0FD9-11D0-99CB-00C04FD64497")
interface IURLSearchHook : IUnknown
{
    HRESULT Translate(const(wchar)* pwszSearchURL, uint cchBufferSize);
}

@GUID("09F656A2-41AF-480C-88F7-16CC0D164615")
interface ISearchContext : IUnknown
{
    HRESULT GetSearchUrl(BSTR* pbstrSearchUrl);
    HRESULT GetSearchText(BSTR* pbstrSearchText);
    HRESULT GetSearchStyle(uint* pdwSearchStyle);
}

@GUID("5EE44DA4-6D32-46E3-86BC-07540DEDD0E0")
interface IURLSearchHook2 : IURLSearchHook
{
    HRESULT TranslateWithSearchContext(const(wchar)* pwszSearchURL, uint cchBufferSize, 
                                       ISearchContext pSearchContext);
}

@GUID("000214EC-0000-0000-C000-000000000046")
interface IShellDetails : IUnknown
{
    HRESULT GetDetailsOf(ITEMIDLIST* pidl, uint iColumn, SHELLDETAILS* pDetails);
    HRESULT ColumnClick(uint iColumn);
}

@GUID("00BB2761-6A77-11D0-A535-00C04FD7D062")
interface IObjMgr : IUnknown
{
    HRESULT Append(IUnknown punk);
    HRESULT Remove(IUnknown punk);
}

@GUID("77A130B0-94FD-11D0-A544-00C04FD7D062")
interface IACList : IUnknown
{
    HRESULT Expand(const(wchar)* pszExpand);
}

@GUID("470141A0-5186-11D2-BBB6-0060977B464C")
interface IACList2 : IACList
{
    HRESULT SetOptions(uint dwFlag);
    HRESULT GetOptions(uint* pdwFlag);
}

@GUID("EBBC7C04-315E-11D2-B62F-006097DF5BD4")
interface IProgressDialog : IUnknown
{
    HRESULT StartProgressDialog(HWND hwndParent, IUnknown punkEnableModless, uint dwFlags, void* pvResevered);
    HRESULT StopProgressDialog();
    HRESULT SetTitle(const(wchar)* pwzTitle);
    HRESULT SetAnimation(HINSTANCE hInstAnimation, uint idAnimation);
    BOOL    HasUserCancelled();
    HRESULT SetProgress(uint dwCompleted, uint dwTotal);
    HRESULT SetProgress64(ulong ullCompleted, ulong ullTotal);
    HRESULT SetLine(uint dwLineNum, const(wchar)* pwzString, BOOL fCompactPath, void* pvResevered);
    HRESULT SetCancelMsg(const(wchar)* pwzCancelMsg, void* pvResevered);
    HRESULT Timer(uint dwTimerAction, void* pvResevered);
}

@GUID("2A342FC2-7B26-11D0-8CA9-00A0C92DBFE8")
interface IDockingWindowSite : IOleWindow
{
    HRESULT GetBorderDW(IUnknown punkObj, RECT* prcBorder);
    HRESULT RequestBorderSpaceDW(IUnknown punkObj, RECT* pbw);
    HRESULT SetBorderSpaceDW(IUnknown punkObj, RECT* pbw);
}

@GUID("D82BE2B1-5764-11D0-A96E-00C04FD705A2")
interface IShellChangeNotify : IUnknown
{
    HRESULT OnChange(int lEvent, ITEMIDLIST* pidl1, ITEMIDLIST* pidl2);
}

@GUID("00021500-0000-0000-C000-000000000046")
interface IQueryInfo : IUnknown
{
    HRESULT GetInfoTip(uint dwFlags, ushort** ppwszTip);
    HRESULT GetInfoFlags(uint* pdwFlags);
}

@GUID("2047E320-F2A9-11CE-AE65-08002B2E1262")
interface IShellFolderViewCB : IUnknown
{
    HRESULT MessageSFVCB(uint uMsg, WPARAM wParam, LPARAM lParam);
}

@GUID("37A378C0-F82D-11CE-AE65-08002B2E1262")
interface IShellFolderView : IUnknown
{
    HRESULT Rearrange(LPARAM lParamSort);
    HRESULT GetArrangeParam(LPARAM* plParamSort);
    HRESULT ArrangeGrid();
    HRESULT AutoArrange();
    HRESULT GetAutoArrange();
    HRESULT AddObject(ITEMIDLIST* pidl, uint* puItem);
    HRESULT GetObjectA(ITEMIDLIST** ppidl, uint uItem);
    HRESULT RemoveObject(ITEMIDLIST* pidl, uint* puItem);
    HRESULT GetObjectCount(uint* puCount);
    HRESULT SetObjectCount(uint uCount, uint dwFlags);
    HRESULT UpdateObject(ITEMIDLIST* pidlOld, ITEMIDLIST* pidlNew, uint* puItem);
    HRESULT RefreshObject(ITEMIDLIST* pidl, uint* puItem);
    HRESULT SetRedraw(BOOL bRedraw);
    HRESULT GetSelectedCount(uint* puSelected);
    HRESULT GetSelectedObjects(ITEMIDLIST*** pppidl, uint* puItems);
    HRESULT IsDropOnSource(IDropTarget pDropTarget);
    HRESULT GetDragPoint(POINT* ppt);
    HRESULT GetDropPoint(POINT* ppt);
    HRESULT MoveIcons(IDataObject pDataObject);
    HRESULT SetItemPos(ITEMIDLIST* pidl, POINT* ppt);
    HRESULT IsBkDropTarget(IDropTarget pDropTarget);
    HRESULT SetClipboard(BOOL bMove);
    HRESULT SetPoints(IDataObject pDataObject);
    HRESULT GetItemSpacing(ITEMSPACING* pSpacing);
    HRESULT SetCallback(IShellFolderViewCB pNewCB, IShellFolderViewCB* ppOldCB);
    HRESULT Select(uint dwFlags);
    HRESULT QuerySupport(uint* pdwSupport);
    HRESULT SetAutomationObject(IDispatch pdisp);
}

@GUID("FB700430-952C-11D1-946F-000000000000")
interface INamedPropertyBag : IUnknown
{
    HRESULT ReadPropertyNPB(const(wchar)* pszBagname, const(wchar)* pszPropName, PROPVARIANT* pVar);
    HRESULT WritePropertyNPB(const(wchar)* pszBagname, const(wchar)* pszPropName, PROPVARIANT* pVar);
    HRESULT RemovePropertyNPB(const(wchar)* pszBagname, const(wchar)* pszPropName);
}

@GUID("000214E1-0000-0000-C000-000000000046")
interface INewShortcutHookA : IUnknown
{
    HRESULT SetReferent(const(char)* pcszReferent, HWND hwnd);
    HRESULT GetReferent(const(char)* pszReferent, int cchReferent);
    HRESULT SetFolder(const(char)* pcszFolder);
    HRESULT GetFolder(const(char)* pszFolder, int cchFolder);
    HRESULT GetName(const(char)* pszName, int cchName);
    HRESULT GetExtension(const(char)* pszExtension, int cchExtension);
}

@GUID("000214F7-0000-0000-C000-000000000046")
interface INewShortcutHookW : IUnknown
{
    HRESULT SetReferent(const(wchar)* pcszReferent, HWND hwnd);
    HRESULT GetReferent(const(wchar)* pszReferent, int cchReferent);
    HRESULT SetFolder(const(wchar)* pcszFolder);
    HRESULT GetFolder(const(wchar)* pszFolder, int cchFolder);
    HRESULT GetName(const(wchar)* pszName, int cchName);
    HRESULT GetExtension(const(wchar)* pszExtension, int cchExtension);
}

@GUID("000214EF-0000-0000-C000-000000000046")
interface ICopyHookA : IUnknown
{
    uint CopyCallback(HWND hwnd, uint wFunc, uint wFlags, const(char)* pszSrcFile, uint dwSrcAttribs, 
                      const(char)* pszDestFile, uint dwDestAttribs);
}

@GUID("000214FC-0000-0000-C000-000000000046")
interface ICopyHookW : IUnknown
{
    uint CopyCallback(HWND hwnd, uint wFunc, uint wFlags, const(wchar)* pszSrcFile, uint dwSrcAttribs, 
                      const(wchar)* pszDestFile, uint dwDestAttribs);
}

@GUID("91956D21-9276-11D1-921A-006097DF5BD4")
interface ICurrentWorkingDirectory : IUnknown
{
    HRESULT GetDirectory(const(wchar)* pwzPath, uint cchSize);
    HRESULT SetDirectory(const(wchar)* pwzPath);
}

@GUID("47D2657A-7B27-11D0-8CA9-00A0C92DBFE8")
interface IDockingWindowFrame : IOleWindow
{
    HRESULT AddToolbar(IUnknown punkSrc, const(wchar)* pwszItem, uint dwAddFlags);
    HRESULT RemoveToolbar(IUnknown punkSrc, uint dwRemoveFlags);
    HRESULT FindToolbar(const(wchar)* pwszItem, const(GUID)* riid, void** ppv);
}

@GUID("4EA39266-7211-409F-B622-F63DBD16C533")
interface IThumbnailCapture : IUnknown
{
    HRESULT CaptureThumbnail(const(SIZE)* pMaxSize, IUnknown pHTMLDoc2, HBITMAP* phbmThumbnail);
}

@GUID("7FE80CC8-C247-11D0-B93A-00A0C90312E1")
interface IShellFolderBand : IUnknown
{
    HRESULT InitializeSFB(IShellFolder psf, ITEMIDLIST* pidl);
    HRESULT SetBandInfoSFB(BANDINFOSFB* pbi);
    HRESULT GetBandInfoSFB(BANDINFOSFB* pbi);
}

@GUID("EB0FE175-1A3A-11D0-89B3-00A0C90A90AC")
interface IDeskBarClient : IOleWindow
{
    HRESULT SetDeskBarSite(IUnknown punkSite);
    HRESULT SetModeDBC(uint dwMode);
    HRESULT UIActivateDBC(uint dwState);
    HRESULT GetSize(uint dwWhich, RECT* prc);
}

@GUID("E8025004-1C42-11D2-BE2C-00A0C9A83DA1")
interface IColumnProvider : IUnknown
{
    HRESULT Initialize(SHCOLUMNINIT* psci);
    HRESULT GetColumnInfo(uint dwIndex, SHCOLUMNINFO* psci);
    HRESULT GetItemData(PROPERTYKEY* pscid, SHCOLUMNDATA* pscd, VARIANT* pvarData);
}

@GUID("87D605E0-C511-11CF-89A9-00A0C9054129")
interface IDocViewSite : IUnknown
{
    HRESULT OnSetTitle(VARIANT* pvTitle);
}

@GUID("4622AD16-FF23-11D0-8D34-00A0C90F2719")
interface IInitializeObject : IUnknown
{
    HRESULT Initialize();
}

@GUID("596A9A94-013E-11D1-8D34-00A0C90F2719")
interface IBanneredBar : IUnknown
{
    HRESULT SetIconSize(uint iIcon);
    HRESULT GetIconSize(uint* piIcon);
    HRESULT SetBitmap(HBITMAP hBitmap);
    HRESULT GetBitmap(HBITMAP* phBitmap);
}

@GUID("C46CA590-3C3F-11D2-BEE6-0000F805CA57")
interface IQueryAssociations : IUnknown
{
    HRESULT Init(uint flags, const(wchar)* pszAssoc, HKEY hkProgid, HWND hwnd);
    HRESULT GetString(uint flags, ASSOCSTR str, const(wchar)* pszExtra, const(wchar)* pszOut, uint* pcchOut);
    HRESULT GetKey(uint flags, ASSOCKEY key, const(wchar)* pszExtra, HKEY* phkeyOut);
    HRESULT GetData(uint flags, ASSOCDATA data, const(wchar)* pszExtra, char* pvOut, uint* pcbOut);
    HRESULT GetEnum(uint flags, ASSOCENUM assocenum, const(wchar)* pszExtra, const(GUID)* riid, void** ppvOut);
}

@GUID("A3E14960-935F-11D1-B8B8-006008059382")
interface IShellApp : IUnknown
{
    HRESULT GetAppInfo(APPINFODATA* pai);
    HRESULT GetPossibleActions(uint* pdwActions);
    HRESULT GetSlowAppInfo(SLOWAPPINFO* psaid);
    HRESULT GetCachedSlowAppInfo(SLOWAPPINFO* psaid);
    HRESULT IsInstalled();
}

@GUID("1BC752E0-9046-11D1-B8B3-006008059382")
interface IPublishedApp : IShellApp
{
    HRESULT Install(SYSTEMTIME* pstInstall);
    HRESULT GetPublishedAppInfo(PUBAPPINFO* ppai);
    HRESULT Unschedule();
}

@GUID("12B81347-1B3A-4A04-AA61-3F768B67FD7E")
interface IPublishedApp2 : IPublishedApp
{
    HRESULT Install2(SYSTEMTIME* pstInstall, HWND hwndParent);
}

@GUID("0B124F8C-91F0-11D1-B8B5-006008059382")
interface IEnumPublishedApps : IUnknown
{
    HRESULT Next(IPublishedApp* pia);
    HRESULT Reset();
}

@GUID("07250A10-9CF9-11D1-9076-006008059382")
interface IAppPublisher : IUnknown
{
    HRESULT GetNumberOfCategories(uint* pdwCat);
    HRESULT GetCategories(APPCATEGORYINFOLIST* pAppCategoryList);
    HRESULT GetNumberOfApps(uint* pdwApps);
    HRESULT EnumApps(GUID* pAppCategoryId, IEnumPublishedApps* ppepa);
}

@GUID("63913A93-40C1-481A-818D-4072FF8C70CC")
interface ICredentialProviderCredential : IUnknown
{
    HRESULT Advise(ICredentialProviderCredentialEvents pcpce);
    HRESULT UnAdvise();
    HRESULT SetSelected(int* pbAutoLogon);
    HRESULT SetDeselected();
    HRESULT GetFieldState(uint dwFieldID, CREDENTIAL_PROVIDER_FIELD_STATE* pcpfs, 
                          CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE* pcpfis);
    HRESULT GetStringValue(uint dwFieldID, ushort** ppsz);
    HRESULT GetBitmapValue(uint dwFieldID, HBITMAP* phbmp);
    HRESULT GetCheckboxValue(uint dwFieldID, int* pbChecked, ushort** ppszLabel);
    HRESULT GetSubmitButtonValue(uint dwFieldID, uint* pdwAdjacentTo);
    HRESULT GetComboBoxValueCount(uint dwFieldID, uint* pcItems, uint* pdwSelectedItem);
    HRESULT GetComboBoxValueAt(uint dwFieldID, uint dwItem, ushort** ppszItem);
    HRESULT SetStringValue(uint dwFieldID, const(wchar)* psz);
    HRESULT SetCheckboxValue(uint dwFieldID, BOOL bChecked);
    HRESULT SetComboBoxSelectedValue(uint dwFieldID, uint dwSelectedItem);
    HRESULT CommandLinkClicked(uint dwFieldID);
    HRESULT GetSerialization(CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE* pcpgsr, 
                             CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION* pcpcs, ushort** ppszOptionalStatusText, 
                             CREDENTIAL_PROVIDER_STATUS_ICON* pcpsiOptionalStatusIcon);
    HRESULT ReportResult(NTSTATUS ntsStatus, NTSTATUS ntsSubstatus, ushort** ppszOptionalStatusText, 
                         CREDENTIAL_PROVIDER_STATUS_ICON* pcpsiOptionalStatusIcon);
}

@GUID("9090BE5B-502B-41FB-BCCC-0049A6C7254B")
interface IQueryContinueWithStatus : IQueryContinue
{
    HRESULT SetStatusMessage(const(wchar)* psz);
}

@GUID("9387928B-AC75-4BF9-8AB2-2B93C4A55290")
interface IConnectableCredentialProviderCredential : ICredentialProviderCredential
{
    HRESULT Connect(IQueryContinueWithStatus pqcws);
    HRESULT Disconnect();
}

@GUID("FA6FA76B-66B7-4B11-95F1-86171118E816")
interface ICredentialProviderCredentialEvents : IUnknown
{
    HRESULT SetFieldState(ICredentialProviderCredential pcpc, uint dwFieldID, CREDENTIAL_PROVIDER_FIELD_STATE cpfs);
    HRESULT SetFieldInteractiveState(ICredentialProviderCredential pcpc, uint dwFieldID, 
                                     CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE cpfis);
    HRESULT SetFieldString(ICredentialProviderCredential pcpc, uint dwFieldID, const(wchar)* psz);
    HRESULT SetFieldCheckbox(ICredentialProviderCredential pcpc, uint dwFieldID, BOOL bChecked, 
                             const(wchar)* pszLabel);
    HRESULT SetFieldBitmap(ICredentialProviderCredential pcpc, uint dwFieldID, HBITMAP hbmp);
    HRESULT SetFieldComboBoxSelectedItem(ICredentialProviderCredential pcpc, uint dwFieldID, uint dwSelectedItem);
    HRESULT DeleteFieldComboBoxItem(ICredentialProviderCredential pcpc, uint dwFieldID, uint dwItem);
    HRESULT AppendFieldComboBoxItem(ICredentialProviderCredential pcpc, uint dwFieldID, const(wchar)* pszItem);
    HRESULT SetFieldSubmitButton(ICredentialProviderCredential pcpc, uint dwFieldID, uint dwAdjacentTo);
    HRESULT OnCreatingWindow(HWND* phwndOwner);
}

@GUID("D27C3481-5A1C-45B2-8AAA-C20EBBE8229E")
interface ICredentialProvider : IUnknown
{
    HRESULT SetUsageScenario(CREDENTIAL_PROVIDER_USAGE_SCENARIO cpus, uint dwFlags);
    HRESULT SetSerialization(const(CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION)* pcpcs);
    HRESULT Advise(ICredentialProviderEvents pcpe, size_t upAdviseContext);
    HRESULT UnAdvise();
    HRESULT GetFieldDescriptorCount(uint* pdwCount);
    HRESULT GetFieldDescriptorAt(uint dwIndex, CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR** ppcpfd);
    HRESULT GetCredentialCount(uint* pdwCount, uint* pdwDefault, int* pbAutoLogonWithDefault);
    HRESULT GetCredentialAt(uint dwIndex, ICredentialProviderCredential* ppcpc);
}

@GUID("34201E5A-A787-41A3-A5A4-BD6DCF2A854E")
interface ICredentialProviderEvents : IUnknown
{
    HRESULT CredentialsChanged(size_t upAdviseContext);
}

@GUID("A5DA53F9-D475-4080-A120-910C4A739880")
interface ICredentialProviderFilter : IUnknown
{
    HRESULT Filter(CREDENTIAL_PROVIDER_USAGE_SCENARIO cpus, uint dwFlags, char* rgclsidProviders, char* rgbAllow, 
                   uint cProviders);
    HRESULT UpdateRemoteCredential(const(CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION)* pcpcsIn, 
                                   CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION* pcpcsOut);
}

@GUID("FD672C54-40EA-4D6E-9B49-CFB1A7507BD7")
interface ICredentialProviderCredential2 : ICredentialProviderCredential
{
    HRESULT GetUserSid(ushort** sid);
}

@GUID("DBC6FB30-C843-49E3-A645-573E6F39446A")
interface ICredentialProviderCredentialWithFieldOptions : IUnknown
{
    HRESULT GetFieldOptions(uint fieldID, CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS* options);
}

@GUID("B53C00B6-9922-4B78-B1F4-DDFE774DC39B")
interface ICredentialProviderCredentialEvents2 : ICredentialProviderCredentialEvents
{
    HRESULT BeginFieldUpdates();
    HRESULT EndFieldUpdates();
    HRESULT SetFieldOptions(ICredentialProviderCredential credential, uint fieldID, 
                            CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS options);
}

@GUID("13793285-3EA6-40FD-B420-15F47DA41FBB")
interface ICredentialProviderUser : IUnknown
{
    HRESULT GetSid(ushort** sid);
    HRESULT GetProviderID(GUID* providerID);
    HRESULT GetStringValue(const(PROPERTYKEY)* key, ushort** stringValue);
    HRESULT GetValue(const(PROPERTYKEY)* key, PROPVARIANT* value);
}

@GUID("90C119AE-0F18-4520-A1F1-114366A40FE8")
interface ICredentialProviderUserArray : IUnknown
{
    HRESULT SetProviderFilter(const(GUID)* guidProviderToFilterTo);
    HRESULT GetAccountOptions(CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS* credentialProviderAccountOptions);
    HRESULT GetCount(uint* userCount);
    HRESULT GetAt(uint userIndex, ICredentialProviderUser* user);
}

@GUID("095C1484-1C0C-4388-9C6D-500E61BF84BD")
interface ICredentialProviderSetUserArray : IUnknown
{
    HRESULT SetUserArray(ICredentialProviderUserArray users);
}

@GUID("A7F337A3-D20B-45CB-9ED7-87D094CA5045")
interface ISyncMgrHandlerCollection : IUnknown
{
    HRESULT GetHandlerEnumerator(IEnumString* ppenum);
    HRESULT BindToHandler(const(wchar)* pszHandlerID, const(GUID)* riid, void** ppv);
}

@GUID("04EC2E43-AC77-49F9-9B98-0307EF7A72A2")
interface ISyncMgrHandler : IUnknown
{
    HRESULT GetName(ushort** ppszName);
    HRESULT GetHandlerInfo(ISyncMgrHandlerInfo* ppHandlerInfo);
    HRESULT GetObjectA(const(GUID)* rguidObjectID, const(GUID)* riid, void** ppv);
    HRESULT GetCapabilities(SYNCMGR_HANDLER_CAPABILITIES* pmCapabilities);
    HRESULT GetPolicies(SYNCMGR_HANDLER_POLICIES* pmPolicies);
    HRESULT Activate(BOOL fActivate);
    HRESULT Enable(BOOL fEnable);
    HRESULT Synchronize(char* ppszItemIDs, uint cItems, HWND hwndOwner, ISyncMgrSessionCreator pSessionCreator, 
                        IUnknown punk);
}

@GUID("4FF1D798-ECF7-4524-AA81-1E362A0AEF3A")
interface ISyncMgrHandlerInfo : IUnknown
{
    HRESULT GetType(SYNCMGR_HANDLER_TYPE* pnType);
    HRESULT GetTypeLabel(ushort** ppszTypeLabel);
    HRESULT GetComment(ushort** ppszComment);
    HRESULT GetLastSyncTime(FILETIME* pftLastSync);
    HRESULT IsActive();
    HRESULT IsEnabled();
    HRESULT IsConnected();
}

@GUID("90701133-BE32-4129-A65C-99E616CAFFF4")
interface ISyncMgrSyncItemContainer : IUnknown
{
    HRESULT GetSyncItem(const(wchar)* pszItemID, ISyncMgrSyncItem* ppItem);
    HRESULT GetSyncItemEnumerator(IEnumSyncMgrSyncItems* ppenum);
    HRESULT GetSyncItemCount(uint* pcItems);
}

@GUID("B20B24CE-2593-4F04-BD8B-7AD6C45051CD")
interface ISyncMgrSyncItem : IUnknown
{
    HRESULT GetItemID(ushort** ppszItemID);
    HRESULT GetName(ushort** ppszName);
    HRESULT GetItemInfo(ISyncMgrSyncItemInfo* ppItemInfo);
    HRESULT GetObjectA(const(GUID)* rguidObjectID, const(GUID)* riid, void** ppv);
    HRESULT GetCapabilities(SYNCMGR_ITEM_CAPABILITIES* pmCapabilities);
    HRESULT GetPolicies(SYNCMGR_ITEM_POLICIES* pmPolicies);
    HRESULT Enable(BOOL fEnable);
    HRESULT Delete();
}

@GUID("E7FD9502-BE0C-4464-90A1-2B5277031232")
interface ISyncMgrSyncItemInfo : IUnknown
{
    HRESULT GetTypeLabel(ushort** ppszTypeLabel);
    HRESULT GetComment(ushort** ppszComment);
    HRESULT GetLastSyncTime(FILETIME* pftLastSync);
    HRESULT IsEnabled();
    HRESULT IsConnected();
}

@GUID("54B3ABF3-F085-4181-B546-E29C403C726B")
interface IEnumSyncMgrSyncItems : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumSyncMgrSyncItems* ppenum);
}

@GUID("17F48517-F305-4321-A08D-B25A834918FD")
interface ISyncMgrSessionCreator : IUnknown
{
    HRESULT CreateSession(const(wchar)* pszHandlerID, char* ppszItemIDs, uint cItems, 
                          ISyncMgrSyncCallback* ppCallback);
}

@GUID("884CCD87-B139-4937-A4BA-4F8E19513FBE")
interface ISyncMgrSyncCallback : IUnknown
{
    HRESULT ReportProgress(const(wchar)* pszItemID, const(wchar)* pszProgressText, SYNCMGR_PROGRESS_STATUS nStatus, 
                           uint uCurrentStep, uint uMaxStep, SYNCMGR_CANCEL_REQUEST* pnCancelRequest);
    HRESULT SetHandlerProgressText(const(wchar)* pszProgressText, SYNCMGR_CANCEL_REQUEST* pnCancelRequest);
    HRESULT ReportEventA(const(wchar)* pszItemID, SYNCMGR_EVENT_LEVEL nLevel, SYNCMGR_EVENT_FLAGS nFlags, 
                         const(wchar)* pszName, const(wchar)* pszDescription, const(wchar)* pszLinkText, 
                         const(wchar)* pszLinkReference, const(wchar)* pszContext, GUID* pguidEventID);
    HRESULT CanContinue(const(wchar)* pszItemID);
    HRESULT QueryForAdditionalItems(IEnumString* ppenumItemIDs, IEnumUnknown* ppenumPunks);
    HRESULT AddItemToSession(const(wchar)* pszItemID);
    HRESULT AddIUnknownToSession(IUnknown punk);
    HRESULT ProposeItem(ISyncMgrSyncItem pNewItem);
    HRESULT CommitItem(const(wchar)* pszItemID);
    HRESULT ReportManualSync();
}

@GUID("FC7CFA47-DFE1-45B5-A049-8CFD82BEC271")
interface ISyncMgrUIOperation : IUnknown
{
    HRESULT Run(HWND hwndOwner);
}

@GUID("64522E52-848B-4015-89CE-5A36F00B94FF")
interface ISyncMgrEventLinkUIOperation : ISyncMgrUIOperation
{
    HRESULT Init(const(GUID)* rguidEventID, ISyncMgrEvent pEvent);
}

@GUID("459A6C84-21D2-4DDC-8A53-F023A46066F2")
interface ISyncMgrScheduleWizardUIOperation : ISyncMgrUIOperation
{
    HRESULT InitWizard(const(wchar)* pszHandlerID);
}

@GUID("2B90F17E-5A3E-4B33-BB7F-1BC48056B94D")
interface ISyncMgrSyncResult : IUnknown
{
    HRESULT Result(SYNCMGR_PROGRESS_STATUS nStatus, uint cError, uint cConflicts);
}

@GUID("9B63616C-36B2-46BC-959F-C1593952D19B")
interface ISyncMgrControl : IUnknown
{
    HRESULT StartHandlerSync(const(wchar)* pszHandlerID, HWND hwndOwner, IUnknown punk, 
                             SYNCMGR_SYNC_CONTROL_FLAGS nSyncControlFlags, ISyncMgrSyncResult pResult);
    HRESULT StartItemSync(const(wchar)* pszHandlerID, char* ppszItemIDs, uint cItems, HWND hwndOwner, 
                          IUnknown punk, SYNCMGR_SYNC_CONTROL_FLAGS nSyncControlFlags, ISyncMgrSyncResult pResult);
    HRESULT StartSyncAll(HWND hwndOwner);
    HRESULT StopHandlerSync(const(wchar)* pszHandlerID);
    HRESULT StopItemSync(const(wchar)* pszHandlerID, char* ppszItemIDs, uint cItems);
    HRESULT StopSyncAll();
    HRESULT UpdateHandlerCollection(const(GUID)* rclsidCollectionID, SYNCMGR_CONTROL_FLAGS nControlFlags);
    HRESULT UpdateHandler(const(wchar)* pszHandlerID, SYNCMGR_CONTROL_FLAGS nControlFlags);
    HRESULT UpdateItem(const(wchar)* pszHandlerID, const(wchar)* pszItemID, SYNCMGR_CONTROL_FLAGS nControlFlags);
    HRESULT UpdateEvents(const(wchar)* pszHandlerID, const(wchar)* pszItemID, SYNCMGR_CONTROL_FLAGS nControlFlags);
    HRESULT UpdateConflict(const(wchar)* pszHandlerID, const(wchar)* pszItemID, ISyncMgrConflict pConflict, 
                           SYNCMGR_UPDATE_REASON nReason);
    HRESULT UpdateConflicts(const(wchar)* pszHandlerID, const(wchar)* pszItemID, 
                            SYNCMGR_CONTROL_FLAGS nControlFlags);
    HRESULT ActivateHandler(BOOL fActivate, const(wchar)* pszHandlerID, HWND hwndOwner, 
                            SYNCMGR_CONTROL_FLAGS nControlFlags);
    HRESULT EnableHandler(BOOL fEnable, const(wchar)* pszHandlerID, HWND hwndOwner, 
                          SYNCMGR_CONTROL_FLAGS nControlFlags);
    HRESULT EnableItem(BOOL fEnable, const(wchar)* pszHandlerID, const(wchar)* pszItemID, HWND hwndOwner, 
                       SYNCMGR_CONTROL_FLAGS nControlFlags);
}

@GUID("37E412F9-016E-44C2-81FF-DB3ADD774266")
interface ISyncMgrEventStore : IUnknown
{
    HRESULT GetEventEnumerator(IEnumSyncMgrEvents* ppenum);
    HRESULT GetEventCount(uint* pcEvents);
    HRESULT GetEvent(const(GUID)* rguidEventID, ISyncMgrEvent* ppEvent);
    HRESULT RemoveEvent(char* pguidEventIDs, uint cEvents);
}

@GUID("FEE0EF8B-46BD-4DB4-B7E6-FF2C687313BC")
interface ISyncMgrEvent : IUnknown
{
    HRESULT GetEventID(GUID* pguidEventID);
    HRESULT GetHandlerID(ushort** ppszHandlerID);
    HRESULT GetItemID(ushort** ppszItemID);
    HRESULT GetLevel(SYNCMGR_EVENT_LEVEL* pnLevel);
    HRESULT GetFlags(SYNCMGR_EVENT_FLAGS* pnFlags);
    HRESULT GetTime(FILETIME* pfCreationTime);
    HRESULT GetName(ushort** ppszName);
    HRESULT GetDescription(ushort** ppszDescription);
    HRESULT GetLinkText(ushort** ppszLinkText);
    HRESULT GetLinkReference(ushort** ppszLinkReference);
    HRESULT GetContext(ushort** ppszContext);
}

@GUID("C81A1D4E-8CF7-4683-80E0-BCAE88D677B6")
interface IEnumSyncMgrEvents : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumSyncMgrEvents* ppenum);
}

@GUID("CF8FC579-C396-4774-85F1-D908A831156E")
interface ISyncMgrConflictStore : IUnknown
{
    HRESULT EnumConflicts(const(wchar)* pszHandlerID, const(wchar)* pszItemID, IEnumSyncMgrConflict* ppEnum);
    HRESULT BindToConflict(const(SYNCMGR_CONFLICT_ID_INFO)* pConflictIdInfo, const(GUID)* riid, void** ppv);
    HRESULT RemoveConflicts(char* rgConflictIdInfo, uint cConflicts);
    HRESULT GetCount(const(wchar)* pszHandlerID, const(wchar)* pszItemID, uint* pnConflicts);
}

@GUID("82705914-DDA3-4893-BA99-49DE6C8C8036")
interface IEnumSyncMgrConflict : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumSyncMgrConflict* ppenum);
}

@GUID("9C204249-C443-4BA4-85ED-C972681DB137")
interface ISyncMgrConflict : IUnknown
{
    HRESULT GetProperty(const(PROPERTYKEY)* propkey, PROPVARIANT* ppropvar);
    HRESULT GetConflictIdInfo(SYNCMGR_CONFLICT_ID_INFO* pConflictIdInfo);
    HRESULT GetItemsArray(ISyncMgrConflictItems* ppArray);
    HRESULT Resolve(ISyncMgrConflictResolveInfo pResolveInfo);
    HRESULT GetResolutionHandler(const(GUID)* riid, void** ppvResolutionHandler);
}

@GUID("40A3D052-8BFF-4C4B-A338-D4A395700DE9")
interface ISyncMgrResolutionHandler : IUnknown
{
    HRESULT QueryAbilities(uint* pdwAbilities);
    HRESULT KeepOther(IShellItem psiOther, SYNCMGR_RESOLUTION_FEEDBACK* pFeedback);
    HRESULT KeepRecent(SYNCMGR_RESOLUTION_FEEDBACK* pFeedback);
    HRESULT RemoveFromSyncSet(SYNCMGR_RESOLUTION_FEEDBACK* pFeedback);
    HRESULT KeepItems(ISyncMgrConflictResolutionItems pArray, SYNCMGR_RESOLUTION_FEEDBACK* pFeedback);
}

@GUID("0B4F5353-FD2B-42CD-8763-4779F2D508A3")
interface ISyncMgrConflictPresenter : IUnknown
{
    HRESULT PresentConflict(ISyncMgrConflict pConflict, ISyncMgrConflictResolveInfo pResolveInfo);
}

@GUID("C405A219-25A2-442E-8743-B845A2CEE93F")
interface ISyncMgrConflictResolveInfo : IUnknown
{
    HRESULT GetIterationInfo(uint* pnCurrentConflict, uint* pcConflicts, uint* pcRemainingForApplyToAll);
    HRESULT GetPresenterNextStep(SYNCMGR_PRESENTER_NEXT_STEP* pnPresenterNextStep);
    HRESULT GetPresenterChoice(SYNCMGR_PRESENTER_CHOICE* pnPresenterChoice, int* pfApplyToAll);
    HRESULT GetItemChoiceCount(uint* pcChoices);
    HRESULT GetItemChoice(uint iChoice, uint* piChoiceIndex);
    HRESULT SetPresenterNextStep(SYNCMGR_PRESENTER_NEXT_STEP nPresenterNextStep);
    HRESULT SetPresenterChoice(SYNCMGR_PRESENTER_CHOICE nPresenterChoice, BOOL fApplyToAll);
    HRESULT SetItemChoices(uint* prgiConflictItemIndexes, uint cChoices);
}

@GUID("59287F5E-BC81-4FCA-A7F1-E5A8ECDB1D69")
interface ISyncMgrConflictFolder : IUnknown
{
    HRESULT GetConflictIDList(ISyncMgrConflict pConflict, ITEMIDLIST** ppidlConflict);
}

@GUID("9C7EAD52-8023-4936-A4DB-D2A9A99E436A")
interface ISyncMgrConflictItems : IUnknown
{
    HRESULT GetCount(uint* pCount);
    HRESULT GetItem(uint iIndex, CONFIRM_CONFLICT_ITEM* pItemInfo);
}

@GUID("458725B9-129D-4135-A998-9CEAFEC27007")
interface ISyncMgrConflictResolutionItems : IUnknown
{
    HRESULT GetCount(uint* pCount);
    HRESULT GetItem(uint iIndex, CONFIRM_CONFLICT_RESULT_INFO* pItemInfo);
}

@GUID("41C81592-514C-48BD-A22E-E6AF638521A6")
interface IInputPanelConfiguration : IUnknown
{
    HRESULT EnableFocusTracking();
}

@GUID("A213F136-3B45-4362-A332-EFB6547CD432")
interface IInputPanelInvocationConfiguration : IUnknown
{
    HRESULT RequireTouchInEditControl();
}

@GUID("091162A4-BC96-411F-AAE8-C5122CD03363")
interface ISharedBitmap : IUnknown
{
    HRESULT GetSharedBitmap(HBITMAP* phbm);
    HRESULT GetSize(SIZE* pSize);
    HRESULT GetFormat(WTS_ALPHATYPE* pat);
    HRESULT InitializeBitmap(HBITMAP hbm, WTS_ALPHATYPE wtsAT);
    HRESULT Detach(HBITMAP* phbm);
}

@GUID("F676C15D-596A-4CE2-8234-33996F445DB1")
interface IThumbnailCache : IUnknown
{
    HRESULT GetThumbnail(IShellItem pShellItem, uint cxyRequestedThumbSize, WTS_FLAGS flags, 
                         ISharedBitmap* ppvThumb, WTS_CACHEFLAGS* pOutFlags, WTS_THUMBNAILID* pThumbnailID);
    HRESULT GetThumbnailByID(WTS_THUMBNAILID thumbnailID, uint cxyRequestedThumbSize, ISharedBitmap* ppvThumb, 
                             WTS_CACHEFLAGS* pOutFlags);
}

@GUID("E357FCCD-A995-4576-B01F-234630154E96")
interface IThumbnailProvider : IUnknown
{
    HRESULT GetThumbnail(uint cx, HBITMAP* phbmp, WTS_ALPHATYPE* pdwAlpha);
}

@GUID("F4376F00-BEF5-4D45-80F3-1E023BBF1209")
interface IThumbnailSettings : IUnknown
{
    HRESULT SetContext(WTS_CONTEXTFLAGS dwContext);
}

@GUID("0F03F8FE-2B26-46F0-965A-212AA8D66B76")
interface IThumbnailCachePrimer : IUnknown
{
    HRESULT PageInThumbnail(IShellItem psi, WTS_FLAGS wtsFlags, uint cxyRequestedThumbSize);
}

@GUID("9BE8ED5C-EDAB-4D75-90F3-BD5BDBB21C82")
interface IShellImageDataFactory : IUnknown
{
    HRESULT CreateIShellImageData(IShellImageData* ppshimg);
    HRESULT CreateImageFromFile(const(wchar)* pszPath, IShellImageData* ppshimg);
    HRESULT CreateImageFromStream(IStream pStream, IShellImageData* ppshimg);
    HRESULT GetDataFormatFromPath(const(wchar)* pszPath, GUID* pDataFormat);
}

@GUID("BFDEEC12-8040-4403-A5EA-9E07DAFCF530")
interface IShellImageData : IUnknown
{
    HRESULT Decode(uint dwFlags, uint cxDesired, uint cyDesired);
    HRESULT Draw(HDC hdc, RECT* prcDest, RECT* prcSrc);
    HRESULT NextFrame();
    HRESULT NextPage();
    HRESULT PrevPage();
    HRESULT IsTransparent();
    HRESULT IsAnimated();
    HRESULT IsVector();
    HRESULT IsMultipage();
    HRESULT IsEditable();
    HRESULT IsPrintable();
    HRESULT IsDecoded();
    HRESULT GetCurrentPage(uint* pnPage);
    HRESULT GetPageCount(uint* pcPages);
    HRESULT SelectPage(uint iPage);
    HRESULT GetSize(SIZE* pSize);
    HRESULT GetRawDataFormat(GUID* pDataFormat);
    HRESULT GetPixelFormat(uint* pFormat);
    HRESULT GetDelay(uint* pdwDelay);
    HRESULT GetProperties(uint dwMode, IPropertySetStorage* ppPropSet);
    HRESULT Rotate(uint dwAngle);
    HRESULT Scale(uint cx, uint cy, uint hints);
    HRESULT DiscardEdit();
    HRESULT SetEncoderParams(IPropertyBag pbagEnc);
    HRESULT DisplayName(const(wchar)* wszName, uint cch);
    HRESULT GetResolution(uint* puResolutionX, uint* puResolutionY);
    HRESULT GetEncoderParams(GUID* pguidFmt, ubyte** ppEncParams);
    HRESULT RegisterAbort(IShellImageDataAbort pAbort, IShellImageDataAbort* ppAbortPrev);
    HRESULT CloneFrame(ubyte** ppImg);
    HRESULT ReplaceFrame(ubyte* pImg);
}

@GUID("53FB8E58-50C0-4003-B4AA-0C8DF28E7F3A")
interface IShellImageDataAbort : IUnknown
{
    HRESULT QueryAbort();
}

@GUID("301DFBE5-524C-4B0F-8B2D-21C40B3A2988")
interface IStorageProviderPropertyHandler : IUnknown
{
    HRESULT RetrieveProperties(char* propertiesToRetrieve, uint propertiesToRetrieveCount, 
                               IPropertyStore* retrievedProperties);
    HRESULT SaveProperties(IPropertyStore propertiesToSave);
}

@GUID("162C6FB5-44D3-435B-903D-E613FA093FB5")
interface IStorageProviderHandler : IUnknown
{
    HRESULT GetPropertyHandlerFromPath(const(wchar)* path, IStorageProviderPropertyHandler* propertyHandler);
    HRESULT GetPropertyHandlerFromUri(const(wchar)* uri, IStorageProviderPropertyHandler* propertyHandler);
    HRESULT GetPropertyHandlerFromFileId(const(wchar)* fileId, IStorageProviderPropertyHandler* propertyHandler);
}

@GUID("6295DF41-35EE-11D1-8707-00C04FD93327")
interface ISyncMgrSynchronizeCallback : IUnknown
{
    HRESULT ShowPropertiesCompleted(HRESULT hr);
    HRESULT PrepareForSyncCompleted(HRESULT hr);
    HRESULT SynchronizeCompleted(HRESULT hr);
    HRESULT ShowErrorCompleted(HRESULT hr, uint cItems, char* pItemIDs);
    HRESULT EnableModeless(BOOL fEnable);
    HRESULT Progress(const(GUID)* ItemID, const(SYNCMGRPROGRESSITEM)* pSyncProgressItem);
    HRESULT LogError(uint dwErrorLevel, const(wchar)* pszErrorText, const(SYNCMGRLOGERRORINFO)* pSyncLogError);
    HRESULT DeleteLogError(const(GUID)* ErrorID, uint dwReserved);
    HRESULT EstablishConnection(const(wchar)* pwszConnection, uint dwReserved);
}

@GUID("6295DF2A-35EE-11D1-8707-00C04FD93327")
interface ISyncMgrEnumItems : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(ISyncMgrEnumItems* ppenum);
}

@GUID("6295DF40-35EE-11D1-8707-00C04FD93327")
interface ISyncMgrSynchronize : IUnknown
{
    HRESULT Initialize(uint dwReserved, uint dwSyncMgrFlags, uint cbCookie, char* lpCookie);
    HRESULT GetHandlerInfo(SYNCMGRHANDLERINFO** ppSyncMgrHandlerInfo);
    HRESULT EnumSyncMgrItems(ISyncMgrEnumItems* ppSyncMgrEnumItems);
    HRESULT GetItemObject(const(GUID)* ItemID, const(GUID)* riid, void** ppv);
    HRESULT ShowProperties(HWND hWndParent, const(GUID)* ItemID);
    HRESULT SetProgressCallback(ISyncMgrSynchronizeCallback lpCallBack);
    HRESULT PrepareForSync(uint cbNumItems, char* pItemIDs, HWND hWndParent, uint dwReserved);
    HRESULT Synchronize(HWND hWndParent);
    HRESULT SetItemStatus(const(GUID)* pItemID, uint dwSyncMgrStatus);
    HRESULT ShowError(HWND hWndParent, const(GUID)* ErrorID);
}

@GUID("6295DF2C-35EE-11D1-8707-00C04FD93327")
interface ISyncMgrSynchronizeInvoke : IUnknown
{
    HRESULT UpdateItems(uint dwInvokeFlags, const(GUID)* clsid, uint cbCookie, char* pCookie);
    HRESULT UpdateAll();
}

@GUID("6295DF42-35EE-11D1-8707-00C04FD93327")
interface ISyncMgrRegister : IUnknown
{
    HRESULT RegisterSyncMgrHandler(const(GUID)* clsidHandler, const(wchar)* pwszDescription, 
                                   uint dwSyncMgrRegisterFlags);
    HRESULT UnregisterSyncMgrHandler(const(GUID)* clsidHandler, uint dwReserved);
    HRESULT GetHandlerRegistrationInfo(const(GUID)* clsidHandler, uint* pdwSyncMgrRegisterFlags);
}

@GUID("90E11430-9569-41D8-AE75-6D4D2AE7CCA0")
interface IThumbnailStreamCache : IUnknown
{
    HRESULT GetThumbnailStream(const(wchar)* path, ulong cacheId, ThumbnailStreamCacheOptions options, 
                               uint requestedThumbnailSize, SIZE* thumbnailSize, IStream* thumbnailStream);
    HRESULT SetThumbnailStream(const(wchar)* path, ulong cacheId, SIZE thumbnailSize, IStream thumbnailStream);
}

@GUID("7EBFDD87-AD18-11D3-A4C5-00C04F72D6B8")
interface ITravelLogEntry : IUnknown
{
    HRESULT GetTitle(ushort** ppszTitle);
    HRESULT GetURL(ushort** ppszURL);
}

@GUID("241C033E-E659-43DA-AA4D-4086DBC4758D")
interface ITravelLogClient : IUnknown
{
    HRESULT FindWindowByIndex(uint dwID, IUnknown* ppunk);
    HRESULT GetWindowData(IStream pStream, WINDOWDATA* pWinData);
    HRESULT LoadHistoryPosition(const(wchar)* pszUrlLocation, uint dwPosition);
}

@GUID("7EBFDD85-AD18-11D3-A4C5-00C04F72D6B8")
interface IEnumTravelLogEntry : IUnknown
{
    HRESULT Next(uint cElt, char* rgElt, uint* pcEltFetched);
    HRESULT Skip(uint cElt);
    HRESULT Reset();
    HRESULT Clone(IEnumTravelLogEntry* ppEnum);
}

@GUID("7EBFDD80-AD18-11D3-A4C5-00C04F72D6B8")
interface ITravelLogStg : IUnknown
{
    HRESULT CreateEntry(const(wchar)* pszUrl, const(wchar)* pszTitle, ITravelLogEntry ptleRelativeTo, 
                        BOOL fPrepend, ITravelLogEntry* pptle);
    HRESULT TravelTo(ITravelLogEntry ptle);
    HRESULT EnumEntries(uint flags, IEnumTravelLogEntry* ppenum);
    HRESULT FindEntries(uint flags, const(wchar)* pszUrl, IEnumTravelLogEntry* ppenum);
    HRESULT GetCount(uint flags, uint* pcEntries);
    HRESULT RemoveEntry(ITravelLogEntry ptle);
    HRESULT GetRelativeEntry(int iOffset, ITravelLogEntry* ptle);
}

@GUID("79EAC9C3-BAF9-11CE-8C82-00AA004BA90B")
interface IHlink : IUnknown
{
    HRESULT SetHlinkSite(IHlinkSite pihlSite, uint dwSiteData);
    HRESULT GetHlinkSite(IHlinkSite* ppihlSite, uint* pdwSiteData);
    HRESULT SetMonikerReference(uint grfHLSETF, IMoniker pimkTarget, const(wchar)* pwzLocation);
    HRESULT GetMonikerReference(uint dwWhichRef, IMoniker* ppimkTarget, ushort** ppwzLocation);
    HRESULT SetStringReference(uint grfHLSETF, const(wchar)* pwzTarget, const(wchar)* pwzLocation);
    HRESULT GetStringReference(uint dwWhichRef, ushort** ppwzTarget, ushort** ppwzLocation);
    HRESULT SetFriendlyName(const(wchar)* pwzFriendlyName);
    HRESULT GetFriendlyName(uint grfHLFNAMEF, ushort** ppwzFriendlyName);
    HRESULT SetTargetFrameName(const(wchar)* pwzTargetFrameName);
    HRESULT GetTargetFrameName(ushort** ppwzTargetFrameName);
    HRESULT GetMiscStatus(uint* pdwStatus);
    HRESULT Navigate(uint grfHLNF, IBindCtx pibc, IBindStatusCallback pibsc, IHlinkBrowseContext pihlbc);
    HRESULT SetAdditionalParams(const(wchar)* pwzAdditionalParams);
    HRESULT GetAdditionalParams(ushort** ppwzAdditionalParams);
}

@GUID("79EAC9C2-BAF9-11CE-8C82-00AA004BA90B")
interface IHlinkSite : IUnknown
{
    HRESULT QueryService(uint dwSiteData, const(GUID)* guidService, const(GUID)* riid, IUnknown* ppiunk);
    HRESULT GetMoniker(uint dwSiteData, uint dwAssign, uint dwWhich, IMoniker* ppimk);
    HRESULT ReadyToNavigate(uint dwSiteData, uint dwReserved);
    HRESULT OnNavigationComplete(uint dwSiteData, uint dwreserved, HRESULT hrError, const(wchar)* pwzError);
}

@GUID("79EAC9C4-BAF9-11CE-8C82-00AA004BA90B")
interface IHlinkTarget : IUnknown
{
    HRESULT SetBrowseContext(IHlinkBrowseContext pihlbc);
    HRESULT GetBrowseContext(IHlinkBrowseContext* ppihlbc);
    HRESULT Navigate(uint grfHLNF, const(wchar)* pwzJumpLocation);
    HRESULT GetMoniker(const(wchar)* pwzLocation, uint dwAssign, IMoniker* ppimkLocation);
    HRESULT GetFriendlyName(const(wchar)* pwzLocation, ushort** ppwzFriendlyName);
}

@GUID("79EAC9C5-BAF9-11CE-8C82-00AA004BA90B")
interface IHlinkFrame : IUnknown
{
    HRESULT SetBrowseContext(IHlinkBrowseContext pihlbc);
    HRESULT GetBrowseContext(IHlinkBrowseContext* ppihlbc);
    HRESULT Navigate(uint grfHLNF, IBindCtx pbc, IBindStatusCallback pibsc, IHlink pihlNavigate);
    HRESULT OnNavigate(uint grfHLNF, IMoniker pimkTarget, const(wchar)* pwzLocation, const(wchar)* pwzFriendlyName, 
                       uint dwreserved);
    HRESULT UpdateHlink(uint uHLID, IMoniker pimkTarget, const(wchar)* pwzLocation, const(wchar)* pwzFriendlyName);
}

@GUID("79EAC9C6-BAF9-11CE-8C82-00AA004BA90B")
interface IEnumHLITEM : IUnknown
{
    HRESULT Next(uint celt, HLITEM* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumHLITEM* ppienumhlitem);
}

@GUID("79EAC9C7-BAF9-11CE-8C82-00AA004BA90B")
interface IHlinkBrowseContext : IUnknown
{
    HRESULT Register(uint reserved, IUnknown piunk, IMoniker pimk, uint* pdwRegister);
    HRESULT GetObjectA(IMoniker pimk, BOOL fBindIfRootRegistered, IUnknown* ppiunk);
    HRESULT Revoke(uint dwRegister);
    HRESULT SetBrowseWindowInfo(HLBWINFO* phlbwi);
    HRESULT GetBrowseWindowInfo(HLBWINFO* phlbwi);
    HRESULT SetInitialHlink(IMoniker pimkTarget, const(wchar)* pwzLocation, const(wchar)* pwzFriendlyName);
    HRESULT OnNavigateHlink(uint grfHLNF, IMoniker pimkTarget, const(wchar)* pwzLocation, 
                            const(wchar)* pwzFriendlyName, uint* puHLID);
    HRESULT UpdateHlink(uint uHLID, IMoniker pimkTarget, const(wchar)* pwzLocation, const(wchar)* pwzFriendlyName);
    HRESULT EnumNavigationStack(uint dwReserved, uint grfHLFNAMEF, IEnumHLITEM* ppienumhlitem);
    HRESULT QueryHlink(uint grfHLQF, uint uHLID);
    HRESULT GetHlink(uint uHLID, IHlink* ppihl);
    HRESULT SetCurrentHlink(uint uHLID);
    HRESULT Clone(IUnknown piunkOuter, const(GUID)* riid, IUnknown* ppiunkObj);
    HRESULT Close(uint reserved);
}

@GUID("79EAC9CB-BAF9-11CE-8C82-00AA004BA90B")
interface IExtensionServices : IUnknown
{
    HRESULT SetAdditionalHeaders(const(wchar)* pwzAdditionalHeaders);
    HRESULT SetAuthenticateData(HWND phwnd, const(wchar)* pwzUsername, const(wchar)* pwzPassword);
}

@GUID("F46EDB3B-BC2F-11D0-9412-00AA00A3EBD3")
interface ITravelEntry : IUnknown
{
    HRESULT Invoke(IUnknown punk);
    HRESULT Update(IUnknown punk, BOOL fIsLocalAnchor);
    HRESULT GetPidl(ITEMIDLIST** ppidl);
}

@GUID("66A9CB08-4802-11D2-A561-00A0C92DBFE8")
interface ITravelLog : IUnknown
{
    HRESULT AddEntry(IUnknown punk, BOOL fIsLocalAnchor);
    HRESULT UpdateEntry(IUnknown punk, BOOL fIsLocalAnchor);
    HRESULT UpdateExternal(IUnknown punk, IUnknown punkHLBrowseContext);
    HRESULT Travel(IUnknown punk, int iOffset);
    HRESULT GetTravelEntry(IUnknown punk, int iOffset, ITravelEntry* ppte);
    HRESULT FindTravelEntry(IUnknown punk, ITEMIDLIST* pidl, ITravelEntry* ppte);
    HRESULT GetToolTipText(IUnknown punk, int iOffset, int idsTemplate, const(wchar)* pwzText, uint cchText);
    HRESULT InsertMenuEntries(IUnknown punk, HMENU hmenu, int nPos, int idFirst, int idLast, uint dwFlags);
    HRESULT Clone(ITravelLog* pptl);
    uint    CountEntries(IUnknown punk);
    HRESULT Revert();
}

interface CIE4ConnectionPoint : IConnectionPoint
{
    HRESULT DoInvokeIE4(int* pf, void** ppv, int dispid, DISPPARAMS* pdispparams);
    HRESULT DoInvokePIDLIE4(int dispid, ITEMIDLIST* pidl, BOOL fCanCancel);
}

@GUID("2F0DD58C-F789-4F14-99FB-9293B3C9C212")
interface IExpDispSupportXP : IUnknown
{
    HRESULT FindCIE4ConnectionPoint(const(GUID)* riid, CIE4ConnectionPoint* ppccp);
    HRESULT OnTranslateAccelerator(MSG* pMsg, uint grfModifiers);
    HRESULT OnInvoke(int dispidMember, const(GUID)* iid, uint lcid, ushort wFlags, DISPPARAMS* pdispparams, 
                     VARIANT* pVarResult, EXCEPINFO* pexcepinfo, uint* puArgErr);
}

@GUID("0D7D1D00-6FC0-11D0-A974-00C04FD705A2")
interface IExpDispSupport : IUnknown
{
    HRESULT FindConnectionPoint(const(GUID)* riid, IConnectionPoint* ppccp);
    HRESULT OnTranslateAccelerator(MSG* pMsg, uint grfModifiers);
    HRESULT OnInvoke(int dispidMember, const(GUID)* iid, uint lcid, ushort wFlags, DISPPARAMS* pdispparams, 
                     VARIANT* pVarResult, EXCEPINFO* pexcepinfo, uint* puArgErr);
}

@GUID("02BA3B52-0547-11D1-B833-00C04FC9B31F")
interface IBrowserService : IUnknown
{
    HRESULT GetParentSite(IOleInPlaceSite* ppipsite);
    HRESULT SetTitle(IShellView psv, const(wchar)* pszName);
    HRESULT GetTitle(IShellView psv, const(wchar)* pszName, uint cchName);
    HRESULT GetOleObject(IOleObject* ppobjv);
    HRESULT GetTravelLog(ITravelLog* pptl);
    HRESULT ShowControlWindow(uint id, BOOL fShow);
    HRESULT IsControlWindowShown(uint id, int* pfShown);
    HRESULT IEGetDisplayName(ITEMIDLIST* pidl, const(wchar)* pwszName, uint uFlags);
    HRESULT IEParseDisplayName(uint uiCP, const(wchar)* pwszPath, ITEMIDLIST** ppidlOut);
    HRESULT DisplayParseError(HRESULT hres, const(wchar)* pwszPath);
    HRESULT NavigateToPidl(ITEMIDLIST* pidl, uint grfHLNF);
    HRESULT SetNavigateState(BNSTATE bnstate);
    HRESULT GetNavigateState(BNSTATE* pbnstate);
    HRESULT NotifyRedirect(IShellView psv, ITEMIDLIST* pidl, int* pfDidBrowse);
    HRESULT UpdateWindowList();
    HRESULT UpdateBackForwardState();
    HRESULT SetFlags(uint dwFlags, uint dwFlagMask);
    HRESULT GetFlags(uint* pdwFlags);
    HRESULT CanNavigateNow();
    HRESULT GetPidl(ITEMIDLIST** ppidl);
    HRESULT SetReferrer(ITEMIDLIST* pidl);
    uint    GetBrowserIndex();
    HRESULT GetBrowserByIndex(uint dwID, IUnknown* ppunk);
    HRESULT GetHistoryObject(IOleObject* ppole, IStream* pstm, IBindCtx* ppbc);
    HRESULT SetHistoryObject(IOleObject pole, BOOL fIsLocalAnchor);
    HRESULT CacheOLEServer(IOleObject pole);
    HRESULT GetSetCodePage(VARIANT* pvarIn, VARIANT* pvarOut);
    HRESULT OnHttpEquiv(IShellView psv, BOOL fDone, VARIANT* pvarargIn, VARIANT* pvarargOut);
    HRESULT GetPalette(HPALETTE* hpal);
    HRESULT RegisterWindow(BOOL fForceRegister, int swc);
}

@GUID("5836FB00-8187-11CF-A12B-00AA004AE837")
interface IShellService : IUnknown
{
    HRESULT SetOwner(IUnknown punkOwner);
}

@GUID("68BD21CC-438B-11D2-A560-00A0C92DBFE8")
interface IBrowserService2 : IBrowserService
{
    LRESULT WndProcBS(HWND hwnd, uint uMsg, WPARAM wParam, LPARAM lParam);
    HRESULT SetAsDefFolderSettings();
    HRESULT GetViewRect(RECT* prc);
    HRESULT OnSize(WPARAM wParam);
    HRESULT OnCreate(CREATESTRUCTW* pcs);
    LRESULT OnCommand(WPARAM wParam, LPARAM lParam);
    HRESULT OnDestroy();
    LRESULT OnNotify(NMHDR* pnm);
    HRESULT OnSetFocus();
    HRESULT OnFrameWindowActivateBS(BOOL fActive);
    HRESULT ReleaseShellView();
    HRESULT ActivatePendingView();
    HRESULT CreateViewWindow(IShellView psvNew, IShellView psvOld, RECT* prcView, HWND* phwnd);
    HRESULT CreateBrowserPropSheetExt(const(GUID)* riid, void** ppv);
    HRESULT GetViewWindow(HWND* phwndView);
    HRESULT GetBaseBrowserData(BASEBROWSERDATALH** pbbd);
    BASEBROWSERDATALH* PutBaseBrowserData();
    HRESULT InitializeTravelLog(ITravelLog ptl, uint dw);
    HRESULT SetTopBrowser();
    HRESULT Offline(int iCmd);
    HRESULT AllowViewResize(BOOL f);
    HRESULT SetActivateState(uint u);
    HRESULT UpdateSecureLockIcon(int eSecureLock);
    HRESULT InitializeDownloadManager();
    HRESULT InitializeTransitionSite();
    HRESULT _Initialize(HWND hwnd, IUnknown pauto);
    HRESULT _CancelPendingNavigationAsync();
    HRESULT _CancelPendingView();
    HRESULT _MaySaveChanges();
    HRESULT _PauseOrResumeView(BOOL fPaused);
    HRESULT _DisableModeless();
    HRESULT _NavigateToPidl2(ITEMIDLIST* pidl, uint grfHLNF, uint dwFlags);
    HRESULT _TryShell2Rename(IShellView psv, ITEMIDLIST* pidlNew);
    HRESULT _SwitchActivationNow();
    HRESULT _ExecChildren(IUnknown punkBar, BOOL fBroadcast, const(GUID)* pguidCmdGroup, uint nCmdID, 
                          uint nCmdexecopt, VARIANT* pvarargIn, VARIANT* pvarargOut);
    HRESULT _SendChildren(HWND hwndBar, BOOL fBroadcast, uint uMsg, WPARAM wParam, LPARAM lParam);
    HRESULT GetFolderSetData(FOLDERSETDATA* pfsd);
    HRESULT _OnFocusChange(uint itb);
    HRESULT v_ShowHideChildWindows(BOOL fChildOnly);
    uint    _get_itbLastFocus();
    HRESULT _put_itbLastFocus(uint itbLastFocus);
    HRESULT _UIActivateView(uint uState);
    HRESULT _GetViewBorderRect(RECT* prc);
    HRESULT _UpdateViewRectSize();
    HRESULT _ResizeNextBorder(uint itb);
    HRESULT _ResizeView();
    HRESULT _GetEffectiveClientArea(RECT* lprectBorder, ptrdiff_t hmon);
    IStream v_GetViewStream(ITEMIDLIST* pidl, uint grfMode, const(wchar)* pwszName);
    LRESULT ForwardViewMsg(uint uMsg, WPARAM wParam, LPARAM lParam);
    HRESULT SetAcceleratorMenu(HACCEL hacc);
    int     _GetToolbarCount();
    TOOLBARITEM* _GetToolbarItem(int itb);
    HRESULT _SaveToolbars(IStream pstm);
    HRESULT _LoadToolbars(IStream pstm);
    HRESULT _CloseAndReleaseToolbars(BOOL fClose);
    HRESULT v_MayGetNextToolbarFocus(MSG* lpMsg, uint itbNext, int citb, TOOLBARITEM** pptbi, HWND* phwnd);
    HRESULT _ResizeNextBorderHelper(uint itb, BOOL bUseHmonitor);
    uint    _FindTBar(IUnknown punkSrc);
    HRESULT _SetFocus(TOOLBARITEM* ptbi, HWND hwnd, MSG* lpMsg);
    HRESULT v_MayTranslateAccelerator(MSG* pmsg);
    HRESULT _GetBorderDWHelper(IUnknown punkSrc, RECT* lprectBorder, BOOL bUseHmonitor);
    HRESULT v_CheckZoneCrossing(ITEMIDLIST* pidl);
}

@GUID("27D7CE21-762D-48F3-86F3-40E2FD3749C4")
interface IBrowserService3 : IBrowserService2
{
    HRESULT _PositionViewWindow(HWND hwnd, RECT* prc);
    HRESULT IEParseDisplayNameEx(uint uiCP, const(wchar)* pwszPath, uint dwFlags, ITEMIDLIST** ppidlOut);
}

@GUID("639F1BFF-E135-4096-ABD8-E0F504D649A4")
interface IBrowserService4 : IBrowserService3
{
    HRESULT ActivateView(BOOL fPendingView);
    HRESULT SaveViewState();
    HRESULT _ResizeAllBorders();
}

@GUID("8278F932-2A3E-11D2-838F-00C04FD918D0")
interface ITrackShellMenu : IShellMenu
{
    HRESULT SetObscured(HWND hwndTB, IUnknown punkBand, uint dwSMSetFlags);
    HRESULT Popup(HWND hwnd, POINTL* ppt, RECTL* prcExclude, int dwFlags);
}

@GUID("BAE86DDD-DC11-421C-B7AB-CC55D1D65C44")
interface ITranscodeImage : IUnknown
{
    HRESULT TranscodeImage(IShellItem pShellItem, uint uiMaxWidth, uint uiMaxHeight, uint flags, IStream pvImage, 
                           uint* puiWidth, uint* puiHeight);
}

@GUID("FBF23B80-E3F0-101B-8488-00AA003E56F8")
interface IUniformResourceLocatorA : IUnknown
{
    HRESULT SetURL(const(char)* pcszURL, uint dwInFlags);
    HRESULT GetURL(byte** ppszURL);
    HRESULT InvokeCommand(urlinvokecommandinfoA* purlici);
}

@GUID("CABB0DA0-DA57-11CF-9974-0020AFD79762")
interface IUniformResourceLocatorW : IUnknown
{
    HRESULT SetURL(const(wchar)* pcszURL, uint dwInFlags);
    HRESULT GetURL(ushort** ppszURL);
    HRESULT InvokeCommand(urlinvokecommandinfoW* purlici);
}

@GUID("08C03412-F96B-11D0-A475-00AA006BCC59")
interface IEnumRegisterWordA : IUnknown
{
    HRESULT Clone(IEnumRegisterWordA* ppEnum);
    HRESULT Next(uint ulCount, REGISTERWORDA* rgRegisterWord, uint* pcFetched);
    HRESULT Reset();
    HRESULT Skip(uint ulCount);
}

@GUID("4955DD31-B159-11D0-8FCF-00AA006BCC59")
interface IEnumRegisterWordW : IUnknown
{
    HRESULT Clone(IEnumRegisterWordW* ppEnum);
    HRESULT Next(uint ulCount, REGISTERWORDW* rgRegisterWord, uint* pcFetched);
    HRESULT Reset();
    HRESULT Skip(uint ulCount);
}

@GUID("09B5EAB0-F997-11D1-93D4-0060B067B86E")
interface IEnumInputContext : IUnknown
{
    HRESULT Clone(IEnumInputContext* ppEnum);
    HRESULT Next(uint ulCount, HIMC__** rgInputContext, uint* pcFetched);
    HRESULT Reset();
    HRESULT Skip(uint ulCount);
}

@GUID("B3458082-BD00-11D1-939B-0060B067B86E")
interface IActiveIMMRegistrar : IUnknown
{
    HRESULT RegisterIME(const(GUID)* rclsid, ushort lgid, const(wchar)* pszIconFile, const(wchar)* pszDesc);
    HRESULT UnregisterIME(const(GUID)* rclsid);
}

@GUID("B5CF2CFA-8AEB-11D1-9364-0060B067B86E")
interface IActiveIMMMessagePumpOwner : IUnknown
{
    HRESULT Start();
    HRESULT End();
    HRESULT OnTranslateMessage(const(MSG)* pMsg);
    HRESULT Pause(uint* pdwCookie);
    HRESULT Resume(uint dwCookie);
}

@GUID("08C0E040-62D1-11D1-9326-0060B067B86E")
interface IActiveIMMApp : IUnknown
{
    HRESULT AssociateContext(HWND hWnd, HIMC__* hIME, HIMC__** phPrev);
    HRESULT ConfigureIMEA(ptrdiff_t hKL, HWND hWnd, uint dwMode, REGISTERWORDA* pData);
    HRESULT ConfigureIMEW(ptrdiff_t hKL, HWND hWnd, uint dwMode, REGISTERWORDW* pData);
    HRESULT CreateContext(HIMC__** phIMC);
    HRESULT DestroyContext(HIMC__* hIME);
    HRESULT EnumRegisterWordA(ptrdiff_t hKL, const(char)* szReading, uint dwStyle, const(char)* szRegister, 
                              void* pData, IEnumRegisterWordA* pEnum);
    HRESULT EnumRegisterWordW(ptrdiff_t hKL, const(wchar)* szReading, uint dwStyle, const(wchar)* szRegister, 
                              void* pData, IEnumRegisterWordW* pEnum);
    HRESULT EscapeA(ptrdiff_t hKL, HIMC__* hIMC, uint uEscape, void* pData, LRESULT* plResult);
    HRESULT EscapeW(ptrdiff_t hKL, HIMC__* hIMC, uint uEscape, void* pData, LRESULT* plResult);
    HRESULT GetCandidateListA(HIMC__* hIMC, uint dwIndex, uint uBufLen, CANDIDATELIST* pCandList, uint* puCopied);
    HRESULT GetCandidateListW(HIMC__* hIMC, uint dwIndex, uint uBufLen, CANDIDATELIST* pCandList, uint* puCopied);
    HRESULT GetCandidateListCountA(HIMC__* hIMC, uint* pdwListSize, uint* pdwBufLen);
    HRESULT GetCandidateListCountW(HIMC__* hIMC, uint* pdwListSize, uint* pdwBufLen);
    HRESULT GetCandidateWindow(HIMC__* hIMC, uint dwIndex, CANDIDATEFORM* pCandidate);
    HRESULT GetCompositionFontA(HIMC__* hIMC, LOGFONTA* plf);
    HRESULT GetCompositionFontW(HIMC__* hIMC, LOGFONTW* plf);
    HRESULT GetCompositionStringA(HIMC__* hIMC, uint dwIndex, uint dwBufLen, int* plCopied, void* pBuf);
    HRESULT GetCompositionStringW(HIMC__* hIMC, uint dwIndex, uint dwBufLen, int* plCopied, void* pBuf);
    HRESULT GetCompositionWindow(HIMC__* hIMC, COMPOSITIONFORM* pCompForm);
    HRESULT GetContext(HWND hWnd, HIMC__** phIMC);
    HRESULT GetConversionListA(ptrdiff_t hKL, HIMC__* hIMC, const(char)* pSrc, uint uBufLen, uint uFlag, 
                               CANDIDATELIST* pDst, uint* puCopied);
    HRESULT GetConversionListW(ptrdiff_t hKL, HIMC__* hIMC, const(wchar)* pSrc, uint uBufLen, uint uFlag, 
                               CANDIDATELIST* pDst, uint* puCopied);
    HRESULT GetConversionStatus(HIMC__* hIMC, uint* pfdwConversion, uint* pfdwSentence);
    HRESULT GetDefaultIMEWnd(HWND hWnd, HWND* phDefWnd);
    HRESULT GetDescriptionA(ptrdiff_t hKL, uint uBufLen, const(char)* szDescription, uint* puCopied);
    HRESULT GetDescriptionW(ptrdiff_t hKL, uint uBufLen, const(wchar)* szDescription, uint* puCopied);
    HRESULT GetGuideLineA(HIMC__* hIMC, uint dwIndex, uint dwBufLen, const(char)* pBuf, uint* pdwResult);
    HRESULT GetGuideLineW(HIMC__* hIMC, uint dwIndex, uint dwBufLen, const(wchar)* pBuf, uint* pdwResult);
    HRESULT GetIMEFileNameA(ptrdiff_t hKL, uint uBufLen, const(char)* szFileName, uint* puCopied);
    HRESULT GetIMEFileNameW(ptrdiff_t hKL, uint uBufLen, const(wchar)* szFileName, uint* puCopied);
    HRESULT GetOpenStatus(HIMC__* hIMC);
    HRESULT GetProperty(ptrdiff_t hKL, uint fdwIndex, uint* pdwProperty);
    HRESULT GetRegisterWordStyleA(ptrdiff_t hKL, uint nItem, STYLEBUFA* pStyleBuf, uint* puCopied);
    HRESULT GetRegisterWordStyleW(ptrdiff_t hKL, uint nItem, STYLEBUFW* pStyleBuf, uint* puCopied);
    HRESULT GetStatusWindowPos(HIMC__* hIMC, POINT* pptPos);
    HRESULT GetVirtualKey(HWND hWnd, uint* puVirtualKey);
    HRESULT InstallIMEA(const(char)* szIMEFileName, const(char)* szLayoutText, ptrdiff_t* phKL);
    HRESULT InstallIMEW(const(wchar)* szIMEFileName, const(wchar)* szLayoutText, ptrdiff_t* phKL);
    HRESULT IsIME(ptrdiff_t hKL);
    HRESULT IsUIMessageA(HWND hWndIME, uint msg, WPARAM wParam, LPARAM lParam);
    HRESULT IsUIMessageW(HWND hWndIME, uint msg, WPARAM wParam, LPARAM lParam);
    HRESULT NotifyIME(HIMC__* hIMC, uint dwAction, uint dwIndex, uint dwValue);
    HRESULT RegisterWordA(ptrdiff_t hKL, const(char)* szReading, uint dwStyle, const(char)* szRegister);
    HRESULT RegisterWordW(ptrdiff_t hKL, const(wchar)* szReading, uint dwStyle, const(wchar)* szRegister);
    HRESULT ReleaseContext(HWND hWnd, HIMC__* hIMC);
    HRESULT SetCandidateWindow(HIMC__* hIMC, CANDIDATEFORM* pCandidate);
    HRESULT SetCompositionFontA(HIMC__* hIMC, LOGFONTA* plf);
    HRESULT SetCompositionFontW(HIMC__* hIMC, LOGFONTW* plf);
    HRESULT SetCompositionStringA(HIMC__* hIMC, uint dwIndex, void* pComp, uint dwCompLen, void* pRead, 
                                  uint dwReadLen);
    HRESULT SetCompositionStringW(HIMC__* hIMC, uint dwIndex, void* pComp, uint dwCompLen, void* pRead, 
                                  uint dwReadLen);
    HRESULT SetCompositionWindow(HIMC__* hIMC, COMPOSITIONFORM* pCompForm);
    HRESULT SetConversionStatus(HIMC__* hIMC, uint fdwConversion, uint fdwSentence);
    HRESULT SetOpenStatus(HIMC__* hIMC, BOOL fOpen);
    HRESULT SetStatusWindowPos(HIMC__* hIMC, POINT* pptPos);
    HRESULT SimulateHotKey(HWND hWnd, uint dwHotKeyID);
    HRESULT UnregisterWordA(ptrdiff_t hKL, const(char)* szReading, uint dwStyle, const(char)* szUnregister);
    HRESULT UnregisterWordW(ptrdiff_t hKL, const(wchar)* szReading, uint dwStyle, const(wchar)* szUnregister);
    HRESULT Activate(BOOL fRestoreLayout);
    HRESULT Deactivate();
    HRESULT OnDefWindowProc(HWND hWnd, uint Msg, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
    HRESULT FilterClientWindows(ushort* aaClassList, uint uSize);
    HRESULT GetCodePageA(ptrdiff_t hKL, uint* uCodePage);
    HRESULT GetLangId(ptrdiff_t hKL, ushort* plid);
    HRESULT AssociateContextEx(HWND hWnd, HIMC__* hIMC, uint dwFlags);
    HRESULT DisableIME(uint idThread);
    HRESULT GetImeMenuItemsA(HIMC__* hIMC, uint dwFlags, uint dwType, IMEMENUITEMINFOA* pImeParentMenu, 
                             IMEMENUITEMINFOA* pImeMenu, uint dwSize, uint* pdwResult);
    HRESULT GetImeMenuItemsW(HIMC__* hIMC, uint dwFlags, uint dwType, IMEMENUITEMINFOW* pImeParentMenu, 
                             IMEMENUITEMINFOW* pImeMenu, uint dwSize, uint* pdwResult);
    HRESULT EnumInputContext(uint idThread, IEnumInputContext* ppEnum);
}

@GUID("08C03411-F96B-11D0-A475-00AA006BCC59")
interface IActiveIMMIME : IUnknown
{
    HRESULT AssociateContext(HWND hWnd, HIMC__* hIME, HIMC__** phPrev);
    HRESULT ConfigureIMEA(ptrdiff_t hKL, HWND hWnd, uint dwMode, REGISTERWORDA* pData);
    HRESULT ConfigureIMEW(ptrdiff_t hKL, HWND hWnd, uint dwMode, REGISTERWORDW* pData);
    HRESULT CreateContext(HIMC__** phIMC);
    HRESULT DestroyContext(HIMC__* hIME);
    HRESULT EnumRegisterWordA(ptrdiff_t hKL, const(char)* szReading, uint dwStyle, const(char)* szRegister, 
                              void* pData, IEnumRegisterWordA* pEnum);
    HRESULT EnumRegisterWordW(ptrdiff_t hKL, const(wchar)* szReading, uint dwStyle, const(wchar)* szRegister, 
                              void* pData, IEnumRegisterWordW* pEnum);
    HRESULT EscapeA(ptrdiff_t hKL, HIMC__* hIMC, uint uEscape, void* pData, LRESULT* plResult);
    HRESULT EscapeW(ptrdiff_t hKL, HIMC__* hIMC, uint uEscape, void* pData, LRESULT* plResult);
    HRESULT GetCandidateListA(HIMC__* hIMC, uint dwIndex, uint uBufLen, CANDIDATELIST* pCandList, uint* puCopied);
    HRESULT GetCandidateListW(HIMC__* hIMC, uint dwIndex, uint uBufLen, CANDIDATELIST* pCandList, uint* puCopied);
    HRESULT GetCandidateListCountA(HIMC__* hIMC, uint* pdwListSize, uint* pdwBufLen);
    HRESULT GetCandidateListCountW(HIMC__* hIMC, uint* pdwListSize, uint* pdwBufLen);
    HRESULT GetCandidateWindow(HIMC__* hIMC, uint dwIndex, CANDIDATEFORM* pCandidate);
    HRESULT GetCompositionFontA(HIMC__* hIMC, LOGFONTA* plf);
    HRESULT GetCompositionFontW(HIMC__* hIMC, LOGFONTW* plf);
    HRESULT GetCompositionStringA(HIMC__* hIMC, uint dwIndex, uint dwBufLen, int* plCopied, void* pBuf);
    HRESULT GetCompositionStringW(HIMC__* hIMC, uint dwIndex, uint dwBufLen, int* plCopied, void* pBuf);
    HRESULT GetCompositionWindow(HIMC__* hIMC, COMPOSITIONFORM* pCompForm);
    HRESULT GetContext(HWND hWnd, HIMC__** phIMC);
    HRESULT GetConversionListA(ptrdiff_t hKL, HIMC__* hIMC, const(char)* pSrc, uint uBufLen, uint uFlag, 
                               CANDIDATELIST* pDst, uint* puCopied);
    HRESULT GetConversionListW(ptrdiff_t hKL, HIMC__* hIMC, const(wchar)* pSrc, uint uBufLen, uint uFlag, 
                               CANDIDATELIST* pDst, uint* puCopied);
    HRESULT GetConversionStatus(HIMC__* hIMC, uint* pfdwConversion, uint* pfdwSentence);
    HRESULT GetDefaultIMEWnd(HWND hWnd, HWND* phDefWnd);
    HRESULT GetDescriptionA(ptrdiff_t hKL, uint uBufLen, const(char)* szDescription, uint* puCopied);
    HRESULT GetDescriptionW(ptrdiff_t hKL, uint uBufLen, const(wchar)* szDescription, uint* puCopied);
    HRESULT GetGuideLineA(HIMC__* hIMC, uint dwIndex, uint dwBufLen, const(char)* pBuf, uint* pdwResult);
    HRESULT GetGuideLineW(HIMC__* hIMC, uint dwIndex, uint dwBufLen, const(wchar)* pBuf, uint* pdwResult);
    HRESULT GetIMEFileNameA(ptrdiff_t hKL, uint uBufLen, const(char)* szFileName, uint* puCopied);
    HRESULT GetIMEFileNameW(ptrdiff_t hKL, uint uBufLen, const(wchar)* szFileName, uint* puCopied);
    HRESULT GetOpenStatus(HIMC__* hIMC);
    HRESULT GetProperty(ptrdiff_t hKL, uint fdwIndex, uint* pdwProperty);
    HRESULT GetRegisterWordStyleA(ptrdiff_t hKL, uint nItem, STYLEBUFA* pStyleBuf, uint* puCopied);
    HRESULT GetRegisterWordStyleW(ptrdiff_t hKL, uint nItem, STYLEBUFW* pStyleBuf, uint* puCopied);
    HRESULT GetStatusWindowPos(HIMC__* hIMC, POINT* pptPos);
    HRESULT GetVirtualKey(HWND hWnd, uint* puVirtualKey);
    HRESULT InstallIMEA(const(char)* szIMEFileName, const(char)* szLayoutText, ptrdiff_t* phKL);
    HRESULT InstallIMEW(const(wchar)* szIMEFileName, const(wchar)* szLayoutText, ptrdiff_t* phKL);
    HRESULT IsIME(ptrdiff_t hKL);
    HRESULT IsUIMessageA(HWND hWndIME, uint msg, WPARAM wParam, LPARAM lParam);
    HRESULT IsUIMessageW(HWND hWndIME, uint msg, WPARAM wParam, LPARAM lParam);
    HRESULT NotifyIME(HIMC__* hIMC, uint dwAction, uint dwIndex, uint dwValue);
    HRESULT RegisterWordA(ptrdiff_t hKL, const(char)* szReading, uint dwStyle, const(char)* szRegister);
    HRESULT RegisterWordW(ptrdiff_t hKL, const(wchar)* szReading, uint dwStyle, const(wchar)* szRegister);
    HRESULT ReleaseContext(HWND hWnd, HIMC__* hIMC);
    HRESULT SetCandidateWindow(HIMC__* hIMC, CANDIDATEFORM* pCandidate);
    HRESULT SetCompositionFontA(HIMC__* hIMC, LOGFONTA* plf);
    HRESULT SetCompositionFontW(HIMC__* hIMC, LOGFONTW* plf);
    HRESULT SetCompositionStringA(HIMC__* hIMC, uint dwIndex, void* pComp, uint dwCompLen, void* pRead, 
                                  uint dwReadLen);
    HRESULT SetCompositionStringW(HIMC__* hIMC, uint dwIndex, void* pComp, uint dwCompLen, void* pRead, 
                                  uint dwReadLen);
    HRESULT SetCompositionWindow(HIMC__* hIMC, COMPOSITIONFORM* pCompForm);
    HRESULT SetConversionStatus(HIMC__* hIMC, uint fdwConversion, uint fdwSentence);
    HRESULT SetOpenStatus(HIMC__* hIMC, BOOL fOpen);
    HRESULT SetStatusWindowPos(HIMC__* hIMC, POINT* pptPos);
    HRESULT SimulateHotKey(HWND hWnd, uint dwHotKeyID);
    HRESULT UnregisterWordA(ptrdiff_t hKL, const(char)* szReading, uint dwStyle, const(char)* szUnregister);
    HRESULT UnregisterWordW(ptrdiff_t hKL, const(wchar)* szReading, uint dwStyle, const(wchar)* szUnregister);
    HRESULT GenerateMessage(HIMC__* hIMC);
    HRESULT LockIMC(HIMC__* hIMC, __MIDL___MIDL_itf_dimm_0000_0000_0012** ppIMC);
    HRESULT UnlockIMC(HIMC__* hIMC);
    HRESULT GetIMCLockCount(HIMC__* hIMC, uint* pdwLockCount);
    HRESULT CreateIMCC(uint dwSize, HIMCC__** phIMCC);
    HRESULT DestroyIMCC(HIMCC__* hIMCC);
    HRESULT LockIMCC(HIMCC__* hIMCC, void** ppv);
    HRESULT UnlockIMCC(HIMCC__* hIMCC);
    HRESULT ReSizeIMCC(HIMCC__* hIMCC, uint dwSize, HIMCC__** phIMCC);
    HRESULT GetIMCCSize(HIMCC__* hIMCC, uint* pdwSize);
    HRESULT GetIMCCLockCount(HIMCC__* hIMCC, uint* pdwLockCount);
    HRESULT GetHotKey(uint dwHotKeyID, uint* puModifiers, uint* puVKey, ptrdiff_t* phKL);
    HRESULT SetHotKey(uint dwHotKeyID, uint uModifiers, uint uVKey, ptrdiff_t hKL);
    HRESULT CreateSoftKeyboard(uint uType, HWND hOwner, int x, int y, HWND* phSoftKbdWnd);
    HRESULT DestroySoftKeyboard(HWND hSoftKbdWnd);
    HRESULT ShowSoftKeyboard(HWND hSoftKbdWnd, int nCmdShow);
    HRESULT GetCodePageA(ptrdiff_t hKL, uint* uCodePage);
    HRESULT GetLangId(ptrdiff_t hKL, ushort* plid);
    HRESULT KeybdEvent(ushort lgidIME, ubyte bVk, ubyte bScan, uint dwFlags, uint dwExtraInfo);
    HRESULT LockModal();
    HRESULT UnlockModal();
    HRESULT AssociateContextEx(HWND hWnd, HIMC__* hIMC, uint dwFlags);
    HRESULT DisableIME(uint idThread);
    HRESULT GetImeMenuItemsA(HIMC__* hIMC, uint dwFlags, uint dwType, IMEMENUITEMINFOA* pImeParentMenu, 
                             IMEMENUITEMINFOA* pImeMenu, uint dwSize, uint* pdwResult);
    HRESULT GetImeMenuItemsW(HIMC__* hIMC, uint dwFlags, uint dwType, IMEMENUITEMINFOW* pImeParentMenu, 
                             IMEMENUITEMINFOW* pImeMenu, uint dwSize, uint* pdwResult);
    HRESULT EnumInputContext(uint idThread, IEnumInputContext* ppEnum);
    HRESULT RequestMessageA(HIMC__* hIMC, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
    HRESULT RequestMessageW(HIMC__* hIMC, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
    HRESULT SendIMCA(HWND hWnd, uint uMsg, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
    HRESULT SendIMCW(HWND hWnd, uint uMsg, WPARAM wParam, LPARAM lParam, LRESULT* plResult);
    HRESULT IsSleeping();
}

@GUID("6FE20962-D077-11D0-8FE7-00AA006BCC59")
interface IActiveIME : IUnknown
{
    HRESULT Inquire(uint dwSystemInfoFlags, __MIDL___MIDL_itf_dimm_0000_0000_0014* pIMEInfo, 
                    const(wchar)* szWndClass, uint* pdwPrivate);
    HRESULT ConversionList(HIMC__* hIMC, const(wchar)* szSource, uint uFlag, uint uBufLen, CANDIDATELIST* pDest, 
                           uint* puCopied);
    HRESULT Configure(ptrdiff_t hKL, HWND hWnd, uint dwMode, REGISTERWORDW* pRegisterWord);
    HRESULT Destroy(uint uReserved);
    HRESULT Escape(HIMC__* hIMC, uint uEscape, void* pData, LRESULT* plResult);
    HRESULT SetActiveContext(HIMC__* hIMC, BOOL fFlag);
    HRESULT ProcessKey(HIMC__* hIMC, uint uVirKey, uint lParam, ubyte* pbKeyState);
    HRESULT Notify(HIMC__* hIMC, uint dwAction, uint dwIndex, uint dwValue);
    HRESULT Select(HIMC__* hIMC, BOOL fSelect);
    HRESULT SetCompositionString(HIMC__* hIMC, uint dwIndex, void* pComp, uint dwCompLen, void* pRead, 
                                 uint dwReadLen);
    HRESULT ToAsciiEx(uint uVirKey, uint uScanCode, ubyte* pbKeyState, uint fuState, HIMC__* hIMC, 
                      uint* pdwTransBuf, uint* puSize);
    HRESULT RegisterWord(const(wchar)* szReading, uint dwStyle, const(wchar)* szString);
    HRESULT UnregisterWord(const(wchar)* szReading, uint dwStyle, const(wchar)* szString);
    HRESULT GetRegisterWordStyle(uint nItem, STYLEBUFW* pStyleBuf, uint* puBufSize);
    HRESULT EnumRegisterWord(const(wchar)* szReading, uint dwStyle, const(wchar)* szRegister, void* pData, 
                             IEnumRegisterWordW* ppEnum);
    HRESULT GetCodePageA(uint* uCodePage);
    HRESULT GetLangId(ushort* plid);
}

@GUID("E1C4BF0E-2D53-11D2-93E1-0060B067B86E")
interface IActiveIME2 : IActiveIME
{
    HRESULT Sleep();
    HRESULT Unsleep(BOOL fDead);
}

@GUID("85CB6900-4D95-11CF-960C-0080C7F4EE85")
interface IShellWindows : IDispatch
{
    HRESULT get_Count(int* Count);
    HRESULT Item(VARIANT index, IDispatch* Folder);
    HRESULT _NewEnum(IUnknown* ppunk);
    HRESULT Register(IDispatch pid, int hwnd, int swClass, int* plCookie);
    HRESULT RegisterPending(int lThreadId, VARIANT* pvarloc, VARIANT* pvarlocRoot, int swClass, int* plCookie);
    HRESULT Revoke(int lCookie);
    HRESULT OnNavigate(int lCookie, VARIANT* pvarLoc);
    HRESULT OnActivated(int lCookie, short fActive);
    HRESULT FindWindowSW(VARIANT* pvarLoc, VARIANT* pvarLocRoot, int swClass, int* phwnd, int swfwOptions, 
                         IDispatch* ppdispOut);
    HRESULT OnCreated(int lCookie, IUnknown punk);
    HRESULT ProcessAttachDetach(short fAttach);
}


// GUIDs

const GUID CLSID_AccessibilityDockingService          = GUIDOF!AccessibilityDockingService;
const GUID CLSID_AlphabeticalCategorizer              = GUIDOF!AlphabeticalCategorizer;
const GUID CLSID_AppShellVerbHandler                  = GUIDOF!AppShellVerbHandler;
const GUID CLSID_AppStartupLink                       = GUIDOF!AppStartupLink;
const GUID CLSID_AppVisibility                        = GUIDOF!AppVisibility;
const GUID CLSID_ApplicationActivationManager         = GUIDOF!ApplicationActivationManager;
const GUID CLSID_ApplicationAssociationRegistration   = GUIDOF!ApplicationAssociationRegistration;
const GUID CLSID_ApplicationAssociationRegistrationUI = GUIDOF!ApplicationAssociationRegistrationUI;
const GUID CLSID_ApplicationDesignModeSettings        = GUIDOF!ApplicationDesignModeSettings;
const GUID CLSID_ApplicationDestinations              = GUIDOF!ApplicationDestinations;
const GUID CLSID_ApplicationDocumentLists             = GUIDOF!ApplicationDocumentLists;
const GUID CLSID_AttachmentServices                   = GUIDOF!AttachmentServices;
const GUID CLSID_CActiveIMM                           = GUIDOF!CActiveIMM;
const GUID CLSID_CDBurn                               = GUIDOF!CDBurn;
const GUID CLSID_ConflictFolder                       = GUIDOF!ConflictFolder;
const GUID CLSID_DefFolderMenu                        = GUIDOF!DefFolderMenu;
const GUID CLSID_DesktopGadget                        = GUIDOF!DesktopGadget;
const GUID CLSID_DesktopWallpaper                     = GUIDOF!DesktopWallpaper;
const GUID CLSID_DestinationList                      = GUIDOF!DestinationList;
const GUID CLSID_DocPropShellExtension                = GUIDOF!DocPropShellExtension;
const GUID CLSID_DriveSizeCategorizer                 = GUIDOF!DriveSizeCategorizer;
const GUID CLSID_DriveTypeCategorizer                 = GUIDOF!DriveTypeCategorizer;
const GUID CLSID_EnumerableObjectCollection           = GUIDOF!EnumerableObjectCollection;
const GUID CLSID_ExecuteFolder                        = GUIDOF!ExecuteFolder;
const GUID CLSID_ExecuteUnknown                       = GUIDOF!ExecuteUnknown;
const GUID CLSID_ExplorerBrowser                      = GUIDOF!ExplorerBrowser;
const GUID CLSID_FSCopyHandler                        = GUIDOF!FSCopyHandler;
const GUID CLSID_FileOpenDialog                       = GUIDOF!FileOpenDialog;
const GUID CLSID_FileOperation                        = GUIDOF!FileOperation;
const GUID CLSID_FileSaveDialog                       = GUIDOF!FileSaveDialog;
const GUID CLSID_FileSearchBand                       = GUIDOF!FileSearchBand;
const GUID CLSID_FolderViewHost                       = GUIDOF!FolderViewHost;
const GUID CLSID_FrameworkInputPane                   = GUIDOF!FrameworkInputPane;
const GUID CLSID_FreeSpaceCategorizer                 = GUIDOF!FreeSpaceCategorizer;
const GUID CLSID_GenericCredentialProvider            = GUIDOF!GenericCredentialProvider;
const GUID CLSID_HomeGroup                            = GUIDOF!HomeGroup;
const GUID CLSID_IENamespaceTreeControl               = GUIDOF!IENamespaceTreeControl;
const GUID CLSID_ImageProperties                      = GUIDOF!ImageProperties;
const GUID CLSID_ImageRecompress                      = GUIDOF!ImageRecompress;
const GUID CLSID_ImageTranscode                       = GUIDOF!ImageTranscode;
const GUID CLSID_InputPanelConfiguration              = GUIDOF!InputPanelConfiguration;
const GUID CLSID_InternetPrintOrdering                = GUIDOF!InternetPrintOrdering;
const GUID CLSID_KnownFolderManager                   = GUIDOF!KnownFolderManager;
const GUID CLSID_LocalThumbnailCache                  = GUIDOF!LocalThumbnailCache;
const GUID CLSID_MailRecipient                        = GUIDOF!MailRecipient;
const GUID CLSID_MergedCategorizer                    = GUIDOF!MergedCategorizer;
const GUID CLSID_NPCredentialProvider                 = GUIDOF!NPCredentialProvider;
const GUID CLSID_NamespaceTreeControl                 = GUIDOF!NamespaceTreeControl;
const GUID CLSID_NamespaceWalker                      = GUIDOF!NamespaceWalker;
const GUID CLSID_NetworkConnections                   = GUIDOF!NetworkConnections;
const GUID CLSID_NetworkExplorerFolder                = GUIDOF!NetworkExplorerFolder;
const GUID CLSID_NetworkPlaces                        = GUIDOF!NetworkPlaces;
const GUID CLSID_OnexCredentialProvider               = GUIDOF!OnexCredentialProvider;
const GUID CLSID_OnexPlapSmartcardCredentialProvider  = GUIDOF!OnexPlapSmartcardCredentialProvider;
const GUID CLSID_OpenControlPanel                     = GUIDOF!OpenControlPanel;
const GUID CLSID_PINLogonCredentialProvider           = GUIDOF!PINLogonCredentialProvider;
const GUID CLSID_PackageDebugSettings                 = GUIDOF!PackageDebugSettings;
const GUID CLSID_PasswordCredentialProvider           = GUIDOF!PasswordCredentialProvider;
const GUID CLSID_PreviousVersions                     = GUIDOF!PreviousVersions;
const GUID CLSID_PropertiesUI                         = GUIDOF!PropertiesUI;
const GUID CLSID_PublishDropTarget                    = GUIDOF!PublishDropTarget;
const GUID CLSID_PublishingWizard                     = GUIDOF!PublishingWizard;
const GUID CLSID_QueryCancelAutoPlay                  = GUIDOF!QueryCancelAutoPlay;
const GUID CLSID_RASProvider                          = GUIDOF!RASProvider;
const GUID CLSID_ScheduledTasks                       = GUIDOF!ScheduledTasks;
const GUID CLSID_SearchFolderItemFactory              = GUIDOF!SearchFolderItemFactory;
const GUID CLSID_SharedBitmap                         = GUIDOF!SharedBitmap;
const GUID CLSID_SharingConfigurationManager          = GUIDOF!SharingConfigurationManager;
const GUID CLSID_Shell                                = GUIDOF!Shell;
const GUID CLSID_ShellDesktop                         = GUIDOF!ShellDesktop;
const GUID CLSID_ShellDispatchInproc                  = GUIDOF!ShellDispatchInproc;
const GUID CLSID_ShellFSFolder                        = GUIDOF!ShellFSFolder;
const GUID CLSID_ShellFolderItem                      = GUIDOF!ShellFolderItem;
const GUID CLSID_ShellFolderView                      = GUIDOF!ShellFolderView;
const GUID CLSID_ShellFolderViewOC                    = GUIDOF!ShellFolderViewOC;
const GUID CLSID_ShellImageDataFactory                = GUIDOF!ShellImageDataFactory;
const GUID CLSID_ShellItem                            = GUIDOF!ShellItem;
const GUID CLSID_ShellLibrary                         = GUIDOF!ShellLibrary;
const GUID CLSID_ShellLink                            = GUIDOF!ShellLink;
const GUID CLSID_ShellLinkObject                      = GUIDOF!ShellLinkObject;
const GUID CLSID_SimpleConflictPresenter              = GUIDOF!SimpleConflictPresenter;
const GUID CLSID_SizeCategorizer                      = GUIDOF!SizeCategorizer;
const GUID CLSID_SmartcardCredentialProvider          = GUIDOF!SmartcardCredentialProvider;
const GUID CLSID_SmartcardPinProvider                 = GUIDOF!SmartcardPinProvider;
const GUID CLSID_SmartcardReaderSelectionProvider     = GUIDOF!SmartcardReaderSelectionProvider;
const GUID CLSID_SmartcardWinRTProvider               = GUIDOF!SmartcardWinRTProvider;
const GUID CLSID_StartMenuPin                         = GUIDOF!StartMenuPin;
const GUID CLSID_StorageProviderBanners               = GUIDOF!StorageProviderBanners;
const GUID CLSID_SuspensionDependencyManager          = GUIDOF!SuspensionDependencyManager;
const GUID CLSID_SyncMgr                              = GUIDOF!SyncMgr;
const GUID CLSID_SyncMgrClient                        = GUIDOF!SyncMgrClient;
const GUID CLSID_SyncMgrControl                       = GUIDOF!SyncMgrControl;
const GUID CLSID_SyncMgrFolder                        = GUIDOF!SyncMgrFolder;
const GUID CLSID_SyncMgrScheduleWizard                = GUIDOF!SyncMgrScheduleWizard;
const GUID CLSID_SyncResultsFolder                    = GUIDOF!SyncResultsFolder;
const GUID CLSID_SyncSetupFolder                      = GUIDOF!SyncSetupFolder;
const GUID CLSID_TaskbarList                          = GUIDOF!TaskbarList;
const GUID CLSID_ThumbnailStreamCache                 = GUIDOF!ThumbnailStreamCache;
const GUID CLSID_TimeCategorizer                      = GUIDOF!TimeCategorizer;
const GUID CLSID_TrackShellMenu                       = GUIDOF!TrackShellMenu;
const GUID CLSID_TrayBandSiteService                  = GUIDOF!TrayBandSiteService;
const GUID CLSID_TrayDeskBand                         = GUIDOF!TrayDeskBand;
const GUID CLSID_UserNotification                     = GUIDOF!UserNotification;
const GUID CLSID_V1PasswordCredentialProvider         = GUIDOF!V1PasswordCredentialProvider;
const GUID CLSID_V1SmartcardCredentialProvider        = GUIDOF!V1SmartcardCredentialProvider;
const GUID CLSID_V1WinBioCredentialProvider           = GUIDOF!V1WinBioCredentialProvider;
const GUID CLSID_VaultProvider                        = GUIDOF!VaultProvider;
const GUID CLSID_VirtualDesktopManager                = GUIDOF!VirtualDesktopManager;
const GUID CLSID_WebWizardHost                        = GUIDOF!WebWizardHost;
const GUID CLSID_WinBioCredentialProvider             = GUIDOF!WinBioCredentialProvider;

const GUID IID_DFConstraint                                  = GUIDOF!DFConstraint;
const GUID IID_DShellFolderViewEvents                        = GUIDOF!DShellFolderViewEvents;
const GUID IID_Folder                                        = GUIDOF!Folder;
const GUID IID_Folder2                                       = GUIDOF!Folder2;
const GUID IID_Folder3                                       = GUIDOF!Folder3;
const GUID IID_FolderItem                                    = GUIDOF!FolderItem;
const GUID IID_FolderItem2                                   = GUIDOF!FolderItem2;
const GUID IID_FolderItemVerb                                = GUIDOF!FolderItemVerb;
const GUID IID_FolderItemVerbs                               = GUIDOF!FolderItemVerbs;
const GUID IID_FolderItems                                   = GUIDOF!FolderItems;
const GUID IID_FolderItems2                                  = GUIDOF!FolderItems2;
const GUID IID_FolderItems3                                  = GUIDOF!FolderItems3;
const GUID IID_IACList                                       = GUIDOF!IACList;
const GUID IID_IACList2                                      = GUIDOF!IACList2;
const GUID IID_IAccessibleObject                             = GUIDOF!IAccessibleObject;
const GUID IID_IActionProgress                               = GUIDOF!IActionProgress;
const GUID IID_IActionProgressDialog                         = GUIDOF!IActionProgressDialog;
const GUID IID_IActiveIME                                    = GUIDOF!IActiveIME;
const GUID IID_IActiveIME2                                   = GUIDOF!IActiveIME2;
const GUID IID_IActiveIMMApp                                 = GUIDOF!IActiveIMMApp;
const GUID IID_IActiveIMMIME                                 = GUIDOF!IActiveIMMIME;
const GUID IID_IActiveIMMMessagePumpOwner                    = GUIDOF!IActiveIMMMessagePumpOwner;
const GUID IID_IActiveIMMRegistrar                           = GUIDOF!IActiveIMMRegistrar;
const GUID IID_IAppActivationUIInfo                          = GUIDOF!IAppActivationUIInfo;
const GUID IID_IAppPublisher                                 = GUIDOF!IAppPublisher;
const GUID IID_IAppVisibility                                = GUIDOF!IAppVisibility;
const GUID IID_IAppVisibilityEvents                          = GUIDOF!IAppVisibilityEvents;
const GUID IID_IApplicationActivationManager                 = GUIDOF!IApplicationActivationManager;
const GUID IID_IApplicationAssociationRegistration           = GUIDOF!IApplicationAssociationRegistration;
const GUID IID_IApplicationAssociationRegistrationUI         = GUIDOF!IApplicationAssociationRegistrationUI;
const GUID IID_IApplicationDesignModeSettings                = GUIDOF!IApplicationDesignModeSettings;
const GUID IID_IApplicationDesignModeSettings2               = GUIDOF!IApplicationDesignModeSettings2;
const GUID IID_IApplicationDestinations                      = GUIDOF!IApplicationDestinations;
const GUID IID_IApplicationDocumentLists                     = GUIDOF!IApplicationDocumentLists;
const GUID IID_IAssocHandler                                 = GUIDOF!IAssocHandler;
const GUID IID_IAssocHandlerInvoker                          = GUIDOF!IAssocHandlerInvoker;
const GUID IID_IAttachmentExecute                            = GUIDOF!IAttachmentExecute;
const GUID IID_IAutoComplete                                 = GUIDOF!IAutoComplete;
const GUID IID_IAutoComplete2                                = GUIDOF!IAutoComplete2;
const GUID IID_IAutoCompleteDropDown                         = GUIDOF!IAutoCompleteDropDown;
const GUID IID_IBandHost                                     = GUIDOF!IBandHost;
const GUID IID_IBandSite                                     = GUIDOF!IBandSite;
const GUID IID_IBannerNotificationHandler                    = GUIDOF!IBannerNotificationHandler;
const GUID IID_IBanneredBar                                  = GUIDOF!IBanneredBar;
const GUID IID_IBrowserFrameOptions                          = GUIDOF!IBrowserFrameOptions;
const GUID IID_IBrowserService                               = GUIDOF!IBrowserService;
const GUID IID_IBrowserService2                              = GUIDOF!IBrowserService2;
const GUID IID_IBrowserService3                              = GUIDOF!IBrowserService3;
const GUID IID_IBrowserService4                              = GUIDOF!IBrowserService4;
const GUID IID_ICDBurn                                       = GUIDOF!ICDBurn;
const GUID IID_ICDBurnExt                                    = GUIDOF!ICDBurnExt;
const GUID IID_ICategorizer                                  = GUIDOF!ICategorizer;
const GUID IID_ICategoryProvider                             = GUIDOF!ICategoryProvider;
const GUID IID_IColumnManager                                = GUIDOF!IColumnManager;
const GUID IID_IColumnProvider                               = GUIDOF!IColumnProvider;
const GUID IID_ICommDlgBrowser                               = GUIDOF!ICommDlgBrowser;
const GUID IID_ICommDlgBrowser2                              = GUIDOF!ICommDlgBrowser2;
const GUID IID_ICommDlgBrowser3                              = GUIDOF!ICommDlgBrowser3;
const GUID IID_IComputerInfoChangeNotify                     = GUIDOF!IComputerInfoChangeNotify;
const GUID IID_IConnectableCredentialProviderCredential      = GUIDOF!IConnectableCredentialProviderCredential;
const GUID IID_IContactManagerInterop                        = GUIDOF!IContactManagerInterop;
const GUID IID_IContextMenu                                  = GUIDOF!IContextMenu;
const GUID IID_IContextMenu2                                 = GUIDOF!IContextMenu2;
const GUID IID_IContextMenu3                                 = GUIDOF!IContextMenu3;
const GUID IID_IContextMenuCB                                = GUIDOF!IContextMenuCB;
const GUID IID_IContextMenuSite                              = GUIDOF!IContextMenuSite;
const GUID IID_ICopyHookA                                    = GUIDOF!ICopyHookA;
const GUID IID_ICopyHookW                                    = GUIDOF!ICopyHookW;
const GUID IID_ICreateObject                                 = GUIDOF!ICreateObject;
const GUID IID_ICreateProcessInputs                          = GUIDOF!ICreateProcessInputs;
const GUID IID_ICreatingProcess                              = GUIDOF!ICreatingProcess;
const GUID IID_ICredentialProvider                           = GUIDOF!ICredentialProvider;
const GUID IID_ICredentialProviderCredential                 = GUIDOF!ICredentialProviderCredential;
const GUID IID_ICredentialProviderCredential2                = GUIDOF!ICredentialProviderCredential2;
const GUID IID_ICredentialProviderCredentialEvents           = GUIDOF!ICredentialProviderCredentialEvents;
const GUID IID_ICredentialProviderCredentialEvents2          = GUIDOF!ICredentialProviderCredentialEvents2;
const GUID IID_ICredentialProviderCredentialWithFieldOptions = GUIDOF!ICredentialProviderCredentialWithFieldOptions;
const GUID IID_ICredentialProviderEvents                     = GUIDOF!ICredentialProviderEvents;
const GUID IID_ICredentialProviderFilter                     = GUIDOF!ICredentialProviderFilter;
const GUID IID_ICredentialProviderSetUserArray               = GUIDOF!ICredentialProviderSetUserArray;
const GUID IID_ICredentialProviderUser                       = GUIDOF!ICredentialProviderUser;
const GUID IID_ICredentialProviderUserArray                  = GUIDOF!ICredentialProviderUserArray;
const GUID IID_ICurrentItem                                  = GUIDOF!ICurrentItem;
const GUID IID_ICurrentWorkingDirectory                      = GUIDOF!ICurrentWorkingDirectory;
const GUID IID_ICustomDestinationList                        = GUIDOF!ICustomDestinationList;
const GUID IID_IDataObjectAsyncCapability                    = GUIDOF!IDataObjectAsyncCapability;
const GUID IID_IDataObjectProvider                           = GUIDOF!IDataObjectProvider;
const GUID IID_IDataTransferManagerInterop                   = GUIDOF!IDataTransferManagerInterop;
const GUID IID_IDefaultExtractIconInit                       = GUIDOF!IDefaultExtractIconInit;
const GUID IID_IDefaultFolderMenuInitialize                  = GUIDOF!IDefaultFolderMenuInitialize;
const GUID IID_IDelayedPropertyStoreFactory                  = GUIDOF!IDelayedPropertyStoreFactory;
const GUID IID_IDelegateFolder                               = GUIDOF!IDelegateFolder;
const GUID IID_IDelegateItem                                 = GUIDOF!IDelegateItem;
const GUID IID_IDeskBand                                     = GUIDOF!IDeskBand;
const GUID IID_IDeskBand2                                    = GUIDOF!IDeskBand2;
const GUID IID_IDeskBandInfo                                 = GUIDOF!IDeskBandInfo;
const GUID IID_IDeskBar                                      = GUIDOF!IDeskBar;
const GUID IID_IDeskBarClient                                = GUIDOF!IDeskBarClient;
const GUID IID_IDesktopGadget                                = GUIDOF!IDesktopGadget;
const GUID IID_IDesktopWallpaper                             = GUIDOF!IDesktopWallpaper;
const GUID IID_IDestinationStreamFactory                     = GUIDOF!IDestinationStreamFactory;
const GUID IID_IDisplayItem                                  = GUIDOF!IDisplayItem;
const GUID IID_IDocViewSite                                  = GUIDOF!IDocViewSite;
const GUID IID_IDockingWindow                                = GUIDOF!IDockingWindow;
const GUID IID_IDockingWindowFrame                           = GUIDOF!IDockingWindowFrame;
const GUID IID_IDockingWindowSite                            = GUIDOF!IDockingWindowSite;
const GUID IID_IDragSourceHelper                             = GUIDOF!IDragSourceHelper;
const GUID IID_IDragSourceHelper2                            = GUIDOF!IDragSourceHelper2;
const GUID IID_IDropTargetHelper                             = GUIDOF!IDropTargetHelper;
const GUID IID_IDynamicHWHandler                             = GUIDOF!IDynamicHWHandler;
const GUID IID_IEnumACString                                 = GUIDOF!IEnumACString;
const GUID IID_IEnumAssocHandlers                            = GUIDOF!IEnumAssocHandlers;
const GUID IID_IEnumExplorerCommand                          = GUIDOF!IEnumExplorerCommand;
const GUID IID_IEnumExtraSearch                              = GUIDOF!IEnumExtraSearch;
const GUID IID_IEnumFullIDList                               = GUIDOF!IEnumFullIDList;
const GUID IID_IEnumHLITEM                                   = GUIDOF!IEnumHLITEM;
const GUID IID_IEnumIDList                                   = GUIDOF!IEnumIDList;
const GUID IID_IEnumInputContext                             = GUIDOF!IEnumInputContext;
const GUID IID_IEnumObjects                                  = GUIDOF!IEnumObjects;
const GUID IID_IEnumPublishedApps                            = GUIDOF!IEnumPublishedApps;
const GUID IID_IEnumReadyCallback                            = GUIDOF!IEnumReadyCallback;
const GUID IID_IEnumRegisterWordA                            = GUIDOF!IEnumRegisterWordA;
const GUID IID_IEnumRegisterWordW                            = GUIDOF!IEnumRegisterWordW;
const GUID IID_IEnumResources                                = GUIDOF!IEnumResources;
const GUID IID_IEnumShellItems                               = GUIDOF!IEnumShellItems;
const GUID IID_IEnumSyncMgrConflict                          = GUIDOF!IEnumSyncMgrConflict;
const GUID IID_IEnumSyncMgrEvents                            = GUIDOF!IEnumSyncMgrEvents;
const GUID IID_IEnumSyncMgrSyncItems                         = GUIDOF!IEnumSyncMgrSyncItems;
const GUID IID_IEnumTravelLogEntry                           = GUIDOF!IEnumTravelLogEntry;
const GUID IID_IEnumerableView                               = GUIDOF!IEnumerableView;
const GUID IID_IExecuteCommand                               = GUIDOF!IExecuteCommand;
const GUID IID_IExecuteCommandApplicationHostEnvironment     = GUIDOF!IExecuteCommandApplicationHostEnvironment;
const GUID IID_IExecuteCommandHost                           = GUIDOF!IExecuteCommandHost;
const GUID IID_IExpDispSupport                               = GUIDOF!IExpDispSupport;
const GUID IID_IExpDispSupportXP                             = GUIDOF!IExpDispSupportXP;
const GUID IID_IExplorerBrowser                              = GUIDOF!IExplorerBrowser;
const GUID IID_IExplorerBrowserEvents                        = GUIDOF!IExplorerBrowserEvents;
const GUID IID_IExplorerCommand                              = GUIDOF!IExplorerCommand;
const GUID IID_IExplorerCommandProvider                      = GUIDOF!IExplorerCommandProvider;
const GUID IID_IExplorerCommandState                         = GUIDOF!IExplorerCommandState;
const GUID IID_IExplorerPaneVisibility                       = GUIDOF!IExplorerPaneVisibility;
const GUID IID_IExtensionServices                            = GUIDOF!IExtensionServices;
const GUID IID_IExtractIconA                                 = GUIDOF!IExtractIconA;
const GUID IID_IExtractIconW                                 = GUIDOF!IExtractIconW;
const GUID IID_IExtractImage                                 = GUIDOF!IExtractImage;
const GUID IID_IExtractImage2                                = GUIDOF!IExtractImage2;
const GUID IID_IFileDialog                                   = GUIDOF!IFileDialog;
const GUID IID_IFileDialog2                                  = GUIDOF!IFileDialog2;
const GUID IID_IFileDialogControlEvents                      = GUIDOF!IFileDialogControlEvents;
const GUID IID_IFileDialogCustomize                          = GUIDOF!IFileDialogCustomize;
const GUID IID_IFileDialogEvents                             = GUIDOF!IFileDialogEvents;
const GUID IID_IFileIsInUse                                  = GUIDOF!IFileIsInUse;
const GUID IID_IFileOpenDialog                               = GUIDOF!IFileOpenDialog;
const GUID IID_IFileOperation                                = GUIDOF!IFileOperation;
const GUID IID_IFileOperation2                               = GUIDOF!IFileOperation2;
const GUID IID_IFileOperationProgressSink                    = GUIDOF!IFileOperationProgressSink;
const GUID IID_IFileSaveDialog                               = GUIDOF!IFileSaveDialog;
const GUID IID_IFileSearchBand                               = GUIDOF!IFileSearchBand;
const GUID IID_IFileSyncMergeHandler                         = GUIDOF!IFileSyncMergeHandler;
const GUID IID_IFileSystemBindData                           = GUIDOF!IFileSystemBindData;
const GUID IID_IFileSystemBindData2                          = GUIDOF!IFileSystemBindData2;
const GUID IID_IFolderBandPriv                               = GUIDOF!IFolderBandPriv;
const GUID IID_IFolderFilter                                 = GUIDOF!IFolderFilter;
const GUID IID_IFolderFilterSite                             = GUIDOF!IFolderFilterSite;
const GUID IID_IFolderView                                   = GUIDOF!IFolderView;
const GUID IID_IFolderView2                                  = GUIDOF!IFolderView2;
const GUID IID_IFolderViewHost                               = GUIDOF!IFolderViewHost;
const GUID IID_IFolderViewOC                                 = GUIDOF!IFolderViewOC;
const GUID IID_IFolderViewOptions                            = GUIDOF!IFolderViewOptions;
const GUID IID_IFolderViewSettings                           = GUIDOF!IFolderViewSettings;
const GUID IID_IFrameworkInputPane                           = GUIDOF!IFrameworkInputPane;
const GUID IID_IFrameworkInputPaneHandler                    = GUIDOF!IFrameworkInputPaneHandler;
const GUID IID_IHWEventHandler                               = GUIDOF!IHWEventHandler;
const GUID IID_IHWEventHandler2                              = GUIDOF!IHWEventHandler2;
const GUID IID_IHandlerActivationHost                        = GUIDOF!IHandlerActivationHost;
const GUID IID_IHandlerInfo                                  = GUIDOF!IHandlerInfo;
const GUID IID_IHandlerInfo2                                 = GUIDOF!IHandlerInfo2;
const GUID IID_IHlink                                        = GUIDOF!IHlink;
const GUID IID_IHlinkBrowseContext                           = GUIDOF!IHlinkBrowseContext;
const GUID IID_IHlinkFrame                                   = GUIDOF!IHlinkFrame;
const GUID IID_IHlinkSite                                    = GUIDOF!IHlinkSite;
const GUID IID_IHlinkTarget                                  = GUIDOF!IHlinkTarget;
const GUID IID_IHomeGroup                                    = GUIDOF!IHomeGroup;
const GUID IID_IIOCancelInformation                          = GUIDOF!IIOCancelInformation;
const GUID IID_IIdentityName                                 = GUIDOF!IIdentityName;
const GUID IID_IImageRecompress                              = GUIDOF!IImageRecompress;
const GUID IID_IInitializeCommand                            = GUIDOF!IInitializeCommand;
const GUID IID_IInitializeNetworkFolder                      = GUIDOF!IInitializeNetworkFolder;
const GUID IID_IInitializeObject                             = GUIDOF!IInitializeObject;
const GUID IID_IInitializeWithBindCtx                        = GUIDOF!IInitializeWithBindCtx;
const GUID IID_IInitializeWithFile                           = GUIDOF!IInitializeWithFile;
const GUID IID_IInitializeWithItem                           = GUIDOF!IInitializeWithItem;
const GUID IID_IInitializeWithPropertyStore                  = GUIDOF!IInitializeWithPropertyStore;
const GUID IID_IInitializeWithStream                         = GUIDOF!IInitializeWithStream;
const GUID IID_IInitializeWithWindow                         = GUIDOF!IInitializeWithWindow;
const GUID IID_IInputObject                                  = GUIDOF!IInputObject;
const GUID IID_IInputObject2                                 = GUIDOF!IInputObject2;
const GUID IID_IInputObjectSite                              = GUIDOF!IInputObjectSite;
const GUID IID_IInputPanelConfiguration                      = GUIDOF!IInputPanelConfiguration;
const GUID IID_IInputPanelInvocationConfiguration            = GUIDOF!IInputPanelInvocationConfiguration;
const GUID IID_IInsertItem                                   = GUIDOF!IInsertItem;
const GUID IID_IItemNameLimits                               = GUIDOF!IItemNameLimits;
const GUID IID_IKnownFolder                                  = GUIDOF!IKnownFolder;
const GUID IID_IKnownFolderManager                           = GUIDOF!IKnownFolderManager;
const GUID IID_ILaunchSourceAppUserModelId                   = GUIDOF!ILaunchSourceAppUserModelId;
const GUID IID_ILaunchSourceViewSizePreference               = GUIDOF!ILaunchSourceViewSizePreference;
const GUID IID_ILaunchTargetMonitor                          = GUIDOF!ILaunchTargetMonitor;
const GUID IID_ILaunchTargetViewSizePreference               = GUIDOF!ILaunchTargetViewSizePreference;
const GUID IID_ILaunchUIContext                              = GUIDOF!ILaunchUIContext;
const GUID IID_ILaunchUIContextProvider                      = GUIDOF!ILaunchUIContextProvider;
const GUID IID_IMenuBand                                     = GUIDOF!IMenuBand;
const GUID IID_IMenuPopup                                    = GUIDOF!IMenuPopup;
const GUID IID_IModalWindow                                  = GUIDOF!IModalWindow;
const GUID IID_INameSpaceTreeAccessible                      = GUIDOF!INameSpaceTreeAccessible;
const GUID IID_INameSpaceTreeControl                         = GUIDOF!INameSpaceTreeControl;
const GUID IID_INameSpaceTreeControl2                        = GUIDOF!INameSpaceTreeControl2;
const GUID IID_INameSpaceTreeControlCustomDraw               = GUIDOF!INameSpaceTreeControlCustomDraw;
const GUID IID_INameSpaceTreeControlDropHandler              = GUIDOF!INameSpaceTreeControlDropHandler;
const GUID IID_INameSpaceTreeControlEvents                   = GUIDOF!INameSpaceTreeControlEvents;
const GUID IID_INameSpaceTreeControlFolderCapabilities       = GUIDOF!INameSpaceTreeControlFolderCapabilities;
const GUID IID_INamedPropertyBag                             = GUIDOF!INamedPropertyBag;
const GUID IID_INamedPropertyStore                           = GUIDOF!INamedPropertyStore;
const GUID IID_INamespaceWalk                                = GUIDOF!INamespaceWalk;
const GUID IID_INamespaceWalkCB                              = GUIDOF!INamespaceWalkCB;
const GUID IID_INamespaceWalkCB2                             = GUIDOF!INamespaceWalkCB2;
const GUID IID_INetworkFolderInternal                        = GUIDOF!INetworkFolderInternal;
const GUID IID_INewMenuClient                                = GUIDOF!INewMenuClient;
const GUID IID_INewShortcutHookA                             = GUIDOF!INewShortcutHookA;
const GUID IID_INewShortcutHookW                             = GUIDOF!INewShortcutHookW;
const GUID IID_INewWDEvents                                  = GUIDOF!INewWDEvents;
const GUID IID_INewWindowManager                             = GUIDOF!INewWindowManager;
const GUID IID_INotifyReplica                                = GUIDOF!INotifyReplica;
const GUID IID_IObjMgr                                       = GUIDOF!IObjMgr;
const GUID IID_IObjectArray                                  = GUIDOF!IObjectArray;
const GUID IID_IObjectCollection                             = GUIDOF!IObjectCollection;
const GUID IID_IObjectProvider                               = GUIDOF!IObjectProvider;
const GUID IID_IObjectWithAppUserModelID                     = GUIDOF!IObjectWithAppUserModelID;
const GUID IID_IObjectWithBackReferences                     = GUIDOF!IObjectWithBackReferences;
const GUID IID_IObjectWithCancelEvent                        = GUIDOF!IObjectWithCancelEvent;
const GUID IID_IObjectWithFolderEnumMode                     = GUIDOF!IObjectWithFolderEnumMode;
const GUID IID_IObjectWithProgID                             = GUIDOF!IObjectWithProgID;
const GUID IID_IObjectWithPropertyKey                        = GUIDOF!IObjectWithPropertyKey;
const GUID IID_IObjectWithSelection                          = GUIDOF!IObjectWithSelection;
const GUID IID_IOpenControlPanel                             = GUIDOF!IOpenControlPanel;
const GUID IID_IOpenSearchSource                             = GUIDOF!IOpenSearchSource;
const GUID IID_IOperationsProgressDialog                     = GUIDOF!IOperationsProgressDialog;
const GUID IID_IPackageDebugSettings                         = GUIDOF!IPackageDebugSettings;
const GUID IID_IPackageDebugSettings2                        = GUIDOF!IPackageDebugSettings2;
const GUID IID_IPackageExecutionStateChangeNotification      = GUIDOF!IPackageExecutionStateChangeNotification;
const GUID IID_IParentAndItem                                = GUIDOF!IParentAndItem;
const GUID IID_IParseAndCreateItem                           = GUIDOF!IParseAndCreateItem;
const GUID IID_IPersistFolder                                = GUIDOF!IPersistFolder;
const GUID IID_IPersistFolder2                               = GUIDOF!IPersistFolder2;
const GUID IID_IPersistFolder3                               = GUIDOF!IPersistFolder3;
const GUID IID_IPersistIDList                                = GUIDOF!IPersistIDList;
const GUID IID_IPersistSerializedPropStorage                 = GUIDOF!IPersistSerializedPropStorage;
const GUID IID_IPersistSerializedPropStorage2                = GUIDOF!IPersistSerializedPropStorage2;
const GUID IID_IPreviewHandler                               = GUIDOF!IPreviewHandler;
const GUID IID_IPreviewHandlerFrame                          = GUIDOF!IPreviewHandlerFrame;
const GUID IID_IPreviewHandlerVisuals                        = GUIDOF!IPreviewHandlerVisuals;
const GUID IID_IPreviewItem                                  = GUIDOF!IPreviewItem;
const GUID IID_IPreviousVersionsInfo                         = GUIDOF!IPreviousVersionsInfo;
const GUID IID_IProfferService                               = GUIDOF!IProfferService;
const GUID IID_IProgressDialog                               = GUIDOF!IProgressDialog;
const GUID IID_IPropertyKeyStore                             = GUIDOF!IPropertyKeyStore;
const GUID IID_IPublishedApp                                 = GUIDOF!IPublishedApp;
const GUID IID_IPublishedApp2                                = GUIDOF!IPublishedApp2;
const GUID IID_IPublishingWizard                             = GUIDOF!IPublishingWizard;
const GUID IID_IQueryAssociations                            = GUIDOF!IQueryAssociations;
const GUID IID_IQueryCancelAutoPlay                          = GUIDOF!IQueryCancelAutoPlay;
const GUID IID_IQueryCodePage                                = GUIDOF!IQueryCodePage;
const GUID IID_IQueryContinue                                = GUIDOF!IQueryContinue;
const GUID IID_IQueryContinueWithStatus                      = GUIDOF!IQueryContinueWithStatus;
const GUID IID_IQueryInfo                                    = GUIDOF!IQueryInfo;
const GUID IID_IRegTreeItem                                  = GUIDOF!IRegTreeItem;
const GUID IID_IRelatedItem                                  = GUIDOF!IRelatedItem;
const GUID IID_IRemoteComputer                               = GUIDOF!IRemoteComputer;
const GUID IID_IResolveShellLink                             = GUIDOF!IResolveShellLink;
const GUID IID_IResultsFolder                                = GUIDOF!IResultsFolder;
const GUID IID_IRunnableTask                                 = GUIDOF!IRunnableTask;
const GUID IID_ISearchBoxInfo                                = GUIDOF!ISearchBoxInfo;
const GUID IID_ISearchContext                                = GUIDOF!ISearchContext;
const GUID IID_ISearchFolderItemFactory                      = GUIDOF!ISearchFolderItemFactory;
const GUID IID_ISharedBitmap                                 = GUIDOF!ISharedBitmap;
const GUID IID_ISharingConfigurationManager                  = GUIDOF!ISharingConfigurationManager;
const GUID IID_IShellApp                                     = GUIDOF!IShellApp;
const GUID IID_IShellBrowser                                 = GUIDOF!IShellBrowser;
const GUID IID_IShellChangeNotify                            = GUIDOF!IShellChangeNotify;
const GUID IID_IShellDetails                                 = GUIDOF!IShellDetails;
const GUID IID_IShellDispatch                                = GUIDOF!IShellDispatch;
const GUID IID_IShellDispatch2                               = GUIDOF!IShellDispatch2;
const GUID IID_IShellDispatch3                               = GUIDOF!IShellDispatch3;
const GUID IID_IShellDispatch4                               = GUIDOF!IShellDispatch4;
const GUID IID_IShellDispatch5                               = GUIDOF!IShellDispatch5;
const GUID IID_IShellDispatch6                               = GUIDOF!IShellDispatch6;
const GUID IID_IShellExecuteHookA                            = GUIDOF!IShellExecuteHookA;
const GUID IID_IShellExecuteHookW                            = GUIDOF!IShellExecuteHookW;
const GUID IID_IShellExtInit                                 = GUIDOF!IShellExtInit;
const GUID IID_IShellFolder                                  = GUIDOF!IShellFolder;
const GUID IID_IShellFolder2                                 = GUIDOF!IShellFolder2;
const GUID IID_IShellFolderBand                              = GUIDOF!IShellFolderBand;
const GUID IID_IShellFolderView                              = GUIDOF!IShellFolderView;
const GUID IID_IShellFolderViewCB                            = GUIDOF!IShellFolderViewCB;
const GUID IID_IShellFolderViewDual                          = GUIDOF!IShellFolderViewDual;
const GUID IID_IShellFolderViewDual2                         = GUIDOF!IShellFolderViewDual2;
const GUID IID_IShellFolderViewDual3                         = GUIDOF!IShellFolderViewDual3;
const GUID IID_IShellIcon                                    = GUIDOF!IShellIcon;
const GUID IID_IShellIconOverlay                             = GUIDOF!IShellIconOverlay;
const GUID IID_IShellIconOverlayIdentifier                   = GUIDOF!IShellIconOverlayIdentifier;
const GUID IID_IShellIconOverlayManager                      = GUIDOF!IShellIconOverlayManager;
const GUID IID_IShellImageData                               = GUIDOF!IShellImageData;
const GUID IID_IShellImageDataAbort                          = GUIDOF!IShellImageDataAbort;
const GUID IID_IShellImageDataFactory                        = GUIDOF!IShellImageDataFactory;
const GUID IID_IShellItem                                    = GUIDOF!IShellItem;
const GUID IID_IShellItem2                                   = GUIDOF!IShellItem2;
const GUID IID_IShellItemArray                               = GUIDOF!IShellItemArray;
const GUID IID_IShellItemFilter                              = GUIDOF!IShellItemFilter;
const GUID IID_IShellItemImageFactory                        = GUIDOF!IShellItemImageFactory;
const GUID IID_IShellItemResources                           = GUIDOF!IShellItemResources;
const GUID IID_IShellLibrary                                 = GUIDOF!IShellLibrary;
const GUID IID_IShellLinkA                                   = GUIDOF!IShellLinkA;
const GUID IID_IShellLinkDataList                            = GUIDOF!IShellLinkDataList;
const GUID IID_IShellLinkDual                                = GUIDOF!IShellLinkDual;
const GUID IID_IShellLinkDual2                               = GUIDOF!IShellLinkDual2;
const GUID IID_IShellLinkW                                   = GUIDOF!IShellLinkW;
const GUID IID_IShellMenu                                    = GUIDOF!IShellMenu;
const GUID IID_IShellMenuCallback                            = GUIDOF!IShellMenuCallback;
const GUID IID_IShellPropSheetExt                            = GUIDOF!IShellPropSheetExt;
const GUID IID_IShellRunDll                                  = GUIDOF!IShellRunDll;
const GUID IID_IShellService                                 = GUIDOF!IShellService;
const GUID IID_IShellTaskScheduler                           = GUIDOF!IShellTaskScheduler;
const GUID IID_IShellView                                    = GUIDOF!IShellView;
const GUID IID_IShellView2                                   = GUIDOF!IShellView2;
const GUID IID_IShellView3                                   = GUIDOF!IShellView3;
const GUID IID_IShellWindows                                 = GUIDOF!IShellWindows;
const GUID IID_ISortColumnArray                              = GUIDOF!ISortColumnArray;
const GUID IID_IStartMenuPinnedList                          = GUIDOF!IStartMenuPinnedList;
const GUID IID_IStorageProviderBanners                       = GUIDOF!IStorageProviderBanners;
const GUID IID_IStorageProviderHandler                       = GUIDOF!IStorageProviderHandler;
const GUID IID_IStorageProviderPropertyHandler               = GUIDOF!IStorageProviderPropertyHandler;
const GUID IID_IStreamAsync                                  = GUIDOF!IStreamAsync;
const GUID IID_IStreamUnbufferedInfo                         = GUIDOF!IStreamUnbufferedInfo;
const GUID IID_ISuspensionDependencyManager                  = GUIDOF!ISuspensionDependencyManager;
const GUID IID_ISyncMgrConflict                              = GUIDOF!ISyncMgrConflict;
const GUID IID_ISyncMgrConflictFolder                        = GUIDOF!ISyncMgrConflictFolder;
const GUID IID_ISyncMgrConflictItems                         = GUIDOF!ISyncMgrConflictItems;
const GUID IID_ISyncMgrConflictPresenter                     = GUIDOF!ISyncMgrConflictPresenter;
const GUID IID_ISyncMgrConflictResolutionItems               = GUIDOF!ISyncMgrConflictResolutionItems;
const GUID IID_ISyncMgrConflictResolveInfo                   = GUIDOF!ISyncMgrConflictResolveInfo;
const GUID IID_ISyncMgrConflictStore                         = GUIDOF!ISyncMgrConflictStore;
const GUID IID_ISyncMgrControl                               = GUIDOF!ISyncMgrControl;
const GUID IID_ISyncMgrEnumItems                             = GUIDOF!ISyncMgrEnumItems;
const GUID IID_ISyncMgrEvent                                 = GUIDOF!ISyncMgrEvent;
const GUID IID_ISyncMgrEventLinkUIOperation                  = GUIDOF!ISyncMgrEventLinkUIOperation;
const GUID IID_ISyncMgrEventStore                            = GUIDOF!ISyncMgrEventStore;
const GUID IID_ISyncMgrHandler                               = GUIDOF!ISyncMgrHandler;
const GUID IID_ISyncMgrHandlerCollection                     = GUIDOF!ISyncMgrHandlerCollection;
const GUID IID_ISyncMgrHandlerInfo                           = GUIDOF!ISyncMgrHandlerInfo;
const GUID IID_ISyncMgrRegister                              = GUIDOF!ISyncMgrRegister;
const GUID IID_ISyncMgrResolutionHandler                     = GUIDOF!ISyncMgrResolutionHandler;
const GUID IID_ISyncMgrScheduleWizardUIOperation             = GUIDOF!ISyncMgrScheduleWizardUIOperation;
const GUID IID_ISyncMgrSessionCreator                        = GUIDOF!ISyncMgrSessionCreator;
const GUID IID_ISyncMgrSyncCallback                          = GUIDOF!ISyncMgrSyncCallback;
const GUID IID_ISyncMgrSyncItem                              = GUIDOF!ISyncMgrSyncItem;
const GUID IID_ISyncMgrSyncItemContainer                     = GUIDOF!ISyncMgrSyncItemContainer;
const GUID IID_ISyncMgrSyncItemInfo                          = GUIDOF!ISyncMgrSyncItemInfo;
const GUID IID_ISyncMgrSyncResult                            = GUIDOF!ISyncMgrSyncResult;
const GUID IID_ISyncMgrSynchronize                           = GUIDOF!ISyncMgrSynchronize;
const GUID IID_ISyncMgrSynchronizeCallback                   = GUIDOF!ISyncMgrSynchronizeCallback;
const GUID IID_ISyncMgrSynchronizeInvoke                     = GUIDOF!ISyncMgrSynchronizeInvoke;
const GUID IID_ISyncMgrUIOperation                           = GUIDOF!ISyncMgrUIOperation;
const GUID IID_ITaskbarList                                  = GUIDOF!ITaskbarList;
const GUID IID_ITaskbarList2                                 = GUIDOF!ITaskbarList2;
const GUID IID_ITaskbarList3                                 = GUIDOF!ITaskbarList3;
const GUID IID_ITaskbarList4                                 = GUIDOF!ITaskbarList4;
const GUID IID_IThumbnailCache                               = GUIDOF!IThumbnailCache;
const GUID IID_IThumbnailCachePrimer                         = GUIDOF!IThumbnailCachePrimer;
const GUID IID_IThumbnailCapture                             = GUIDOF!IThumbnailCapture;
const GUID IID_IThumbnailHandlerFactory                      = GUIDOF!IThumbnailHandlerFactory;
const GUID IID_IThumbnailProvider                            = GUIDOF!IThumbnailProvider;
const GUID IID_IThumbnailSettings                            = GUIDOF!IThumbnailSettings;
const GUID IID_IThumbnailStreamCache                         = GUIDOF!IThumbnailStreamCache;
const GUID IID_ITrackShellMenu                               = GUIDOF!ITrackShellMenu;
const GUID IID_ITranscodeImage                               = GUIDOF!ITranscodeImage;
const GUID IID_ITransferAdviseSink                           = GUIDOF!ITransferAdviseSink;
const GUID IID_ITransferDestination                          = GUIDOF!ITransferDestination;
const GUID IID_ITransferMediumItem                           = GUIDOF!ITransferMediumItem;
const GUID IID_ITransferSource                               = GUIDOF!ITransferSource;
const GUID IID_ITravelEntry                                  = GUIDOF!ITravelEntry;
const GUID IID_ITravelLog                                    = GUIDOF!ITravelLog;
const GUID IID_ITravelLogClient                              = GUIDOF!ITravelLogClient;
const GUID IID_ITravelLogEntry                               = GUIDOF!ITravelLogEntry;
const GUID IID_ITravelLogStg                                 = GUIDOF!ITravelLogStg;
const GUID IID_ITrayDeskBand                                 = GUIDOF!ITrayDeskBand;
const GUID IID_IURLSearchHook                                = GUIDOF!IURLSearchHook;
const GUID IID_IURLSearchHook2                               = GUIDOF!IURLSearchHook2;
const GUID IID_IUniformResourceLocatorA                      = GUIDOF!IUniformResourceLocatorA;
const GUID IID_IUniformResourceLocatorW                      = GUIDOF!IUniformResourceLocatorW;
const GUID IID_IUpdateIDList                                 = GUIDOF!IUpdateIDList;
const GUID IID_IUseToBrowseItem                              = GUIDOF!IUseToBrowseItem;
const GUID IID_IUserAccountChangeCallback                    = GUIDOF!IUserAccountChangeCallback;
const GUID IID_IUserNotification                             = GUIDOF!IUserNotification;
const GUID IID_IUserNotification2                            = GUIDOF!IUserNotification2;
const GUID IID_IUserNotificationCallback                     = GUIDOF!IUserNotificationCallback;
const GUID IID_IViewStateIdentityItem                        = GUIDOF!IViewStateIdentityItem;
const GUID IID_IVirtualDesktopManager                        = GUIDOF!IVirtualDesktopManager;
const GUID IID_IVisualProperties                             = GUIDOF!IVisualProperties;
const GUID IID_IWebWizardExtension                           = GUIDOF!IWebWizardExtension;
const GUID IID_IWebWizardHost                                = GUIDOF!IWebWizardHost;
const GUID IID_IWebWizardHost2                               = GUIDOF!IWebWizardHost2;
const GUID IID_IWizardExtension                              = GUIDOF!IWizardExtension;
const GUID IID_IWizardSite                                   = GUIDOF!IWizardSite;
