module windows.coreaudio;

public import windows.core;
public import windows.audio : IPropertyStore;
public import windows.com : HRESULT, IUnknown;
public import windows.directshow : KSTOPOLOGY_CONNECTION, TIMECODE_SAMPLE;
public import windows.displaydevices : RECT, SIZE;
public import windows.gdi : HDC;
public import windows.kernel : LUID;
public import windows.multimedia : WAVEFORMATEX, WAVEFORMATEXTENSIBLE;
public import windows.remotedesktopservices : APO_CONNECTION_PROPERTY;
public import windows.structuredstorage : PROPVARIANT;
public import windows.systemservices : BOOL, HANDLE, LARGE_INTEGER, ULARGE_INTEGER;
public import windows.windowsandmessaging : HWND, LPARAM;
public import windows.windowspropertiessystem : PROPERTYKEY;

extern(Windows):


// Enums


enum : int
{
    AUDCLNT_SHAREMODE_SHARED    = 0x00000000,
    AUDCLNT_SHAREMODE_EXCLUSIVE = 0x00000001,
}
alias AUDCLNT_SHAREMODE = int;

enum : int
{
    AudioCategory_Other               = 0x00000000,
    AudioCategory_ForegroundOnlyMedia = 0x00000001,
    AudioCategory_Communications      = 0x00000003,
    AudioCategory_Alerts              = 0x00000004,
    AudioCategory_SoundEffects        = 0x00000005,
    AudioCategory_GameEffects         = 0x00000006,
    AudioCategory_GameMedia           = 0x00000007,
    AudioCategory_GameChat            = 0x00000008,
    AudioCategory_Speech              = 0x00000009,
    AudioCategory_Movie               = 0x0000000a,
    AudioCategory_Media               = 0x0000000b,
}
alias AUDIO_STREAM_CATEGORY = int;

enum AudioSessionState : int
{
    AudioSessionStateInactive = 0x00000000,
    AudioSessionStateActive   = 0x00000001,
    AudioSessionStateExpired  = 0x00000002,
}

enum : int
{
    KSRESET_BEGIN = 0x00000000,
    KSRESET_END   = 0x00000001,
}
alias KSRESET = int;

enum : int
{
    KSSTATE_STOP    = 0x00000000,
    KSSTATE_ACQUIRE = 0x00000001,
    KSSTATE_PAUSE   = 0x00000002,
    KSSTATE_RUN     = 0x00000003,
}
alias KSSTATE = int;

enum : int
{
    KSPROPERTY_GENERAL_COMPONENTID = 0x00000000,
}
alias KSPROPERTY_GENERAL = int;

enum : int
{
    KSMETHOD_STREAMIO_READ  = 0x00000000,
    KSMETHOD_STREAMIO_WRITE = 0x00000001,
}
alias KSMETHOD_STREAMIO = int;

enum : int
{
    KSPROPERTY_MEDIASEEKING_CAPABILITIES      = 0x00000000,
    KSPROPERTY_MEDIASEEKING_FORMATS           = 0x00000001,
    KSPROPERTY_MEDIASEEKING_TIMEFORMAT        = 0x00000002,
    KSPROPERTY_MEDIASEEKING_POSITION          = 0x00000003,
    KSPROPERTY_MEDIASEEKING_STOPPOSITION      = 0x00000004,
    KSPROPERTY_MEDIASEEKING_POSITIONS         = 0x00000005,
    KSPROPERTY_MEDIASEEKING_DURATION          = 0x00000006,
    KSPROPERTY_MEDIASEEKING_AVAILABLE         = 0x00000007,
    KSPROPERTY_MEDIASEEKING_PREROLL           = 0x00000008,
    KSPROPERTY_MEDIASEEKING_CONVERTTIMEFORMAT = 0x00000009,
}
alias KSPROPERTY_MEDIASEEKING = int;

enum : int
{
    KS_SEEKING_NoPositioning          = 0x00000000,
    KS_SEEKING_AbsolutePositioning    = 0x00000001,
    KS_SEEKING_RelativePositioning    = 0x00000002,
    KS_SEEKING_IncrementalPositioning = 0x00000003,
    KS_SEEKING_PositioningBitsMask    = 0x00000003,
    KS_SEEKING_SeekToKeyFrame         = 0x00000004,
    KS_SEEKING_ReturnTime             = 0x00000008,
}
alias KS_SEEKING_FLAGS = int;

enum : int
{
    KS_SEEKING_CanSeekAbsolute  = 0x00000001,
    KS_SEEKING_CanSeekForwards  = 0x00000002,
    KS_SEEKING_CanSeekBackwards = 0x00000004,
    KS_SEEKING_CanGetCurrentPos = 0x00000008,
    KS_SEEKING_CanGetStopPos    = 0x00000010,
    KS_SEEKING_CanGetDuration   = 0x00000020,
    KS_SEEKING_CanPlayBackwards = 0x00000040,
}
alias KS_SEEKING_CAPABILITIES = int;

enum : int
{
    KSPROPERTY_TOPOLOGY_CATEGORIES  = 0x00000000,
    KSPROPERTY_TOPOLOGY_NODES       = 0x00000001,
    KSPROPERTY_TOPOLOGY_CONNECTIONS = 0x00000002,
    KSPROPERTY_TOPOLOGY_NAME        = 0x00000003,
}
alias KSPROPERTY_TOPOLOGY = int;

enum : int
{
    KSINTERFACE_STANDARD_STREAMING        = 0x00000000,
    KSINTERFACE_STANDARD_LOOPED_STREAMING = 0x00000001,
    KSINTERFACE_STANDARD_CONTROL          = 0x00000002,
}
alias KSINTERFACE_STANDARD = int;

enum : int
{
    KSINTERFACE_FILEIO_STREAMING = 0x00000000,
}
alias KSINTERFACE_FILEIO = int;

enum : int
{
    KSPROPERTY_PIN_CINSTANCES            = 0x00000000,
    KSPROPERTY_PIN_CTYPES                = 0x00000001,
    KSPROPERTY_PIN_DATAFLOW              = 0x00000002,
    KSPROPERTY_PIN_DATARANGES            = 0x00000003,
    KSPROPERTY_PIN_DATAINTERSECTION      = 0x00000004,
    KSPROPERTY_PIN_INTERFACES            = 0x00000005,
    KSPROPERTY_PIN_MEDIUMS               = 0x00000006,
    KSPROPERTY_PIN_COMMUNICATION         = 0x00000007,
    KSPROPERTY_PIN_GLOBALCINSTANCES      = 0x00000008,
    KSPROPERTY_PIN_NECESSARYINSTANCES    = 0x00000009,
    KSPROPERTY_PIN_PHYSICALCONNECTION    = 0x0000000a,
    KSPROPERTY_PIN_CATEGORY              = 0x0000000b,
    KSPROPERTY_PIN_NAME                  = 0x0000000c,
    KSPROPERTY_PIN_CONSTRAINEDDATARANGES = 0x0000000d,
    KSPROPERTY_PIN_PROPOSEDATAFORMAT     = 0x0000000e,
    KSPROPERTY_PIN_PROPOSEDATAFORMAT2    = 0x0000000f,
    KSPROPERTY_PIN_MODEDATAFORMATS       = 0x00000010,
}
alias KSPROPERTY_PIN = int;

enum : int
{
    KSPIN_DATAFLOW_IN  = 0x00000001,
    KSPIN_DATAFLOW_OUT = 0x00000002,
}
alias KSPIN_DATAFLOW = int;

enum : int
{
    KSPIN_COMMUNICATION_NONE   = 0x00000000,
    KSPIN_COMMUNICATION_SINK   = 0x00000001,
    KSPIN_COMMUNICATION_SOURCE = 0x00000002,
    KSPIN_COMMUNICATION_BOTH   = 0x00000003,
    KSPIN_COMMUNICATION_BRIDGE = 0x00000004,
}
alias KSPIN_COMMUNICATION = int;

enum : int
{
    KSEVENT_PINCAPS_FORMATCHANGE   = 0x00000000,
    KSEVENT_PINCAPS_JACKINFOCHANGE = 0x00000001,
}
alias KSEVENT_PINCAPS_CHANGENOTIFICATIONS = int;

enum : int
{
    KSEVENT_VOLUMELIMIT_CHANGED = 0x00000000,
}
alias KSEVENT_VOLUMELIMIT = int;

enum : int
{
    KSPROPERTY_QUALITY_REPORT = 0x00000000,
    KSPROPERTY_QUALITY_ERROR  = 0x00000001,
}
alias KSPROPERTY_QUALITY = int;

enum : int
{
    KSPROPERTY_CONNECTION_STATE               = 0x00000000,
    KSPROPERTY_CONNECTION_PRIORITY            = 0x00000001,
    KSPROPERTY_CONNECTION_DATAFORMAT          = 0x00000002,
    KSPROPERTY_CONNECTION_ALLOCATORFRAMING    = 0x00000003,
    KSPROPERTY_CONNECTION_PROPOSEDATAFORMAT   = 0x00000004,
    KSPROPERTY_CONNECTION_ACQUIREORDERING     = 0x00000005,
    KSPROPERTY_CONNECTION_ALLOCATORFRAMING_EX = 0x00000006,
    KSPROPERTY_CONNECTION_STARTAT             = 0x00000007,
}
alias KSPROPERTY_CONNECTION = int;

enum : int
{
    KSEVENT_STREAMALLOCATOR_INTERNAL_FREEFRAME = 0x00000000,
    KSEVENT_STREAMALLOCATOR_FREEFRAME          = 0x00000001,
}
alias KSEVENT_STREAMALLOCATOR = int;

enum : int
{
    KSMETHOD_STREAMALLOCATOR_ALLOC = 0x00000000,
    KSMETHOD_STREAMALLOCATOR_FREE  = 0x00000001,
}
alias KSMETHOD_STREAMALLOCATOR = int;

enum : int
{
    KSPIN_MDL_CACHING_NOTIFY_CLEANUP         = 0x00000000,
    KSPIN_MDL_CACHING_NOTIFY_CLEANALL_WAIT   = 0x00000001,
    KSPIN_MDL_CACHING_NOTIFY_CLEANALL_NOWAIT = 0x00000002,
    KSPIN_MDL_CACHING_NOTIFY_ADDSAMPLE       = 0x00000003,
}
alias KSPIN_MDL_CACHING_EVENT = int;

enum : int
{
    KSPROPERTY_STREAMINTERFACE_HEADERSIZE = 0x00000000,
}
alias KSPROPERTY_STREAMINTERFACE = int;

enum : int
{
    KSPROPERTY_STREAM_ALLOCATOR          = 0x00000000,
    KSPROPERTY_STREAM_QUALITY            = 0x00000001,
    KSPROPERTY_STREAM_DEGRADATION        = 0x00000002,
    KSPROPERTY_STREAM_MASTERCLOCK        = 0x00000003,
    KSPROPERTY_STREAM_TIMEFORMAT         = 0x00000004,
    KSPROPERTY_STREAM_PRESENTATIONTIME   = 0x00000005,
    KSPROPERTY_STREAM_PRESENTATIONEXTENT = 0x00000006,
    KSPROPERTY_STREAM_FRAMETIME          = 0x00000007,
    KSPROPERTY_STREAM_RATECAPABILITY     = 0x00000008,
    KSPROPERTY_STREAM_RATE               = 0x00000009,
    KSPROPERTY_STREAM_PIPE_ID            = 0x0000000a,
}
alias KSPROPERTY_STREAM = int;

enum : int
{
    KSPROPERTY_ALLOCATOR_CLEANUP_CACHEDMDLPAGES = 0x00000001,
}
alias KSPPROPERTY_ALLOCATOR_MDLCACHING = int;

enum : int
{
    KSPROPERTY_CLOCK_TIME                   = 0x00000000,
    KSPROPERTY_CLOCK_PHYSICALTIME           = 0x00000001,
    KSPROPERTY_CLOCK_CORRELATEDTIME         = 0x00000002,
    KSPROPERTY_CLOCK_CORRELATEDPHYSICALTIME = 0x00000003,
    KSPROPERTY_CLOCK_RESOLUTION             = 0x00000004,
    KSPROPERTY_CLOCK_STATE                  = 0x00000005,
}
alias KSPROPERTY_CLOCK = int;

enum : int
{
    KSEVENT_CLOCK_INTERVAL_MARK = 0x00000000,
    KSEVENT_CLOCK_POSITION_MARK = 0x00000001,
}
alias KSEVENT_CLOCK_POSITION = int;

enum : int
{
    KSEVENT_CONNECTION_POSITIONUPDATE    = 0x00000000,
    KSEVENT_CONNECTION_DATADISCONTINUITY = 0x00000001,
    KSEVENT_CONNECTION_TIMEDISCONTINUITY = 0x00000002,
    KSEVENT_CONNECTION_PRIORITY          = 0x00000003,
    KSEVENT_CONNECTION_ENDOFSTREAM       = 0x00000004,
}
alias KSEVENT_CONNECTION = int;

enum : int
{
    KSDEVICE_THERMAL_STATE_LOW  = 0x00000000,
    KSDEVICE_THERMAL_STATE_HIGH = 0x00000001,
}
alias KSDEVICE_THERMAL_STATE = int;

enum : int
{
    KSEVENT_DEVICE_LOST         = 0x00000000,
    KSEVENT_DEVICE_PREEMPTED    = 0x00000001,
    KSEVENT_DEVICE_THERMAL_HIGH = 0x00000002,
    KSEVENT_DEVICE_THERMAL_LOW  = 0x00000003,
}
alias KSEVENT_DEVICE = int;

enum : int
{
    KSDEGRADE_STANDARD_SAMPLE      = 0x00000000,
    KSDEGRADE_STANDARD_QUALITY     = 0x00000001,
    KSDEGRADE_STANDARD_COMPUTATION = 0x00000002,
    KSDEGRADE_STANDARD_SKIP        = 0x00000003,
}
alias KSDEGRADE_STANDARD = int;

enum : int
{
    KSINTERFACE_MEDIA_MUSIC         = 0x00000000,
    KSINTERFACE_MEDIA_WAVE_BUFFERED = 0x00000001,
    KSINTERFACE_MEDIA_WAVE_QUEUED   = 0x00000002,
}
alias KSINTERFACE_MEDIA = int;

enum : int
{
    CONSTRICTOR_OPTION_DISABLE = 0x00000000,
    CONSTRICTOR_OPTION_MUTE    = 0x00000001,
}
alias CONSTRICTOR_OPTION = int;

enum : int
{
    KSMICARRAY_MICTYPE_OMNIDIRECTIONAL = 0x00000000,
    KSMICARRAY_MICTYPE_SUBCARDIOID     = 0x00000001,
    KSMICARRAY_MICTYPE_CARDIOID        = 0x00000002,
    KSMICARRAY_MICTYPE_SUPERCARDIOID   = 0x00000003,
    KSMICARRAY_MICTYPE_HYPERCARDIOID   = 0x00000004,
    KSMICARRAY_MICTYPE_8SHAPED         = 0x00000005,
    KSMICARRAY_MICTYPE_VENDORDEFINED   = 0x0000000f,
}
alias KSMICARRAY_MICTYPE = int;

enum : int
{
    KSMICARRAY_MICARRAYTYPE_LINEAR = 0x00000000,
    KSMICARRAY_MICARRAYTYPE_PLANAR = 0x00000001,
    KSMICARRAY_MICARRAYTYPE_3D     = 0x00000002,
}
alias KSMICARRAY_MICARRAYTYPE = int;

enum : int
{
    KSPROPERTY_DIRECTSOUND3DLISTENER_ALL            = 0x00000000,
    KSPROPERTY_DIRECTSOUND3DLISTENER_POSITION       = 0x00000001,
    KSPROPERTY_DIRECTSOUND3DLISTENER_VELOCITY       = 0x00000002,
    KSPROPERTY_DIRECTSOUND3DLISTENER_ORIENTATION    = 0x00000003,
    KSPROPERTY_DIRECTSOUND3DLISTENER_DISTANCEFACTOR = 0x00000004,
    KSPROPERTY_DIRECTSOUND3DLISTENER_ROLLOFFFACTOR  = 0x00000005,
    KSPROPERTY_DIRECTSOUND3DLISTENER_DOPPLERFACTOR  = 0x00000006,
    KSPROPERTY_DIRECTSOUND3DLISTENER_BATCH          = 0x00000007,
    KSPROPERTY_DIRECTSOUND3DLISTENER_ALLOCATION     = 0x00000008,
}
alias KSPROPERTY_DIRECTSOUND3DLISTENER = int;

enum : int
{
    KSPROPERTY_DIRECTSOUND3DBUFFER_ALL               = 0x00000000,
    KSPROPERTY_DIRECTSOUND3DBUFFER_POSITION          = 0x00000001,
    KSPROPERTY_DIRECTSOUND3DBUFFER_VELOCITY          = 0x00000002,
    KSPROPERTY_DIRECTSOUND3DBUFFER_CONEANGLES        = 0x00000003,
    KSPROPERTY_DIRECTSOUND3DBUFFER_CONEORIENTATION   = 0x00000004,
    KSPROPERTY_DIRECTSOUND3DBUFFER_CONEOUTSIDEVOLUME = 0x00000005,
    KSPROPERTY_DIRECTSOUND3DBUFFER_MINDISTANCE       = 0x00000006,
    KSPROPERTY_DIRECTSOUND3DBUFFER_MAXDISTANCE       = 0x00000007,
    KSPROPERTY_DIRECTSOUND3DBUFFER_MODE              = 0x00000008,
}
alias KSPROPERTY_DIRECTSOUND3DBUFFER = int;

enum : int
{
    FULL_FILTER                 = 0x00000000,
    LIGHT_FILTER                = 0x00000001,
    KSDS3D_FILTER_QUALITY_COUNT = 0x00000002,
}
alias KSDS3D_HRTF_FILTER_QUALITY = int;

enum : int
{
    FLOAT_COEFF        = 0x00000000,
    SHORT_COEFF        = 0x00000001,
    KSDS3D_COEFF_COUNT = 0x00000002,
}
alias KSDS3D_HRTF_COEFF_FORMAT = int;

enum : int
{
    DIRECT_FORM                = 0x00000000,
    CASCADE_FORM               = 0x00000001,
    KSDS3D_FILTER_METHOD_COUNT = 0x00000002,
}
alias KSDS3D_HRTF_FILTER_METHOD = int;

enum : int
{
    DS3D_HRTF_VERSION_1 = 0x00000000,
}
alias KSDS3D_HRTF_FILTER_VERSION = int;

enum : int
{
    KSPROPERTY_HRTF3D_PARAMS        = 0x00000000,
    KSPROPERTY_HRTF3D_INITIALIZE    = 0x00000001,
    KSPROPERTY_HRTF3D_FILTER_FORMAT = 0x00000002,
}
alias KSPROPERTY_HRTF3D = int;

enum : int
{
    KSPROPERTY_ITD3D_PARAMS = 0x00000000,
}
alias KSPROPERTY_ITD3D = int;

enum : int
{
    KSPROPERTY_BIBLIOGRAPHIC_LEADER                      = 0x52444c20,
    KSPROPERTY_BIBLIOGRAPHIC_LCCN                        = 0x30313020,
    KSPROPERTY_BIBLIOGRAPHIC_ISBN                        = 0x30323020,
    KSPROPERTY_BIBLIOGRAPHIC_ISSN                        = 0x32323020,
    KSPROPERTY_BIBLIOGRAPHIC_CATALOGINGSOURCE            = 0x30343020,
    KSPROPERTY_BIBLIOGRAPHIC_MAINPERSONALNAME            = 0x30303120,
    KSPROPERTY_BIBLIOGRAPHIC_MAINCORPORATEBODY           = 0x30313120,
    KSPROPERTY_BIBLIOGRAPHIC_MAINMEETINGNAME             = 0x31313120,
    KSPROPERTY_BIBLIOGRAPHIC_MAINUNIFORMTITLE            = 0x30333120,
    KSPROPERTY_BIBLIOGRAPHIC_UNIFORMTITLE                = 0x30343220,
    KSPROPERTY_BIBLIOGRAPHIC_TITLESTATEMENT              = 0x35343220,
    KSPROPERTY_BIBLIOGRAPHIC_VARYINGFORMTITLE            = 0x36343220,
    KSPROPERTY_BIBLIOGRAPHIC_PUBLICATION                 = 0x30363220,
    KSPROPERTY_BIBLIOGRAPHIC_PHYSICALDESCRIPTION         = 0x30303320,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTITLE             = 0x30343420,
    KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENT             = 0x30393420,
    KSPROPERTY_BIBLIOGRAPHIC_GENERALNOTE                 = 0x30303520,
    KSPROPERTY_BIBLIOGRAPHIC_BIBLIOGRAPHYNOTE            = 0x34303520,
    KSPROPERTY_BIBLIOGRAPHIC_CONTENTSNOTE                = 0x35303520,
    KSPROPERTY_BIBLIOGRAPHIC_CREATIONCREDIT              = 0x38303520,
    KSPROPERTY_BIBLIOGRAPHIC_CITATION                    = 0x30313520,
    KSPROPERTY_BIBLIOGRAPHIC_PARTICIPANT                 = 0x31313520,
    KSPROPERTY_BIBLIOGRAPHIC_SUMMARY                     = 0x30323520,
    KSPROPERTY_BIBLIOGRAPHIC_TARGETAUDIENCE              = 0x31323520,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDFORMAVAILABLE          = 0x30333520,
    KSPROPERTY_BIBLIOGRAPHIC_SYSTEMDETAILS               = 0x38333520,
    KSPROPERTY_BIBLIOGRAPHIC_AWARDS                      = 0x36383520,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYPERSONALNAME      = 0x30303620,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYTOPICALTERM       = 0x30353620,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYGEOGRAPHIC        = 0x31353620,
    KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMGENRE              = 0x35353620,
    KSPROPERTY_BIBLIOGRAPHIC_INDEXTERMCURRICULUM         = 0x38353620,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYUNIFORMTITLE      = 0x30333720,
    KSPROPERTY_BIBLIOGRAPHIC_ADDEDENTRYRELATED           = 0x30343720,
    KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTPERSONALNAME = 0x30303820,
    KSPROPERTY_BIBLIOGRAPHIC_SERIESSTATEMENTUNIFORMTITLE = 0x30333820,
}
alias KSPROPERTY_BIBLIOGRAPHIC = int;

enum : int
{
    KSPROPERTY_TOPOLOGYNODE_ENABLE = 0x00000001,
    KSPROPERTY_TOPOLOGYNODE_RESET  = 0x00000002,
}
alias KSPROPERTY_TOPOLOGYNODE = int;

enum : int
{
    KSPROPERTY_RTAUDIO_GETPOSITIONFUNCTION           = 0x00000000,
    KSPROPERTY_RTAUDIO_BUFFER                        = 0x00000001,
    KSPROPERTY_RTAUDIO_HWLATENCY                     = 0x00000002,
    KSPROPERTY_RTAUDIO_POSITIONREGISTER              = 0x00000003,
    KSPROPERTY_RTAUDIO_CLOCKREGISTER                 = 0x00000004,
    KSPROPERTY_RTAUDIO_BUFFER_WITH_NOTIFICATION      = 0x00000005,
    KSPROPERTY_RTAUDIO_REGISTER_NOTIFICATION_EVENT   = 0x00000006,
    KSPROPERTY_RTAUDIO_UNREGISTER_NOTIFICATION_EVENT = 0x00000007,
    KSPROPERTY_RTAUDIO_QUERY_NOTIFICATION_SUPPORT    = 0x00000008,
    KSPROPERTY_RTAUDIO_PACKETCOUNT                   = 0x00000009,
    KSPROPERTY_RTAUDIO_PRESENTATION_POSITION         = 0x0000000a,
    KSPROPERTY_RTAUDIO_GETREADPACKET                 = 0x0000000b,
    KSPROPERTY_RTAUDIO_SETWRITEPACKET                = 0x0000000c,
    KSPROPERTY_RTAUDIO_PACKETVREGISTER               = 0x0000000d,
}
alias KSPROPERTY_RTAUDIO = int;

enum : int
{
    KSPROPERTY_ONESHOT_RECONNECT  = 0x00000000,
    KSPROPERTY_ONESHOT_DISCONNECT = 0x00000001,
}
alias KSPROPERTY_BTAUDIO = int;

enum : int
{
    KSPROPERTY_DRMAUDIOSTREAM_CONTENTID = 0x00000000,
}
alias KSPROPERTY_DRMAUDIOSTREAM = int;

enum : int
{
    KSPROPERTY_INTERLEAVEDAUDIO_FORMATINFORMATION = 0x00000001,
}
alias KSPROPERTY_INTERLEAVEDAUDIO = int;

enum : int
{
    KSPROPERTY_SOUNDDETECTOR_SUPPORTEDPATTERNS = 0x00000001,
    KSPROPERTY_SOUNDDETECTOR_PATTERNS          = 0x00000002,
    KSPROPERTY_SOUNDDETECTOR_ARMED             = 0x00000003,
    KSPROPERTY_SOUNDDETECTOR_MATCHRESULT       = 0x00000004,
    KSPROPERTY_SOUNDDETECTOR_RESET             = 0x00000005,
    KSPROPERTY_SOUNDDETECTOR_STREAMINGSUPPORT  = 0x00000006,
}
alias KSPROPERTY_SOUNDDETECTOR = int;

enum : int
{
    KSEVENT_SOUNDDETECTOR_MATCHDETECTED = 0x00000001,
}
alias KSEVENT_SOUNDDETECTOR = int;

enum : int
{
    KSPROPERTY_AUDIO_LATENCY                                  = 0x00000001,
    KSPROPERTY_AUDIO_COPY_PROTECTION                          = 0x00000002,
    KSPROPERTY_AUDIO_CHANNEL_CONFIG                           = 0x00000003,
    KSPROPERTY_AUDIO_VOLUMELEVEL                              = 0x00000004,
    KSPROPERTY_AUDIO_POSITION                                 = 0x00000005,
    KSPROPERTY_AUDIO_DYNAMIC_RANGE                            = 0x00000006,
    KSPROPERTY_AUDIO_QUALITY                                  = 0x00000007,
    KSPROPERTY_AUDIO_SAMPLING_RATE                            = 0x00000008,
    KSPROPERTY_AUDIO_DYNAMIC_SAMPLING_RATE                    = 0x00000009,
    KSPROPERTY_AUDIO_MIX_LEVEL_TABLE                          = 0x0000000a,
    KSPROPERTY_AUDIO_MIX_LEVEL_CAPS                           = 0x0000000b,
    KSPROPERTY_AUDIO_MUX_SOURCE                               = 0x0000000c,
    KSPROPERTY_AUDIO_MUTE                                     = 0x0000000d,
    KSPROPERTY_AUDIO_BASS                                     = 0x0000000e,
    KSPROPERTY_AUDIO_MID                                      = 0x0000000f,
    KSPROPERTY_AUDIO_TREBLE                                   = 0x00000010,
    KSPROPERTY_AUDIO_BASS_BOOST                               = 0x00000011,
    KSPROPERTY_AUDIO_EQ_LEVEL                                 = 0x00000012,
    KSPROPERTY_AUDIO_NUM_EQ_BANDS                             = 0x00000013,
    KSPROPERTY_AUDIO_EQ_BANDS                                 = 0x00000014,
    KSPROPERTY_AUDIO_AGC                                      = 0x00000015,
    KSPROPERTY_AUDIO_DELAY                                    = 0x00000016,
    KSPROPERTY_AUDIO_LOUDNESS                                 = 0x00000017,
    KSPROPERTY_AUDIO_WIDE_MODE                                = 0x00000018,
    KSPROPERTY_AUDIO_WIDENESS                                 = 0x00000019,
    KSPROPERTY_AUDIO_REVERB_LEVEL                             = 0x0000001a,
    KSPROPERTY_AUDIO_CHORUS_LEVEL                             = 0x0000001b,
    KSPROPERTY_AUDIO_DEV_SPECIFIC                             = 0x0000001c,
    KSPROPERTY_AUDIO_DEMUX_DEST                               = 0x0000001d,
    KSPROPERTY_AUDIO_STEREO_ENHANCE                           = 0x0000001e,
    KSPROPERTY_AUDIO_MANUFACTURE_GUID                         = 0x0000001f,
    KSPROPERTY_AUDIO_PRODUCT_GUID                             = 0x00000020,
    KSPROPERTY_AUDIO_CPU_RESOURCES                            = 0x00000021,
    KSPROPERTY_AUDIO_STEREO_SPEAKER_GEOMETRY                  = 0x00000022,
    KSPROPERTY_AUDIO_SURROUND_ENCODE                          = 0x00000023,
    KSPROPERTY_AUDIO_3D_INTERFACE                             = 0x00000024,
    KSPROPERTY_AUDIO_PEAKMETER                                = 0x00000025,
    KSPROPERTY_AUDIO_ALGORITHM_INSTANCE                       = 0x00000026,
    KSPROPERTY_AUDIO_FILTER_STATE                             = 0x00000027,
    KSPROPERTY_AUDIO_PREFERRED_STATUS                         = 0x00000028,
    KSPROPERTY_AUDIO_PEQ_MAX_BANDS                            = 0x00000029,
    KSPROPERTY_AUDIO_PEQ_NUM_BANDS                            = 0x0000002a,
    KSPROPERTY_AUDIO_PEQ_BAND_CENTER_FREQ                     = 0x0000002b,
    KSPROPERTY_AUDIO_PEQ_BAND_Q_FACTOR                        = 0x0000002c,
    KSPROPERTY_AUDIO_PEQ_BAND_LEVEL                           = 0x0000002d,
    KSPROPERTY_AUDIO_CHORUS_MODULATION_RATE                   = 0x0000002e,
    KSPROPERTY_AUDIO_CHORUS_MODULATION_DEPTH                  = 0x0000002f,
    KSPROPERTY_AUDIO_REVERB_TIME                              = 0x00000030,
    KSPROPERTY_AUDIO_REVERB_DELAY_FEEDBACK                    = 0x00000031,
    KSPROPERTY_AUDIO_POSITIONEX                               = 0x00000032,
    KSPROPERTY_AUDIO_MIC_ARRAY_GEOMETRY                       = 0x00000033,
    KSPROPERTY_AUDIO_PRESENTATION_POSITION                    = 0x00000034,
    KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_POSITION            = 0x00000035,
    KSPROPERTY_AUDIO_LINEAR_BUFFER_POSITION                   = 0x00000036,
    KSPROPERTY_AUDIO_PEAKMETER2                               = 0x00000037,
    KSPROPERTY_AUDIO_WAVERT_CURRENT_WRITE_LASTBUFFER_POSITION = 0x00000038,
    KSPROPERTY_AUDIO_VOLUMELIMIT_ENGAGED                      = 0x00000039,
    KSPROPERTY_AUDIO_MIC_SENSITIVITY                          = 0x0000003a,
    KSPROPERTY_AUDIO_MIC_SNR                                  = 0x0000003b,
    KSPROPERTY_AUDIO_MIC_SENSITIVITY2                         = 0x0000003c,
}
alias KSPROPERTY_AUDIO = int;

enum : int
{
    KSPROPERTY_TELEPHONY_PROVIDERID     = 0x00000000,
    KSPROPERTY_TELEPHONY_CALLINFO       = 0x00000001,
    KSPROPERTY_TELEPHONY_CALLCONTROL    = 0x00000002,
    KSPROPERTY_TELEPHONY_PROVIDERCHANGE = 0x00000003,
    KSPROPERTY_TELEPHONY_CALLHOLD       = 0x00000004,
    KSPROPERTY_TELEPHONY_MUTE_TX        = 0x00000005,
}
alias KSPROPERTY_TELEPHONY_CONTROL = int;

enum : int
{
    TELEPHONY_CALLTYPE_CIRCUITSWITCHED     = 0x00000000,
    TELEPHONY_CALLTYPE_PACKETSWITCHED_LTE  = 0x00000001,
    TELEPHONY_CALLTYPE_PACKETSWITCHED_WLAN = 0x00000002,
}
alias TELEPHONY_CALLTYPE = int;

enum : int
{
    TELEPHONY_CALLCONTROLOP_DISABLE = 0x00000000,
    TELEPHONY_CALLCONTROLOP_ENABLE  = 0x00000001,
}
alias TELEPHONY_CALLCONTROLOP = int;

enum : int
{
    TELEPHONY_PROVIDERCHANGEOP_END    = 0x00000000,
    TELEPHONY_PROVIDERCHANGEOP_BEGIN  = 0x00000001,
    TELEPHONY_PROVIDERCHANGEOP_CANCEL = 0x00000002,
}
alias TELEPHONY_PROVIDERCHANGEOP = int;

enum : int
{
    TELEPHONY_CALLSTATE_DISABLED           = 0x00000000,
    TELEPHONY_CALLSTATE_ENABLED            = 0x00000001,
    TELEPHONY_CALLSTATE_HOLD               = 0x00000002,
    TELEPHONY_CALLSTATE_PROVIDERTRANSITION = 0x00000003,
}
alias TELEPHONY_CALLSTATE = int;

enum : int
{
    KSPROPERTY_TELEPHONY_ENDPOINTIDPAIR = 0x00000000,
    KSPROPERTY_TELEPHONY_VOLUME         = 0x00000001,
}
alias KSPROPERTY_TELEPHONY_TOPOLOGY = int;

enum : int
{
    KSPROPERTY_FMRX_ENDPOINTID        = 0x00000000,
    KSPROPERTY_FMRX_VOLUME            = 0x00000001,
    KSPROPERTY_FMRX_ANTENNAENDPOINTID = 0x00000002,
}
alias KSPROPERTY_FMRX_TOPOLOGY = int;

enum : int
{
    KSPROPERTY_FMRX_STATE = 0x00000000,
}
alias KSPROPERTY_FMRX_CONTROL = int;

enum : int
{
    KSEVENT_TELEPHONY_ENDPOINTPAIRS_CHANGED = 0x00000000,
}
alias KSEVENT_TELEPHONY = int;

enum : int
{
    KSMETHOD_WAVETABLE_WAVE_ALLOC = 0x00000000,
    KSMETHOD_WAVETABLE_WAVE_FREE  = 0x00000001,
    KSMETHOD_WAVETABLE_WAVE_FIND  = 0x00000002,
    KSMETHOD_WAVETABLE_WAVE_WRITE = 0x00000003,
}
alias KSMETHOD_WAVETABLE = int;

enum : int
{
    KSPROPERTY_WAVE_COMPATIBLE_CAPABILITIES = 0x00000000,
    KSPROPERTY_WAVE_INPUT_CAPABILITIES      = 0x00000001,
    KSPROPERTY_WAVE_OUTPUT_CAPABILITIES     = 0x00000002,
    KSPROPERTY_WAVE_BUFFER                  = 0x00000003,
    KSPROPERTY_WAVE_FREQUENCY               = 0x00000004,
    KSPROPERTY_WAVE_VOLUME                  = 0x00000005,
    KSPROPERTY_WAVE_PAN                     = 0x00000006,
}
alias KSPROPERTY_WAVE = int;

enum : int
{
    KSPROPERTY_CYCLIC_POSITION = 0x00000000,
}
alias KSPROPERTY_CYCLIC = int;

enum : int
{
    KSEVENT_CONTROL_CHANGE = 0x00000000,
}
alias KSEVENT_AUDIO_CONTROL_CHANGE = int;

enum : int
{
    KSEVENT_LOOPEDSTREAMING_POSITION = 0x00000000,
}
alias KSEVENT_LOOPEDSTREAMING = int;

enum : int
{
    KSPROPERTY_MPEG2VID_MODES        = 0x00000000,
    KSPROPERTY_MPEG2VID_CUR_MODE     = 0x00000001,
    KSPROPERTY_MPEG2VID_4_3_RECT     = 0x00000002,
    KSPROPERTY_MPEG2VID_16_9_RECT    = 0x00000003,
    KSPROPERTY_MPEG2VID_16_9_PANSCAN = 0x00000004,
}
alias KSPROPERTY_MPEG2VID = int;

enum : int
{
    KSPROPERTY_AC3_ERROR_CONCEALMENT = 0x00000001,
    KSPROPERTY_AC3_ALTERNATE_AUDIO   = 0x00000002,
    KSPROPERTY_AC3_DOWNMIX           = 0x00000003,
    KSPROPERTY_AC3_BIT_STREAM_MODE   = 0x00000004,
    KSPROPERTY_AC3_DIALOGUE_LEVEL    = 0x00000005,
    KSPROPERTY_AC3_LANGUAGE_CODE     = 0x00000006,
    KSPROPERTY_AC3_ROOM_TYPE         = 0x00000007,
}
alias KSPROPERTY_AC3 = int;

enum : int
{
    KSPROPERTY_AUDDECOUT_MODES    = 0x00000000,
    KSPROPERTY_AUDDECOUT_CUR_MODE = 0x00000001,
}
alias KSPROPERTY_AUDDECOUT = int;

enum : int
{
    KSPROPERTY_DVDSUBPIC_PALETTE     = 0x00000000,
    KSPROPERTY_DVDSUBPIC_HLI         = 0x00000001,
    KSPROPERTY_DVDSUBPIC_COMPOSIT_ON = 0x00000002,
}
alias KSPROPERTY_DVDSUBPIC = int;

enum : int
{
    KSPROPERTY_DVDCOPY_CHLG_KEY       = 0x00000001,
    KSPROPERTY_DVDCOPY_DVD_KEY1       = 0x00000002,
    KSPROPERTY_DVDCOPY_DEC_KEY2       = 0x00000003,
    KSPROPERTY_DVDCOPY_TITLE_KEY      = 0x00000004,
    KSPROPERTY_COPY_MACROVISION       = 0x00000005,
    KSPROPERTY_DVDCOPY_REGION         = 0x00000006,
    KSPROPERTY_DVDCOPY_SET_COPY_STATE = 0x00000007,
    KSPROPERTY_DVDCOPY_DISC_KEY       = 0x00000080,
}
alias KSPROPERTY_COPYPROT = int;

enum : int
{
    KS_DVDCOPYSTATE_INITIALIZE                  = 0x00000000,
    KS_DVDCOPYSTATE_INITIALIZE_TITLE            = 0x00000001,
    KS_DVDCOPYSTATE_AUTHENTICATION_NOT_REQUIRED = 0x00000002,
    KS_DVDCOPYSTATE_AUTHENTICATION_REQUIRED     = 0x00000003,
    KS_DVDCOPYSTATE_DONE                        = 0x00000004,
}
alias KS_DVDCOPYSTATE = int;

enum : int
{
    KS_MACROVISION_DISABLED = 0x00000000,
    KS_MACROVISION_LEVEL1   = 0x00000001,
    KS_MACROVISION_LEVEL2   = 0x00000002,
    KS_MACROVISION_LEVEL3   = 0x00000003,
}
alias KS_COPY_MACROVISION_LEVEL = int;

enum : int
{
    KS_MPEG2Level_Low      = 0x00000000,
    KS_MPEG2Level_Main     = 0x00000001,
    KS_MPEG2Level_High1440 = 0x00000002,
    KS_MPEG2Level_High     = 0x00000003,
}
alias KS_MPEG2Level = int;

enum : int
{
    KS_MPEG2Profile_Simple            = 0x00000000,
    KS_MPEG2Profile_Main              = 0x00000001,
    KS_MPEG2Profile_SNRScalable       = 0x00000002,
    KS_MPEG2Profile_SpatiallyScalable = 0x00000003,
    KS_MPEG2Profile_High              = 0x00000004,
}
alias KS_MPEG2Profile = int;

enum : int
{
    KSPROPERTY_VBICAP_PROPERTIES_PROTECTION = 0x00000001,
}
alias KSPROPERTY_VBICAP = int;

enum : int
{
    KSPROPERTY_VBICODECFILTERING_SCANLINES_REQUESTED_BIT_ARRAY   = 0x00000001,
    KSPROPERTY_VBICODECFILTERING_SCANLINES_DISCOVERED_BIT_ARRAY  = 0x00000002,
    KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_REQUESTED_BIT_ARRAY  = 0x00000003,
    KSPROPERTY_VBICODECFILTERING_SUBSTREAMS_DISCOVERED_BIT_ARRAY = 0x00000004,
    KSPROPERTY_VBICODECFILTERING_STATISTICS                      = 0x00000005,
}
alias KSPROPERTY_VBICODECFILTERING = int;

enum : int
{
    KS_CAPTURE_ALLOC_INVALID       = 0x00000000,
    KS_CAPTURE_ALLOC_SYSTEM        = 0x00000001,
    KS_CAPTURE_ALLOC_VRAM          = 0x00000002,
    KS_CAPTURE_ALLOC_SYSTEM_AGP    = 0x00000004,
    KS_CAPTURE_ALLOC_VRAM_MAPPED   = 0x00000008,
    KS_CAPTURE_ALLOC_SECURE_BUFFER = 0x00000010,
}
alias CAPTURE_MEMORY_ALLOCATION_FLAGS = int;

enum : int
{
    KSPROPERTY_DISPLAY_ADAPTER_GUID               = 0x00000001,
    KSPROPERTY_PREFERRED_CAPTURE_SURFACE          = 0x00000002,
    KSPROPERTY_CURRENT_CAPTURE_SURFACE            = 0x00000003,
    KSPROPERTY_MAP_CAPTURE_HANDLE_TO_VRAM_ADDRESS = 0x00000004,
}
alias KSPROPERTY_VIDMEM_TRANSPORT = int;

enum : int
{
    KSPROPERTY_MPEG4_MEDIATYPE_SD_BOX = 0x00000001,
}
alias KSPROPERTY_MPEG4_MEDIATYPE_ATTRIBUTES = int;

enum : int
{
    KSEVENT_DYNAMIC_FORMAT_CHANGE = 0x00000000,
}
alias KSEVENT_DYNAMICFORMATCHANGE = int;

enum : int
{
    KS_AnalogVideo_None        = 0x00000000,
    KS_AnalogVideo_NTSC_M      = 0x00000001,
    KS_AnalogVideo_NTSC_M_J    = 0x00000002,
    KS_AnalogVideo_NTSC_433    = 0x00000004,
    KS_AnalogVideo_PAL_B       = 0x00000010,
    KS_AnalogVideo_PAL_D       = 0x00000020,
    KS_AnalogVideo_PAL_G       = 0x00000040,
    KS_AnalogVideo_PAL_H       = 0x00000080,
    KS_AnalogVideo_PAL_I       = 0x00000100,
    KS_AnalogVideo_PAL_M       = 0x00000200,
    KS_AnalogVideo_PAL_N       = 0x00000400,
    KS_AnalogVideo_PAL_60      = 0x00000800,
    KS_AnalogVideo_SECAM_B     = 0x00001000,
    KS_AnalogVideo_SECAM_D     = 0x00002000,
    KS_AnalogVideo_SECAM_G     = 0x00004000,
    KS_AnalogVideo_SECAM_H     = 0x00008000,
    KS_AnalogVideo_SECAM_K     = 0x00010000,
    KS_AnalogVideo_SECAM_K1    = 0x00020000,
    KS_AnalogVideo_SECAM_L     = 0x00040000,
    KS_AnalogVideo_SECAM_L1    = 0x00080000,
    KS_AnalogVideo_PAL_N_COMBO = 0x00100000,
}
alias KS_AnalogVideoStandard = int;

enum : int
{
    KSPROPERTY_ALLOCATOR_CONTROL_HONOR_COUNT        = 0x00000000,
    KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE       = 0x00000001,
    KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS       = 0x00000002,
    KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE = 0x00000003,
}
alias KSPROPERTY_ALLOCATOR_CONTROL = int;

enum : int
{
    KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS               = 0x00000000,
    KSPROPERTY_VIDEOPROCAMP_CONTRAST                 = 0x00000001,
    KSPROPERTY_VIDEOPROCAMP_HUE                      = 0x00000002,
    KSPROPERTY_VIDEOPROCAMP_SATURATION               = 0x00000003,
    KSPROPERTY_VIDEOPROCAMP_SHARPNESS                = 0x00000004,
    KSPROPERTY_VIDEOPROCAMP_GAMMA                    = 0x00000005,
    KSPROPERTY_VIDEOPROCAMP_COLORENABLE              = 0x00000006,
    KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE             = 0x00000007,
    KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION   = 0x00000008,
    KSPROPERTY_VIDEOPROCAMP_GAIN                     = 0x00000009,
    KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER       = 0x0000000a,
    KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT = 0x0000000b,
    KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT   = 0x0000000c,
    KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY      = 0x0000000d,
}
alias KSPROPERTY_VIDCAP_VIDEOPROCAMP = int;

enum : int
{
    KSPROPERTY_SELECTOR_SOURCE_NODE_ID = 0x00000000,
    KSPROPERTY_SELECTOR_NUM_SOURCES    = 0x00000001,
}
alias KSPROPERTY_VIDCAP_SELECTOR = int;

enum : int
{
    KSPROPERTY_TUNER_CAPS                  = 0x00000000,
    KSPROPERTY_TUNER_MODE_CAPS             = 0x00000001,
    KSPROPERTY_TUNER_MODE                  = 0x00000002,
    KSPROPERTY_TUNER_STANDARD              = 0x00000003,
    KSPROPERTY_TUNER_FREQUENCY             = 0x00000004,
    KSPROPERTY_TUNER_INPUT                 = 0x00000005,
    KSPROPERTY_TUNER_STATUS                = 0x00000006,
    KSPROPERTY_TUNER_IF_MEDIUM             = 0x00000007,
    KSPROPERTY_TUNER_SCAN_CAPS             = 0x00000008,
    KSPROPERTY_TUNER_SCAN_STATUS           = 0x00000009,
    KSPROPERTY_TUNER_STANDARD_MODE         = 0x0000000a,
    KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS = 0x0000000b,
}
alias KSPROPERTY_TUNER = int;

enum : int
{
    KSPROPERTY_TUNER_MODE_TV       = 0x00000001,
    KSPROPERTY_TUNER_MODE_FM_RADIO = 0x00000002,
    KSPROPERTY_TUNER_MODE_AM_RADIO = 0x00000004,
    KSPROPERTY_TUNER_MODE_DSS      = 0x00000008,
    KSPROPERTY_TUNER_MODE_ATSC     = 0x00000010,
}
alias KSPROPERTY_TUNER_MODES = int;

enum : int
{
    KS_TUNER_TUNING_EXACT  = 0x00000001,
    KS_TUNER_TUNING_FINE   = 0x00000002,
    KS_TUNER_TUNING_COARSE = 0x00000003,
}
alias KS_TUNER_TUNING_FLAGS = int;

enum : int
{
    KS_TUNER_STRATEGY_PLL             = 0x00000001,
    KS_TUNER_STRATEGY_SIGNAL_STRENGTH = 0x00000002,
    KS_TUNER_STRATEGY_DRIVER_TUNES    = 0x00000004,
}
alias KS_TUNER_STRATEGY = int;

enum : int
{
    Tuner_LockType_None                      = 0x00000000,
    Tuner_LockType_Within_Scan_Sensing_Range = 0x00000001,
    Tuner_LockType_Locked                    = 0x00000002,
}
alias _TunerDecoderLockType = int;

enum : int
{
    KSEVENT_TUNER_CHANGED       = 0x00000000,
    KSEVENT_TUNER_INITIATE_SCAN = 0x00000001,
}
alias KSEVENT_TUNER = int;

enum : int
{
    KSPROPERTY_VIDEOENCODER_CAPS           = 0x00000000,
    KSPROPERTY_VIDEOENCODER_STANDARD       = 0x00000001,
    KSPROPERTY_VIDEOENCODER_COPYPROTECTION = 0x00000002,
    KSPROPERTY_VIDEOENCODER_CC_ENABLE      = 0x00000003,
}
alias KSPROPERTY_VIDCAP_VIDEOENCODER = int;

enum : int
{
    KSPROPERTY_VIDEODECODER_CAPS          = 0x00000000,
    KSPROPERTY_VIDEODECODER_STANDARD      = 0x00000001,
    KSPROPERTY_VIDEODECODER_STATUS        = 0x00000002,
    KSPROPERTY_VIDEODECODER_OUTPUT_ENABLE = 0x00000003,
    KSPROPERTY_VIDEODECODER_VCR_TIMING    = 0x00000004,
    KSPROPERTY_VIDEODECODER_STATUS2       = 0x00000005,
}
alias KSPROPERTY_VIDCAP_VIDEODECODER = int;

enum : int
{
    KS_VIDEODECODER_FLAGS_CAN_DISABLE_OUTPUT  = 0x00000001,
    KS_VIDEODECODER_FLAGS_CAN_USE_VCR_LOCKING = 0x00000002,
    KS_VIDEODECODER_FLAGS_CAN_INDICATE_LOCKED = 0x00000004,
}
alias KS_VIDEODECODER_FLAGS = int;

enum : int
{
    KSEVENT_VIDEODECODER_CHANGED = 0x00000000,
}
alias KSEVENT_VIDEODECODER = int;

enum : int
{
    KSEVENT_CAMERACONTROL_FOCUS = 0x00000000,
    KSEVENT_CAMERACONTROL_ZOOM  = 0x00000001,
}
alias KSEVENT_CAMERACONTROL = int;

enum : int
{
    KSPROPERTY_CAMERACONTROL_PAN                    = 0x00000000,
    KSPROPERTY_CAMERACONTROL_TILT                   = 0x00000001,
    KSPROPERTY_CAMERACONTROL_ROLL                   = 0x00000002,
    KSPROPERTY_CAMERACONTROL_ZOOM                   = 0x00000003,
    KSPROPERTY_CAMERACONTROL_EXPOSURE               = 0x00000004,
    KSPROPERTY_CAMERACONTROL_IRIS                   = 0x00000005,
    KSPROPERTY_CAMERACONTROL_FOCUS                  = 0x00000006,
    KSPROPERTY_CAMERACONTROL_SCANMODE               = 0x00000007,
    KSPROPERTY_CAMERACONTROL_PRIVACY                = 0x00000008,
    KSPROPERTY_CAMERACONTROL_PANTILT                = 0x00000009,
    KSPROPERTY_CAMERACONTROL_PAN_RELATIVE           = 0x0000000a,
    KSPROPERTY_CAMERACONTROL_TILT_RELATIVE          = 0x0000000b,
    KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE          = 0x0000000c,
    KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE          = 0x0000000d,
    KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE      = 0x0000000e,
    KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE          = 0x0000000f,
    KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE         = 0x00000010,
    KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE       = 0x00000011,
    KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH           = 0x00000012,
    KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY = 0x00000013,
}
alias KSPROPERTY_VIDCAP_CAMERACONTROL = int;

enum : int
{
    KS_CAMERACONTROL_ASYNC_START = 0x00000001,
    KS_CAMERACONTROL_ASYNC_STOP  = 0x00000002,
    KS_CAMERACONTROL_ASYNC_RESET = 0x00000003,
}
alias KS_CameraControlAsyncOperation = int;

enum : int
{
    KSPROPERTY_CAMERACONTROL_FLASH_PROPERTY_ID = 0x00000000,
}
alias KSPROPERTY_CAMERACONTROL_FLASH = int;

enum : int
{
    KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE_PROPERTY_ID = 0x00000000,
}
alias KSPROPERTY_CAMERACONTROL_VIDEO_STABILIZATION_MODE = int;

enum : int
{
    KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_PROPERTY_ID = 0x00000000,
}
alias KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST = int;

enum : int
{
    KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_PROPERTY_ID = 0x00000000,
}
alias KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY = int;

enum : int
{
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMODE                 = 0x00000000,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOFRAMERATE            = 0x00000001,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMAXFRAMERATE         = 0x00000002,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTRIGGERTIME          = 0x00000003,
    KSPROPERTY_CAMERACONTROL_EXTENDED_WARMSTART                 = 0x00000004,
    KSPROPERTY_CAMERACONTROL_EXTENDED_MAXVIDFPS_PHOTORES        = 0x00000005,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTHUMBNAIL            = 0x00000006,
    KSPROPERTY_CAMERACONTROL_EXTENDED_SCENEMODE                 = 0x00000007,
    KSPROPERTY_CAMERACONTROL_EXTENDED_TORCHMODE                 = 0x00000008,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FLASHMODE                 = 0x00000009,
    KSPROPERTY_CAMERACONTROL_EXTENDED_OPTIMIZATIONHINT          = 0x0000000a,
    KSPROPERTY_CAMERACONTROL_EXTENDED_WHITEBALANCEMODE          = 0x0000000b,
    KSPROPERTY_CAMERACONTROL_EXTENDED_EXPOSUREMODE              = 0x0000000c,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSMODE                 = 0x0000000d,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ISO                       = 0x0000000e,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FIELDOFVIEW               = 0x0000000f,
    KSPROPERTY_CAMERACONTROL_EXTENDED_EVCOMPENSATION            = 0x00000010,
    KSPROPERTY_CAMERACONTROL_EXTENDED_CAMERAANGLEOFFSET         = 0x00000011,
    KSPROPERTY_CAMERACONTROL_EXTENDED_METADATA                  = 0x00000012,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSPRIORITY             = 0x00000013,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSSTATE                = 0x00000014,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_CONFIGCAPS            = 0x00000015,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_ISPCONTROL            = 0x00000016,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOCONFIRMATION         = 0x00000017,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ZOOM                      = 0x00000018,
    KSPROPERTY_CAMERACONTROL_EXTENDED_MCC                       = 0x00000019,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ISO_ADVANCED              = 0x0000001a,
    KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOSTABILIZATION        = 0x0000001b,
    KSPROPERTY_CAMERACONTROL_EXTENDED_VFR                       = 0x0000001c,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FACEDETECTION             = 0x0000001d,
    KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOHDR                  = 0x0000001e,
    KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM                 = 0x0000001f,
    KSPROPERTY_CAMERACONTROL_EXTENDED_OIS                       = 0x00000020,
    KSPROPERTY_CAMERACONTROL_EXTENDED_ADVANCEDPHOTO             = 0x00000021,
    KSPROPERTY_CAMERACONTROL_EXTENDED_PROFILE                   = 0x00000022,
    KSPROPERTY_CAMERACONTROL_EXTENDED_FACEAUTH_MODE             = 0x00000023,
    KSPROPERTY_CAMERACONTROL_EXTENDED_SECURE_MODE               = 0x00000024,
    KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOTEMPORALDENOISING    = 0x00000025,
    KSPROPERTY_CAMERACONTROL_EXTENDED_IRTORCHMODE               = 0x00000026,
    KSPROPERTY_CAMERACONTROL_EXTENDED_RELATIVEPANELOPTIMIZATION = 0x00000027,
    KSPROPERTY_CAMERACONTROL_EXTENDED_END                       = 0x00000028,
    KSPROPERTY_CAMERACONTROL_EXTENDED_END2                      = 0x00000028,
}
alias KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY = int;

enum : int
{
    KSEVENT_PHOTO_SAMPLE_SCANNED = 0x00000000,
}
alias KSEVENT_CAMERAEVENT = int;

enum : int
{
    KSCAMERA_EXTENDEDPROP_WHITEBALANCE_TEMPERATURE = 0x00000001,
    KSCAMERA_EXTENDEDPROP_WHITEBALANCE_PRESET      = 0x00000002,
}
alias KSCAMERA_EXTENDEDPROP_WHITEBALANCE_MODE = int;

enum : int
{
    KSCAMERA_EXTENDEDPROP_WBPRESET_CLOUDY      = 0x00000001,
    KSCAMERA_EXTENDEDPROP_WBPRESET_DAYLIGHT    = 0x00000002,
    KSCAMERA_EXTENDEDPROP_WBPRESET_FLASH       = 0x00000003,
    KSCAMERA_EXTENDEDPROP_WBPRESET_FLUORESCENT = 0x00000004,
    KSCAMERA_EXTENDEDPROP_WBPRESET_TUNGSTEN    = 0x00000005,
    KSCAMERA_EXTENDEDPROP_WBPRESET_CANDLELIGHT = 0x00000006,
}
alias KSCAMERA_EXTENDEDPROP_WBPRESET = int;

enum : int
{
    KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_CLEAR = 0x00000000,
    KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_SET   = 0x00000001,
}
alias KSPROPERTY_CAMERA_PHOTOTRIGGERTIME_FLAGS = int;

enum : int
{
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_16   = 0x00000004,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_32   = 0x00000005,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_64   = 0x00000006,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_128  = 0x00000007,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_256  = 0x00000008,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_512  = 0x00000009,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_1024 = 0x0000000a,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_2048 = 0x0000000b,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_4096 = 0x0000000c,
    KSCAMERA_EXTENDEDPROP_MetadataAlignment_8192 = 0x0000000d,
}
alias KSCAMERA_EXTENDEDPROP_MetadataAlignment = int;

enum : int
{
    MetadataId_Standard_Start    = 0x00000001,
    MetadataId_PhotoConfirmation = 0x00000001,
    MetadataId_UsbVideoHeader    = 0x00000002,
    MetadataId_CaptureStats      = 0x00000003,
    MetadataId_CameraExtrinsics  = 0x00000004,
    MetadataId_CameraIntrinsics  = 0x00000005,
    MetadataId_FrameIllumination = 0x00000006,
    MetadataId_Standard_End      = 0x00000006,
    MetadataId_Custom_Start      = 0x80000000,
}
alias KSCAMERA_MetadataId = int;

enum : int
{
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_UNINITIALIZED = 0x00000000,
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_LOST          = 0x00000001,
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_SEARCHING     = 0x00000002,
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FOCUSED       = 0x00000003,
    KSCAMERA_EXTENDEDPROP_FOCUSSTATE_FAILED        = 0x00000004,
}
alias KSCAMERA_EXTENDEDPROP_FOCUSSTATE = int;

enum : int
{
    KSCAMERA_EXTENDEDPROP_ROITYPE_UNKNOWN = 0x00000000,
    KSCAMERA_EXTENDEDPROP_ROITYPE_FACE    = 0x00000001,
}
alias KSCAMERA_EXTENDEDPROP_ROITYPE = int;

enum : int
{
    KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CAPABILITY = 0x00000000,
    KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_SET        = 0x00000001,
    KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_CLEAR      = 0x00000002,
}
alias KSPROPERTY_CAMERACONTROL_PERFRAMESETTING_PROPERTY = int;

enum : int
{
    KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_TIME         = 0x00000001,
    KSCAMERA_PERFRAMESETTING_ITEM_FLASH                 = 0x00000002,
    KSCAMERA_PERFRAMESETTING_ITEM_EXPOSURE_COMPENSATION = 0x00000003,
    KSCAMERA_PERFRAMESETTING_ITEM_ISO                   = 0x00000004,
    KSCAMERA_PERFRAMESETTING_ITEM_FOCUS                 = 0x00000005,
    KSCAMERA_PERFRAMESETTING_ITEM_PHOTOCONFIRMATION     = 0x00000006,
    KSCAMERA_PERFRAMESETTING_ITEM_CUSTOM                = 0x00000007,
}
alias KSCAMERA_PERFRAMESETTING_ITEM_TYPE = int;

enum : int
{
    KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_DISABLE = 0x00000000,
    KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE_HOSTNTP = 0x00000001,
    KSPROPERYT_NETWORKCAMERACONTROL_NTPINFO_TYPE_CUSTOM  = 0x00000002,
}
alias KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE = int;

enum : int
{
    KSPROPERTY_NETWORKCAMERACONTROL_NTP = 0x00000000,
    KSPROPERTY_NETWORKCAMERACONTROL_URI = 0x00000001,
}
alias KSPROPERTY_NETWORKCAMERACONTROL_PROPERTY = int;

enum : int
{
    KSPROPERTY_EXTDEVICE_ID           = 0x00000000,
    KSPROPERTY_EXTDEVICE_VERSION      = 0x00000001,
    KSPROPERTY_EXTDEVICE_POWER_STATE  = 0x00000002,
    KSPROPERTY_EXTDEVICE_PORT         = 0x00000003,
    KSPROPERTY_EXTDEVICE_CAPABILITIES = 0x00000004,
}
alias KSPROPERTY_EXTDEVICE = int;

enum : int
{
    KSPROPERTY_EXTXPORT_CAPABILITIES       = 0x00000000,
    KSPROPERTY_EXTXPORT_INPUT_SIGNAL_MODE  = 0x00000001,
    KSPROPERTY_EXTXPORT_OUTPUT_SIGNAL_MODE = 0x00000002,
    KSPROPERTY_EXTXPORT_LOAD_MEDIUM        = 0x00000003,
    KSPROPERTY_EXTXPORT_MEDIUM_INFO        = 0x00000004,
    KSPROPERTY_EXTXPORT_STATE              = 0x00000005,
    KSPROPERTY_EXTXPORT_STATE_NOTIFY       = 0x00000006,
    KSPROPERTY_EXTXPORT_TIMECODE_SEARCH    = 0x00000007,
    KSPROPERTY_EXTXPORT_ATN_SEARCH         = 0x00000008,
    KSPROPERTY_EXTXPORT_RTC_SEARCH         = 0x00000009,
    KSPROPERTY_RAW_AVC_CMD                 = 0x0000000a,
}
alias KSPROPERTY_EXTXPORT = int;

enum : int
{
    KSPROPERTY_TIMECODE_READER = 0x00000000,
    KSPROPERTY_ATN_READER      = 0x00000001,
    KSPROPERTY_RTC_READER      = 0x00000002,
}
alias KSPROPERTY_TIMECODE = int;

enum : int
{
    KSEVENT_EXTDEV_COMMAND_NOTIFY_INTERIM_READY  = 0x00000000,
    KSEVENT_EXTDEV_COMMAND_CONTROL_INTERIM_READY = 0x00000001,
    KSEVENT_EXTDEV_COMMAND_BUSRESET              = 0x00000002,
    KSEVENT_EXTDEV_TIMECODE_UPDATE               = 0x00000003,
    KSEVENT_EXTDEV_OPERATION_MODE_UPDATE         = 0x00000004,
    KSEVENT_EXTDEV_TRANSPORT_STATE_UPDATE        = 0x00000005,
    KSEVENT_EXTDEV_NOTIFY_REMOVAL                = 0x00000006,
    KSEVENT_EXTDEV_NOTIFY_MEDIUM_CHANGE          = 0x00000007,
}
alias KSEVENT_DEVCMD = int;

enum : int
{
    KSPROPERTY_CROSSBAR_CAPS         = 0x00000000,
    KSPROPERTY_CROSSBAR_PININFO      = 0x00000001,
    KSPROPERTY_CROSSBAR_CAN_ROUTE    = 0x00000002,
    KSPROPERTY_CROSSBAR_ROUTE        = 0x00000003,
    KSPROPERTY_CROSSBAR_INPUT_ACTIVE = 0x00000004,
}
alias KSPROPERTY_VIDCAP_CROSSBAR = int;

enum : int
{
    KSEVENT_CROSSBAR_CHANGED = 0x00000000,
}
alias KSEVENT_CROSSBAR = int;

enum : int
{
    KS_PhysConn_Video_Tuner           = 0x00000001,
    KS_PhysConn_Video_Composite       = 0x00000002,
    KS_PhysConn_Video_SVideo          = 0x00000003,
    KS_PhysConn_Video_RGB             = 0x00000004,
    KS_PhysConn_Video_YRYBY           = 0x00000005,
    KS_PhysConn_Video_SerialDigital   = 0x00000006,
    KS_PhysConn_Video_ParallelDigital = 0x00000007,
    KS_PhysConn_Video_SCSI            = 0x00000008,
    KS_PhysConn_Video_AUX             = 0x00000009,
    KS_PhysConn_Video_1394            = 0x0000000a,
    KS_PhysConn_Video_USB             = 0x0000000b,
    KS_PhysConn_Video_VideoDecoder    = 0x0000000c,
    KS_PhysConn_Video_VideoEncoder    = 0x0000000d,
    KS_PhysConn_Video_SCART           = 0x0000000e,
    KS_PhysConn_Audio_Tuner           = 0x00001000,
    KS_PhysConn_Audio_Line            = 0x00001001,
    KS_PhysConn_Audio_Mic             = 0x00001002,
    KS_PhysConn_Audio_AESDigital      = 0x00001003,
    KS_PhysConn_Audio_SPDIFDigital    = 0x00001004,
    KS_PhysConn_Audio_SCSI            = 0x00001005,
    KS_PhysConn_Audio_AUX             = 0x00001006,
    KS_PhysConn_Audio_1394            = 0x00001007,
    KS_PhysConn_Audio_USB             = 0x00001008,
    KS_PhysConn_Audio_AudioDecoder    = 0x00001009,
}
alias KS_PhysicalConnectorType = int;

enum : int
{
    KSPROPERTY_TVAUDIO_CAPS                      = 0x00000000,
    KSPROPERTY_TVAUDIO_MODE                      = 0x00000001,
    KSPROPERTY_TVAUDIO_CURRENTLY_AVAILABLE_MODES = 0x00000002,
}
alias KSPROPERTY_VIDCAP_TVAUDIO = int;

enum : int
{
    KSEVENT_TVAUDIO_CHANGED = 0x00000000,
}
alias KSEVENT_TVAUDIO = int;

enum : int
{
    KSPROPERTY_VIDEOCOMPRESSION_GETINFO              = 0x00000000,
    KSPROPERTY_VIDEOCOMPRESSION_KEYFRAME_RATE        = 0x00000001,
    KSPROPERTY_VIDEOCOMPRESSION_PFRAMES_PER_KEYFRAME = 0x00000002,
    KSPROPERTY_VIDEOCOMPRESSION_QUALITY              = 0x00000003,
    KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_KEYFRAME    = 0x00000004,
    KSPROPERTY_VIDEOCOMPRESSION_OVERRIDE_FRAME_SIZE  = 0x00000005,
    KSPROPERTY_VIDEOCOMPRESSION_WINDOWSIZE           = 0x00000006,
}
alias KSPROPERTY_VIDCAP_VIDEOCOMPRESSION = int;

enum : int
{
    KS_CompressionCaps_CanQuality  = 0x00000001,
    KS_CompressionCaps_CanCrunch   = 0x00000002,
    KS_CompressionCaps_CanKeyFrame = 0x00000004,
    KS_CompressionCaps_CanBFrame   = 0x00000008,
    KS_CompressionCaps_CanWindow   = 0x00000010,
}
alias KS_CompressionCaps = int;

enum : int
{
    KS_StreamingHint_FrameInterval  = 0x00000100,
    KS_StreamingHint_KeyFrameRate   = 0x00000200,
    KS_StreamingHint_PFrameRate     = 0x00000400,
    KS_StreamingHint_CompQuality    = 0x00000800,
    KS_StreamingHint_CompWindowSize = 0x00001000,
}
alias KS_VideoStreamingHints = int;

enum : int
{
    KSPROPERTY_OVERLAYUPDATE_INTERESTS     = 0x00000000,
    KSPROPERTY_OVERLAYUPDATE_CLIPLIST      = 0x00000001,
    KSPROPERTY_OVERLAYUPDATE_PALETTE       = 0x00000002,
    KSPROPERTY_OVERLAYUPDATE_COLORKEY      = 0x00000004,
    KSPROPERTY_OVERLAYUPDATE_VIDEOPOSITION = 0x00000008,
    KSPROPERTY_OVERLAYUPDATE_DISPLAYCHANGE = 0x00000010,
    KSPROPERTY_OVERLAYUPDATE_COLORREF      = 0x10000000,
}
alias KSPROPERTY_OVERLAYUPDATE = int;

enum : int
{
    KSPROPERTY_VIDEOCONTROL_CAPS              = 0x00000000,
    KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE = 0x00000001,
    KSPROPERTY_VIDEOCONTROL_FRAME_RATES       = 0x00000002,
    KSPROPERTY_VIDEOCONTROL_MODE              = 0x00000003,
}
alias KSPROPERTY_VIDCAP_VIDEOCONTROL = int;

enum : int
{
    KS_VideoControlFlag_FlipHorizontal                 = 0x00000001,
    KS_VideoControlFlag_FlipVertical                   = 0x00000002,
    KS_Obsolete_VideoControlFlag_ExternalTriggerEnable = 0x00000010,
    KS_Obsolete_VideoControlFlag_Trigger               = 0x00000020,
    KS_VideoControlFlag_ExternalTriggerEnable          = 0x00000004,
    KS_VideoControlFlag_Trigger                        = 0x00000008,
    KS_VideoControlFlag_IndependentImagePin            = 0x00000040,
    KS_VideoControlFlag_StillCapturePreviewFrame       = 0x00000080,
    KS_VideoControlFlag_StartPhotoSequenceCapture      = 0x00000100,
    KS_VideoControlFlag_StopPhotoSequenceCapture       = 0x00000200,
}
alias KS_VideoControlFlags = int;

enum : int
{
    KSPROPERTY_DROPPEDFRAMES_CURRENT = 0x00000000,
}
alias KSPROPERTY_VIDCAP_DROPPEDFRAMES = int;

enum : int
{
    KSPROPERTY_VPCONFIG_NUMCONNECTINFO       = 0x00000000,
    KSPROPERTY_VPCONFIG_GETCONNECTINFO       = 0x00000001,
    KSPROPERTY_VPCONFIG_SETCONNECTINFO       = 0x00000002,
    KSPROPERTY_VPCONFIG_VPDATAINFO           = 0x00000003,
    KSPROPERTY_VPCONFIG_MAXPIXELRATE         = 0x00000004,
    KSPROPERTY_VPCONFIG_INFORMVPINPUT        = 0x00000005,
    KSPROPERTY_VPCONFIG_NUMVIDEOFORMAT       = 0x00000006,
    KSPROPERTY_VPCONFIG_GETVIDEOFORMAT       = 0x00000007,
    KSPROPERTY_VPCONFIG_SETVIDEOFORMAT       = 0x00000008,
    KSPROPERTY_VPCONFIG_INVERTPOLARITY       = 0x00000009,
    KSPROPERTY_VPCONFIG_DECIMATIONCAPABILITY = 0x0000000a,
    KSPROPERTY_VPCONFIG_SCALEFACTOR          = 0x0000000b,
    KSPROPERTY_VPCONFIG_DDRAWHANDLE          = 0x0000000c,
    KSPROPERTY_VPCONFIG_VIDEOPORTID          = 0x0000000d,
    KSPROPERTY_VPCONFIG_DDRAWSURFACEHANDLE   = 0x0000000e,
    KSPROPERTY_VPCONFIG_SURFACEPARAMS        = 0x0000000f,
}
alias KSPROPERTY_VPCONFIG = int;

enum : int
{
    KS_PixAspectRatio_NTSC4x3  = 0x00000000,
    KS_PixAspectRatio_NTSC16x9 = 0x00000001,
    KS_PixAspectRatio_PAL4x3   = 0x00000002,
    KS_PixAspectRatio_PAL16x9  = 0x00000003,
}
alias KS_AMPixAspectRatio = int;

enum : int
{
    KS_AMVP_DO_NOT_CARE          = 0x00000000,
    KS_AMVP_BEST_BANDWIDTH       = 0x00000001,
    KS_AMVP_INPUT_SAME_AS_OUTPUT = 0x00000002,
}
alias KS_AMVP_SELECTFORMATBY = int;

enum : int
{
    KS_AMVP_MODE_WEAVE             = 0x00000000,
    KS_AMVP_MODE_BOBINTERLEAVED    = 0x00000001,
    KS_AMVP_MODE_BOBNONINTERLEAVED = 0x00000002,
    KS_AMVP_MODE_SKIPEVEN          = 0x00000003,
    KS_AMVP_MODE_SKIPODD           = 0x00000004,
}
alias KS_AMVP_MODE = int;

enum : int
{
    KSEVENT_VPNOTIFY_FORMATCHANGE = 0x00000000,
}
alias KSEVENT_VPNOTIFY = int;

enum : int
{
    KSEVENT_VIDCAPTOSTI_EXT_TRIGGER = 0x00000000,
    KSEVENT_VIDCAP_AUTO_UPDATE      = 0x00000001,
    KSEVENT_VIDCAP_SEARCH           = 0x00000002,
}
alias KSEVENT_VIDCAPTOSTI = int;

enum : int
{
    KSPROPERTY_EXTENSION_UNIT_INFO         = 0x00000000,
    KSPROPERTY_EXTENSION_UNIT_CONTROL      = 0x00000001,
    KSPROPERTY_EXTENSION_UNIT_PASS_THROUGH = 0x0000ffff,
}
alias KSPROPERTY_EXTENSION_UNIT = int;

enum : int
{
    KSEVENT_VPVBINOTIFY_FORMATCHANGE = 0x00000000,
}
alias KSEVENT_VPVBINOTIFY = int;

enum : int
{
    KS_AM_RATE_SimpleRateChange = 0x00000001,
    KS_AM_RATE_ExactRateChange  = 0x00000002,
    KS_AM_RATE_MaxFullDataRate  = 0x00000003,
    KS_AM_RATE_Step             = 0x00000004,
}
alias KS_AM_PROPERTY_TS_RATE_CHANGE = int;

enum : int
{
    KSPROPERTY_JACK_DESCRIPTION  = 0x00000001,
    KSPROPERTY_JACK_DESCRIPTION2 = 0x00000002,
    KSPROPERTY_JACK_SINK_INFO    = 0x00000003,
    KSPROPERTY_JACK_CONTAINERID  = 0x00000004,
}
alias KSPROPERTY_JACK = int;

enum EPcxConnectionType : int
{
    eConnTypeUnknown               = 0x00000000,
    eConnType3Point5mm             = 0x00000001,
    eConnTypeQuarter               = 0x00000002,
    eConnTypeAtapiInternal         = 0x00000003,
    eConnTypeRCA                   = 0x00000004,
    eConnTypeOptical               = 0x00000005,
    eConnTypeOtherDigital          = 0x00000006,
    eConnTypeOtherAnalog           = 0x00000007,
    eConnTypeMultichannelAnalogDIN = 0x00000008,
    eConnTypeXlrProfessional       = 0x00000009,
    eConnTypeRJ11Modem             = 0x0000000a,
    eConnTypeCombination           = 0x0000000b,
}

enum EPcxGeoLocation : int
{
    eGeoLocRear                = 0x00000001,
    eGeoLocFront               = 0x00000002,
    eGeoLocLeft                = 0x00000003,
    eGeoLocRight               = 0x00000004,
    eGeoLocTop                 = 0x00000005,
    eGeoLocBottom              = 0x00000006,
    eGeoLocRearPanel           = 0x00000007,
    eGeoLocRiser               = 0x00000008,
    eGeoLocInsideMobileLid     = 0x00000009,
    eGeoLocDrivebay            = 0x0000000a,
    eGeoLocHDMI                = 0x0000000b,
    eGeoLocOutsideMobileLid    = 0x0000000c,
    eGeoLocATAPI               = 0x0000000d,
    eGeoLocNotApplicable       = 0x0000000e,
    eGeoLocReserved6           = 0x0000000f,
    EPcxGeoLocation_enum_count = 0x00000010,
}

enum EPcxGenLocation : int
{
    eGenLocPrimaryBox          = 0x00000000,
    eGenLocInternal            = 0x00000001,
    eGenLocSeparate            = 0x00000002,
    eGenLocOther               = 0x00000003,
    EPcxGenLocation_enum_count = 0x00000004,
}

enum EPxcPortConnection : int
{
    ePortConnJack                  = 0x00000000,
    ePortConnIntegratedDevice      = 0x00000001,
    ePortConnBothIntegratedAndJack = 0x00000002,
    ePortConnUnknown               = 0x00000003,
}

enum : int
{
    KSJACK_SINK_CONNECTIONTYPE_HDMI        = 0x00000000,
    KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT = 0x00000001,
}
alias KSJACK_SINK_CONNECTIONTYPE = int;

enum : int
{
    KSPROPERTY_AUDIOPOSTURE_DESCRIPTION = 0x00000001,
}
alias KSPROPERTY_AUDIOPOSTURE = int;

enum : int
{
    AUDIOPOSTURE_PANEL_ORIENTATION_NOTROTATED                        = 0x00000000,
    AUDIOPOSTURE_PANEL_ORIENTATION_ROTATED90DEGREESCOUNTERCLOCKWISE  = 0x00000001,
    AUDIOPOSTURE_PANEL_ORIENTATION_ROTATED180DEGREESCOUNTERCLOCKWISE = 0x00000002,
    AUDIOPOSTURE_PANEL_ORIENTATION_ROTATED270DEGREESCOUNTERCLOCKWISE = 0x00000003,
    AUDIOPOSTURE_PANEL_ORIENTATION_FACEUP                            = 0x00000004,
    AUDIOPOSTURE_PANEL_ORIENTATION_FACEDOWN                          = 0x00000005,
    AUDIOPOSTURE_PANEL_ORIENTATION_COUNT                             = 0x00000006,
}
alias AUDIOPOSTURE_PANEL_ORIENTATION = int;

enum : int
{
    AUDIOPOSTURE_PANEL_POWER_OFF = 0x00000000,
    AUDIOPOSTURE_PANEL_POWER_ON  = 0x00000001,
}
alias AUDIOPOSTURE_PANEL_POWER = int;

enum : int
{
    AUDIOPOSTURE_MEMBER_FLAGS_HINGEANGLE = 0x00000001,
    AUDIOPOSTURE_MEMBER_FLAGS_PANELSTATE = 0x00000002,
}
alias AUDIOPOSTURE_MEMBER_FLAGS = int;

enum : int
{
    KSPROPERTY_AUDIOENGINE_LFXENABLE              = 0x00000000,
    KSPROPERTY_AUDIOENGINE_GFXENABLE              = 0x00000001,
    KSPROPERTY_AUDIOENGINE_MIXFORMAT              = 0x00000002,
    KSPROPERTY_AUDIOENGINE_DEVICEFORMAT           = 0x00000004,
    KSPROPERTY_AUDIOENGINE_SUPPORTEDDEVICEFORMATS = 0x00000005,
    KSPROPERTY_AUDIOENGINE_DESCRIPTOR             = 0x00000006,
    KSPROPERTY_AUDIOENGINE_BUFFER_SIZE_RANGE      = 0x00000007,
    KSPROPERTY_AUDIOENGINE_LOOPBACK_PROTECTION    = 0x00000008,
    KSPROPERTY_AUDIOENGINE_VOLUMELEVEL            = 0x00000009,
}
alias KSPROPERTY_AUDIOENGINE = int;

enum : int
{
    AUDIO_CURVE_TYPE_NONE         = 0x00000000,
    AUDIO_CURVE_TYPE_WINDOWS_FADE = 0x00000001,
}
alias AUDIO_CURVE_TYPE = int;

enum : int
{
    KSPROPERTY_AUDIOSIGNALPROCESSING_MODES = 0x00000000,
}
alias KSPROPERTY_AUDIOSIGNALPROCESSING = int;

enum : int
{
    KSPROPERTY_AUDIOMODULE_DESCRIPTORS            = 0x00000001,
    KSPROPERTY_AUDIOMODULE_COMMAND                = 0x00000002,
    KSPROPERTY_AUDIOMODULE_NOTIFICATION_DEVICE_ID = 0x00000003,
}
alias KSPROPERTY_AUDIOMODULE = int;

enum : int
{
    AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY = 0x00000001,
    AUDCLNT_BUFFERFLAGS_SILENT             = 0x00000002,
    AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR    = 0x00000004,
}
alias _AUDCLNT_BUFFERFLAGS = int;

enum : int
{
    AUDCLNT_STREAMOPTIONS_NONE         = 0x00000000,
    AUDCLNT_STREAMOPTIONS_RAW          = 0x00000001,
    AUDCLNT_STREAMOPTIONS_MATCH_FORMAT = 0x00000002,
    AUDCLNT_STREAMOPTIONS_AMBISONICS   = 0x00000004,
}
alias AUDCLNT_STREAMOPTIONS = int;

enum : int
{
    AMBISONICS_TYPE_FULL3D = 0x00000000,
}
alias AMBISONICS_TYPE = int;

enum : int
{
    AMBISONICS_CHANNEL_ORDERING_ACN = 0x00000000,
}
alias AMBISONICS_CHANNEL_ORDERING = int;

enum : int
{
    AMBISONICS_NORMALIZATION_SN3D = 0x00000000,
    AMBISONICS_NORMALIZATION_N3D  = 0x00000001,
}
alias AMBISONICS_NORMALIZATION = int;

enum AudioObjectType : int
{
    AudioObjectType_None             = 0x00000000,
    AudioObjectType_Dynamic          = 0x00000001,
    AudioObjectType_FrontLeft        = 0x00000002,
    AudioObjectType_FrontRight       = 0x00000004,
    AudioObjectType_FrontCenter      = 0x00000008,
    AudioObjectType_LowFrequency     = 0x00000010,
    AudioObjectType_SideLeft         = 0x00000020,
    AudioObjectType_SideRight        = 0x00000040,
    AudioObjectType_BackLeft         = 0x00000080,
    AudioObjectType_BackRight        = 0x00000100,
    AudioObjectType_TopFrontLeft     = 0x00000200,
    AudioObjectType_TopFrontRight    = 0x00000400,
    AudioObjectType_TopBackLeft      = 0x00000800,
    AudioObjectType_TopBackRight     = 0x00001000,
    AudioObjectType_BottomFrontLeft  = 0x00002000,
    AudioObjectType_BottomFrontRight = 0x00004000,
    AudioObjectType_BottomBackLeft   = 0x00008000,
    AudioObjectType_BottomBackRight  = 0x00010000,
    AudioObjectType_BackCenter       = 0x00020000,
}

enum SpatialAudioHrtfDirectivityType : int
{
    SpatialAudioHrtfDirectivity_OmniDirectional = 0x00000000,
    SpatialAudioHrtfDirectivity_Cardioid        = 0x00000001,
    SpatialAudioHrtfDirectivity_Cone            = 0x00000002,
}

enum SpatialAudioHrtfEnvironmentType : int
{
    SpatialAudioHrtfEnvironment_Small    = 0x00000000,
    SpatialAudioHrtfEnvironment_Medium   = 0x00000001,
    SpatialAudioHrtfEnvironment_Large    = 0x00000002,
    SpatialAudioHrtfEnvironment_Outdoors = 0x00000003,
    SpatialAudioHrtfEnvironment_Average  = 0x00000004,
}

enum SpatialAudioHrtfDistanceDecayType : int
{
    SpatialAudioHrtfDistanceDecay_NaturalDecay = 0x00000000,
    SpatialAudioHrtfDistanceDecay_CustomDecay  = 0x00000001,
}

enum EDataFlow : int
{
    eRender              = 0x00000000,
    eCapture             = 0x00000001,
    eAll                 = 0x00000002,
    EDataFlow_enum_count = 0x00000003,
}

enum ERole : int
{
    eConsole         = 0x00000000,
    eMultimedia      = 0x00000001,
    eCommunications  = 0x00000002,
    ERole_enum_count = 0x00000003,
}

enum EndpointFormFactor : int
{
    RemoteNetworkDevice           = 0x00000000,
    Speakers                      = 0x00000001,
    LineLevel                     = 0x00000002,
    Headphones                    = 0x00000003,
    Microphone                    = 0x00000004,
    Headset                       = 0x00000005,
    Handset                       = 0x00000006,
    UnknownDigitalPassthrough     = 0x00000007,
    SPDIF                         = 0x00000008,
    DigitalAudioDisplayDevice     = 0x00000009,
    UnknownFormFactor             = 0x0000000a,
    EndpointFormFactor_enum_count = 0x0000000b,
}

enum : int
{
    eHostProcessConnector     = 0x00000000,
    eOffloadConnector         = 0x00000001,
    eLoopbackConnector        = 0x00000002,
    eKeywordDetectorConnector = 0x00000003,
    eConnectorCount           = 0x00000004,
}
alias __MIDL___MIDL_itf_audioengineendpoint_0000_0000_0001 = int;

enum DataFlow : int
{
    In      = 0x00000000,
    Out     = 0x00000001,
}

enum PartType : int
{
    Connector = 0x00000000,
    Subunit   = 0x00000001,
}

enum ConnectorType : int
{
    Unknown_Connector = 0x00000000,
    Physical_Internal = 0x00000001,
    Physical_External = 0x00000002,
    Software_IO       = 0x00000003,
    Software_Fixed    = 0x00000004,
    Network           = 0x00000005,
}

enum AudioSessionDisconnectReason : int
{
    DisconnectReasonDeviceRemoval         = 0x00000000,
    DisconnectReasonServerShutdown        = 0x00000001,
    DisconnectReasonFormatChanged         = 0x00000002,
    DisconnectReasonSessionLogoff         = 0x00000003,
    DisconnectReasonSessionDisconnected   = 0x00000004,
    DisconnectReasonExclusiveModeOverride = 0x00000005,
}

enum SpatialAudioMetadataWriterOverflowMode : int
{
    SpatialAudioMetadataWriterOverflow_Fail          = 0x00000000,
    SpatialAudioMetadataWriterOverflow_MergeWithNew  = 0x00000001,
    SpatialAudioMetadataWriterOverflow_MergeWithLast = 0x00000002,
}

enum SpatialAudioMetadataCopyMode : int
{
    SpatialAudioMetadataCopy_Overwrite            = 0x00000000,
    SpatialAudioMetadataCopy_Append               = 0x00000001,
    SpatialAudioMetadataCopy_AppendMergeWithLast  = 0x00000002,
    SpatialAudioMetadataCopy_AppendMergeWithFirst = 0x00000003,
}

// Constants


enum int KSPROPERTY_MEMORY_TRANSPORT = 0x00000001;

// Callbacks

alias YIELDPROC = uint function(uint mciId, uint dwYieldData);

// Structs


struct MCI_GENERIC_PARMS
{
align (1):
    size_t dwCallback;
}

struct MCI_OPEN_PARMSA
{
align (1):
    size_t       dwCallback;
    uint         wDeviceID;
    const(char)* lpstrDeviceType;
    const(char)* lpstrElementName;
    const(char)* lpstrAlias;
}

struct MCI_OPEN_PARMSW
{
align (1):
    size_t        dwCallback;
    uint          wDeviceID;
    const(wchar)* lpstrDeviceType;
    const(wchar)* lpstrElementName;
    const(wchar)* lpstrAlias;
}

struct MCI_PLAY_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwFrom;
    uint   dwTo;
}

struct MCI_SEEK_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwTo;
}

struct MCI_STATUS_PARMS
{
align (1):
    size_t dwCallback;
    size_t dwReturn;
    uint   dwItem;
    uint   dwTrack;
}

struct MCI_INFO_PARMSA
{
align (1):
    size_t       dwCallback;
    const(char)* lpstrReturn;
    uint         dwRetSize;
}

struct MCI_INFO_PARMSW
{
align (1):
    size_t        dwCallback;
    const(wchar)* lpstrReturn;
    uint          dwRetSize;
}

struct MCI_GETDEVCAPS_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwReturn;
    uint   dwItem;
}

struct MCI_SYSINFO_PARMSA
{
align (1):
    size_t       dwCallback;
    const(char)* lpstrReturn;
    uint         dwRetSize;
    uint         dwNumber;
    uint         wDeviceType;
}

struct MCI_SYSINFO_PARMSW
{
align (1):
    size_t        dwCallback;
    const(wchar)* lpstrReturn;
    uint          dwRetSize;
    uint          dwNumber;
    uint          wDeviceType;
}

struct MCI_SET_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwTimeFormat;
    uint   dwAudio;
}

struct MCI_BREAK_PARMS
{
align (1):
    size_t dwCallback;
    int    nVirtKey;
    HWND   hwndBreak;
}

struct MCI_SAVE_PARMSA
{
align (1):
    size_t       dwCallback;
    const(char)* lpfilename;
}

struct MCI_SAVE_PARMSW
{
align (1):
    size_t        dwCallback;
    const(wchar)* lpfilename;
}

struct MCI_LOAD_PARMSA
{
align (1):
    size_t       dwCallback;
    const(char)* lpfilename;
}

struct MCI_LOAD_PARMSW
{
align (1):
    size_t        dwCallback;
    const(wchar)* lpfilename;
}

struct MCI_RECORD_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwFrom;
    uint   dwTo;
}

struct MCI_VD_PLAY_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwFrom;
    uint   dwTo;
    uint   dwSpeed;
}

struct MCI_VD_STEP_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwFrames;
}

struct MCI_VD_ESCAPE_PARMSA
{
align (1):
    size_t       dwCallback;
    const(char)* lpstrCommand;
}

struct MCI_VD_ESCAPE_PARMSW
{
align (1):
    size_t        dwCallback;
    const(wchar)* lpstrCommand;
}

struct MCI_WAVE_OPEN_PARMSA
{
align (1):
    size_t       dwCallback;
    uint         wDeviceID;
    const(char)* lpstrDeviceType;
    const(char)* lpstrElementName;
    const(char)* lpstrAlias;
    uint         dwBufferSeconds;
}

struct MCI_WAVE_OPEN_PARMSW
{
align (1):
    size_t        dwCallback;
    uint          wDeviceID;
    const(wchar)* lpstrDeviceType;
    const(wchar)* lpstrElementName;
    const(wchar)* lpstrAlias;
    uint          dwBufferSeconds;
}

struct MCI_WAVE_DELETE_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwFrom;
    uint   dwTo;
}

struct MCI_WAVE_SET_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwTimeFormat;
    uint   dwAudio;
    uint   wInput;
    uint   wOutput;
    ushort wFormatTag;
    ushort wReserved2;
    ushort nChannels;
    ushort wReserved3;
    uint   nSamplesPerSec;
    uint   nAvgBytesPerSec;
    ushort nBlockAlign;
    ushort wReserved4;
    ushort wBitsPerSample;
    ushort wReserved5;
}

struct MCI_SEQ_SET_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwTimeFormat;
    uint   dwAudio;
    uint   dwTempo;
    uint   dwPort;
    uint   dwSlave;
    uint   dwMaster;
    uint   dwOffset;
}

struct MCI_ANIM_OPEN_PARMSA
{
align (1):
    size_t       dwCallback;
    uint         wDeviceID;
    const(char)* lpstrDeviceType;
    const(char)* lpstrElementName;
    const(char)* lpstrAlias;
    uint         dwStyle;
    HWND         hWndParent;
}

struct MCI_ANIM_OPEN_PARMSW
{
align (1):
    size_t        dwCallback;
    uint          wDeviceID;
    const(wchar)* lpstrDeviceType;
    const(wchar)* lpstrElementName;
    const(wchar)* lpstrAlias;
    uint          dwStyle;
    HWND          hWndParent;
}

struct MCI_ANIM_PLAY_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwFrom;
    uint   dwTo;
    uint   dwSpeed;
}

struct MCI_ANIM_STEP_PARMS
{
align (1):
    size_t dwCallback;
    uint   dwFrames;
}

struct MCI_ANIM_WINDOW_PARMSA
{
align (1):
    size_t       dwCallback;
    HWND         hWnd;
    uint         nCmdShow;
    const(char)* lpstrText;
}

struct MCI_ANIM_WINDOW_PARMSW
{
align (1):
    size_t        dwCallback;
    HWND          hWnd;
    uint          nCmdShow;
    const(wchar)* lpstrText;
}

struct MCI_ANIM_RECT_PARMS
{
align (1):
    size_t dwCallback;
    RECT   rc;
}

struct MCI_ANIM_UPDATE_PARMS
{
align (1):
    size_t dwCallback;
    RECT   rc;
    HDC    hDC;
}

struct MCI_OVLY_OPEN_PARMSA
{
align (1):
    size_t       dwCallback;
    uint         wDeviceID;
    const(char)* lpstrDeviceType;
    const(char)* lpstrElementName;
    const(char)* lpstrAlias;
    uint         dwStyle;
    HWND         hWndParent;
}

struct MCI_OVLY_OPEN_PARMSW
{
align (1):
    size_t        dwCallback;
    uint          wDeviceID;
    const(wchar)* lpstrDeviceType;
    const(wchar)* lpstrElementName;
    const(wchar)* lpstrAlias;
    uint          dwStyle;
    HWND          hWndParent;
}

struct MCI_OVLY_WINDOW_PARMSA
{
align (1):
    size_t       dwCallback;
    HWND         hWnd;
    uint         nCmdShow;
    const(char)* lpstrText;
}

struct MCI_OVLY_WINDOW_PARMSW
{
align (1):
    size_t        dwCallback;
    HWND          hWnd;
    uint          nCmdShow;
    const(wchar)* lpstrText;
}

struct MCI_OVLY_RECT_PARMS
{
align (1):
    size_t dwCallback;
    RECT   rc;
}

struct MCI_OVLY_SAVE_PARMSA
{
align (1):
    size_t       dwCallback;
    const(char)* lpfilename;
    RECT         rc;
}

struct MCI_OVLY_SAVE_PARMSW
{
align (1):
    size_t        dwCallback;
    const(wchar)* lpfilename;
    RECT          rc;
}

struct MCI_OVLY_LOAD_PARMSA
{
align (1):
    size_t       dwCallback;
    const(char)* lpfilename;
    RECT         rc;
}

struct MCI_OVLY_LOAD_PARMSW
{
align (1):
    size_t        dwCallback;
    const(wchar)* lpfilename;
    RECT          rc;
}

struct KSPRIORITY
{
    uint PriorityClass;
    uint PrioritySubClass;
}

struct KSIDENTIFIER
{
    union
    {
        struct
        {
            GUID Set;
            uint Id;
            uint Flags;
        }
        long Alignment;
    }
}

struct KSP_NODE
{
    KSIDENTIFIER Property;
    uint         NodeId;
    uint         Reserved;
}

struct KSM_NODE
{
    KSIDENTIFIER Method;
    uint         NodeId;
    uint         Reserved;
}

struct KSE_NODE
{
    KSIDENTIFIER Event;
    uint         NodeId;
    uint         Reserved;
}

struct KSMULTIPLE_ITEM
{
    uint Size;
    uint Count;
}

struct KSPROPERTY_DESCRIPTION
{
    uint         AccessFlags;
    uint         DescriptionSize;
    KSIDENTIFIER PropTypeSet;
    uint         MembersListCount;
    uint         Reserved;
}

struct KSPROPERTY_MEMBERSHEADER
{
    uint MembersFlags;
    uint MembersSize;
    uint MembersCount;
    uint Flags;
}

union KSPROPERTY_BOUNDS_LONG
{
    struct
    {
        int SignedMinimum;
        int SignedMaximum;
    }
    struct
    {
        uint UnsignedMinimum;
        uint UnsignedMaximum;
    }
}

union KSPROPERTY_BOUNDS_LONGLONG
{
    struct
    {
        long SignedMinimum;
        long SignedMaximum;
    }
    struct
    {
        ulong UnsignedMinimum;
        ulong UnsignedMaximum;
    }
}

struct KSPROPERTY_STEPPING_LONG
{
    uint SteppingDelta;
    uint Reserved;
    KSPROPERTY_BOUNDS_LONG Bounds;
}

struct KSPROPERTY_STEPPING_LONGLONG
{
    ulong SteppingDelta;
    KSPROPERTY_BOUNDS_LONGLONG Bounds;
}

struct KSEVENTDATA
{
    uint NotificationType;
    union
    {
        struct EventHandle
        {
            HANDLE    Event;
            size_t[2] Reserved;
        }
        struct SemaphoreHandle
        {
            HANDLE Semaphore;
            uint   Reserved;
            int    Adjustment;
        }
        struct Alignment
        {
            void*        Unused;
            ptrdiff_t[2] Alignment;
        }
    }
}

struct KSQUERYBUFFER
{
    KSIDENTIFIER Event;
    KSEVENTDATA* EventData;
    void*        Reserved;
}

struct KSRELATIVEEVENT
{
    uint         Size;
    uint         Flags;
    union
    {
        HANDLE ObjectHandle;
        void*  ObjectPointer;
    }
    void*        Reserved;
    KSIDENTIFIER Event;
    KSEVENTDATA  EventData;
}

struct KSEVENT_TIME_MARK
{
    KSEVENTDATA EventData;
    long        MarkTime;
}

struct KSEVENT_TIME_INTERVAL
{
    KSEVENTDATA EventData;
    long        TimeBase;
    long        Interval;
}

struct KSINTERVAL
{
    long TimeBase;
    long Interval;
}

struct KSCOMPONENTID
{
    GUID Manufacturer;
    GUID Product;
    GUID Component;
    GUID Name;
    uint Version;
    uint Revision;
}

struct KSPROPERTY_POSITIONS
{
    long             Current;
    long             Stop;
    KS_SEEKING_FLAGS CurrentFlags;
    KS_SEEKING_FLAGS StopFlags;
}

struct KSPROPERTY_MEDIAAVAILABLE
{
    long Earliest;
    long Latest;
}

struct KSP_TIMEFORMAT
{
    KSIDENTIFIER Property;
    GUID         SourceFormat;
    GUID         TargetFormat;
    long         Time;
}

struct KSTOPOLOGY
{
    uint         CategoriesCount;
    const(GUID)* Categories;
    uint         TopologyNodesCount;
    const(GUID)* TopologyNodes;
    uint         TopologyConnectionsCount;
    const(KSTOPOLOGY_CONNECTION)* TopologyConnections;
    const(GUID)* TopologyNodesNames;
    uint         Reserved;
}

struct KSNODE_CREATE
{
    uint CreateFlags;
    uint Node;
}

struct KSP_PIN
{
    KSIDENTIFIER Property;
    uint         PinId;
    union
    {
        uint Reserved;
        uint Flags;
    }
}

struct KSE_PIN
{
    KSIDENTIFIER Event;
    uint         PinId;
    uint         Reserved;
}

struct KSPIN_CINSTANCES
{
    uint PossibleCount;
    uint CurrentCount;
}

union KSDATAFORMAT
{
    struct
    {
        uint FormatSize;
        uint Flags;
        uint SampleSize;
        uint Reserved;
        GUID MajorFormat;
        GUID SubFormat;
        GUID Specifier;
    }
    long Alignment;
}

struct KSATTRIBUTE
{
    uint Size;
    uint Flags;
    GUID Attribute;
}

struct KSPIN_CONNECT
{
    KSIDENTIFIER Interface;
    KSIDENTIFIER Medium;
    uint         PinId;
    HANDLE       PinToHandle;
    KSPRIORITY   Priority;
}

struct KSPIN_PHYSICALCONNECTION
{
    uint      Size;
    uint      Pin;
    ushort[1] SymbolicLinkName;
}

struct KSALLOCATOR_FRAMING
{
    union
    {
        uint OptionsFlags;
        uint RequirementsFlags;
    }
    uint PoolType;
    uint Frames;
    uint FrameSize;
    union
    {
        uint FileAlignment;
        int  FramePitch;
    }
    uint Reserved;
}

struct KS_FRAMING_RANGE
{
    uint MinFrameSize;
    uint MaxFrameSize;
    uint Stepping;
}

struct KS_FRAMING_RANGE_WEIGHTED
{
    KS_FRAMING_RANGE Range;
    uint             InPlaceWeight;
    uint             NotInPlaceWeight;
}

struct KS_COMPRESSION
{
    uint RatioNumerator;
    uint RatioDenominator;
    uint RatioConstantMargin;
}

struct KS_FRAMING_ITEM
{
    GUID             MemoryType;
    GUID             BusType;
    uint             MemoryFlags;
    uint             BusFlags;
    uint             Flags;
    uint             Frames;
    union
    {
        uint FileAlignment;
        int  FramePitch;
    }
    uint             MemoryTypeWeight;
    KS_FRAMING_RANGE PhysicalRange;
    KS_FRAMING_RANGE_WEIGHTED FramingRange;
}

struct KSALLOCATOR_FRAMING_EX
{
    uint               CountItems;
    uint               PinFlags;
    KS_COMPRESSION     OutputCompression;
    uint               PinWeight;
    KS_FRAMING_ITEM[1] FramingItem;
}

struct KSSTREAMALLOCATOR_STATUS
{
    KSALLOCATOR_FRAMING Framing;
    uint                AllocatedFrames;
    uint                Reserved;
}

struct KSSTREAMALLOCATOR_STATUS_EX
{
    KSALLOCATOR_FRAMING_EX Framing;
    uint AllocatedFrames;
    uint Reserved;
}

struct KSTIME
{
    long Time;
    uint Numerator;
    uint Denominator;
}

struct KSSTREAM_HEADER
{
    uint   Size;
    uint   TypeSpecificFlags;
    KSTIME PresentationTime;
    long   Duration;
    uint   FrameExtent;
    uint   DataUsed;
    void*  Data;
    uint   OptionsFlags;
}

struct KSSTREAM_METADATA_INFO
{
    uint  BufferSize;
    uint  UsedSize;
    void* Data;
    void* SystemVa;
    uint  Flags;
    uint  Reserved;
}

struct KSSTREAM_UVC_METADATATYPE_TIMESTAMP
{
    uint   PresentationTimeStamp;
    uint   SourceClockReference;
    union
    {
        struct
        {
            ushort _bitfield2;
        }
        ushort SCRToken;
    }
    ushort Reserved0;
    uint   Reserved1;
}

struct KSSTREAM_UVC_METADATA
{
    KSSTREAM_UVC_METADATATYPE_TIMESTAMP StartOfFrameTimestamp;
    KSSTREAM_UVC_METADATATYPE_TIMESTAMP EndOfFrameTimestamp;
}

struct KSPIN_MDL_CACHING_NOTIFICATION
{
    KSPIN_MDL_CACHING_EVENT Event;
    void* Buffer;
}

struct KSPIN_MDL_CACHING_NOTIFICATION32
{
    KSPIN_MDL_CACHING_EVENT Event;
    uint Buffer;
}

struct KSQUALITY_MANAGER
{
    HANDLE QualityManager;
    void*  Context;
}

struct KSFRAMETIME
{
    long Duration;
    uint FrameFlags;
    uint Reserved;
}

struct KSRATE
{
    long         PresentationStart;
    long         Duration;
    KSIDENTIFIER Interface;
    int          Rate;
    uint         Flags;
}

struct KSRATE_CAPABILITY
{
    KSIDENTIFIER Property;
    KSRATE       Rate;
}

struct KSCLOCK_CREATE
{
    uint CreateFlags;
}

struct KSCORRELATED_TIME
{
    long Time;
    long SystemTime;
}

struct KSRESOLUTION
{
    long Granularity;
    long Error;
}

struct KSQUALITY
{
    void* Context;
    uint  Proportion;
    long  DeltaTime;
}

struct KSERROR
{
    void* Context;
    uint  Status;
}

struct KSPROPERTY_SERIALHDR
{
align (1):
    GUID PropertySet;
    uint Count;
}

struct KSPROPERTY_SERIAL
{
    KSIDENTIFIER PropTypeSet;
    uint         Id;
    uint         PropertyLength;
}

union MF_MDL_SHARED_PAYLOAD_KEY
{
    struct combined
    {
        uint  pHandle;
        uint  fHandle;
        ulong uPayload;
    }
    GUID GMDLHandle;
}

struct KSMULTIPLE_DATA_PROP
{
    KSIDENTIFIER    Property;
    KSMULTIPLE_ITEM MultipleItem;
}

struct KSDATAFORMAT_WAVEFORMATEX
{
align (1):
    KSDATAFORMAT DataFormat;
    WAVEFORMATEX WaveFormatEx;
}

struct WAVEFORMATEXTENSIBLE_IEC61937
{
align (1):
    WAVEFORMATEXTENSIBLE FormatExt;
    uint                 dwEncodedSamplesPerSec;
    uint                 dwEncodedChannelCount;
    uint                 dwAverageBytesPerSec;
}

struct KSDATAFORMAT_WAVEFORMATEXTENSIBLE
{
align (1):
    KSDATAFORMAT         DataFormat;
    WAVEFORMATEXTENSIBLE WaveFormatExt;
}

struct KSDSOUND_BUFFERDESC
{
align (1):
    uint         Flags;
    uint         Control;
    WAVEFORMATEX WaveFormatEx;
}

struct KSDATAFORMAT_DSOUND
{
align (1):
    KSDATAFORMAT        DataFormat;
    KSDSOUND_BUFFERDESC BufferDesc;
}

struct KSAUDIO_POSITION
{
    ulong PlayOffset;
    ulong WriteOffset;
}

struct KSAUDIO_PRESENTATION_POSITION
{
    ulong u64PositionInBlocks;
    ulong u64QPCPosition;
}

struct _KSAUDIO_PACKETSIZE_SIGNALPROCESSINGMODE_CONSTRAINT
{
    GUID ProcessingMode;
    uint SamplesPerProcessingPacket;
    uint ProcessingPacketDurationInHns;
}

struct KSAUDIO_PACKETSIZE_CONSTRAINTS
{
    uint MinPacketPeriodInHns;
    uint PacketSizeFileAlignment;
    uint Reserved;
    uint NumProcessingModeConstraints;
    _KSAUDIO_PACKETSIZE_SIGNALPROCESSINGMODE_CONSTRAINT[1] ProcessingModeConstraints;
}

struct KSAUDIO_PACKETSIZE_CONSTRAINTS2
{
    uint MinPacketPeriodInHns;
    uint PacketSizeFileAlignment;
    uint MaxPacketSizeInBytes;
    uint NumProcessingModeConstraints;
    _KSAUDIO_PACKETSIZE_SIGNALPROCESSINGMODE_CONSTRAINT[1] ProcessingModeConstraints;
}

struct KSAUDIO_MICROPHONE_COORDINATES
{
    ushort usType;
    short  wXCoord;
    short  wYCoord;
    short  wZCoord;
    short  wVerticalAngle;
    short  wHorizontalAngle;
}

struct KSAUDIO_MIC_ARRAY_GEOMETRY
{
    ushort usVersion;
    ushort usMicArrayType;
    short  wVerticalAngleBegin;
    short  wVerticalAngleEnd;
    short  wHorizontalAngleBegin;
    short  wHorizontalAngleEnd;
    ushort usFrequencyBandLo;
    ushort usFrequencyBandHi;
    ushort usNumberOfMicrophones;
    KSAUDIO_MICROPHONE_COORDINATES[1] KsMicCoord;
}

struct DS3DVECTOR
{
    union
    {
        float x;
        float dvX;
    }
    union
    {
        float y;
        float dvY;
    }
    union
    {
        float z;
        float dvZ;
    }
}

struct KSDS3D_LISTENER_ALL
{
    DS3DVECTOR Position;
    DS3DVECTOR Velocity;
    DS3DVECTOR OrientFront;
    DS3DVECTOR OrientTop;
    float      DistanceFactor;
    float      RolloffFactor;
    float      DopplerFactor;
}

struct KSDS3D_LISTENER_ORIENTATION
{
    DS3DVECTOR Front;
    DS3DVECTOR Top;
}

struct KSDS3D_BUFFER_ALL
{
    DS3DVECTOR Position;
    DS3DVECTOR Velocity;
    uint       InsideConeAngle;
    uint       OutsideConeAngle;
    DS3DVECTOR ConeOrientation;
    int        ConeOutsideVolume;
    float      MinDistance;
    float      MaxDistance;
    uint       Mode;
}

struct KSDS3D_BUFFER_CONE_ANGLES
{
    uint InsideConeAngle;
    uint OutsideConeAngle;
}

struct KSDS3D_HRTF_PARAMS_MSG
{
    uint Size;
    uint Enabled;
    BOOL SwapChannels;
    BOOL ZeroAzimuth;
    BOOL CrossFadeOutput;
    uint FilterSize;
}

struct KSDS3D_HRTF_INIT_MSG
{
    uint  Size;
    KSDS3D_HRTF_FILTER_QUALITY Quality;
    float SampleRate;
    uint  MaxFilterSize;
    uint  FilterTransientMuteLength;
    uint  FilterOverlapBufferLength;
    uint  OutputOverlapBufferLength;
    uint  Reserved;
}

struct KSDS3D_HRTF_FILTER_FORMAT_MSG
{
    KSDS3D_HRTF_FILTER_METHOD FilterMethod;
    KSDS3D_HRTF_COEFF_FORMAT CoeffFormat;
    KSDS3D_HRTF_FILTER_VERSION Version;
    uint Reserved;
}

struct KSDS3D_ITD_PARAMS
{
    int   Channel;
    float VolSmoothScale;
    float TotalDryAttenuation;
    float TotalWetAttenuation;
    int   SmoothFrequency;
    int   Delay;
}

struct KSDS3D_ITD_PARAMS_MSG
{
    uint              Enabled;
    KSDS3D_ITD_PARAMS LeftParams;
    KSDS3D_ITD_PARAMS RightParams;
    uint              Reserved;
}

struct KSDATARANGE_AUDIO
{
    KSDATAFORMAT DataRange;
    uint         MaximumChannels;
    uint         MinimumBitsPerSample;
    uint         MaximumBitsPerSample;
    uint         MinimumSampleFrequency;
    uint         MaximumSampleFrequency;
}

struct KSRTAUDIO_BUFFER_PROPERTY
{
    KSIDENTIFIER Property;
    void*        BaseAddress;
    uint         RequestedBufferSize;
}

struct KSRTAUDIO_BUFFER_PROPERTY32
{
    KSIDENTIFIER Property;
    uint         BaseAddress;
    uint         RequestedBufferSize;
}

struct KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION
{
    KSIDENTIFIER Property;
    void*        BaseAddress;
    uint         RequestedBufferSize;
    uint         NotificationCount;
}

struct KSRTAUDIO_BUFFER_PROPERTY_WITH_NOTIFICATION32
{
    KSIDENTIFIER Property;
    uint         BaseAddress;
    uint         RequestedBufferSize;
    uint         NotificationCount;
}

struct KSRTAUDIO_BUFFER
{
    void* BufferAddress;
    uint  ActualBufferSize;
    BOOL  CallMemoryBarrier;
}

struct KSRTAUDIO_BUFFER32
{
    uint BufferAddress;
    uint ActualBufferSize;
    BOOL CallMemoryBarrier;
}

struct KSRTAUDIO_HWLATENCY
{
    uint FifoSize;
    uint ChipsetDelay;
    uint CodecDelay;
}

struct KSRTAUDIO_HWREGISTER_PROPERTY
{
    KSIDENTIFIER Property;
    void*        BaseAddress;
}

struct KSRTAUDIO_HWREGISTER_PROPERTY32
{
    KSIDENTIFIER Property;
    uint         BaseAddress;
}

struct KSRTAUDIO_HWREGISTER
{
    void* Register;
    uint  Width;
    ulong Numerator;
    ulong Denominator;
    uint  Accuracy;
}

struct KSRTAUDIO_HWREGISTER32
{
    uint  Register;
    uint  Width;
    ulong Numerator;
    ulong Denominator;
    uint  Accuracy;
}

struct KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY
{
    KSIDENTIFIER Property;
    HANDLE       NotificationEvent;
}

struct KSRTAUDIO_NOTIFICATION_EVENT_PROPERTY32
{
    KSIDENTIFIER Property;
    uint         NotificationEvent;
}

struct KSRTAUDIO_GETREADPACKET_INFO
{
    uint  PacketNumber;
    uint  Flags;
    ulong PerformanceCounterValue;
    BOOL  MoreData;
}

struct KSRTAUDIO_SETWRITEPACKET_INFO
{
    uint PacketNumber;
    uint Flags;
    uint EosPacketLength;
}

struct KSRTAUDIO_PACKETVREGISTER_PROPERTY
{
    KSIDENTIFIER Property;
    void*        BaseAddress;
}

struct KSRTAUDIO_PACKETVREGISTER
{
    ulong* CompletedPacketCount;
    ulong* CompletedPacketQPC;
    ulong* CompletedPacketHash;
}

struct INTERLEAVED_AUDIO_FORMAT_INFORMATION
{
    uint Size;
    uint PrimaryChannelCount;
    uint PrimaryChannelStartPosition;
    uint PrimaryChannelMask;
    uint InterleavedChannelCount;
    uint InterleavedChannelStartPosition;
    uint InterleavedChannelMask;
}

struct KSSOUNDDETECTORPROPERTY
{
    KSIDENTIFIER Property;
    GUID         EventId;
}

struct SOUNDDETECTOR_PATTERNHEADER
{
    uint Size;
    GUID PatternType;
}

struct KSAUDIO_COPY_PROTECTION
{
    BOOL fCopyrighted;
    BOOL fOriginal;
}

struct KSAUDIO_CHANNEL_CONFIG
{
    int ActiveSpeakerPositions;
}

struct KSAUDIO_DYNAMIC_RANGE
{
    uint QuietCompression;
    uint LoudCompression;
}

struct KSAUDIO_MIXLEVEL
{
    BOOL Mute;
    int  Level;
}

struct KSAUDIO_MIX_CAPS
{
    BOOL Mute;
    int  Minimum;
    int  Maximum;
    union
    {
        int Reset;
        int Resolution;
    }
}

struct KSAUDIO_MIXCAP_TABLE
{
    uint                InputChannels;
    uint                OutputChannels;
    KSAUDIO_MIX_CAPS[1] Capabilities;
}

struct KSAUDIO_POSITIONEX
{
    LARGE_INTEGER    TimerFrequency;
    LARGE_INTEGER    TimeStamp1;
    KSAUDIO_POSITION Position;
    LARGE_INTEGER    TimeStamp2;
}

struct KSTELEPHONY_CALLCONTROL
{
    TELEPHONY_CALLTYPE CallType;
    TELEPHONY_CALLCONTROLOP CallControlOp;
}

struct KSTELEPHONY_PROVIDERCHANGE
{
    TELEPHONY_CALLTYPE CallType;
    TELEPHONY_PROVIDERCHANGEOP ProviderChangeOp;
}

struct KSTELEPHONY_CALLINFO
{
    TELEPHONY_CALLTYPE  CallType;
    TELEPHONY_CALLSTATE CallState;
}

struct KSTOPOLOGY_ENDPOINTID
{
    ushort[260] TopologyName;
    uint        PinId;
}

struct KSTOPOLOGY_ENDPOINTIDPAIR
{
    KSTOPOLOGY_ENDPOINTID RenderEndpoint;
    KSTOPOLOGY_ENDPOINTID CaptureEndpoint;
}

struct KSWAVETABLE_WAVE_DESC
{
    KSIDENTIFIER Identifier;
    uint         Size;
    BOOL         Looped;
    uint         LoopPoint;
    BOOL         InROM;
    KSDATAFORMAT Format;
}

struct KSWAVE_COMPATCAPS
{
    uint ulDeviceType;
}

struct KSWAVE_INPUT_CAPABILITIES
{
    uint MaximumChannelsPerConnection;
    uint MinimumBitsPerSample;
    uint MaximumBitsPerSample;
    uint MinimumSampleFrequency;
    uint MaximumSampleFrequency;
    uint TotalConnections;
    uint ActiveConnections;
}

struct KSWAVE_OUTPUT_CAPABILITIES
{
    uint MaximumChannelsPerConnection;
    uint MinimumBitsPerSample;
    uint MaximumBitsPerSample;
    uint MinimumSampleFrequency;
    uint MaximumSampleFrequency;
    uint TotalConnections;
    uint StaticConnections;
    uint StreamingConnections;
    uint ActiveConnections;
    uint ActiveStaticConnections;
    uint ActiveStreamingConnections;
    uint Total3DConnections;
    uint Static3DConnections;
    uint Streaming3DConnections;
    uint Active3DConnections;
    uint ActiveStatic3DConnections;
    uint ActiveStreaming3DConnections;
    uint TotalSampleMemory;
    uint FreeSampleMemory;
    uint LargestFreeContiguousSampleMemory;
}

struct KSWAVE_VOLUME
{
    int LeftAttenuation;
    int RightAttenuation;
}

struct KSWAVE_BUFFER
{
    uint  Attributes;
    uint  BufferSize;
    void* BufferAddress;
}

struct KSDATARANGE_MUSIC
{
    KSDATAFORMAT DataRange;
    GUID         Technology;
    uint         Channels;
    uint         Notes;
    uint         ChannelMask;
}

struct LOOPEDSTREAMING_POSITION_EVENT_DATA
{
    KSEVENTDATA KsEventData;
    ulong       Position;
}

struct KSNODEPROPERTY
{
    KSIDENTIFIER Property;
    uint         NodeId;
    uint         Reserved;
}

struct KSNODEPROPERTY_AUDIO_CHANNEL
{
    KSNODEPROPERTY NodeProperty;
    int            Channel;
    uint           Reserved;
}

struct KSNODEPROPERTY_AUDIO_DEV_SPECIFIC
{
    KSNODEPROPERTY NodeProperty;
    uint           DevSpecificId;
    uint           DeviceInfo;
    uint           Length;
}

struct KSNODEPROPERTY_AUDIO_3D_LISTENER
{
    KSNODEPROPERTY NodeProperty;
    void*          ListenerId;
    uint           Reserved;
}

struct KSNODEPROPERTY_AUDIO_PROPERTY
{
    KSNODEPROPERTY NodeProperty;
    void*          AppContext;
    uint           Length;
    uint           Reserved;
}

struct KSMUSICFORMAT
{
    uint TimeDeltaMs;
    uint ByteCount;
}

struct KSMPEGVID_RECT
{
    uint StartX;
    uint StartY;
    uint EndX;
    uint EndY;
}

struct KSAC3_ERROR_CONCEALMENT
{
    BOOL fRepeatPreviousBlock;
    BOOL fErrorInCurrentBlock;
}

struct KSAC3_ALTERNATE_AUDIO
{
    BOOL fStereo;
    uint DualMode;
}

struct KSAC3_DOWNMIX
{
    BOOL fDownMix;
    BOOL fDolbySurround;
}

struct KSAC3_BIT_STREAM_MODE
{
    int BitStreamMode;
}

struct KSAC3_DIALOGUE_LEVEL
{
    uint DialogueLevel;
}

struct KSAC3_ROOM_TYPE
{
    BOOL fLargeRoom;
}

struct KS_DVD_YCrCb
{
    ubyte Reserved;
    ubyte Y;
    ubyte Cr;
    ubyte Cb;
}

struct KS_DVD_YUV
{
    ubyte Reserved;
    ubyte Y;
    ubyte V;
    ubyte U;
}

struct KSPROPERTY_SPPAL
{
    KS_DVD_YUV[16] sppal;
}

struct KS_COLCON
{
    ubyte _bitfield1;
    ubyte _bitfield2;
    ubyte _bitfield3;
    ubyte _bitfield4;
}

struct KSPROPERTY_SPHLI
{
    ushort    HLISS;
    ushort    Reserved;
    uint      StartPTM;
    uint      EndPTM;
    ushort    StartX;
    ushort    StartY;
    ushort    StopX;
    ushort    StopY;
    KS_COLCON ColCon;
}

struct KS_DVDCOPY_CHLGKEY
{
    ubyte[10] ChlgKey;
    ubyte[2]  Reserved;
}

struct KS_DVDCOPY_BUSKEY
{
    ubyte[5] BusKey;
    ubyte[1] Reserved;
}

struct KS_DVDCOPY_DISCKEY
{
    ubyte[2048] DiscKey;
}

struct KS_DVDCOPY_REGION
{
    ubyte    Reserved;
    ubyte    RegionData;
    ubyte[2] Reserved2;
}

struct KS_DVDCOPY_TITLEKEY
{
    uint     KeyFlags;
    uint[2]  ReservedNT;
    ubyte[6] TitleKey;
    ubyte[2] Reserved;
}

struct KS_COPY_MACROVISION
{
    uint MACROVISIONLevel;
}

struct KS_DVDCOPY_SET_COPY_STATE
{
    uint DVDCopyState;
}

struct KS_RGBQUAD
{
    ubyte rgbBlue;
    ubyte rgbGreen;
    ubyte rgbRed;
    ubyte rgbReserved;
}

struct KS_BITMAPINFOHEADER
{
    uint   biSize;
    int    biWidth;
    int    biHeight;
    ushort biPlanes;
    ushort biBitCount;
    uint   biCompression;
    uint   biSizeImage;
    int    biXPelsPerMeter;
    int    biYPelsPerMeter;
    uint   biClrUsed;
    uint   biClrImportant;
}

struct tag_KS_TRUECOLORINFO
{
    uint[3]         dwBitMasks;
    KS_RGBQUAD[256] bmiColors;
}

struct KS_VIDEOINFOHEADER
{
    RECT                rcSource;
    RECT                rcTarget;
    uint                dwBitRate;
    uint                dwBitErrorRate;
    long                AvgTimePerFrame;
    KS_BITMAPINFOHEADER bmiHeader;
}

struct KS_VIDEOINFO
{
    RECT                rcSource;
    RECT                rcTarget;
    uint                dwBitRate;
    uint                dwBitErrorRate;
    long                AvgTimePerFrame;
    KS_BITMAPINFOHEADER bmiHeader;
    union
    {
        KS_RGBQUAD[256]      bmiColors;
        uint[3]              dwBitMasks;
        tag_KS_TRUECOLORINFO TrueColorInfo;
    }
}

struct KS_VBIINFOHEADER
{
    uint StartLine;
    uint EndLine;
    uint SamplingFrequency;
    uint MinLineStartTime;
    uint MaxLineStartTime;
    uint ActualLineStartTime;
    uint ActualLineEndTime;
    uint VideoStandard;
    uint SamplesPerLine;
    uint StrideInBytes;
    uint BufferSize;
}

struct tagKS_AnalogVideoInfo
{
    RECT rcSource;
    RECT rcTarget;
    uint dwActiveWidth;
    uint dwActiveHeight;
    long AvgTimePerFrame;
}

struct KS_TVTUNER_CHANGE_INFO
{
    uint dwFlags;
    uint dwCountryCode;
    uint dwAnalogVideoStandard;
    uint dwChannel;
}

struct KS_VIDEOINFOHEADER2
{
    RECT                rcSource;
    RECT                rcTarget;
    uint                dwBitRate;
    uint                dwBitErrorRate;
    long                AvgTimePerFrame;
    uint                dwInterlaceFlags;
    uint                dwCopyProtectFlags;
    uint                dwPictAspectRatioX;
    uint                dwPictAspectRatioY;
    union
    {
        uint dwControlFlags;
        uint dwReserved1;
    }
    uint                dwReserved2;
    KS_BITMAPINFOHEADER bmiHeader;
}

struct KS_MPEG1VIDEOINFO
{
    KS_VIDEOINFOHEADER hdr;
    uint               dwStartTimeCode;
    uint               cbSequenceHeader;
    ubyte[1]           bSequenceHeader;
}

struct KS_MPEGVIDEOINFO2
{
    KS_VIDEOINFOHEADER2 hdr;
    uint                dwStartTimeCode;
    uint                cbSequenceHeader;
    uint                dwProfile;
    uint                dwLevel;
    uint                dwFlags;
    uint[1]             bSequenceHeader;
}

struct KS_H264VIDEOINFO
{
    ushort wWidth;
    ushort wHeight;
    ushort wSARwidth;
    ushort wSARheight;
    ushort wProfile;
    ubyte  bLevelIDC;
    ushort wConstrainedToolset;
    uint   bmSupportedUsages;
    ushort bmCapabilities;
    uint   bmSVCCapabilities;
    uint   bmMVCCapabilities;
    uint   dwFrameInterval;
    ubyte  bMaxCodecConfigDelay;
    ubyte  bmSupportedSliceModes;
    ubyte  bmSupportedSyncFrameTypes;
    ubyte  bResolutionScaling;
    ubyte  bSimulcastSupport;
    ubyte  bmSupportedRateControlModes;
    ushort wMaxMBperSecOneResolutionNoScalability;
    ushort wMaxMBperSecTwoResolutionsNoScalability;
    ushort wMaxMBperSecThreeResolutionsNoScalability;
    ushort wMaxMBperSecFourResolutionsNoScalability;
    ushort wMaxMBperSecOneResolutionTemporalScalability;
    ushort wMaxMBperSecTwoResolutionsTemporalScalablility;
    ushort wMaxMBperSecThreeResolutionsTemporalScalability;
    ushort wMaxMBperSecFourResolutionsTemporalScalability;
    ushort wMaxMBperSecOneResolutionTemporalQualityScalability;
    ushort wMaxMBperSecTwoResolutionsTemporalQualityScalability;
    ushort wMaxMBperSecThreeResolutionsTemporalQualityScalablity;
    ushort wMaxMBperSecFourResolutionsTemporalQualityScalability;
    ushort wMaxMBperSecOneResolutionTemporalSpatialScalability;
    ushort wMaxMBperSecTwoResolutionsTemporalSpatialScalability;
    ushort wMaxMBperSecThreeResolutionsTemporalSpatialScalablity;
    ushort wMaxMBperSecFourResolutionsTemporalSpatialScalability;
    ushort wMaxMBperSecOneResolutionFullScalability;
    ushort wMaxMBperSecTwoResolutionsFullScalability;
    ushort wMaxMBperSecThreeResolutionsFullScalability;
    ushort wMaxMBperSecFourResolutionsFullScalability;
}

struct tagKS_MPEAUDIOINFO
{
    uint dwFlags;
    uint dwReserved1;
    uint dwReserved2;
    uint dwReserved3;
}

struct KS_DATAFORMAT_VIDEOINFOHEADER
{
    KSDATAFORMAT       DataFormat;
    KS_VIDEOINFOHEADER VideoInfoHeader;
}

struct KS_DATAFORMAT_VIDEOINFOHEADER2
{
    KSDATAFORMAT        DataFormat;
    KS_VIDEOINFOHEADER2 VideoInfoHeader2;
}

struct KS_DATAFORMAT_MPEGVIDEOINFO2
{
    KSDATAFORMAT      DataFormat;
    KS_MPEGVIDEOINFO2 MpegVideoInfoHeader2;
}

struct KS_DATAFORMAT_H264VIDEOINFO
{
    KSDATAFORMAT     DataFormat;
    KS_H264VIDEOINFO H264VideoInfoHeader;
}

struct KS_DATAFORMAT_IMAGEINFO
{
    KSDATAFORMAT        DataFormat;
    KS_BITMAPINFOHEADER ImageInfoHeader;
}

struct KS_DATAFORMAT_VIDEOINFO_PALETTE
{
    KSDATAFORMAT DataFormat;
    KS_VIDEOINFO VideoInfo;
}

struct KS_DATAFORMAT_VBIINFOHEADER
{
    KSDATAFORMAT     DataFormat;
    KS_VBIINFOHEADER VBIInfoHeader;
}

struct KS_VIDEO_STREAM_CONFIG_CAPS
{
    GUID guid;
    uint VideoStandard;
    SIZE InputSize;
    SIZE MinCroppingSize;
    SIZE MaxCroppingSize;
    int  CropGranularityX;
    int  CropGranularityY;
    int  CropAlignX;
    int  CropAlignY;
    SIZE MinOutputSize;
    SIZE MaxOutputSize;
    int  OutputGranularityX;
    int  OutputGranularityY;
    int  StretchTapsX;
    int  StretchTapsY;
    int  ShrinkTapsX;
    int  ShrinkTapsY;
    long MinFrameInterval;
    long MaxFrameInterval;
    int  MinBitsPerSecond;
    int  MaxBitsPerSecond;
}

struct KS_DATARANGE_VIDEO
{
    KSDATAFORMAT       DataRange;
    BOOL               bFixedSizeSamples;
    BOOL               bTemporalCompression;
    uint               StreamDescriptionFlags;
    uint               MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_VIDEOINFOHEADER VideoInfoHeader;
}

struct KS_DATARANGE_VIDEO2
{
    KSDATAFORMAT        DataRange;
    BOOL                bFixedSizeSamples;
    BOOL                bTemporalCompression;
    uint                StreamDescriptionFlags;
    uint                MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_VIDEOINFOHEADER2 VideoInfoHeader;
}

struct KS_DATARANGE_MPEG1_VIDEO
{
    KSDATAFORMAT      DataRange;
    BOOL              bFixedSizeSamples;
    BOOL              bTemporalCompression;
    uint              StreamDescriptionFlags;
    uint              MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_MPEG1VIDEOINFO VideoInfoHeader;
}

struct KS_DATARANGE_MPEG2_VIDEO
{
    KSDATAFORMAT      DataRange;
    BOOL              bFixedSizeSamples;
    BOOL              bTemporalCompression;
    uint              StreamDescriptionFlags;
    uint              MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_MPEGVIDEOINFO2 VideoInfoHeader;
}

struct KS_DATARANGE_H264_VIDEO
{
    KSDATAFORMAT     DataRange;
    BOOL             bFixedSizeSamples;
    BOOL             bTemporalCompression;
    uint             StreamDescriptionFlags;
    uint             MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_H264VIDEOINFO VideoInfoHeader;
}

struct KS_DATARANGE_IMAGE
{
    KSDATAFORMAT        DataRange;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_BITMAPINFOHEADER ImageInfoHeader;
}

struct KS_DATARANGE_VIDEO_PALETTE
{
    KSDATAFORMAT DataRange;
    BOOL         bFixedSizeSamples;
    BOOL         bTemporalCompression;
    uint         StreamDescriptionFlags;
    uint         MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_VIDEOINFO VideoInfo;
}

struct KS_DATARANGE_VIDEO_VBI
{
    KSDATAFORMAT     DataRange;
    BOOL             bFixedSizeSamples;
    BOOL             bTemporalCompression;
    uint             StreamDescriptionFlags;
    uint             MemoryAllocationFlags;
    KS_VIDEO_STREAM_CONFIG_CAPS ConfigCaps;
    KS_VBIINFOHEADER VBIInfoHeader;
}

struct KS_DATARANGE_ANALOGVIDEO
{
    KSDATAFORMAT DataRange;
    tagKS_AnalogVideoInfo AnalogVideoInfo;
}

struct VBICAP_PROPERTIES_PROTECTION_S
{
    KSIDENTIFIER Property;
    uint         StreamIndex;
    uint         Status;
}

struct NABTSFEC_BUFFER
{
    uint       dataSize;
    ushort     groupID;
    ushort     Reserved;
    ubyte[448] data;
}

struct VBICODECFILTERING_SCANLINES
{
    uint[32] DwordBitArray;
}

struct VBICODECFILTERING_NABTS_SUBSTREAMS
{
    uint[128] SubstreamMask;
}

struct VBICODECFILTERING_CC_SUBSTREAMS
{
    uint SubstreamMask;
}

struct CC_BYTE_PAIR
{
    ubyte[2] Decoded;
    ushort   Reserved;
}

struct CC_HW_FIELD
{
    VBICODECFILTERING_SCANLINES ScanlinesRequested;
    uint             fieldFlags;
    long             PictureNumber;
    CC_BYTE_PAIR[12] Lines;
}

struct NABTS_BUFFER_LINE
{
    ubyte     Confidence;
    ubyte[36] Bytes;
}

struct NABTS_BUFFER
{
align (1):
    VBICODECFILTERING_SCANLINES ScanlinesRequested;
    long PictureNumber;
    NABTS_BUFFER_LINE[11] NabtsLines;
}

struct WST_BUFFER_LINE
{
    ubyte     Confidence;
    ubyte[42] Bytes;
}

struct WST_BUFFER
{
    VBICODECFILTERING_SCANLINES ScanlinesRequested;
    WST_BUFFER_LINE[17] WstLines;
}

struct VBICODECFILTERING_STATISTICS_COMMON
{
    uint InputSRBsProcessed;
    uint OutputSRBsProcessed;
    uint SRBsIgnored;
    uint InputSRBsMissing;
    uint OutputSRBsMissing;
    uint OutputFailures;
    uint InternalErrors;
    uint ExternalErrors;
    uint InputDiscontinuities;
    uint DSPFailures;
    uint TvTunerChanges;
    uint VBIHeaderChanges;
    uint LineConfidenceAvg;
    uint BytesOutput;
}

struct VBICODECFILTERING_STATISTICS_COMMON_PIN
{
    uint SRBsProcessed;
    uint SRBsIgnored;
    uint SRBsMissing;
    uint InternalErrors;
    uint ExternalErrors;
    uint Discontinuities;
    uint LineConfidenceAvg;
    uint BytesOutput;
}

struct VBICODECFILTERING_STATISTICS_NABTS
{
    VBICODECFILTERING_STATISTICS_COMMON Common;
    uint FECBundleBadLines;
    uint FECQueueOverflows;
    uint FECCorrectedLines;
    uint FECUncorrectableLines;
    uint BundlesProcessed;
    uint BundlesSent2IP;
    uint FilteredLines;
}

struct VBICODECFILTERING_STATISTICS_NABTS_PIN
{
    VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
}

struct VBICODECFILTERING_STATISTICS_CC
{
    VBICODECFILTERING_STATISTICS_COMMON Common;
}

struct VBICODECFILTERING_STATISTICS_CC_PIN
{
    VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
}

struct VBICODECFILTERING_STATISTICS_TELETEXT
{
    VBICODECFILTERING_STATISTICS_COMMON Common;
}

struct VBICODECFILTERING_STATISTICS_TELETEXT_PIN
{
    VBICODECFILTERING_STATISTICS_COMMON_PIN Common;
}

struct KSPROPERTY_VBICODECFILTERING_SCANLINES_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_SCANLINES Scanlines;
}

struct KSPROPERTY_VBICODECFILTERING_NABTS_SUBSTREAMS_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_NABTS_SUBSTREAMS Substreams;
}

struct KSPROPERTY_VBICODECFILTERING_CC_SUBSTREAMS_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_CC_SUBSTREAMS Substreams;
}

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_COMMON Statistics;
}

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_COMMON_PIN_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_COMMON_PIN Statistics;
}

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_NABTS Statistics;
}

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_NABTS_PIN_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_NABTS_PIN Statistics;
}

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_CC Statistics;
}

struct KSPROPERTY_VBICODECFILTERING_STATISTICS_CC_PIN_S
{
    KSIDENTIFIER Property;
    VBICODECFILTERING_STATISTICS_CC_PIN Statistics;
}

struct VRAM_SURFACE_INFO
{
    size_t    hSurface;
    long      VramPhysicalAddress;
    uint      cbCaptured;
    uint      dwWidth;
    uint      dwHeight;
    uint      dwLinearSize;
    int       lPitch;
    ulong[16] ullReserved;
}

struct VRAM_SURFACE_INFO_PROPERTY_S
{
    KSIDENTIFIER       Property;
    VRAM_SURFACE_INFO* pVramSurfaceInfo;
}

struct SECURE_BUFFER_INFO
{
    GUID      guidBufferIdentifier;
    uint      cbBufferSize;
    uint      cbCaptured;
    ulong[16] ullReserved;
}

struct KS_FRAME_INFO
{
    uint   ExtendedHeaderSize;
    uint   dwFrameFlags;
    long   PictureNumber;
    long   DropCount;
    HANDLE hDirectDraw;
    HANDLE hSurfaceHandle;
    RECT   DirectDrawRect;
    union
    {
        int  lSurfacePitch;
        uint Reserved1;
    }
    uint   Reserved2;
    union
    {
        struct
        {
            uint Reserved3;
            uint Reserved4;
        }
        ulong FrameCompletionNumber;
    }
}

struct KS_VBI_FRAME_INFO
{
    uint             ExtendedHeaderSize;
    uint             dwFrameFlags;
    long             PictureNumber;
    long             DropCount;
    uint             dwSamplingFrequency;
    KS_TVTUNER_CHANGE_INFO TvTunerChangeInfo;
    KS_VBIINFOHEADER VBIInfoHeader;
}

struct KSPROPERTY_ALLOCATOR_CONTROL_SURFACE_SIZE_S
{
    uint CX;
    uint CY;
}

struct KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_CAPS_S
{
    uint InterleavedCapSupported;
}

struct KSPROPERTY_ALLOCATOR_CONTROL_CAPTURE_INTERLEAVE_S
{
    uint InterleavedCapPossible;
}

struct KSPROPERTY_VIDEOPROCAMP_S
{
    KSIDENTIFIER Property;
    int          Value;
    uint         Flags;
    uint         Capabilities;
}

struct KSPROPERTY_VIDEOPROCAMP_NODE_S
{
    KSP_NODE NodeProperty;
    int      Value;
    uint     Flags;
    uint     Capabilities;
}

struct KSPROPERTY_VIDEOPROCAMP_S2
{
    KSIDENTIFIER Property;
    int          Value1;
    uint         Flags;
    uint         Capabilities;
    int          Value2;
}

struct KSPROPERTY_VIDEOPROCAMP_NODE_S2
{
    KSP_NODE NodeProperty;
    int      Value1;
    uint     Flags;
    uint     Capabilities;
    int      Value2;
}

struct KSPROPERTY_SELECTOR_S
{
    KSIDENTIFIER Property;
    int          Value;
    uint         Flags;
    uint         Capabilities;
}

struct KSPROPERTY_SELECTOR_NODE_S
{
    KSP_NODE NodeProperty;
    int      Value;
    uint     Flags;
    uint     Capabilities;
}

struct KSPROPERTY_TUNER_CAPS_S
{
    KSIDENTIFIER Property;
    uint         ModesSupported;
    KSIDENTIFIER VideoMedium;
    KSIDENTIFIER TVAudioMedium;
    KSIDENTIFIER RadioAudioMedium;
}

struct KSPROPERTY_TUNER_IF_MEDIUM_S
{
    KSIDENTIFIER Property;
    KSIDENTIFIER IFMedium;
}

struct KSPROPERTY_TUNER_MODE_CAPS_S
{
    KSIDENTIFIER Property;
    uint         Mode;
    uint         StandardsSupported;
    uint         MinFrequency;
    uint         MaxFrequency;
    uint         TuningGranularity;
    uint         NumberOfInputs;
    uint         SettlingTime;
    uint         Strategy;
}

struct KSPROPERTY_TUNER_MODE_S
{
    KSIDENTIFIER Property;
    uint         Mode;
}

struct KSPROPERTY_TUNER_FREQUENCY_S
{
    KSIDENTIFIER Property;
    uint         Frequency;
    uint         LastFrequency;
    uint         TuningFlags;
    uint         VideoSubChannel;
    uint         AudioSubChannel;
    uint         Channel;
    uint         Country;
}

struct KSPROPERTY_TUNER_STANDARD_S
{
    KSIDENTIFIER Property;
    uint         Standard;
}

struct KSPROPERTY_TUNER_STANDARD_MODE_S
{
    KSIDENTIFIER Property;
    BOOL         AutoDetect;
}

struct KSPROPERTY_TUNER_INPUT_S
{
    KSIDENTIFIER Property;
    uint         InputIndex;
}

struct KSPROPERTY_TUNER_STATUS_S
{
    KSIDENTIFIER Property;
    uint         CurrentFrequency;
    uint         PLLOffset;
    uint         SignalStrength;
    uint         Busy;
}

struct TUNER_ANALOG_CAPS_S
{
    uint Mode;
    uint StandardsSupported;
    uint MinFrequency;
    uint MaxFrequency;
    uint TuningGranularity;
    uint SettlingTime;
    uint ScanSensingRange;
    uint FineTuneSensingRange;
}

struct KSPROPERTY_TUNER_SCAN_CAPS_S
{
    KSIDENTIFIER Property;
    BOOL         fSupportsHardwareAssistedScanning;
    uint         SupportedBroadcastStandards;
    void*        GUIDBucket;
    uint         lengthofBucket;
}

struct KSPROPERTY_TUNER_NETWORKTYPE_SCAN_CAPS_S
{
    KSIDENTIFIER Property;
    GUID         NetworkType;
    uint         BufferSize;
    void*        NetworkTunerCapabilities;
}

struct KSPROPERTY_TUNER_SCAN_STATUS_S
{
    KSIDENTIFIER Property;
    _TunerDecoderLockType LockStatus;
    uint         CurrentFrequency;
}

struct KSEVENT_TUNER_INITIATE_SCAN_S
{
    KSEVENTDATA EventData;
    uint        StartFrequency;
    uint        EndFrequency;
}

struct KSPROPERTY_VIDEOENCODER_S
{
    KSIDENTIFIER Property;
    int          Value;
    uint         Flags;
    uint         Capabilities;
}

struct KSPROPERTY_VIDEODECODER_CAPS_S
{
    KSIDENTIFIER Property;
    uint         StandardsSupported;
    uint         Capabilities;
    uint         SettlingTime;
    uint         HSyncPerVSync;
}

struct KSPROPERTY_VIDEODECODER_STATUS_S
{
    KSIDENTIFIER Property;
    uint         NumberOfLines;
    uint         SignalLocked;
}

struct KSPROPERTY_VIDEODECODER_STATUS2_S
{
    KSIDENTIFIER Property;
    uint         NumberOfLines;
    uint         SignalLocked;
    uint         ChromaLock;
}

struct KSPROPERTY_VIDEODECODER_S
{
    KSIDENTIFIER Property;
    uint         Value;
}

struct KSPROPERTY_CAMERACONTROL_S_EX
{
    KSIDENTIFIER Property;
    int          Value;
    uint         Flags;
    uint         Capabilities;
    RECT         FocusRect;
}

struct KSPROPERTY_CAMERACONTROL_S
{
    KSIDENTIFIER Property;
    int          Value;
    uint         Flags;
    uint         Capabilities;
}

struct KSPROPERTY_CAMERACONTROL_NODE_S
{
    KSP_NODE NodeProperty;
    int      Value;
    uint     Flags;
    uint     Capabilities;
}

struct KSPROPERTY_CAMERACONTROL_S2
{
    KSIDENTIFIER Property;
    int          Value1;
    uint         Flags;
    uint         Capabilities;
    int          Value2;
}

struct KSPROPERTY_CAMERACONTROL_NODE_S2
{
    KSP_NODE NodeProperty;
    int      Value1;
    uint     Flags;
    uint     Capabilities;
    int      Value2;
}

struct KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH_S
{
    KSIDENTIFIER Property;
    int          lOcularFocalLength;
    int          lObjectiveFocalLengthMin;
    int          lObjectiveFocalLengthMax;
}

struct KSPROPERTY_CAMERACONTROL_NODE_FOCAL_LENGTH_S
{
    KSNODEPROPERTY NodeProperty;
    int            lOcularFocalLength;
    int            lObjectiveFocalLengthMin;
    int            lObjectiveFocalLengthMax;
}

struct KSPROPERTY_CAMERACONTROL_FLASH_S
{
    uint Flash;
    uint Capabilities;
}

struct KSPROPERTY_CAMERACONTROL_VIDEOSTABILIZATION_MODE_S
{
    uint VideoStabilizationMode;
    uint Capabilities;
}

struct KSPROPERTY_CAMERACONTROL_REGION_OF_INTEREST_S
{
    RECT FocusRect;
    BOOL AutoFocusLock;
    BOOL AutoExposureLock;
    BOOL AutoWhitebalanceLock;
    union
    {
        uint Capabilities;
        uint Configuration;
    }
}

struct KSPROPERTY_CAMERACONTROL_IMAGE_PIN_CAPABILITY_S
{
    uint Capabilities;
    uint Reserved0;
}

struct KSCAMERA_EXTENDEDPROP_HEADER
{
    uint  Version;
    uint  PinId;
    uint  Size;
    uint  Result;
    ulong Flags;
    ulong Capability;
}

struct KSCAMERA_EXTENDEDPROP_VALUE
{
    union Value
    {
        double         dbl;
        ulong          ull;
        uint           ul;
        ULARGE_INTEGER ratio;
        int            l;
        long           ll;
    }
}

struct KSCAMERA_MAXVIDEOFPS_FORPHOTORES
{
    uint PhotoResWidth;
    uint PhotoResHeight;
    uint PreviewFPSNum;
    uint PreviewFPSDenom;
    uint CaptureFPSNum;
    uint CaptureFPSDenom;
}

struct KSCAMERA_EXTENDEDPROP_PHOTOMODE
{
    uint RequestedHistoryFrames;
    uint MaxHistoryFrames;
    uint SubMode;
    uint Reserved;
}

struct KSCAMERA_EXTENDEDPROP_VIDEOPROCSETTING
{
    uint  Mode;
    int   Min;
    int   Max;
    int   Step;
    KSCAMERA_EXTENDEDPROP_VALUE VideoProc;
    ulong Reserved;
}

struct KSCAMERA_EXTENDEDPROP_EVCOMPENSATION
{
    uint  Mode;
    int   Min;
    int   Max;
    int   Value;
    ulong Reserved;
}

struct KSCAMERA_EXTENDEDPROP_FIELDOFVIEW
{
    uint NormalizedFocalLengthX;
    uint NormalizedFocalLengthY;
    uint Flag;
    uint Reserved;
}

struct KSCAMERA_EXTENDEDPROP_CAMERAOFFSET
{
    int  PitchAngle;
    int  YawAngle;
    uint Flag;
    uint Reserved;
}

struct KSCAMERA_EXTENDEDPROP_METADATAINFO
{
    int  BufferAlignment;
    uint MaxMetadataBufferSize;
}

struct KSCAMERA_METADATA_ITEMHEADER
{
    uint MetadataId;
    uint Size;
}

struct KSCAMERA_METADATA_PHOTOCONFIRMATION
{
    KSCAMERA_METADATA_ITEMHEADER Header;
    uint PhotoConfirmationIndex;
    uint Reserved;
}

struct KSCAMERA_METADATA_FRAMEILLUMINATION
{
    KSCAMERA_METADATA_ITEMHEADER Header;
    uint Flags;
    uint Reserved;
}

struct KSCAMERA_METADATA_CAPTURESTATS
{
    KSCAMERA_METADATA_ITEMHEADER Header;
    uint  Flags;
    uint  Reserved;
    ulong ExposureTime;
    ulong ExposureCompensationFlags;
    int   ExposureCompensationValue;
    uint  IsoSpeed;
    uint  FocusState;
    uint  LensPosition;
    uint  WhiteBalance;
    uint  Flash;
    uint  FlashPower;
    uint  ZoomFactor;
    ulong SceneMode;
    ulong SensorFramerate;
}

struct KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPSHEADER
{
    uint  Size;
    uint  ConfigCapCount;
    ulong Reserved;
}

struct KSCAMERA_EXTENDEDPROP_ROI_CONFIGCAPS
{
    uint  ControlId;
    uint  MaxNumberOfROIs;
    ulong Capability;
}

struct KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROLHEADER
{
    uint  Size;
    uint  ControlCount;
    ulong Reserved;
}

struct KSCAMERA_EXTENDEDPROP_ROI_ISPCONTROL
{
    uint ControlId;
    uint ROICount;
    uint Result;
    uint Reserved;
}

struct KSCAMERA_EXTENDEDPROP_ROI_INFO
{
    RECT  Region;
    ulong Flags;
    int   Weight;
    int   RegionOfInterestType;
}

struct KSCAMERA_EXTENDEDPROP_ROI_WHITEBALANCE
{
    KSCAMERA_EXTENDEDPROP_ROI_INFO ROIInfo;
    ulong Reserved;
}

struct KSCAMERA_EXTENDEDPROP_ROI_EXPOSURE
{
    KSCAMERA_EXTENDEDPROP_ROI_INFO ROIInfo;
    ulong Reserved;
}

struct KSCAMERA_EXTENDEDPROP_ROI_FOCUS
{
    KSCAMERA_EXTENDEDPROP_ROI_INFO ROIInfo;
    ulong Reserved;
}

struct KSCAMERA_PERFRAMESETTING_CAP_ITEM_HEADER
{
    uint  Size;
    uint  Type;
    ulong Flags;
}

struct KSCAMERA_PERFRAMESETTING_CAP_HEADER
{
    uint  Size;
    uint  ItemCount;
    ulong Flags;
}

struct KSCAMERA_PERFRAMESETTING_CUSTOM_ITEM
{
    uint Size;
    uint Reserved;
    GUID Id;
}

struct KSCAMERA_PERFRAMESETTING_ITEM_HEADER
{
    uint  Size;
    uint  Type;
    ulong Flags;
}

struct KSCAMERA_PERFRAMESETTING_FRAME_HEADER
{
    uint Size;
    uint Id;
    uint ItemCount;
    uint Reserved;
}

struct KSCAMERA_PERFRAMESETTING_HEADER
{
    uint  Size;
    uint  FrameCount;
    GUID  Id;
    ulong Flags;
    uint  LoopCount;
    uint  Reserved;
}

struct KSCAMERA_EXTENDEDPROP_PROFILE
{
    GUID ProfileId;
    uint Index;
    uint Reserved;
}

struct KSCAMERA_PROFILE_MEDIAINFO
{
    struct Resolution
    {
        uint X;
        uint Y;
    }
    struct MaxFrameRate
    {
        uint Numerator;
        uint Denominator;
    }
    ulong Flags;
    uint  Data0;
    uint  Data1;
    uint  Data2;
    uint  Data3;
}

struct KSCAMERA_PROFILE_PININFO
{
    GUID PinCategory;
    union
    {
        struct
        {
            ushort PinIndex;
            ushort ProfileSensorType;
        }
        uint Reserved;
    }
    uint MediaInfoCount;
    KSCAMERA_PROFILE_MEDIAINFO* MediaInfos;
}

struct KSCAMERA_PROFILE_INFO
{
    GUID ProfileId;
    uint Index;
    uint PinCount;
    KSCAMERA_PROFILE_PININFO* Pins;
}

struct KSCAMERA_PROFILE_CONCURRENCYINFO
{
    GUID ReferenceGuid;
    uint Reserved;
    uint ProfileCount;
    KSCAMERA_PROFILE_INFO* Profiles;
}

struct KSDEVICE_PROFILE_INFO
{
    uint Type;
    uint Size;
    union
    {
        struct Camera
        {
            KSCAMERA_PROFILE_INFO Info;
            uint Reserved;
            uint ConcurrencyCount;
            KSCAMERA_PROFILE_CONCURRENCYINFO* Concurrency;
        }
    }
}

struct WNF_KSCAMERA_STREAMSTATE_INFO
{
    uint ProcessId;
    uint SessionId;
    uint StreamState;
    uint Reserved;
}

struct KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_HEADER
{
    uint Size;
    KSPROPERTY_NETWORKCAMERACONTROL_NTPINFO_TYPE Type;
}

struct DEVCAPS
{
    int CanRecord;
    int CanRecordStrobe;
    int HasAudio;
    int HasVideo;
    int UsesFiles;
    int CanSave;
    int DeviceType;
    int TCRead;
    int TCWrite;
    int CTLRead;
    int IndexRead;
    int Preroll;
    int Postroll;
    int SyncAcc;
    int NormRate;
    int CanPreview;
    int CanMonitorSrc;
    int CanTest;
    int VideoIn;
    int AudioIn;
    int Calibrate;
    int SeekType;
    int SimulatedHardware;
}

struct KSPROPERTY_EXTDEVICE_S
{
    KSIDENTIFIER Property;
    union u
    {
        DEVCAPS     Capabilities;
        uint        DevPort;
        uint        PowerState;
        ushort[260] pawchString;
        uint[2]     NodeUniqueID;
    }
}

struct TRANSPORTSTATUS
{
    int Mode;
    int LastError;
    int RecordInhibit;
    int ServoLock;
    int MediaPresent;
    int MediaLength;
    int MediaSize;
    int MediaTrackCount;
    int MediaTrackLength;
    int MediaTrackSide;
    int MediaType;
    int LinkMode;
    int NotifyOn;
}

struct TRANSPORTBASICPARMS
{
    int      TimeFormat;
    int      TimeReference;
    int      Superimpose;
    int      EndStopAction;
    int      RecordFormat;
    int      StepFrames;
    int      SetpField;
    int      Preroll;
    int      RecPreroll;
    int      Postroll;
    int      EditDelay;
    int      PlayTCDelay;
    int      RecTCDelay;
    int      EditField;
    int      FrameServo;
    int      ColorFrameServo;
    int      ServoRef;
    int      WarnGenlock;
    int      SetTracking;
    byte[40] VolumeName;
    int[20]  Ballistic;
    int      Speed;
    int      CounterFormat;
    int      TunerChannel;
    int      TunerNumber;
    int      TimerEvent;
    int      TimerStartDay;
    int      TimerStartTime;
    int      TimerStopDay;
    int      TimerStopTime;
}

struct TRANSPORTVIDEOPARMS
{
    int OutputMode;
    int Input;
}

struct TRANSPORTAUDIOPARMS
{
    int EnableOutput;
    int EnableRecord;
    int EnableSelsync;
    int Input;
    int MonitorSource;
}

struct MEDIUM_INFO
{
    BOOL MediaPresent;
    uint MediaType;
    BOOL RecordInhibit;
}

struct TRANSPORT_STATE
{
    uint Mode;
    uint State;
}

struct KSPROPERTY_EXTXPORT_S
{
    KSIDENTIFIER Property;
    union u
    {
        uint            Capabilities;
        uint            SignalMode;
        uint            LoadMedium;
        MEDIUM_INFO     MediumInfo;
        TRANSPORT_STATE XPrtState;
        struct Timecode
        {
            ubyte frame;
            ubyte second;
            ubyte minute;
            ubyte hour;
        }
        uint            dwTimecode;
        uint            dwAbsTrackNumber;
        struct RawAVC
        {
            uint       PayloadSize;
            ubyte[512] Payload;
        }
    }
}

struct KSPROPERTY_EXTXPORT_NODE_S
{
    KSP_NODE NodeProperty;
    union u
    {
        uint            Capabilities;
        uint            SignalMode;
        uint            LoadMedium;
        MEDIUM_INFO     MediumInfo;
        TRANSPORT_STATE XPrtState;
        struct Timecode
        {
            ubyte frame;
            ubyte second;
            ubyte minute;
            ubyte hour;
        }
        uint            dwTimecode;
        uint            dwAbsTrackNumber;
        struct RawAVC
        {
            uint       PayloadSize;
            ubyte[512] Payload;
        }
    }
}

struct KSPROPERTY_TIMECODE_S
{
    KSIDENTIFIER    Property;
    TIMECODE_SAMPLE TimecodeSamp;
}

struct KSPROPERTY_TIMECODE_NODE_S
{
    KSP_NODE        NodeProperty;
    TIMECODE_SAMPLE TimecodeSamp;
}

struct KSPROPERTY_CROSSBAR_CAPS_S
{
    KSIDENTIFIER Property;
    uint         NumberOfInputs;
    uint         NumberOfOutputs;
}

struct KSPROPERTY_CROSSBAR_PININFO_S
{
    KSIDENTIFIER   Property;
    KSPIN_DATAFLOW Direction;
    uint           Index;
    uint           PinType;
    uint           RelatedPinIndex;
    KSIDENTIFIER   Medium;
}

struct KSPROPERTY_CROSSBAR_ROUTE_S
{
    KSIDENTIFIER Property;
    uint         IndexInputPin;
    uint         IndexOutputPin;
    uint         CanRoute;
}

struct KSPROPERTY_CROSSBAR_ACTIVE_S
{
    KSIDENTIFIER Property;
    uint         IndexInputPin;
    uint         Active;
}

struct KSPROPERTY_TVAUDIO_CAPS_S
{
    KSIDENTIFIER Property;
    uint         Capabilities;
    KSIDENTIFIER InputMedium;
    KSIDENTIFIER OutputMedium;
}

struct KSPROPERTY_TVAUDIO_S
{
    KSIDENTIFIER Property;
    uint         Mode;
}

struct KSPROPERTY_VIDEOCOMPRESSION_GETINFO_S
{
    KSIDENTIFIER Property;
    uint         StreamIndex;
    int          DefaultKeyFrameRate;
    int          DefaultPFrameRate;
    int          DefaultQuality;
    int          NumberOfQualitySettings;
    int          Capabilities;
}

struct KSPROPERTY_VIDEOCOMPRESSION_S
{
    KSIDENTIFIER Property;
    uint         StreamIndex;
    int          Value;
}

struct KSPROPERTY_VIDEOCOMPRESSION_S1
{
    KSIDENTIFIER Property;
    uint         StreamIndex;
    int          Value;
    uint         Flags;
}

struct KSDISPLAYCHANGE
{
    uint      PelsWidth;
    uint      PelsHeight;
    uint      BitsPerPel;
    ushort[1] DeviceID;
}

struct KSPROPERTY_VIDEOCONTROL_CAPS_S
{
    KSIDENTIFIER Property;
    uint         StreamIndex;
    uint         VideoControlCaps;
}

struct KSPROPERTY_VIDEOCONTROL_MODE_S
{
    KSIDENTIFIER Property;
    uint         StreamIndex;
    int          Mode;
}

struct KSPROPERTY_VIDEOCONTROL_ACTUAL_FRAME_RATE_S
{
    KSIDENTIFIER Property;
    uint         StreamIndex;
    uint         RangeIndex;
    SIZE         Dimensions;
    long         CurrentActualFrameRate;
    long         CurrentMaxAvailableFrameRate;
}

struct KSPROPERTY_VIDEOCONTROL_FRAME_RATES_S
{
    KSIDENTIFIER Property;
    uint         StreamIndex;
    uint         RangeIndex;
    SIZE         Dimensions;
}

struct KSPROPERTY_DROPPEDFRAMES_CURRENT_S
{
    KSIDENTIFIER Property;
    long         PictureNumber;
    long         DropCount;
    uint         AverageFrameSize;
}

struct DDVIDEOPORTCONNECT
{
    uint   dwSize;
    uint   dwPortWidth;
    GUID   guidTypeID;
    uint   dwFlags;
    size_t dwReserved1;
}

struct KS_AMVPDIMINFO
{
    uint dwFieldWidth;
    uint dwFieldHeight;
    uint dwVBIWidth;
    uint dwVBIHeight;
    RECT rcValidRegion;
}

struct KS_AMVPDATAINFO
{
    uint           dwSize;
    uint           dwMicrosecondsPerField;
    KS_AMVPDIMINFO amvpDimInfo;
    uint           dwPictAspectRatioX;
    uint           dwPictAspectRatioY;
    BOOL           bEnableDoubleClock;
    BOOL           bEnableVACT;
    BOOL           bDataIsInterlaced;
    int            lHalfLinesOdd;
    BOOL           bFieldPolarityInverted;
    uint           dwNumLinesInVREF;
    int            lHalfLinesEven;
    uint           dwReserved1;
}

struct KS_AMVPSIZE
{
    uint dwWidth;
    uint dwHeight;
}

struct KSVPMAXPIXELRATE
{
    KS_AMVPSIZE Size;
    uint        MaxPixelsPerSecond;
    uint        Reserved;
}

struct KSVPSIZE_PROP
{
    KSIDENTIFIER Property;
    KS_AMVPSIZE  Size;
}

struct KSVPSURFACEPARAMS
{
    uint dwPitch;
    uint dwXOrigin;
    uint dwYOrigin;
}

struct KSGOP_USERDATA
{
    uint    sc;
    uint    reserved1;
    ubyte   cFields;
    byte[3] l21Data;
}

struct KS_AM_SimpleRateChange
{
    long StartTime;
    int  Rate;
}

struct KS_AM_ExactRateChange
{
    long OutputZeroTime;
    int  Rate;
}

struct KSJACK_DESCRIPTION
{
    uint               ChannelMapping;
    uint               Color;
    EPcxConnectionType ConnectionType;
    EPcxGeoLocation    GeoLocation;
    EPcxGenLocation    GenLocation;
    EPxcPortConnection PortConnection;
    BOOL               IsConnected;
}

struct KSJACK_SINK_INFORMATION
{
    KSJACK_SINK_CONNECTIONTYPE ConnType;
    ushort     ManufacturerId;
    ushort     ProductId;
    ushort     AudioLatency;
    BOOL       HDCPCapable;
    BOOL       AICapable;
    ubyte      SinkDescriptionLength;
    ushort[32] SinkDescription;
    LUID       PortId;
}

struct KSJACK_DESCRIPTION2
{
    uint DeviceStateInfo;
    uint JackCapabilities;
}

struct KSAUDIOPOSTURE_PANEL_STATE
{
    AUDIOPOSTURE_PANEL_POWER Power;
    AUDIOPOSTURE_PANEL_ORIENTATION Orientation;
}

struct KSAUDIOPOSTURE_DESCRIPTION
{
    uint CbSize;
    uint MembersListCount;
}

struct KSAUDIOENGINE_DESCRIPTOR
{
    uint nHostPinId;
    uint nOffloadPinId;
    uint nLoopbackPinId;
}

struct KSAUDIOENGINE_BUFFER_SIZE_RANGE
{
    uint MinBufferBytes;
    uint MaxBufferBytes;
}

struct KSAUDIOENGINE_VOLUMELEVEL
{
    int              TargetVolume;
    AUDIO_CURVE_TYPE CurveType;
    ulong            CurveDuration;
}

struct KSATTRIBUTE_AUDIOSIGNALPROCESSING_MODE
{
    KSATTRIBUTE AttributeHeader;
    GUID        SignalProcessingMode;
}

struct KSAUDIOMODULE_DESCRIPTOR
{
    GUID        ClassId;
    uint        InstanceId;
    uint        VersionMajor;
    uint        VersionMinor;
    ushort[128] Name;
}

struct KSAUDIOMODULE_PROPERTY
{
    KSIDENTIFIER Property;
    GUID         ClassId;
    uint         InstanceId;
}

struct KSAUDIOMODULE_NOTIFICATION
{
    union
    {
        struct ProviderId
        {
            GUID DeviceId;
            GUID ClassId;
            uint InstanceId;
            uint Reserved;
        }
        long Alignment;
    }
}

struct AudioClientProperties
{
    uint cbSize;
    BOOL bIsOffload;
    AUDIO_STREAM_CATEGORY eCategory;
    AUDCLNT_STREAMOPTIONS Options;
}

struct AudioClient3ActivationParams
{
    GUID tracingContextId;
}

struct AMBISONICS_PARAMS
{
    uint            u32Size;
    uint            u32Version;
    AMBISONICS_TYPE u32Type;
    AMBISONICS_CHANNEL_ORDERING u32ChannelOrdering;
    AMBISONICS_NORMALIZATION u32Normalization;
    uint            u32Order;
    uint            u32NumChannels;
    uint*           pu32ChannelMap;
}

struct SpatialAudioObjectRenderStreamActivationParams
{
align (1):
    const(WAVEFORMATEX)* ObjectFormat;
    AudioObjectType      StaticObjectTypeMask;
    uint                 MinDynamicObjectCount;
    uint                 MaxDynamicObjectCount;
    AUDIO_STREAM_CATEGORY Category;
    HANDLE               EventHandle;
    ISpatialAudioObjectRenderStreamNotify NotifyObject;
}

struct SpatialAudioClientActivationParams
{
    GUID tracingContextId;
    GUID appId;
    int  majorVersion;
    int  minorVersion1;
    int  minorVersion2;
    int  minorVersion3;
}

struct SpatialAudioHrtfDirectivity
{
align (1):
    SpatialAudioHrtfDirectivityType Type;
    float Scaling;
}

struct SpatialAudioHrtfDirectivityCardioid
{
align (1):
    SpatialAudioHrtfDirectivity directivity;
    float Order;
}

struct SpatialAudioHrtfDirectivityCone
{
align (1):
    SpatialAudioHrtfDirectivity directivity;
    float InnerAngle;
    float OuterAngle;
}

union SpatialAudioHrtfDirectivityUnion
{
    SpatialAudioHrtfDirectivityCone Cone;
    SpatialAudioHrtfDirectivityCardioid Cardiod;
    SpatialAudioHrtfDirectivity Omni;
}

struct SpatialAudioHrtfDistanceDecay
{
align (1):
    SpatialAudioHrtfDistanceDecayType Type;
    float MaxGain;
    float MinGain;
    float UnityGainDistance;
    float CutoffDistance;
}

struct SpatialAudioHrtfActivationParams
{
align (1):
    const(WAVEFORMATEX)* ObjectFormat;
    AudioObjectType      StaticObjectTypeMask;
    uint                 MinDynamicObjectCount;
    uint                 MaxDynamicObjectCount;
    AUDIO_STREAM_CATEGORY Category;
    HANDLE               EventHandle;
    ISpatialAudioObjectRenderStreamNotify NotifyObject;
    SpatialAudioHrtfDistanceDecay* DistanceDecay;
    SpatialAudioHrtfDirectivityUnion* Directivity;
    SpatialAudioHrtfEnvironmentType* Environment;
    float*               Orientation;
}

struct DIRECTX_AUDIO_ACTIVATION_PARAMS
{
    uint cbDirectXAudioActivationParams;
    GUID guidAudioSession;
    uint dwAudioStreamFlags;
}

struct AudioExtensionParams
{
    LPARAM    AddPageParam;
    IMMDevice pEndpoint;
    IMMDevice pPnpInterface;
    IMMDevice pPnpDevnode;
}

struct AUDIO_ENDPOINT_SHARED_CREATE_PARAMS
{
    uint         u32Size;
    uint         u32TSSessionId;
    __MIDL___MIDL_itf_audioengineendpoint_0000_0000_0001 targetEndpointConnectorType;
    WAVEFORMATEX wfxDeviceFormat;
}

struct AUDIO_VOLUME_NOTIFICATION_DATA
{
    GUID     guidEventContext;
    BOOL     bMuted;
    float    fMasterVolume;
    uint     nChannels;
    float[1] afChannelVolumes;
}

struct SpatialAudioMetadataItemsInfo
{
align (1):
    ushort FrameCount;
    ushort ItemCount;
    ushort MaxItemCount;
    uint   MaxValueBufferLength;
}

struct SpatialAudioObjectRenderStreamForMetadataActivationParams
{
align (1):
    const(WAVEFORMATEX)* ObjectFormat;
    AudioObjectType      StaticObjectTypeMask;
    uint                 MinDynamicObjectCount;
    uint                 MaxDynamicObjectCount;
    AUDIO_STREAM_CATEGORY Category;
    HANDLE               EventHandle;
    GUID                 MetadataFormatId;
    ushort               MaxMetadataItemCount;
    const(PROPVARIANT)*  MetadataActivationParams;
    ISpatialAudioObjectRenderStreamNotify NotifyObject;
}

// Functions

@DllImport("WINMM")
uint mciSendCommandA(uint mciId, uint uMsg, size_t dwParam1, size_t dwParam2);

@DllImport("WINMM")
uint mciSendCommandW(uint mciId, uint uMsg, size_t dwParam1, size_t dwParam2);

@DllImport("WINMM")
uint mciSendStringA(const(char)* lpstrCommand, const(char)* lpstrReturnString, uint uReturnLength, 
                    HWND hwndCallback);

@DllImport("WINMM")
uint mciSendStringW(const(wchar)* lpstrCommand, const(wchar)* lpstrReturnString, uint uReturnLength, 
                    HWND hwndCallback);

@DllImport("WINMM")
uint mciGetDeviceIDA(const(char)* pszDevice);

@DllImport("WINMM")
uint mciGetDeviceIDW(const(wchar)* pszDevice);

@DllImport("WINMM")
uint mciGetDeviceIDFromElementIDA(uint dwElementID, const(char)* lpstrType);

@DllImport("WINMM")
uint mciGetDeviceIDFromElementIDW(uint dwElementID, const(wchar)* lpstrType);

@DllImport("WINMM")
BOOL mciGetErrorStringA(uint mcierr, const(char)* pszText, uint cchText);

@DllImport("WINMM")
BOOL mciGetErrorStringW(uint mcierr, const(wchar)* pszText, uint cchText);

@DllImport("WINMM")
BOOL mciSetYieldProc(uint mciId, YIELDPROC fpYieldProc, uint dwYieldData);

@DllImport("WINMM")
ptrdiff_t mciGetCreatorTask(uint mciId);

@DllImport("WINMM")
YIELDPROC mciGetYieldProc(uint mciId, uint* pdwYieldData);

@DllImport("WINMM")
size_t mciGetDriverData(uint wDeviceID);

@DllImport("WINMM")
uint mciLoadCommandResource(HANDLE hInstance, const(wchar)* lpResName, uint wType);

@DllImport("WINMM")
BOOL mciSetDriverData(uint wDeviceID, size_t dwData);

@DllImport("WINMM")
uint mciDriverYield(uint wDeviceID);

@DllImport("WINMM")
BOOL mciDriverNotify(HANDLE hwndCallback, uint wDeviceID, uint uStatus);

@DllImport("WINMM")
BOOL mciFreeCommandResource(uint wTable);

@DllImport("ksuser")
uint KsCreateAllocator(HANDLE ConnectionHandle, KSALLOCATOR_FRAMING* AllocatorFraming, ptrdiff_t* AllocatorHandle);

@DllImport("ksuser")
uint KsCreateClock(HANDLE ConnectionHandle, KSCLOCK_CREATE* ClockCreate, ptrdiff_t* ClockHandle);

@DllImport("ksuser")
uint KsCreatePin(HANDLE FilterHandle, KSPIN_CONNECT* Connect, uint DesiredAccess, ptrdiff_t* ConnectionHandle);

@DllImport("ksuser")
uint KsCreateTopologyNode(HANDLE ParentHandle, KSNODE_CREATE* NodeCreate, uint DesiredAccess, 
                          ptrdiff_t* NodeHandle);

@DllImport("ksuser")
HRESULT KsCreateAllocator2(HANDLE ConnectionHandle, KSALLOCATOR_FRAMING* AllocatorFraming, 
                           ptrdiff_t* AllocatorHandle);

@DllImport("ksuser")
HRESULT KsCreateClock2(HANDLE ConnectionHandle, KSCLOCK_CREATE* ClockCreate, ptrdiff_t* ClockHandle);

@DllImport("ksuser")
HRESULT KsCreatePin2(HANDLE FilterHandle, KSPIN_CONNECT* Connect, uint DesiredAccess, ptrdiff_t* ConnectionHandle);

@DllImport("ksuser")
HRESULT KsCreateTopologyNode2(HANDLE ParentHandle, KSNODE_CREATE* NodeCreate, uint DesiredAccess, 
                              ptrdiff_t* NodeHandle);

@DllImport("MMDevAPI")
HRESULT ActivateAudioInterfaceAsync(const(wchar)* deviceInterfacePath, const(GUID)* riid, 
                                    PROPVARIANT* activationParams, 
                                    IActivateAudioInterfaceCompletionHandler completionHandler, 
                                    IActivateAudioInterfaceAsyncOperation* activationOperation);


// Interfaces

@GUID("00000000-0000-0000-0000-000000000000")
struct GUID_NULL;

@GUID("97E99BA0-BDEA-11CF-A5D6-28DB04C10000")
struct KSPROPTYPESETID_General;

@GUID("1464EDA5-6A8F-11D1-9AA7-00A0C9223196")
struct KSPROPSETID_General;

@GUID("65D003CA-1523-11D2-B27A-00A0C9223196")
struct KSMETHODSETID_StreamIo;

@GUID("EE904F0C-D09B-11D0-ABE9-00A0C9223196")
struct KSPROPSETID_MediaSeeking;

@GUID("720D4AC0-7533-11D0-A5D6-28DB04C10000")
struct KSPROPSETID_Topology;

@GUID("085AFF00-62CE-11CF-A5D6-28DB04C10000")
struct KSCATEGORY_BRIDGE;

@GUID("65E8773D-8F56-11D0-A3B9-00A0C9223196")
struct KSCATEGORY_CAPTURE;

@GUID("E5323777-F976-4F5B-9B55-B94699C46E44")
struct KSCATEGORY_VIDEO_CAMERA;

@GUID("24E552D7-6523-47F7-A647-D3465BF1F5CA")
struct KSCATEGORY_SENSOR_CAMERA;

@GUID("B8238652-B500-41EB-B4F3-4234F7F5AE99")
struct KSCATEGORY_NETWORK_CAMERA;

@GUID("669C7214-0A88-4311-A7F3-4E79820E33BD")
struct KSCATEGORY_SENSOR_GROUP;

@GUID("65E8773E-8F56-11D0-A3B9-00A0C9223196")
struct KSCATEGORY_RENDER;

@GUID("AD809C00-7B88-11D0-A5D6-28DB04C10000")
struct KSCATEGORY_MIXER;

@GUID("0A4252A0-7E70-11D0-A5D6-28DB04C10000")
struct KSCATEGORY_SPLITTER;

@GUID("1E84C900-7E70-11D0-A5D6-28DB04C10000")
struct KSCATEGORY_DATACOMPRESSOR;

@GUID("2721AE20-7E70-11D0-A5D6-28DB04C10000")
struct KSCATEGORY_DATADECOMPRESSOR;

@GUID("2EB07EA0-7E70-11D0-A5D6-28DB04C10000")
struct KSCATEGORY_DATATRANSFORM;

@GUID("D6C02D4B-6833-45B4-971A-05A4B04BAB91")
struct KSMFT_CATEGORY_VIDEO_DECODER;

@GUID("F79EAC7D-E545-4387-BDEE-D647D7BDE42A")
struct KSMFT_CATEGORY_VIDEO_ENCODER;

@GUID("12E17C21-532C-4A6E-8A1C-40825A736397")
struct KSMFT_CATEGORY_VIDEO_EFFECT;

@GUID("059C561E-05AE-4B61-B69D-55B61EE54A7B")
struct KSMFT_CATEGORY_MULTIPLEXER;

@GUID("A8700A7A-939B-44C5-99D7-76226B23B3F1")
struct KSMFT_CATEGORY_DEMULTIPLEXER;

@GUID("9EA73FB4-EF7A-4559-8D5D-719D8F0426C7")
struct KSMFT_CATEGORY_AUDIO_DECODER;

@GUID("91C64BD0-F91E-4D8C-9276-DB248279D975")
struct KSMFT_CATEGORY_AUDIO_ENCODER;

@GUID("11064C48-3648-4ED0-932E-05CE8AC811B7")
struct KSMFT_CATEGORY_AUDIO_EFFECT;

@GUID("302EA3FC-AA5F-47F9-9F7A-C2188BB16302")
struct KSMFT_CATEGORY_VIDEO_PROCESSOR;

@GUID("90175D57-B7EA-4901-AEB3-933A8747756F")
struct KSMFT_CATEGORY_OTHER;

@GUID("CF1DDA2C-9743-11D0-A3EE-00A0C9223196")
struct KSCATEGORY_COMMUNICATIONSTRANSFORM;

@GUID("CF1DDA2D-9743-11D0-A3EE-00A0C9223196")
struct KSCATEGORY_INTERFACETRANSFORM;

@GUID("CF1DDA2E-9743-11D0-A3EE-00A0C9223196")
struct KSCATEGORY_MEDIUMTRANSFORM;

@GUID("760FED5E-9357-11D0-A3CC-00A0C9223196")
struct KSCATEGORY_FILESYSTEM;

@GUID("53172480-4791-11D0-A5D6-28DB04C10000")
struct KSCATEGORY_CLOCK;

@GUID("97EBAACA-95BD-11D0-A3EA-00A0C9223196")
struct KSCATEGORY_PROXY;

@GUID("97EBAACB-95BD-11D0-A3EA-00A0C9223196")
struct KSCATEGORY_QUALITY;

@GUID("7B785570-8C82-11CF-BC0C-00AA00AC74F6")
struct KSTIME_FORMAT_FRAME;

@GUID("7B785571-8C82-11CF-BC0C-00AA00AC74F6")
struct KSTIME_FORMAT_BYTE;

@GUID("7B785572-8C82-11CF-BC0C-00AA00AC74F6")
struct KSTIME_FORMAT_SAMPLE;

@GUID("7B785573-8C82-11CF-BC0C-00AA00AC74F6")
struct KSTIME_FORMAT_FIELD;

@GUID("7B785574-8C82-11CF-BC0C-00AA00AC74F6")
struct KSTIME_FORMAT_MEDIA_TIME;

@GUID("1A8766A0-62CE-11CF-A5D6-28DB04C10000")
struct KSINTERFACESETID_Standard;

@GUID("8C6F932C-E771-11D0-B8FF-00A0C9223196")
struct KSINTERFACESETID_FileIo;

@GUID("4747B320-62CE-11CF-A5D6-28DB04C10000")
struct KSMEDIUMSETID_Standard;

@GUID("8C134960-51AD-11CF-878A-94F801C10000")
struct KSPROPSETID_Pin;

@GUID("DD4F192E-3B78-49AD-A534-2C315B822000")
struct KSEVENTSETID_PinCapsChange;

@GUID("DA168465-3A7C-4858-9D4A-3E8E24701AEF")
struct KSEVENTSETID_VolumeLimit;

@GUID("9B365890-165F-11D0-A195-0020AFD156E4")
struct KSNAME_Filter;

@GUID("146F1A80-4791-11D0-A5D6-28DB04C10000")
struct KSNAME_Pin;

@GUID("53172480-4791-11D0-A5D6-28DB04C10000")
struct KSNAME_Clock;

@GUID("642F5D00-4791-11D0-A5D6-28DB04C10000")
struct KSNAME_Allocator;

@GUID("0621061A-EE75-11D0-B915-00A0C9223196")
struct KSNAME_TopologyNode;

@GUID("E436EB83-524F-11CE-9F53-0020AF0BA770")
struct KSDATAFORMAT_TYPE_STREAM;

@GUID("E436EB8E-524F-11CE-9F53-0020AF0BA770")
struct KSDATAFORMAT_SUBTYPE_NONE;

@GUID("AA797B40-E974-11CF-A5D6-28DB04C10000")
struct KSDATAFORMAT_SPECIFIER_FILENAME;

@GUID("65E8773C-8F56-11D0-A3B9-00A0C9223196")
struct KSDATAFORMAT_SPECIFIER_FILEHANDLE;

@GUID("0F6417D6-C318-11D0-A43F-00A0C9223196")
struct KSDATAFORMAT_SPECIFIER_NONE;

@GUID("D16AD380-AC1A-11CF-A5D6-28DB04C10000")
struct KSPROPSETID_Quality;

@GUID("1D58C920-AC9B-11CF-A5D6-28DB04C10000")
struct KSPROPSETID_Connection;

@GUID("0A3D1C5D-5243-4819-9ED0-AEE8044CEE2B")
struct KSPROPSETID_MemoryTransport;

@GUID("091BB638-603F-11D1-B067-00A0C9062802")
struct KSMEMORY_TYPE_SYSTEM;

@GUID("8CB0FC28-7893-11D1-B069-00A0C9062802")
struct KSMEMORY_TYPE_USER;

@GUID("D833F8F8-7894-11D1-B069-00A0C9062802")
struct KSMEMORY_TYPE_KERNEL_PAGED;

@GUID("4A6D5FC4-7895-11D1-B069-00A0C9062802")
struct KSMEMORY_TYPE_KERNEL_NONPAGED;

@GUID("091BB639-603F-11D1-B067-00A0C9062802")
struct KSMEMORY_TYPE_DEVICE_UNKNOWN;

@GUID("75D95571-073C-11D0-A161-0020AFD156E4")
struct KSEVENTSETID_StreamAllocator;

@GUID("CF6E4341-EC87-11CF-A130-0020AFD156E4")
struct KSMETHODSETID_StreamAllocator;

@GUID("CF6E4342-EC87-11CF-A130-0020AFD156E4")
struct KSPROPSETID_StreamAllocator;

@GUID("1FDD8EE1-9CD3-11D0-82AA-0000F822FE8A")
struct KSPROPSETID_StreamInterface;

@GUID("65AABA60-98AE-11CF-A10D-0020AFD156E4")
struct KSPROPSETID_Stream;

@GUID("BD718A7B-97FC-40C7-88CE-D3FF06F55B16")
struct KSPROPSETID_PinMDLCacheClearProp;

@GUID("DF12A4C0-AC17-11CF-A5D6-28DB04C10000")
struct KSPROPSETID_Clock;

@GUID("364D8E20-62C7-11CF-A5D6-28DB04C10000")
struct KSEVENTSETID_Clock;

@GUID("7F4BCBE0-9EA5-11CF-A5D6-28DB04C10000")
struct KSEVENTSETID_Connection;

@GUID("288296EC-9F94-41B4-A153-AA31AEECB33F")
struct KSEVENTSETID_Device;

@GUID("9F564180-704C-11D0-A5D6-28DB04C10000")
struct KSDEGRADESETID_Standard;

@GUID("05908040-3246-11D0-A5D6-28DB04C10000")
struct KSMEDIUMSETID_MidiBus;

@GUID("A18C15EC-CE43-11D0-ABE7-00A0C9223196")
struct KSMEDIUMSETID_VPBus;

@GUID("3A13EB40-30A7-11D0-A5D6-28DB04C10000")
struct KSINTERFACESETID_Media;

@GUID("8F1275F0-26E9-4264-BA4D-39FFF01D94AA")
struct KSCOMPONENTID_USBAUDIO;

@GUID("DFF21BE0-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_INPUT_UNDEFINED;

@GUID("DFF21BE1-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_MICROPHONE;

@GUID("DFF21BE2-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_DESKTOP_MICROPHONE;

@GUID("DFF21BE3-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_PERSONAL_MICROPHONE;

@GUID("DFF21BE4-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE;

@GUID("DFF21BE5-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_MICROPHONE_ARRAY;

@GUID("DFF21BE6-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_PROCESSING_MICROPHONE_ARRAY;

@GUID("830A44F2-A32D-476B-BE97-42845673B35A")
struct KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR;

@GUID("DFF21CE0-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_OUTPUT_UNDEFINED;

@GUID("DFF21CE1-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_SPEAKER;

@GUID("DFF21CE2-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_HEADPHONES;

@GUID("DFF21CE3-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO;

@GUID("DFF21CE4-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_DESKTOP_SPEAKER;

@GUID("DFF21CE5-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_ROOM_SPEAKER;

@GUID("DFF21CE6-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_COMMUNICATION_SPEAKER;

@GUID("DFF21CE7-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER;

@GUID("DFF21DE0-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_BIDIRECTIONAL_UNDEFINED;

@GUID("DFF21DE1-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_HANDSET;

@GUID("DFF21DE2-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_HEADSET;

@GUID("DFF21DE3-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION;

@GUID("DFF21DE4-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE;

@GUID("DFF21DE5-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE;

@GUID("DFF21EE0-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_TELEPHONY_UNDEFINED;

@GUID("DFF21EE1-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_PHONE_LINE;

@GUID("DFF21EE2-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_TELEPHONE;

@GUID("DFF21EE3-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_DOWN_LINE_PHONE;

@GUID("DFF21FE0-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_EXTERNAL_UNDEFINED;

@GUID("DFF21FE1-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_ANALOG_CONNECTOR;

@GUID("DFF21FE2-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_DIGITAL_AUDIO_INTERFACE;

@GUID("DFF21FE3-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_LINE_CONNECTOR;

@GUID("DFF21FE4-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_LEGACY_AUDIO_CONNECTOR;

@GUID("DFF21FE5-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_SPDIF_INTERFACE;

@GUID("DFF21FE6-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_1394_DA_STREAM;

@GUID("DFF21FE7-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_1394_DV_STREAM_SOUNDTRACK;

@GUID("DFF220E0-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_EMBEDDED_UNDEFINED;

@GUID("DFF220E1-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE;

@GUID("DFF220E2-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_EQUALIZATION_NOISE;

@GUID("DFF220E3-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_CD_PLAYER;

@GUID("DFF220E4-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE;

@GUID("DFF220E5-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE;

@GUID("DFF220E6-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_MINIDISK;

@GUID("DFF220E7-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_ANALOG_TAPE;

@GUID("DFF220E8-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_PHONOGRAPH;

@GUID("DFF220E9-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VCR_AUDIO;

@GUID("DFF220EA-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VIDEO_DISC_AUDIO;

@GUID("DFF220EB-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_DVD_AUDIO;

@GUID("DFF220EC-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_TV_TUNER_AUDIO;

@GUID("DFF220ED-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_SATELLITE_RECEIVER_AUDIO;

@GUID("DFF220EE-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_CABLE_TUNER_AUDIO;

@GUID("DFF220EF-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_DSS_AUDIO;

@GUID("DFF220F0-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_RADIO_RECEIVER;

@GUID("DFF220F1-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_RADIO_TRANSMITTER;

@GUID("DFF220F2-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_MULTITRACK_RECORDER;

@GUID("DFF220F3-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_SYNTHESIZER;

@GUID("D1B9CC2A-F519-417F-91C9-55FA65481001")
struct KSNODETYPE_HDMI_INTERFACE;

@GUID("E47E4031-3EA6-418D-8F9B-B73843CCBA97")
struct KSNODETYPE_DISPLAYPORT_INTERFACE;

@GUID("8F42C0B2-91CE-4BCF-9CCD-0E599037AB35")
struct KSNODETYPE_AUDIO_LOOPBACK;

@GUID("3817E0B8-DF58-4375-B669-C49634331F9D")
struct KSNODETYPE_AUDIO_KEYWORDDETECTOR;

@GUID("265E0C3F-FA39-4DF3-AB04-BE01B91E299A")
struct KSNODETYPE_MIDI_JACK;

@GUID("01C6FE66-6E48-4C65-AC9B-52DB5D656C7E")
struct KSNODETYPE_MIDI_ELEMENT;

@GUID("35CAF6E4-F3B3-4168-BB4B-55E77A461C7E")
struct KSNODETYPE_AUDIO_ENGINE;

@GUID("28E04F87-4DBE-4F8D-8589-025D209DFB4A")
struct KSNODETYPE_SPEAKERS_STATIC_JACK;

@GUID("3A264481-E52C-4B82-8E7A-C8E2F91DC380")
struct PINNAME_SPDIF_OUT;

@GUID("15DC9025-22AD-41B3-8875-F4CEB0299E20")
struct PINNAME_SPDIF_IN;

@GUID("387BFC03-E7EF-4901-86E0-35B7C32B00EF")
struct PINNAME_HDMI_OUT;

@GUID("21FBB329-1A4A-48DA-A076-2318A3C59B26")
struct PINNAME_DISPLAYPORT_OUT;

@GUID("FFBB6E3F-CCFE-4D84-90D9-421418B03A8E")
struct KSNODETYPE_DRM_DESCRAMBLE;

@GUID("686D7CC0-D903-4258-B443-3A3D3580741C")
struct KSNODETYPE_TELEPHONY_BIDI;

@GUID("834A733C-F485-41C0-A62B-513025014E40")
struct KSNODETYPE_FM_RX;

@GUID("6994AD04-93EF-11D0-A3CC-00A0C9223196")
struct KSCATEGORY_AUDIO;

@GUID("6994AD05-93EF-11D0-A3CC-00A0C9223196")
struct KSCATEGORY_VIDEO;

@GUID("EB115FFC-10C8-4964-831D-6DCB02E6F23F")
struct KSCATEGORY_REALTIME;

@GUID("6994AD06-93EF-11D0-A3CC-00A0C9223196")
struct KSCATEGORY_TEXT;

@GUID("67C9CC3C-69C4-11D2-8759-00A0C9223196")
struct KSCATEGORY_NETWORK;

@GUID("DDA54A40-1E4C-11D1-A050-405705C10000")
struct KSCATEGORY_TOPOLOGY;

@GUID("3503EAC4-1F26-11D1-8AB0-00A0C9223196")
struct KSCATEGORY_VIRTUAL;

@GUID("BF963D80-C559-11D0-8A2B-00A0C9255AC1")
struct KSCATEGORY_ACOUSTIC_ECHO_CANCEL;

@GUID("47A4FA20-A251-11D1-A050-0000F8004788")
struct KSCATEGORY_WDMAUD_USE_PIN_NAME;

@GUID("74F3AEA8-9768-11D1-8E07-00A0C95EC22E")
struct KSCATEGORY_ESCALANTE_PLATFORM_DRIVER;

@GUID("73646976-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_TYPE_VIDEO;

@GUID("73647561-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_TYPE_AUDIO;

@GUID("73747874-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_TYPE_TEXT;

@GUID("6DBA3190-67BD-11CF-A0F7-0020AFD156E4")
struct KSDATAFORMAT_SUBTYPE_ANALOG;

@GUID("00000009-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_DRM;

@GUID("00000006-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_ALAW;

@GUID("00000007-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_MULAW;

@GUID("00000002-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_ADPCM;

@GUID("00000050-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_MPEG;

@GUID("AD98D184-AAC3-11D0-A41C-00A0C9223196")
struct KSDATAFORMAT_SPECIFIER_VC_ID;

@GUID("05589F81-C356-11CE-BF01-00AA0055595A")
struct KSDATAFORMAT_SPECIFIER_WAVEFORMATEX;

@GUID("518590A2-A184-11D0-8522-00C04FD9BAF3")
struct KSDATAFORMAT_SPECIFIER_DSOUND;

@GUID("437B3414-D060-11D0-8583-00C04FD9BAF3")
struct KSPROPSETID_DirectSound3DListener;

@GUID("437B3411-D060-11D0-8583-00C04FD9BAF3")
struct KSPROPSETID_DirectSound3DBuffer;

@GUID("B66DECB0-A083-11D0-851E-00C04FD9BAF3")
struct KSPROPSETID_Hrtf3d;

@GUID("6429F090-9FD9-11D0-A75B-00A0C90365E3")
struct KSPROPSETID_Itd3d;

@GUID("4995DAEE-9EE6-11D0-A40E-00A0C9223196")
struct KSDATAFORMAT_SUBTYPE_RIFF;

@GUID("E436EB8B-524F-11CE-9F53-0020AF0BA770")
struct KSDATAFORMAT_SUBTYPE_RIFFWAVE;

@GUID("07BA150E-E2B1-11D0-AC17-00A0C9223196")
struct KSPROPSETID_Bibliographic;

@GUID("45FFAAA1-6E1B-11D0-BCF2-444553540000")
struct KSPROPSETID_TopologyNode;

@GUID("A855A48C-2F78-4729-9051-1968746B9EEF")
struct KSPROPSETID_RtAudio;

@GUID("7FA06C40-B8F6-4C7E-8556-E8C33A12E54D")
struct KSPROPSETID_BtAudio;

@GUID("2F2C8DDD-4198-4FAC-BA29-61BB05B7DE06")
struct KSPROPSETID_DrmAudioStream;

@GUID("113C425E-FD17-4057-B422-ED4074F1AFDF")
struct KSPROPSETID_SoundDetector;

@GUID("FE07E322-450C-4BD5-84CA-A948500EA6AA")
struct KSPROPSETID_SoundDetector2;

@GUID("E9EBE550-D619-4C0A-976B-7062322B3006")
struct KSPROPSETID_InterleavedAudio;

@GUID("69785C9B-FC2D-49D6-AC32-4799F87DE9F6")
struct KSEVENTSETID_SoundDetector;

@GUID("6389D844-BB32-4C4C-A802-F4B4B77AFEAD")
struct KSNOTIFICATIONID_SoundDetector;

@GUID("45FFAAA0-6E1B-11D0-BCF2-444553540000")
struct KSPROPSETID_Audio;

@GUID("B6DF7EB1-D099-489F-A6A0-C0106F0887A7")
struct KSPROPSETID_TelephonyControl;

@GUID("ABF25C7E-0E64-4E32-B190-D0F6D7C53E97")
struct KSPROPSETID_TelephonyTopology;

@GUID("0C46CE8F-DC2D-4204-9DC9-F58963366563")
struct KSPROPSETID_FMRXTopology;

@GUID("947BBA3A-E8EE-4786-90C4-8428185F05BE")
struct KSPROPSETID_FMRXControl;

@GUID("B77F12B4-CEB4-4484-8D5E-52C1E7D8762D")
struct KSEVENTSETID_Telephony;

@GUID("507AE360-C554-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_DAC;

@GUID("4D837FE0-C555-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_ADC;

@GUID("9DB7B9E0-C555-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_SRC;

@GUID("E573ADC0-C555-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_SUPERMIX;

@GUID("2CEAF780-C556-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_MUX;

@GUID("C0EB67D4-E807-11D0-958A-00C04FB925D3")
struct KSNODETYPE_DEMUX;

@GUID("DA441A60-C556-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_SUM;

@GUID("02B223C0-C557-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_MUTE;

@GUID("3A5ACC00-C557-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_VOLUME;

@GUID("7607E580-C557-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_TONE;

@GUID("9D41B4A0-C557-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_EQUALIZER;

@GUID("E88C9BA0-C557-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_AGC;

@GUID("E07F903F-62FD-4E60-8CDD-DEA7236665B5")
struct KSNODETYPE_NOISE_SUPPRESS;

@GUID("144981E0-C558-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_DELAY;

@GUID("41887440-C558-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_LOUDNESS;

@GUID("831C2C80-C558-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_PROLOGIC_DECODER;

@GUID("A9E69800-C558-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_STEREO_WIDE;

@GUID("EF0328E0-C558-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_REVERB;

@GUID("20173F20-C559-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_CHORUS;

@GUID("55515860-C559-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_3D_EFFECTS;

@GUID("19BB3A6A-CE2B-4442-87EC-6727C3CAB477")
struct KSNODETYPE_PARAMETRIC_EQUALIZER;

@GUID("B7EDC5CF-7B63-4EE2-A100-29EE2CB6B2DE")
struct KSNODETYPE_UPDOWN_MIX;

@GUID("08C8A6A8-601F-4AF8-8793-D905FF4CA97D")
struct KSNODETYPE_DYN_RANGE_COMPRESSOR;

@GUID("1C22C56D-9879-4F5B-A389-27996DDC2810")
struct KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL;

@GUID("5AB0882E-7274-4516-877D-4EEE99BA4FD0")
struct KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS;

@GUID("950E55B9-877C-4C67-BE08-E47B5611130A")
struct KSALGORITHMINSTANCE_SYSTEM_AGC;

@GUID("B6F5A0A0-9E61-4F8C-91E3-76CF0F3C471F")
struct KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR;

@GUID("941C7AC0-C559-11D0-8A2B-00A0C9255AC1")
struct KSNODETYPE_DEV_SPECIFIC;

@GUID("8074C5B2-3C66-11D2-B45A-3078302C2030")
struct KSNODETYPE_PROLOGIC_ENCODER;

@GUID("A085651E-5F0D-4B36-A869-D195D6AB4B9E")
struct KSNODETYPE_PEAKMETER;

@GUID("185FEDE0-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_BASS;

@GUID("185FEDE1-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_TREBLE;

@GUID("A2CBE478-AE84-49A1-8B72-4AD09B78ED34")
struct KSAUDFNAME_MIDRANGE;

@GUID("185FEDE2-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_3D_STEREO;

@GUID("185FEDE3-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_MASTER_VOLUME;

@GUID("185FEDE4-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_MASTER_MUTE;

@GUID("185FEDE5-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_WAVE_VOLUME;

@GUID("185FEDE6-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_WAVE_MUTE;

@GUID("185FEDE7-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_MIDI_VOLUME;

@GUID("185FEDE8-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_MIDI_MUTE;

@GUID("185FEDE9-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_CD_VOLUME;

@GUID("185FEDEA-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_CD_MUTE;

@GUID("185FEDEB-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_LINE_VOLUME;

@GUID("185FEDEC-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_LINE_MUTE;

@GUID("185FEDED-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_MIC_VOLUME;

@GUID("185FEDEE-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_MIC_MUTE;

@GUID("185FEDEF-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_RECORDING_SOURCE;

@GUID("185FEDF0-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_PC_SPEAKER_VOLUME;

@GUID("185FEDF1-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_PC_SPEAKER_MUTE;

@GUID("185FEDF2-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_MIDI_IN_VOLUME;

@GUID("185FEDF3-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_CD_IN_VOLUME;

@GUID("185FEDF4-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_LINE_IN_VOLUME;

@GUID("185FEDF5-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_MIC_IN_VOLUME;

@GUID("185FEDF6-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_WAVE_IN_VOLUME;

@GUID("185FEDF7-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_VOLUME_CONTROL;

@GUID("185FEDF8-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_MIDI;

@GUID("185FEDF9-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_LINE_IN;

@GUID("185FEDFA-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_RECORDING_CONTROL;

@GUID("185FEDFB-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_CD_AUDIO;

@GUID("185FEDFC-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_AUX_VOLUME;

@GUID("185FEDFD-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_AUX_MUTE;

@GUID("185FEDFE-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_AUX;

@GUID("185FEDFF-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_PC_SPEAKER;

@GUID("185FEE00-9905-11D1-95A9-00C04FB925D3")
struct KSAUDFNAME_WAVE_OUT_MIX;

@GUID("F9B41DC3-96E2-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_MONO_OUT;

@GUID("00DFF077-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_STEREO_MIX;

@GUID("00DFF078-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_MONO_MIX;

@GUID("1AD247EB-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_MONO_OUT_VOLUME;

@GUID("1AD247EC-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_MONO_OUT_MUTE;

@GUID("1AD247ED-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_STEREO_MIX_VOLUME;

@GUID("22B0EAFD-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_STEREO_MIX_MUTE;

@GUID("22B0EAFE-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_MONO_MIX_VOLUME;

@GUID("2BC31D69-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_MONO_MIX_MUTE;

@GUID("2BC31D6A-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_MICROPHONE_BOOST;

@GUID("2BC31D6B-96E3-11D2-AC4C-00C04F8EFB68")
struct KSAUDFNAME_ALTERNATE_MICROPHONE;

@GUID("63FF5747-991F-11D2-AC4D-00C04F8EFB68")
struct KSAUDFNAME_3D_DEPTH;

@GUID("9F0670B4-991F-11D2-AC4D-00C04F8EFB68")
struct KSAUDFNAME_3D_CENTER;

@GUID("9B46E708-992A-11D2-AC4D-00C04F8EFB68")
struct KSAUDFNAME_VIDEO_VOLUME;

@GUID("9B46E709-992A-11D2-AC4D-00C04F8EFB68")
struct KSAUDFNAME_VIDEO_MUTE;

@GUID("915DAEC4-A434-11D2-AC52-00C04F8EFB68")
struct KSAUDFNAME_VIDEO;

@GUID("57E24340-FC5B-4612-A562-72B11A29DFAE")
struct KSAUDFNAME_PEAKMETER;

@GUID("DCEF31EB-D907-11D0-9583-00C04FB925D3")
struct KSMETHODSETID_Wavetable;

@GUID("924E54B0-630F-11CF-ADA7-08003E30494A")
struct KSPROPSETID_Wave;

@GUID("86C92E60-62E8-11CF-A5D6-28DB04C10000")
struct KSMUSIC_TECHNOLOGY_PORT;

@GUID("0ECF4380-62E9-11CF-A5D6-28DB04C10000")
struct KSMUSIC_TECHNOLOGY_SQSYNTH;

@GUID("252C5C80-62E9-11CF-A5D6-28DB04C10000")
struct KSMUSIC_TECHNOLOGY_FMSYNTH;

@GUID("394EC7C0-62E9-11CF-A5D6-28DB04C10000")
struct KSMUSIC_TECHNOLOGY_WAVETABLE;

@GUID("37407736-3620-11D1-85D3-0000F8754380")
struct KSMUSIC_TECHNOLOGY_SWSYNTH;

@GUID("3FFEAEA0-2BEE-11CF-A5D6-28DB04C10000")
struct KSPROPSETID_Cyclic;

@GUID("E85E9698-FA2F-11D1-95BD-00C04FB925D3")
struct KSEVENTSETID_AudioControlChange;

@GUID("4682B940-C6EF-11D0-96D8-00AA0051E51D")
struct KSEVENTSETID_LoopedStreaming;

@GUID("E725D360-62CC-11CF-A5D6-28DB04C10000")
struct KSDATAFORMAT_TYPE_MUSIC;

@GUID("7364696D-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_TYPE_MIDI;

@GUID("1D262760-E957-11CF-A5D6-28DB04C10000")
struct KSDATAFORMAT_SUBTYPE_MIDI;

@GUID("2CA15FA0-6CFE-11CF-A5D6-28DB04C10000")
struct KSDATAFORMAT_SUBTYPE_MIDI_BUS;

@GUID("4995DAF0-9EE6-11D0-A40E-00A0C9223196")
struct KSDATAFORMAT_SUBTYPE_RIFFMIDI;

@GUID("36523B11-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM;

@GUID("36523B12-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_TYPE_STANDARD_PES_PACKET;

@GUID("36523B13-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER;

@GUID("36523B21-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO;

@GUID("36523B22-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO;

@GUID("36523B23-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO;

@GUID("36523B24-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO;

@GUID("36523B25-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO;

@GUID("36523B31-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO;

@GUID("36523B32-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO;

@GUID("36523B33-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO;

@GUID("36523B34-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO;

@GUID("36523B35-8EE5-11D1-8CA3-0060B057664A")
struct KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO;

@GUID("A0AF4F81-E163-11D0-BAD9-00609744111A")
struct KSDATAFORMAT_SUBTYPE_DSS_VIDEO;

@GUID("A0AF4F82-E163-11D0-BAD9-00609744111A")
struct KSDATAFORMAT_SUBTYPE_DSS_AUDIO;

@GUID("E436EB80-524F-11CE-9F53-0020AF0BA770")
struct KSDATAFORMAT_SUBTYPE_MPEG1Packet;

@GUID("E436EB81-524F-11CE-9F53-0020AF0BA770")
struct KSDATAFORMAT_SUBTYPE_MPEG1Payload;

@GUID("E436EB86-524F-11CE-9F53-0020AF0BA770")
struct KSDATAFORMAT_SUBTYPE_MPEG1Video;

@GUID("05589F82-C356-11CE-BF01-00AA0055595A")
struct KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO;

@GUID("E06D8020-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_TYPE_MPEG2_PES;

@GUID("E06D8022-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_TYPE_MPEG2_PROGRAM;

@GUID("E06D8023-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_TYPE_MPEG2_TRANSPORT;

@GUID("E06D8026-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO;

@GUID("E06D80E3-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO;

@GUID("C8E11B60-0CC9-11D0-BD69-003505C103A9")
struct KSPROPSETID_Mpeg2Vid;

@GUID("E06D802B-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO;

@GUID("E06D80E5-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO;

@GUID("E06D8032-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SUBTYPE_LPCM_AUDIO;

@GUID("E06D80E6-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SPECIFIER_LPCM_AUDIO;

@GUID("E06D802C-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SUBTYPE_AC3_AUDIO;

@GUID("E06D80E4-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SPECIFIER_AC3_AUDIO;

@GUID("BFABE720-6E1F-11D0-BCF2-444553540000")
struct KSPROPSETID_AC3;

@GUID("00000092-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL;

@GUID("00000164-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO;

@GUID("00000008-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_DTS;

@GUID("00000003-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1;

@GUID("00000004-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2;

@GUID("00000005-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3;

@GUID("00000006-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_AAC;

@GUID("00000008-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC;

@GUID("00000009-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO;

@GUID("0000000A-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS;

@GUID("0000010A-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS_ATMOS;

@GUID("0000000B-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD;

@GUID("0000000C-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP;

@GUID("0000010C-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT20;

@GUID("0000030C-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT21;

@GUID("0000000D-0CEA-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IEC61937_DST;

@GUID("00000055-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_MPEGLAYER3;

@GUID("00001610-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_MPEG_HEAAC;

@GUID("00000161-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_WMAUDIO2;

@GUID("00000162-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_WMAUDIO3;

@GUID("00000163-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_WMAUDIO_LOSSLESS;

@GUID("E06D8033-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SUBTYPE_DTS_AUDIO;

@GUID("E06D8034-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SUBTYPE_SDDS_AUDIO;

@GUID("6CA6E020-43BD-11D0-BD6A-003505C103A9")
struct KSPROPSETID_AudioDecoderOut;

@GUID("E06D802D-DB46-11CF-B4D1-00805F6CBBEA")
struct KSDATAFORMAT_SUBTYPE_SUBPICTURE;

@GUID("AC390460-43AF-11D0-BD6A-003505C103A9")
struct KSPROPSETID_DvdSubPic;

@GUID("0E8A0A40-6AEF-11D0-9ED0-00A024CA19B3")
struct KSPROPSETID_CopyProt;

@GUID("A799A800-A46D-11D0-A18C-00A02401DCD4")
struct KSCATEGORY_TVTUNER;

@GUID("A799A801-A46D-11D0-A18C-00A02401DCD4")
struct KSCATEGORY_CROSSBAR;

@GUID("A799A802-A46D-11D0-A18C-00A02401DCD4")
struct KSCATEGORY_TVAUDIO;

@GUID("A799A803-A46D-11D0-A18C-00A02401DCD4")
struct KSCATEGORY_VPMUX;

@GUID("07DAD660-22F1-11D1-A9F4-00C04FBBDE8F")
struct KSCATEGORY_VBICODEC;

@GUID("5A9B6A40-1A22-11D1-BAD9-00609744111A")
struct KSDATAFORMAT_SUBTYPE_VPVideo;

@GUID("5A9B6A41-1A22-11D1-BAD9-00609744111A")
struct KSDATAFORMAT_SUBTYPE_VPVBI;

@GUID("05589F80-C356-11CE-BF01-00AA0055595A")
struct KSDATAFORMAT_SPECIFIER_VIDEOINFO;

@GUID("F72A76A0-EB0A-11D0-ACE4-0000C0CC16BA")
struct KSDATAFORMAT_SPECIFIER_VIDEOINFO2;

@GUID("2017BE05-6629-4248-AAED-7E1A47BC9B9C")
struct KSDATAFORMAT_SPECIFIER_H264_VIDEO;

@GUID("692FA379-D3E8-4651-B5B4-0B94B013EEAF")
struct KSDATAFORMAT_SPECIFIER_JPEG_IMAGE;

@GUID("692FA379-D3E8-4651-B5B4-0B94B013EEAF")
struct KSDATAFORMAT_SPECIFIER_IMAGE;

@GUID("72178C23-E45B-11D5-BC2A-00B0D0F3F4AB")
struct KSDATAFORMAT_TYPE_IMAGE;

@GUID("19E4A5AA-5662-4FC5-A0C0-1758028E1057")
struct KSDATAFORMAT_SUBTYPE_JPEG;

@GUID("00000016-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_IMAGE_RGB32;

@GUID("00000032-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_L8;

@GUID("00000032-0002-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_L8_IR;

@GUID("00000032-8000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_L8_CUSTOM;

@GUID("00000051-0000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_L16;

@GUID("00000051-0002-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_L16_IR;

@GUID("00000050-0004-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_D16;

@GUID("00000051-8000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_L16_CUSTOM;

@GUID("47504A4D-0002-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_MJPG_IR;

@GUID("47504A4D-0004-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_MJPG_DEPTH;

@GUID("47504A4D-8000-0010-8000-00AA00389B71")
struct KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM;

@GUID("0482DDE1-7817-11CF-8A03-00AA006ECB65")
struct KSDATAFORMAT_TYPE_ANALOGVIDEO;

@GUID("0482DDE0-7817-11CF-8A03-00AA006ECB65")
struct KSDATAFORMAT_SPECIFIER_ANALOGVIDEO;

@GUID("0482DEE1-7817-11CF-8A03-00AA006ECB65")
struct KSDATAFORMAT_TYPE_ANALOGAUDIO;

@GUID("F72A76E0-EB0A-11D0-ACE4-0000C0CC16BA")
struct KSDATAFORMAT_SPECIFIER_VBI;

@GUID("F72A76E1-EB0A-11D0-ACE4-0000C0CC16BA")
struct KSDATAFORMAT_TYPE_VBI;

@GUID("CA20D9A0-3E3E-11D1-9BF9-00C04FBBDEBF")
struct KSDATAFORMAT_SUBTYPE_RAW8;

@GUID("33214CC1-011F-11D2-B4B1-00A0D102CFBE")
struct KSDATAFORMAT_SUBTYPE_CC;

@GUID("F72A76E2-EB0A-11D0-ACE4-0000C0CC16BA")
struct KSDATAFORMAT_SUBTYPE_NABTS;

@GUID("F72A76E3-EB0A-11D0-ACE4-0000C0CC16BA")
struct KSDATAFORMAT_SUBTYPE_TELETEXT;

@GUID("F162C607-7B35-496F-AD7F-2DCA3B46B718")
struct KSPROPSETID_VBICAP_PROPERTIES;

@GUID("E757BCA0-39AC-11D1-A9F5-00C04FBBDE8F")
struct KSDATAFORMAT_TYPE_NABTS;

@GUID("E757BCA1-39AC-11D1-A9F5-00C04FBBDE8F")
struct KSDATAFORMAT_SUBTYPE_NABTS_FEC;

@GUID("CAFEB0CA-8715-11D0-BD6A-0035C0EDBABE")
struct KSPROPSETID_VBICodecFiltering;

@GUID("FB6C4281-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_CAPTURE;

@GUID("1AAD8061-012D-11D2-B4B1-00A0D102CFBE")
struct PINNAME_VIDEO_CC_CAPTURE;

@GUID("29703660-498A-11D2-B4B1-00A0D102CFBE")
struct PINNAME_VIDEO_NABTS_CAPTURE;

@GUID("FB6C4282-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_PREVIEW;

@GUID("FB6C4283-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_ANALOGVIDEOIN;

@GUID("FB6C4284-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_VBI;

@GUID("FB6C4285-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_VIDEOPORT;

@GUID("FB6C4286-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_NABTS;

@GUID("FB6C4287-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_EDS;

@GUID("FB6C4288-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_TELETEXT;

@GUID("FB6C4289-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_CC;

@GUID("FB6C428A-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_STILL;

@GUID("38A0CD98-D49B-4CE8-B48A-344667A17830")
struct PINNAME_IMAGE;

@GUID("FB6C428B-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_TIMECODE;

@GUID("FB6C428C-0353-11D1-905F-0000C0CC16BA")
struct PINNAME_VIDEO_VIDEOPORT_VBI;

@GUID("E73FACE3-2880-4902-B799-88D0CD634E0F")
struct KSPROPSETID_VramCapture;

@GUID("AE53FC6E-8D89-4488-9D2E-4D008731C5FD")
struct KS_SECURE_CAMERA_SCENARIO_ID;

@GUID("FF6C4BFA-07A9-4C7B-A237-672F9D68065F")
struct KSPROPSETID_MPEG4_MediaType_Attributes;

@GUID("162AC456-83D7-4239-96DF-C75FFA138BC6")
struct KSEVENTSETID_DynamicFormatChange;

@GUID("53171960-148E-11D2-9979-0000C0CC16BA")
struct PROPSETID_ALLOCATOR_CONTROL;

@GUID("C6E13360-30AC-11D0-A18C-00A0C9118956")
struct PROPSETID_VIDCAP_VIDEOPROCAMP;

@GUID("1ABDAECA-68B6-4F83-9371-B413907C7B9F")
struct PROPSETID_VIDCAP_SELECTOR;

@GUID("6A2E0605-28E4-11D0-A18C-00A0C9118956")
struct PROPSETID_TUNER;

@GUID("6A2E0606-28E4-11D0-A18C-00A0C9118956")
struct EVENTSETID_TUNER;

@GUID("DFF229E1-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VIDEO_STREAMING;

@GUID("DFF229E2-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VIDEO_INPUT_TERMINAL;

@GUID("DFF229E3-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VIDEO_OUTPUT_TERMINAL;

@GUID("DFF229E4-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VIDEO_SELECTOR;

@GUID("DFF229E5-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VIDEO_PROCESSING;

@GUID("DFF229E6-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VIDEO_CAMERA_TERMINAL;

@GUID("DFF229E7-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VIDEO_INPUT_MTT;

@GUID("DFF229E8-F70F-11D0-B917-00A0C9223196")
struct KSNODETYPE_VIDEO_OUTPUT_MTT;

@GUID("6A2E0610-28E4-11D0-A18C-00A0C9118956")
struct PROPSETID_VIDCAP_VIDEOENCODER;

@GUID("C6E13350-30AC-11D0-A18C-00A0C9118956")
struct PROPSETID_VIDCAP_VIDEODECODER;

@GUID("6A2E0621-28E4-11D0-A18C-00A0C9118956")
struct EVENTSETID_VIDEODECODER;

@GUID("22A11754-9701-4088-B33F-6B9CBC52DF5E")
struct KSEVENTSETID_CameraAsyncControl;

@GUID("C6E13370-30AC-11D0-A18C-00A0C9118956")
struct PROPSETID_VIDCAP_CAMERACONTROL;

@GUID("785E8F49-63A2-4144-AB70-FFB278FA26CE")
struct PROPSETID_VIDCAP_CAMERACONTROL_FLASH;

@GUID("43964BD3-7716-404E-8BE1-D299B20E50FD")
struct PROPSETID_VIDCAP_CAMERACONTROL_VIDEO_STABILIZATION;

@GUID("9D12D198-F86C-4FED-B023-5D87653DA793")
struct PROPSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST;

@GUID("2FDFFC5D-C732-4BA6-B5DF-6B4D7FC88B8B")
struct EVENTSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST;

@GUID("9D3D7BBF-5C6D-4138-BB00-584EDD20F7C5")
struct PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY;

@GUID("1CB79112-C0D2-4213-9CA6-CD4FDB927972")
struct KSPROPERTYSETID_ExtendedCameraControl;

@GUID("571C92C9-13A2-47E3-A649-D2A778166384")
struct KSEVENTSETID_ExtendedCameraControl;

@GUID("7899B2E0-6B43-4964-9D2A-A21F4061F576")
struct KSEVENTSETID_CameraEvent;

@GUID("F1F3E261-DEE6-4537-BFF5-EE206DB54AAC")
struct KSPROPERTYSETID_PerFrameSettingControl;

@GUID("B4894D81-62B7-4EEC-8740-80658C4A9D3E")
struct KSCAMERAPROFILE_Legacy;

@GUID("A0E517E8-8F8C-4F6F-9A57-46FC2F647EC0")
struct KSCAMERAPROFILE_VideoRecording;

@GUID("32440725-961B-4CA3-B5B2-854E719D9E1B")
struct KSCAMERAPROFILE_HighQualityPhoto;

@GUID("6B52B017-42C7-4A21-BFE3-23F009149887")
struct KSCAMERAPROFILE_BalancedVideoAndPhoto;

@GUID("C5444A88-E1BF-4597-B2DD-9E1EAD864BB8")
struct KSCAMERAPROFILE_VideoConferencing;

@GUID("02399D9D-4EE8-49BA-BC07-5FF156531413")
struct KSCAMERAPROFILE_PhotoSequence;

@GUID("81361B22-700B-4546-A2D4-C52E907BFC27")
struct KSCAMERAPROFILE_FaceAuth_Mode;

@GUID("566E6113-8C35-48E7-B89F-D23FDC1219DC")
struct KSCAMERAPROFILE_HighFrameRate;

@GUID("4B27C336-4924-4989-B994-FDAF1DC7CD85")
struct KSCAMERAPROFILE_HDRWithWCGVideo;

@GUID("9BF6F1FF-B555-4625-B326-A46DEF318FB7")
struct KSCAMERAPROFILE_HDRWithWCGPhoto;

@GUID("9FF2CB56-E75A-49B1-A928-9985D5946F87")
struct KSCAMERAPROFILE_VariablePhotoSequence;

@GUID("D4F3F4EC-BDFF-4314-B1D4-008E281F74E7")
struct KSCAMERAPROFILE_VideoHDR8;

@GUID("0E780F09-5745-4E3A-BC9F-F226EA43A6EC")
struct KSPROPERTYSETID_NetworkCameraControl;

@GUID("B5730A90-1A2C-11CF-8C23-00AA006B6814")
struct PROPSETID_EXT_DEVICE;

@GUID("A03CD5F0-3045-11CF-8C44-00AA006B6814")
struct PROPSETID_EXT_TRANSPORT;

@GUID("9B496CE1-811B-11CF-8C77-00AA006B6814")
struct PROPSETID_TIMECODE_READER;

@GUID("109C7988-B3CB-11D2-B48E-006097B3391B")
struct KSEVENTSETID_EXTDEV_Command;

@GUID("6A2E0640-28E4-11D0-A18C-00A0C9118956")
struct PROPSETID_VIDCAP_CROSSBAR;

@GUID("6A2E0641-28E4-11D0-A18C-00A0C9118956")
struct EVENTSETID_CROSSBAR;

@GUID("6A2E0650-28E4-11D0-A18C-00A0C9118956")
struct PROPSETID_VIDCAP_TVAUDIO;

@GUID("6A2E0651-28E4-11D0-A18C-00A0C9118956")
struct KSEVENTSETID_VIDCAP_TVAUDIO;

@GUID("C6E13343-30AC-11D0-A18C-00A0C9118956")
struct PROPSETID_VIDCAP_VIDEOCOMPRESSION;

@GUID("E436EB7F-524F-11CE-9F53-0020AF0BA770")
struct KSDATAFORMAT_SUBTYPE_OVERLAY;

@GUID("490EA5CF-7681-11D1-A21C-00A0C9223196")
struct KSPROPSETID_OverlayUpdate;

@GUID("6A2E0670-28E4-11D0-A18C-00A0C9118956")
struct PROPSETID_VIDCAP_VIDEOCONTROL;

@GUID("C6E13344-30AC-11D0-A18C-00A0C9118956")
struct PROPSETID_VIDCAP_DROPPEDFRAMES;

@GUID("BC29A660-30E3-11D0-9E69-00C04FD7C15B")
struct KSPROPSETID_VPConfig;

@GUID("EC529B00-1A1F-11D1-BAD9-00609744111A")
struct KSPROPSETID_VPVBIConfig;

@GUID("B9F8AC3E-0F71-11D2-B72C-00C04FB6BD3D")
struct CLSID_KsIBasicAudioInterfaceHandler;

@GUID("20C5598E-D3C8-11D0-8DFC-00C04FD7C08B")
struct KSEVENTSETID_VPNotify;

@GUID("DB47DE20-F628-11D1-BA41-00A0C90D2B05")
struct KSEVENTSETID_VIDCAPTOSTI;

@GUID("EC529B01-1A1F-11D1-BAD9-00609744111A")
struct KSEVENTSETID_VPVBINotify;

@GUID("670AEA80-3A82-11D0-B79B-00AA003767A7")
struct KSDATAFORMAT_TYPE_AUXLine21Data;

@GUID("6E8D4A22-310C-11D0-B79A-00AA003767A7")
struct KSDATAFORMAT_SUBTYPE_Line21_BytePair;

@GUID("6E8D4A23-310C-11D0-B79A-00AA003767A7")
struct KSDATAFORMAT_SUBTYPE_Line21_GOPPacket;

@GUID("ED0B916A-044D-11D1-AA78-00C04FC31D60")
struct KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK;

@GUID("A503C5C0-1D1D-11D1-AD80-444553540000")
struct KSPROPSETID_TSRateChange;

@GUID("19689BF6-C384-48FD-AD51-90E58C79F70B")
struct KSCATEGORY_ENCODER;

@GUID("7A5DE1D3-01A1-452C-B481-4FA2B96271E8")
struct KSCATEGORY_MULTIPLEXER;

@GUID("49CC4C43-CA83-4AD4-A9AF-F3696AF666DF")
struct ENCAPIPARAM_BITRATE;

@GUID("703F16A9-3D48-44A1-B077-018DFF915D19")
struct ENCAPIPARAM_PEAK_BITRATE;

@GUID("EE5FB25C-C713-40D1-9D58-C0D7241E250F")
struct ENCAPIPARAM_BITRATE_MODE;

@GUID("62B12ACF-F6B0-47D9-9456-96F22C4E0B9D")
struct CODECAPI_CHANGELISTS;

@GUID("7112E8E1-3D03-47EF-8E60-03F1CF537301")
struct CODECAPI_VIDEO_ENCODER;

@GUID("B9D19A3E-F897-429C-BC46-8138B7272B2D")
struct CODECAPI_AUDIO_ENCODER;

@GUID("6C5E6A7C-ACF8-4F55-A999-1A628109051B")
struct CODECAPI_SETALLDEFAULTS;

@GUID("6A577E92-83E1-4113-ADC2-4FCEC32F83A1")
struct CODECAPI_ALLSETTINGS;

@GUID("0581AF97-7693-4DBD-9DCA-3F9EBD6585A1")
struct CODECAPI_SUPPORTSEVENTS;

@GUID("1CB14E83-7D72-4657-83FD-47A2C5B9D13D")
struct CODECAPI_CURRENTCHANGELIST;

@GUID("4509F757-2D46-4637-8E62-CE7DB944F57B")
struct KSPROPSETID_Jack;

@GUID("DB14E8DA-0267-4AAB-8759-BAC88E46B653")
struct KSPROPSETID_AudioPosture;

@GUID("4E73C07F-23CC-4955-A7EA-3DA502496290")
struct KSPROPSETID_AudioBufferDuration;

@GUID("3A2F82DC-886F-4BAA-9EB4-082B9025C536")
struct KSPROPSETID_AudioEngine;

@GUID("4F67B528-30C9-40DE-B2FB-859DDD1F3470")
struct KSPROPSETID_AudioSignalProcessing;

@GUID("E1F89EB5-5F46-419B-967B-FF6770B98401")
struct KSATTRIBUTEID_AUDIOSIGNALPROCESSING_MODE;

@GUID("C18E2F7E-933D-4965-B7D1-1EEF228D2AF3")
struct AUDIO_SIGNALPROCESSINGMODE_DEFAULT;

@GUID("9E90EA20-B493-4FD1-A1A8-7E1361A956CF")
struct AUDIO_SIGNALPROCESSINGMODE_RAW;

@GUID("03B80E5A-EDE8-4B33-A751-6CE34EC4C700")
struct BLUETOOTHLE_MIDI_SERVICE_UUID;

@GUID("7772E5DB-3868-4112-A1A9-F2669D106BF3")
struct BLUETOOTH_MIDI_DATAIO_CHARACTERISTIC;

@GUID("5989FCE8-9CD0-467D-8A6A-5419E31529D4")
struct APO_CLASS_UUID;

@GUID("C166523C-FE0C-4A94-A586-F1A80CFBBF3E")
struct AUDIOENDPOINT_CLASS_UUID;

@GUID("98951333-B9CD-48B1-A0A3-FF40682D73F7")
struct AUDIO_SIGNALPROCESSINGMODE_COMMUNICATIONS;

@GUID("FC1CFC9B-B9D6-4CFA-B5E0-4BB2166878B2")
struct AUDIO_SIGNALPROCESSINGMODE_SPEECH;

@GUID("9CF2A70B-F377-403B-BD6B-360863E0355C")
struct AUDIO_SIGNALPROCESSINGMODE_NOTIFICATION;

@GUID("4780004E-7133-41D8-8C74-660DADD2C0EE")
struct AUDIO_SIGNALPROCESSINGMODE_MEDIA;

@GUID("B26FEB0D-EC94-477C-9494-D1AB8E753F6E")
struct AUDIO_SIGNALPROCESSINGMODE_MOVIE;

@GUID("6F64ADBE-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_ACOUSTIC_ECHO_CANCELLATION;

@GUID("6F64ADBF-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_NOISE_SUPPRESSION;

@GUID("6F64ADC0-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_AUTOMATIC_GAIN_CONTROL;

@GUID("6F64ADC1-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_BEAMFORMING;

@GUID("6F64ADC2-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_CONSTANT_TONE_REMOVAL;

@GUID("6F64ADC3-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_EQUALIZER;

@GUID("6F64ADC4-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_LOUDNESS_EQUALIZER;

@GUID("6F64ADC5-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_BASS_BOOST;

@GUID("6F64ADC6-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_VIRTUAL_SURROUND;

@GUID("6F64ADC7-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_VIRTUAL_HEADPHONES;

@GUID("6F64ADC8-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_SPEAKER_FILL;

@GUID("6F64ADC9-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_ROOM_CORRECTION;

@GUID("6F64ADCA-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_BASS_MANAGEMENT;

@GUID("6F64ADCB-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_ENVIRONMENTAL_EFFECTS;

@GUID("6F64ADCC-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_SPEAKER_PROTECTION;

@GUID("6F64ADCD-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_SPEAKER_COMPENSATION;

@GUID("6F64ADCE-8211-11E2-8C70-2C27D7F001FA")
struct AUDIO_EFFECT_TYPE_DYNAMIC_RANGE_COMPRESSION;

@GUID("C034FDB0-FF75-47C8-AA3C-EE46716B50C6")
struct KSPROPSETID_AudioModule;

@GUID("9C2220F0-D9A6-4D5C-A036-573857FD50D2")
struct KSNOTIFICATIONID_AudioModule;

@GUID("BCDE0395-E52F-467C-8E3D-C4579291692E")
struct MMDeviceEnumerator;

@GUID("9F2F7B66-65AC-4FA6-8AE4-123C78B89313")
struct DEVINTERFACE_AUDIOENDPOINTPLUGIN;

@GUID("1DF639D0-5EC1-47AA-9379-828DC1AA8C59")
struct DeviceTopology;

@GUID("1CB9AD4C-DBFA-4C32-B178-C2F568A703B2")
interface IAudioClient : IUnknown
{
    HRESULT Initialize(AUDCLNT_SHAREMODE ShareMode, uint StreamFlags, long hnsBufferDuration, long hnsPeriodicity, 
                       const(WAVEFORMATEX)* pFormat, GUID* AudioSessionGuid);
    HRESULT GetBufferSize(uint* pNumBufferFrames);
    HRESULT GetStreamLatency(long* phnsLatency);
    HRESULT GetCurrentPadding(uint* pNumPaddingFrames);
    HRESULT IsFormatSupported(AUDCLNT_SHAREMODE ShareMode, const(WAVEFORMATEX)* pFormat, 
                              WAVEFORMATEX** ppClosestMatch);
    HRESULT GetMixFormat(WAVEFORMATEX** ppDeviceFormat);
    HRESULT GetDevicePeriod(long* phnsDefaultDevicePeriod, long* phnsMinimumDevicePeriod);
    HRESULT Start();
    HRESULT Stop();
    HRESULT Reset();
    HRESULT SetEventHandle(HANDLE eventHandle);
    HRESULT GetService(const(GUID)* riid, void** ppv);
}

@GUID("726778CD-F60A-4EDA-82DE-E47610CD78AA")
interface IAudioClient2 : IAudioClient
{
    HRESULT IsOffloadCapable(AUDIO_STREAM_CATEGORY Category, int* pbOffloadCapable);
    HRESULT SetClientProperties(const(AudioClientProperties)* pProperties);
    HRESULT GetBufferSizeLimits(const(WAVEFORMATEX)* pFormat, BOOL bEventDriven, long* phnsMinBufferDuration, 
                                long* phnsMaxBufferDuration);
}

@GUID("7ED4EE07-8E67-4CD4-8C1A-2B7A5987AD42")
interface IAudioClient3 : IAudioClient2
{
    HRESULT GetSharedModeEnginePeriod(const(WAVEFORMATEX)* pFormat, uint* pDefaultPeriodInFrames, 
                                      uint* pFundamentalPeriodInFrames, uint* pMinPeriodInFrames, 
                                      uint* pMaxPeriodInFrames);
    HRESULT GetCurrentSharedModeEnginePeriod(WAVEFORMATEX** ppFormat, uint* pCurrentPeriodInFrames);
    HRESULT InitializeSharedAudioStream(uint StreamFlags, uint PeriodInFrames, const(WAVEFORMATEX)* pFormat, 
                                        GUID* AudioSessionGuid);
}

@GUID("F294ACFC-3146-4483-A7BF-ADDCA7C260E2")
interface IAudioRenderClient : IUnknown
{
    HRESULT GetBuffer(uint NumFramesRequested, ubyte** ppData);
    HRESULT ReleaseBuffer(uint NumFramesWritten, uint dwFlags);
}

@GUID("C8ADBD64-E71E-48A0-A4DE-185C395CD317")
interface IAudioCaptureClient : IUnknown
{
    HRESULT GetBuffer(ubyte** ppData, uint* pNumFramesToRead, uint* pdwFlags, ulong* pu64DevicePosition, 
                      ulong* pu64QPCPosition);
    HRESULT ReleaseBuffer(uint NumFramesRead);
    HRESULT GetNextPacketSize(uint* pNumFramesInNextPacket);
}

@GUID("CD63314F-3FBA-4A1B-812C-EF96358728E7")
interface IAudioClock : IUnknown
{
    HRESULT GetFrequency(ulong* pu64Frequency);
    HRESULT GetPosition(ulong* pu64Position, ulong* pu64QPCPosition);
    HRESULT GetCharacteristics(uint* pdwCharacteristics);
}

@GUID("6F49FF73-6727-49AC-A008-D98CF5E70048")
interface IAudioClock2 : IUnknown
{
    HRESULT GetDevicePosition(ulong* DevicePosition, ulong* QPCPosition);
}

@GUID("F6E4C0A0-46D9-4FB8-BE21-57A3EF2B626C")
interface IAudioClockAdjustment : IUnknown
{
    HRESULT SetSampleRate(float flSampleRate);
}

@GUID("87CE5498-68D6-44E5-9215-6DA47EF883D8")
interface ISimpleAudioVolume : IUnknown
{
    HRESULT SetMasterVolume(float fLevel, GUID* EventContext);
    HRESULT GetMasterVolume(float* pfLevel);
    HRESULT SetMute(const(int) bMute, GUID* EventContext);
    HRESULT GetMute(int* pbMute);
}

@GUID("93014887-242D-4068-8A15-CF5E93B90FE3")
interface IAudioStreamVolume : IUnknown
{
    HRESULT GetChannelCount(uint* pdwCount);
    HRESULT SetChannelVolume(uint dwIndex, const(float) fLevel);
    HRESULT GetChannelVolume(uint dwIndex, float* pfLevel);
    HRESULT SetAllVolumes(uint dwCount, char* pfVolumes);
    HRESULT GetAllVolumes(uint dwCount, char* pfVolumes);
}

@GUID("28724C91-DF35-4856-9F76-D6A26413F3DF")
interface IAudioAmbisonicsControl : IUnknown
{
    HRESULT SetData(char* pAmbisonicsParams, uint cbAmbisonicsParams);
    HRESULT SetHeadTracking(BOOL bEnableHeadTracking);
    HRESULT GetHeadTracking(int* pbEnableHeadTracking);
    HRESULT SetRotation(float X, float Y, float Z, float W);
}

@GUID("1C158861-B533-4B30-B1CF-E853E51C59B8")
interface IChannelAudioVolume : IUnknown
{
    HRESULT GetChannelCount(uint* pdwCount);
    HRESULT SetChannelVolume(uint dwIndex, const(float) fLevel, GUID* EventContext);
    HRESULT GetChannelVolume(uint dwIndex, float* pfLevel);
    HRESULT SetAllVolumes(uint dwCount, char* pfVolumes, GUID* EventContext);
    HRESULT GetAllVolumes(uint dwCount, char* pfVolumes);
}

@GUID("DCDAA858-895A-4A22-A5EB-67BDA506096D")
interface IAudioFormatEnumerator : IUnknown
{
    HRESULT GetCount(uint* count);
    HRESULT GetFormat(uint index, WAVEFORMATEX** format);
}

@GUID("CCE0B8F2-8D4D-4EFB-A8CF-3D6ECF1C30E0")
interface ISpatialAudioObjectBase : IUnknown
{
    HRESULT GetBuffer(ubyte** buffer, uint* bufferLength);
    HRESULT SetEndOfStream(uint frameCount);
    HRESULT IsActive(int* isActive);
    HRESULT GetAudioObjectType(AudioObjectType* audioObjectType);
}

@GUID("DDE28967-521B-46E5-8F00-BD6F2BC8AB1D")
interface ISpatialAudioObject : ISpatialAudioObjectBase
{
    HRESULT SetPosition(float x, float y, float z);
    HRESULT SetVolume(float volume);
}

@GUID("FEAAF403-C1D8-450D-AA05-E0CCEE7502A8")
interface ISpatialAudioObjectRenderStreamBase : IUnknown
{
    HRESULT GetAvailableDynamicObjectCount(uint* value);
    HRESULT GetService(const(GUID)* riid, void** service);
    HRESULT Start();
    HRESULT Stop();
    HRESULT Reset();
    HRESULT BeginUpdatingAudioObjects(uint* availableDynamicObjectCount, uint* frameCountPerBuffer);
    HRESULT EndUpdatingAudioObjects();
}

@GUID("BAB5F473-B423-477B-85F5-B5A332A04153")
interface ISpatialAudioObjectRenderStream : ISpatialAudioObjectRenderStreamBase
{
    HRESULT ActivateSpatialAudioObject(AudioObjectType type, ISpatialAudioObject* audioObject);
}

@GUID("DDDF83E6-68D7-4C70-883F-A1836AFB4A50")
interface ISpatialAudioObjectRenderStreamNotify : IUnknown
{
    HRESULT OnAvailableDynamicObjectCountChange(ISpatialAudioObjectRenderStreamBase sender, 
                                                long hnsComplianceDeadlineTime, 
                                                uint availableDynamicObjectCountChange);
}

@GUID("BBF8E066-AAAA-49BE-9A4D-FD2A858EA27F")
interface ISpatialAudioClient : IUnknown
{
    HRESULT GetStaticObjectPosition(AudioObjectType type, float* x, float* y, float* z);
    HRESULT GetNativeStaticObjectTypeMask(AudioObjectType* mask);
    HRESULT GetMaxDynamicObjectCount(uint* value);
    HRESULT GetSupportedAudioObjectFormatEnumerator(IAudioFormatEnumerator* enumerator);
    HRESULT GetMaxFrameCount(const(WAVEFORMATEX)* objectFormat, uint* frameCountPerBuffer);
    HRESULT IsAudioObjectFormatSupported(const(WAVEFORMATEX)* objectFormat);
    HRESULT IsSpatialAudioStreamAvailable(const(GUID)* streamUuid, const(PROPVARIANT)* auxiliaryInfo);
    HRESULT ActivateSpatialAudioStream(const(PROPVARIANT)* activationParams, const(GUID)* riid, void** stream);
}

@GUID("D7436ADE-1978-4E14-ABA0-555BD8EB83B4")
interface ISpatialAudioObjectForHrtf : ISpatialAudioObjectBase
{
    HRESULT SetPosition(float x, float y, float z);
    HRESULT SetGain(float gain);
    HRESULT SetOrientation(const(float)** orientation);
    HRESULT SetEnvironment(SpatialAudioHrtfEnvironmentType environment);
    HRESULT SetDistanceDecay(SpatialAudioHrtfDistanceDecay* distanceDecay);
    HRESULT SetDirectivity(SpatialAudioHrtfDirectivityUnion* directivity);
}

@GUID("E08DEEF9-5363-406E-9FDC-080EE247BBE0")
interface ISpatialAudioObjectRenderStreamForHrtf : ISpatialAudioObjectRenderStreamBase
{
    HRESULT ActivateSpatialAudioObjectForHrtf(AudioObjectType type, ISpatialAudioObjectForHrtf* audioObject);
}

@GUID("784CFD40-9F89-456E-A1A6-873B006A664E")
interface IAudioEndpointFormatControl : IUnknown
{
    HRESULT ResetToDefault(uint ResetFlags);
}

@GUID("7991EEC9-7E89-4D85-8390-6C703CEC60C0")
interface IMMNotificationClient : IUnknown
{
    HRESULT OnDeviceStateChanged(const(wchar)* pwstrDeviceId, uint dwNewState);
    HRESULT OnDeviceAdded(const(wchar)* pwstrDeviceId);
    HRESULT OnDeviceRemoved(const(wchar)* pwstrDeviceId);
    HRESULT OnDefaultDeviceChanged(EDataFlow flow, ERole role, const(wchar)* pwstrDefaultDeviceId);
    HRESULT OnPropertyValueChanged(const(wchar)* pwstrDeviceId, const(PROPERTYKEY) key);
}

@GUID("D666063F-1587-4E43-81F1-B948E807363F")
interface IMMDevice : IUnknown
{
    HRESULT Activate(const(GUID)* iid, uint dwClsCtx, PROPVARIANT* pActivationParams, void** ppInterface);
    HRESULT OpenPropertyStore(uint stgmAccess, IPropertyStore* ppProperties);
    HRESULT GetId(ushort** ppstrId);
    HRESULT GetState(uint* pdwState);
}

@GUID("0BD7A1BE-7A1A-44DB-8397-CC5392387B5E")
interface IMMDeviceCollection : IUnknown
{
    HRESULT GetCount(uint* pcDevices);
    HRESULT Item(uint nDevice, IMMDevice* ppDevice);
}

@GUID("1BE09788-6894-4089-8586-9A2A6C265AC5")
interface IMMEndpoint : IUnknown
{
    HRESULT GetDataFlow(EDataFlow* pDataFlow);
}

@GUID("A95664D2-9614-4F35-A746-DE8DB63617E6")
interface IMMDeviceEnumerator : IUnknown
{
    HRESULT EnumAudioEndpoints(EDataFlow dataFlow, uint dwStateMask, IMMDeviceCollection* ppDevices);
    HRESULT GetDefaultAudioEndpoint(EDataFlow dataFlow, ERole role, IMMDevice* ppEndpoint);
    HRESULT GetDevice(const(wchar)* pwstrId, IMMDevice* ppDevice);
    HRESULT RegisterEndpointNotificationCallback(IMMNotificationClient pClient);
    HRESULT UnregisterEndpointNotificationCallback(IMMNotificationClient pClient);
}

@GUID("3B0D0EA4-D0A9-4B0E-935B-09516746FAC0")
interface IMMDeviceActivator : IUnknown
{
    HRESULT Activate(const(GUID)* iid, IMMDevice pDevice, PROPVARIANT* pActivationParams, void** ppInterface);
}

@GUID("41D949AB-9862-444A-80F6-C261334DA5EB")
interface IActivateAudioInterfaceCompletionHandler : IUnknown
{
    HRESULT ActivateCompleted(IActivateAudioInterfaceAsyncOperation activateOperation);
}

@GUID("72A22D78-CDE4-431D-B8CC-843A71199B6D")
interface IActivateAudioInterfaceAsyncOperation : IUnknown
{
    HRESULT GetActivateResult(int* activateResult, IUnknown* activatedInterface);
}

@GUID("64F1DD49-71CA-4281-8672-3A9EDDD1D0B6")
interface IAudioEndpointOffloadStreamVolume : IUnknown
{
    HRESULT GetVolumeChannelCount(uint* pu32ChannelCount);
    HRESULT SetChannelVolumes(uint u32ChannelCount, float* pf32Volumes, AUDIO_CURVE_TYPE u32CurveType, 
                              long* pCurveDuration);
    HRESULT GetChannelVolumes(uint u32ChannelCount, float* pf32Volumes);
}

@GUID("DFE21355-5EC2-40E0-8D6B-710AC3C00249")
interface IAudioEndpointOffloadStreamMute : IUnknown
{
    HRESULT SetMute(ubyte bMuted);
    HRESULT GetMute(ubyte* pbMuted);
}

@GUID("E1546DCE-9DD1-418B-9AB2-348CED161C86")
interface IAudioEndpointOffloadStreamMeter : IUnknown
{
    HRESULT GetMeterChannelCount(uint* pu32ChannelCount);
    HRESULT GetMeteringData(uint u32ChannelCount, float* pf32PeakValues);
}

@GUID("F8520DD3-8F9D-4437-9861-62F584C33DD6")
interface IAudioEndpointLastBufferControl : IUnknown
{
    BOOL IsLastBufferControlSupported();
    void ReleaseOutputDataPointerForLastBuffer(const(APO_CONNECTION_PROPERTY)* pConnectionProperty);
}

@GUID("076A6922-D802-4F83-BAF6-409D9CA11BFE")
interface IAudioLfxControl : IUnknown
{
    HRESULT SetLocalEffectsState(BOOL bEnabled);
    HRESULT GetLocalEffectsState(int* pbEnabled);
}

@GUID("EDDCE3E4-F3C1-453A-B461-223563CBD886")
interface IHardwareAudioEngineBase : IUnknown
{
    HRESULT GetAvailableOffloadConnectorCount(const(wchar)* _pwstrDeviceId, uint _uConnectorId, 
                                              uint* _pAvailableConnectorInstanceCount);
    HRESULT GetEngineFormat(IMMDevice pDevice, BOOL _bRequestDeviceFormat, WAVEFORMATEX** _ppwfxFormat);
    HRESULT SetEngineDeviceFormat(IMMDevice pDevice, WAVEFORMATEX* _pwfxFormat);
    HRESULT SetGfxState(IMMDevice pDevice, BOOL _bEnable);
    HRESULT GetGfxState(IMMDevice pDevice, int* _pbEnable);
}

@GUID("C2F8E001-F205-4BC9-99BC-C13B1E048CCB")
interface IPerChannelDbLevel : IUnknown
{
    HRESULT GetChannelCount(uint* pcChannels);
    HRESULT GetLevelRange(uint nChannel, float* pfMinLevelDB, float* pfMaxLevelDB, float* pfStepping);
    HRESULT GetLevel(uint nChannel, float* pfLevelDB);
    HRESULT SetLevel(uint nChannel, float fLevelDB, GUID* pguidEventContext);
    HRESULT SetLevelUniform(float fLevelDB, GUID* pguidEventContext);
    HRESULT SetLevelAllChannels(char* aLevelsDB, uint cChannels, GUID* pguidEventContext);
}

@GUID("7FB7B48F-531D-44A2-BCB3-5AD5A134B3DC")
interface IAudioVolumeLevel : IPerChannelDbLevel
{
}

@GUID("BB11C46F-EC28-493C-B88A-5DB88062CE98")
interface IAudioChannelConfig : IUnknown
{
    HRESULT SetChannelConfig(uint dwConfig, GUID* pguidEventContext);
    HRESULT GetChannelConfig(uint* pdwConfig);
}

@GUID("7D8B1437-DD53-4350-9C1B-1EE2890BD938")
interface IAudioLoudness : IUnknown
{
    HRESULT GetEnabled(int* pbEnabled);
    HRESULT SetEnabled(BOOL bEnable, GUID* pguidEventContext);
}

@GUID("4F03DC02-5E6E-4653-8F72-A030C123D598")
interface IAudioInputSelector : IUnknown
{
    HRESULT GetSelection(uint* pnIdSelected);
    HRESULT SetSelection(uint nIdSelect, GUID* pguidEventContext);
}

@GUID("BB515F69-94A7-429E-8B9C-271B3F11A3AB")
interface IAudioOutputSelector : IUnknown
{
    HRESULT GetSelection(uint* pnIdSelected);
    HRESULT SetSelection(uint nIdSelect, GUID* pguidEventContext);
}

@GUID("DF45AEEA-B74A-4B6B-AFAD-2366B6AA012E")
interface IAudioMute : IUnknown
{
    HRESULT SetMute(BOOL bMuted, GUID* pguidEventContext);
    HRESULT GetMute(int* pbMuted);
}

@GUID("A2B1A1D9-4DB3-425D-A2B2-BD335CB3E2E5")
interface IAudioBass : IPerChannelDbLevel
{
}

@GUID("5E54B6D7-B44B-40D9-9A9E-E691D9CE6EDF")
interface IAudioMidrange : IPerChannelDbLevel
{
}

@GUID("0A717812-694E-4907-B74B-BAFA5CFDCA7B")
interface IAudioTreble : IPerChannelDbLevel
{
}

@GUID("85401FD4-6DE4-4B9D-9869-2D6753A82F3C")
interface IAudioAutoGainControl : IUnknown
{
    HRESULT GetEnabled(int* pbEnabled);
    HRESULT SetEnabled(BOOL bEnable, GUID* pguidEventContext);
}

@GUID("DD79923C-0599-45E0-B8B6-C8DF7DB6E796")
interface IAudioPeakMeter : IUnknown
{
    HRESULT GetChannelCount(uint* pcChannels);
    HRESULT GetLevel(uint nChannel, float* pfLevel);
}

@GUID("3B22BCBF-2586-4AF0-8583-205D391B807C")
interface IDeviceSpecificProperty : IUnknown
{
    HRESULT GetType(ushort* pVType);
    HRESULT GetValue(void* pvValue, uint* pcbValue);
    HRESULT SetValue(void* pvValue, uint cbValue, GUID* pguidEventContext);
    HRESULT Get4BRange(int* plMin, int* plMax, int* plStepping);
}

@GUID("3CB4A69D-BB6F-4D2B-95B7-452D2C155DB5")
interface IKsFormatSupport : IUnknown
{
    HRESULT IsFormatSupported(KSDATAFORMAT* pKsFormat, uint cbFormat, int* pbSupported);
    HRESULT GetDevicePreferredFormat(KSDATAFORMAT** ppKsFormat);
}

@GUID("4509F757-2D46-4637-8E62-CE7DB944F57B")
interface IKsJackDescription : IUnknown
{
    HRESULT GetJackCount(uint* pcJacks);
    HRESULT GetJackDescription(uint nJack, KSJACK_DESCRIPTION* pDescription);
}

@GUID("478F3A9B-E0C9-4827-9228-6F5505FFE76A")
interface IKsJackDescription2 : IUnknown
{
    HRESULT GetJackCount(uint* pcJacks);
    HRESULT GetJackDescription2(uint nJack, KSJACK_DESCRIPTION2* pDescription2);
}

@GUID("D9BD72ED-290F-4581-9FF3-61027A8FE532")
interface IKsJackSinkInformation : IUnknown
{
    HRESULT GetJackSinkInformation(KSJACK_SINK_INFORMATION* pJackSinkInformation);
}

@GUID("C99AF463-D629-4EC4-8C00-E54D68154248")
interface IKsJackContainerId : IUnknown
{
    HRESULT GetJackContainerId(GUID* pJackContainerId);
}

@GUID("6DAA848C-5EB0-45CC-AEA5-998A2CDA1FFB")
interface IPartsList : IUnknown
{
    HRESULT GetCount(uint* pCount);
    HRESULT GetPart(uint nIndex, IPart* ppPart);
}

@GUID("AE2DE0E4-5BCA-4F2D-AA46-5D13F8FDB3A9")
interface IPart : IUnknown
{
    HRESULT GetName(ushort** ppwstrName);
    HRESULT GetLocalId(uint* pnId);
    HRESULT GetGlobalId(ushort** ppwstrGlobalId);
    HRESULT GetPartType(PartType* pPartType);
    HRESULT GetSubType(GUID* pSubType);
    HRESULT GetControlInterfaceCount(uint* pCount);
    HRESULT GetControlInterface(uint nIndex, IControlInterface* ppInterfaceDesc);
    HRESULT EnumPartsIncoming(IPartsList* ppParts);
    HRESULT EnumPartsOutgoing(IPartsList* ppParts);
    HRESULT GetTopologyObject(IDeviceTopology* ppTopology);
    HRESULT Activate(uint dwClsContext, const(GUID)* refiid, void** ppvObject);
    HRESULT RegisterControlChangeCallback(const(GUID)* riid, IControlChangeNotify pNotify);
    HRESULT UnregisterControlChangeCallback(IControlChangeNotify pNotify);
}

@GUID("9C2C4058-23F5-41DE-877A-DF3AF236A09E")
interface IConnector : IUnknown
{
    HRESULT GetType(ConnectorType* pType);
    HRESULT GetDataFlow(DataFlow* pFlow);
    HRESULT ConnectTo(IConnector pConnectTo);
    HRESULT Disconnect();
    HRESULT IsConnected(int* pbConnected);
    HRESULT GetConnectedTo(IConnector* ppConTo);
    HRESULT GetConnectorIdConnectedTo(ushort** ppwstrConnectorId);
    HRESULT GetDeviceIdConnectedTo(ushort** ppwstrDeviceId);
}

@GUID("82149A85-DBA6-4487-86BB-EA8F7FEFCC71")
interface ISubunit : IUnknown
{
}

@GUID("45D37C3F-5140-444A-AE24-400789F3CBF3")
interface IControlInterface : IUnknown
{
    HRESULT GetName(ushort** ppwstrName);
    HRESULT GetIID(GUID* pIID);
}

@GUID("A09513ED-C709-4D21-BD7B-5F34C47F3947")
interface IControlChangeNotify : IUnknown
{
    HRESULT OnNotify(uint dwSenderProcessId, GUID* pguidEventContext);
}

@GUID("2A07407E-6497-4A18-9787-32F79BD0D98F")
interface IDeviceTopology : IUnknown
{
    HRESULT GetConnectorCount(uint* pCount);
    HRESULT GetConnector(uint nIndex, IConnector* ppConnector);
    HRESULT GetSubunitCount(uint* pCount);
    HRESULT GetSubunit(uint nIndex, ISubunit* ppSubunit);
    HRESULT GetPartById(uint nId, IPart* ppPart);
    HRESULT GetDeviceId(ushort** ppwstrDeviceId);
    HRESULT GetSignalPath(IPart pIPartFrom, IPart pIPartTo, BOOL bRejectMixedPaths, IPartsList* ppParts);
}

@GUID("657804FA-D6AD-4496-8A60-352752AF4F89")
interface IAudioEndpointVolumeCallback : IUnknown
{
    HRESULT OnNotify(AUDIO_VOLUME_NOTIFICATION_DATA* pNotify);
}

@GUID("5CDF2C82-841E-4546-9722-0CF74078229A")
interface IAudioEndpointVolume : IUnknown
{
    HRESULT RegisterControlChangeNotify(IAudioEndpointVolumeCallback pNotify);
    HRESULT UnregisterControlChangeNotify(IAudioEndpointVolumeCallback pNotify);
    HRESULT GetChannelCount(uint* pnChannelCount);
    HRESULT SetMasterVolumeLevel(float fLevelDB, GUID* pguidEventContext);
    HRESULT SetMasterVolumeLevelScalar(float fLevel, GUID* pguidEventContext);
    HRESULT GetMasterVolumeLevel(float* pfLevelDB);
    HRESULT GetMasterVolumeLevelScalar(float* pfLevel);
    HRESULT SetChannelVolumeLevel(uint nChannel, float fLevelDB, GUID* pguidEventContext);
    HRESULT SetChannelVolumeLevelScalar(uint nChannel, float fLevel, GUID* pguidEventContext);
    HRESULT GetChannelVolumeLevel(uint nChannel, float* pfLevelDB);
    HRESULT GetChannelVolumeLevelScalar(uint nChannel, float* pfLevel);
    HRESULT SetMute(BOOL bMute, GUID* pguidEventContext);
    HRESULT GetMute(int* pbMute);
    HRESULT GetVolumeStepInfo(uint* pnStep, uint* pnStepCount);
    HRESULT VolumeStepUp(GUID* pguidEventContext);
    HRESULT VolumeStepDown(GUID* pguidEventContext);
    HRESULT QueryHardwareSupport(uint* pdwHardwareSupportMask);
    HRESULT GetVolumeRange(float* pflVolumeMindB, float* pflVolumeMaxdB, float* pflVolumeIncrementdB);
}

@GUID("66E11784-F695-4F28-A505-A7080081A78F")
interface IAudioEndpointVolumeEx : IAudioEndpointVolume
{
    HRESULT GetVolumeRangeChannel(uint iChannel, float* pflVolumeMindB, float* pflVolumeMaxdB, 
                                  float* pflVolumeIncrementdB);
}

@GUID("C02216F6-8C67-4B5B-9D00-D008E73E0064")
interface IAudioMeterInformation : IUnknown
{
    HRESULT GetPeakValue(float* pfPeak);
    HRESULT GetMeteringChannelCount(uint* pnChannelCount);
    HRESULT GetChannelsPeakValues(uint u32ChannelCount, float* afPeakValues);
    HRESULT QueryHardwareSupport(uint* pdwHardwareSupportMask);
}

@GUID("24918ACC-64B3-37C1-8CA9-74A66E9957A8")
interface IAudioSessionEvents : IUnknown
{
    HRESULT OnDisplayNameChanged(const(wchar)* NewDisplayName, GUID* EventContext);
    HRESULT OnIconPathChanged(const(wchar)* NewIconPath, GUID* EventContext);
    HRESULT OnSimpleVolumeChanged(float NewVolume, BOOL NewMute, GUID* EventContext);
    HRESULT OnChannelVolumeChanged(uint ChannelCount, char* NewChannelVolumeArray, uint ChangedChannel, 
                                   GUID* EventContext);
    HRESULT OnGroupingParamChanged(GUID* NewGroupingParam, GUID* EventContext);
    HRESULT OnStateChanged(AudioSessionState NewState);
    HRESULT OnSessionDisconnected(AudioSessionDisconnectReason DisconnectReason);
}

@GUID("F4B1A599-7266-4319-A8CA-E70ACB11E8CD")
interface IAudioSessionControl : IUnknown
{
    HRESULT GetState(AudioSessionState* pRetVal);
    HRESULT GetDisplayName(ushort** pRetVal);
    HRESULT SetDisplayName(const(wchar)* Value, GUID* EventContext);
    HRESULT GetIconPath(ushort** pRetVal);
    HRESULT SetIconPath(const(wchar)* Value, GUID* EventContext);
    HRESULT GetGroupingParam(GUID* pRetVal);
    HRESULT SetGroupingParam(GUID* Override, GUID* EventContext);
    HRESULT RegisterAudioSessionNotification(IAudioSessionEvents NewNotifications);
    HRESULT UnregisterAudioSessionNotification(IAudioSessionEvents NewNotifications);
}

@GUID("BFB7FF88-7239-4FC9-8FA2-07C950BE9C6D")
interface IAudioSessionControl2 : IAudioSessionControl
{
    HRESULT GetSessionIdentifier(ushort** pRetVal);
    HRESULT GetSessionInstanceIdentifier(ushort** pRetVal);
    HRESULT GetProcessId(uint* pRetVal);
    HRESULT IsSystemSoundsSession();
    HRESULT SetDuckingPreference(BOOL optOut);
}

@GUID("BFA971F1-4D5E-40BB-935E-967039BFBEE4")
interface IAudioSessionManager : IUnknown
{
    HRESULT GetAudioSessionControl(GUID* AudioSessionGuid, uint StreamFlags, IAudioSessionControl* SessionControl);
    HRESULT GetSimpleAudioVolume(GUID* AudioSessionGuid, uint StreamFlags, ISimpleAudioVolume* AudioVolume);
}

@GUID("C3B284D4-6D39-4359-B3CF-B56DDB3BB39C")
interface IAudioVolumeDuckNotification : IUnknown
{
    HRESULT OnVolumeDuckNotification(const(wchar)* sessionID, uint countCommunicationSessions);
    HRESULT OnVolumeUnduckNotification(const(wchar)* sessionID);
}

@GUID("641DD20B-4D41-49CC-ABA3-174B9477BB08")
interface IAudioSessionNotification : IUnknown
{
    HRESULT OnSessionCreated(IAudioSessionControl NewSession);
}

@GUID("E2F5BB11-0570-40CA-ACDD-3AA01277DEE8")
interface IAudioSessionEnumerator : IUnknown
{
    HRESULT GetCount(int* SessionCount);
    HRESULT GetSession(int SessionCount, IAudioSessionControl* Session);
}

@GUID("77AA99A0-1BD6-484F-8BC7-2C654C9A9B6F")
interface IAudioSessionManager2 : IAudioSessionManager
{
    HRESULT GetSessionEnumerator(IAudioSessionEnumerator* SessionEnum);
    HRESULT RegisterSessionNotification(IAudioSessionNotification SessionNotification);
    HRESULT UnregisterSessionNotification(IAudioSessionNotification SessionNotification);
    HRESULT RegisterDuckNotification(const(wchar)* sessionID, IAudioVolumeDuckNotification duckNotification);
    HRESULT UnregisterDuckNotification(IAudioVolumeDuckNotification duckNotification);
}

@GUID("BCD7C78F-3098-4F22-B547-A2F25A381269")
interface ISpatialAudioMetadataItems : IUnknown
{
    HRESULT GetFrameCount(ushort* frameCount);
    HRESULT GetItemCount(ushort* itemCount);
    HRESULT GetMaxItemCount(ushort* maxItemCount);
    HRESULT GetMaxValueBufferLength(uint* maxValueBufferLength);
    HRESULT GetInfo(SpatialAudioMetadataItemsInfo* info);
}

@GUID("1B17CA01-2955-444D-A430-537DC589A844")
interface ISpatialAudioMetadataWriter : IUnknown
{
    HRESULT Open(ISpatialAudioMetadataItems metadataItems);
    HRESULT WriteNextItem(ushort frameOffset);
    HRESULT WriteNextItemCommand(ubyte commandID, char* valueBuffer, uint valueBufferLength);
    HRESULT Close();
}

@GUID("B78E86A2-31D9-4C32-94D2-7DF40FC7EBEC")
interface ISpatialAudioMetadataReader : IUnknown
{
    HRESULT Open(ISpatialAudioMetadataItems metadataItems);
    HRESULT ReadNextItem(ubyte* commandCount, ushort* frameOffset);
    HRESULT ReadNextItemCommand(ubyte* commandID, char* valueBuffer, uint maxValueBufferLength, 
                                uint* valueBufferLength);
    HRESULT Close();
}

@GUID("D224B233-E251-4FD0-9CA2-D5ECF9A68404")
interface ISpatialAudioMetadataCopier : IUnknown
{
    HRESULT Open(ISpatialAudioMetadataItems metadataItems);
    HRESULT CopyMetadataForFrames(ushort copyFrameCount, SpatialAudioMetadataCopyMode copyMode, 
                                  ISpatialAudioMetadataItems dstMetadataItems, ushort* itemsCopied);
    HRESULT Close();
}

@GUID("42640A16-E1BD-42D9-9FF6-031AB71A2DBA")
interface ISpatialAudioMetadataItemsBuffer : IUnknown
{
    HRESULT AttachToBuffer(char* buffer, uint bufferLength);
    HRESULT AttachToPopulatedBuffer(char* buffer, uint bufferLength);
    HRESULT DetachBuffer();
}

@GUID("777D4A3B-F6FF-4A26-85DC-68D7CDEDA1D4")
interface ISpatialAudioMetadataClient : IUnknown
{
    HRESULT ActivateSpatialAudioMetadataItems(ushort maxItemCount, ushort frameCount, 
                                              ISpatialAudioMetadataItemsBuffer* metadataItemsBuffer, 
                                              ISpatialAudioMetadataItems* metadataItems);
    HRESULT GetSpatialAudioMetadataItemsBufferLength(ushort maxItemCount, uint* bufferLength);
    HRESULT ActivateSpatialAudioMetadataWriter(SpatialAudioMetadataWriterOverflowMode overflowMode, 
                                               ISpatialAudioMetadataWriter* metadataWriter);
    HRESULT ActivateSpatialAudioMetadataCopier(ISpatialAudioMetadataCopier* metadataCopier);
    HRESULT ActivateSpatialAudioMetadataReader(ISpatialAudioMetadataReader* metadataReader);
}

@GUID("0DF2C94B-F5F9-472D-AF6B-C46E0AC9CD05")
interface ISpatialAudioObjectForMetadataCommands : ISpatialAudioObjectBase
{
    HRESULT WriteNextMetadataCommand(ubyte commandID, char* valueBuffer, uint valueBufferLength);
}

@GUID("DDEA49FF-3BC0-4377-8AAD-9FBCFD808566")
interface ISpatialAudioObjectForMetadataItems : ISpatialAudioObjectBase
{
    HRESULT GetSpatialAudioMetadataItems(ISpatialAudioMetadataItems* metadataItems);
}

@GUID("BBC9C907-48D5-4A2E-A0C7-F7F0D67C1FB1")
interface ISpatialAudioObjectRenderStreamForMetadata : ISpatialAudioObjectRenderStreamBase
{
    HRESULT ActivateSpatialAudioObjectForMetadataCommands(AudioObjectType type, 
                                                          ISpatialAudioObjectForMetadataCommands* audioObject);
    HRESULT ActivateSpatialAudioObjectForMetadataItems(AudioObjectType type, 
                                                       ISpatialAudioObjectForMetadataItems* audioObject);
}


// GUIDs

const GUID CLSID_APO_CLASS_UUID                                         = GUIDOF!APO_CLASS_UUID;
const GUID CLSID_AUDIOENDPOINT_CLASS_UUID                               = GUIDOF!AUDIOENDPOINT_CLASS_UUID;
const GUID CLSID_AUDIO_EFFECT_TYPE_ACOUSTIC_ECHO_CANCELLATION           = GUIDOF!AUDIO_EFFECT_TYPE_ACOUSTIC_ECHO_CANCELLATION;
const GUID CLSID_AUDIO_EFFECT_TYPE_AUTOMATIC_GAIN_CONTROL               = GUIDOF!AUDIO_EFFECT_TYPE_AUTOMATIC_GAIN_CONTROL;
const GUID CLSID_AUDIO_EFFECT_TYPE_BASS_BOOST                           = GUIDOF!AUDIO_EFFECT_TYPE_BASS_BOOST;
const GUID CLSID_AUDIO_EFFECT_TYPE_BASS_MANAGEMENT                      = GUIDOF!AUDIO_EFFECT_TYPE_BASS_MANAGEMENT;
const GUID CLSID_AUDIO_EFFECT_TYPE_BEAMFORMING                          = GUIDOF!AUDIO_EFFECT_TYPE_BEAMFORMING;
const GUID CLSID_AUDIO_EFFECT_TYPE_CONSTANT_TONE_REMOVAL                = GUIDOF!AUDIO_EFFECT_TYPE_CONSTANT_TONE_REMOVAL;
const GUID CLSID_AUDIO_EFFECT_TYPE_DYNAMIC_RANGE_COMPRESSION            = GUIDOF!AUDIO_EFFECT_TYPE_DYNAMIC_RANGE_COMPRESSION;
const GUID CLSID_AUDIO_EFFECT_TYPE_ENVIRONMENTAL_EFFECTS                = GUIDOF!AUDIO_EFFECT_TYPE_ENVIRONMENTAL_EFFECTS;
const GUID CLSID_AUDIO_EFFECT_TYPE_EQUALIZER                            = GUIDOF!AUDIO_EFFECT_TYPE_EQUALIZER;
const GUID CLSID_AUDIO_EFFECT_TYPE_LOUDNESS_EQUALIZER                   = GUIDOF!AUDIO_EFFECT_TYPE_LOUDNESS_EQUALIZER;
const GUID CLSID_AUDIO_EFFECT_TYPE_NOISE_SUPPRESSION                    = GUIDOF!AUDIO_EFFECT_TYPE_NOISE_SUPPRESSION;
const GUID CLSID_AUDIO_EFFECT_TYPE_ROOM_CORRECTION                      = GUIDOF!AUDIO_EFFECT_TYPE_ROOM_CORRECTION;
const GUID CLSID_AUDIO_EFFECT_TYPE_SPEAKER_COMPENSATION                 = GUIDOF!AUDIO_EFFECT_TYPE_SPEAKER_COMPENSATION;
const GUID CLSID_AUDIO_EFFECT_TYPE_SPEAKER_FILL                         = GUIDOF!AUDIO_EFFECT_TYPE_SPEAKER_FILL;
const GUID CLSID_AUDIO_EFFECT_TYPE_SPEAKER_PROTECTION                   = GUIDOF!AUDIO_EFFECT_TYPE_SPEAKER_PROTECTION;
const GUID CLSID_AUDIO_EFFECT_TYPE_VIRTUAL_HEADPHONES                   = GUIDOF!AUDIO_EFFECT_TYPE_VIRTUAL_HEADPHONES;
const GUID CLSID_AUDIO_EFFECT_TYPE_VIRTUAL_SURROUND                     = GUIDOF!AUDIO_EFFECT_TYPE_VIRTUAL_SURROUND;
const GUID CLSID_AUDIO_SIGNALPROCESSINGMODE_COMMUNICATIONS              = GUIDOF!AUDIO_SIGNALPROCESSINGMODE_COMMUNICATIONS;
const GUID CLSID_AUDIO_SIGNALPROCESSINGMODE_DEFAULT                     = GUIDOF!AUDIO_SIGNALPROCESSINGMODE_DEFAULT;
const GUID CLSID_AUDIO_SIGNALPROCESSINGMODE_MEDIA                       = GUIDOF!AUDIO_SIGNALPROCESSINGMODE_MEDIA;
const GUID CLSID_AUDIO_SIGNALPROCESSINGMODE_MOVIE                       = GUIDOF!AUDIO_SIGNALPROCESSINGMODE_MOVIE;
const GUID CLSID_AUDIO_SIGNALPROCESSINGMODE_NOTIFICATION                = GUIDOF!AUDIO_SIGNALPROCESSINGMODE_NOTIFICATION;
const GUID CLSID_AUDIO_SIGNALPROCESSINGMODE_RAW                         = GUIDOF!AUDIO_SIGNALPROCESSINGMODE_RAW;
const GUID CLSID_AUDIO_SIGNALPROCESSINGMODE_SPEECH                      = GUIDOF!AUDIO_SIGNALPROCESSINGMODE_SPEECH;
const GUID CLSID_BLUETOOTHLE_MIDI_SERVICE_UUID                          = GUIDOF!BLUETOOTHLE_MIDI_SERVICE_UUID;
const GUID CLSID_BLUETOOTH_MIDI_DATAIO_CHARACTERISTIC                   = GUIDOF!BLUETOOTH_MIDI_DATAIO_CHARACTERISTIC;
const GUID CLSID_CLSID_KsIBasicAudioInterfaceHandler                    = GUIDOF!CLSID_KsIBasicAudioInterfaceHandler;
const GUID CLSID_CODECAPI_ALLSETTINGS                                   = GUIDOF!CODECAPI_ALLSETTINGS;
const GUID CLSID_CODECAPI_AUDIO_ENCODER                                 = GUIDOF!CODECAPI_AUDIO_ENCODER;
const GUID CLSID_CODECAPI_CHANGELISTS                                   = GUIDOF!CODECAPI_CHANGELISTS;
const GUID CLSID_CODECAPI_CURRENTCHANGELIST                             = GUIDOF!CODECAPI_CURRENTCHANGELIST;
const GUID CLSID_CODECAPI_SETALLDEFAULTS                                = GUIDOF!CODECAPI_SETALLDEFAULTS;
const GUID CLSID_CODECAPI_SUPPORTSEVENTS                                = GUIDOF!CODECAPI_SUPPORTSEVENTS;
const GUID CLSID_CODECAPI_VIDEO_ENCODER                                 = GUIDOF!CODECAPI_VIDEO_ENCODER;
const GUID CLSID_DEVINTERFACE_AUDIOENDPOINTPLUGIN                       = GUIDOF!DEVINTERFACE_AUDIOENDPOINTPLUGIN;
const GUID CLSID_DeviceTopology                                         = GUIDOF!DeviceTopology;
const GUID CLSID_ENCAPIPARAM_BITRATE                                    = GUIDOF!ENCAPIPARAM_BITRATE;
const GUID CLSID_ENCAPIPARAM_BITRATE_MODE                               = GUIDOF!ENCAPIPARAM_BITRATE_MODE;
const GUID CLSID_ENCAPIPARAM_PEAK_BITRATE                               = GUIDOF!ENCAPIPARAM_PEAK_BITRATE;
const GUID CLSID_EVENTSETID_CROSSBAR                                    = GUIDOF!EVENTSETID_CROSSBAR;
const GUID CLSID_EVENTSETID_TUNER                                       = GUIDOF!EVENTSETID_TUNER;
const GUID CLSID_EVENTSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST     = GUIDOF!EVENTSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST;
const GUID CLSID_EVENTSETID_VIDEODECODER                                = GUIDOF!EVENTSETID_VIDEODECODER;
const GUID CLSID_GUID_NULL                                              = GUIDOF!GUID_NULL;
const GUID CLSID_KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL        = GUIDOF!KSALGORITHMINSTANCE_SYSTEM_ACOUSTIC_ECHO_CANCEL;
const GUID CLSID_KSALGORITHMINSTANCE_SYSTEM_AGC                         = GUIDOF!KSALGORITHMINSTANCE_SYSTEM_AGC;
const GUID CLSID_KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR  = GUIDOF!KSALGORITHMINSTANCE_SYSTEM_MICROPHONE_ARRAY_PROCESSOR;
const GUID CLSID_KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS              = GUIDOF!KSALGORITHMINSTANCE_SYSTEM_NOISE_SUPPRESS;
const GUID CLSID_KSATTRIBUTEID_AUDIOSIGNALPROCESSING_MODE               = GUIDOF!KSATTRIBUTEID_AUDIOSIGNALPROCESSING_MODE;
const GUID CLSID_KSAUDFNAME_3D_CENTER                                   = GUIDOF!KSAUDFNAME_3D_CENTER;
const GUID CLSID_KSAUDFNAME_3D_DEPTH                                    = GUIDOF!KSAUDFNAME_3D_DEPTH;
const GUID CLSID_KSAUDFNAME_3D_STEREO                                   = GUIDOF!KSAUDFNAME_3D_STEREO;
const GUID CLSID_KSAUDFNAME_ALTERNATE_MICROPHONE                        = GUIDOF!KSAUDFNAME_ALTERNATE_MICROPHONE;
const GUID CLSID_KSAUDFNAME_AUX                                         = GUIDOF!KSAUDFNAME_AUX;
const GUID CLSID_KSAUDFNAME_AUX_MUTE                                    = GUIDOF!KSAUDFNAME_AUX_MUTE;
const GUID CLSID_KSAUDFNAME_AUX_VOLUME                                  = GUIDOF!KSAUDFNAME_AUX_VOLUME;
const GUID CLSID_KSAUDFNAME_BASS                                        = GUIDOF!KSAUDFNAME_BASS;
const GUID CLSID_KSAUDFNAME_CD_AUDIO                                    = GUIDOF!KSAUDFNAME_CD_AUDIO;
const GUID CLSID_KSAUDFNAME_CD_IN_VOLUME                                = GUIDOF!KSAUDFNAME_CD_IN_VOLUME;
const GUID CLSID_KSAUDFNAME_CD_MUTE                                     = GUIDOF!KSAUDFNAME_CD_MUTE;
const GUID CLSID_KSAUDFNAME_CD_VOLUME                                   = GUIDOF!KSAUDFNAME_CD_VOLUME;
const GUID CLSID_KSAUDFNAME_LINE_IN                                     = GUIDOF!KSAUDFNAME_LINE_IN;
const GUID CLSID_KSAUDFNAME_LINE_IN_VOLUME                              = GUIDOF!KSAUDFNAME_LINE_IN_VOLUME;
const GUID CLSID_KSAUDFNAME_LINE_MUTE                                   = GUIDOF!KSAUDFNAME_LINE_MUTE;
const GUID CLSID_KSAUDFNAME_LINE_VOLUME                                 = GUIDOF!KSAUDFNAME_LINE_VOLUME;
const GUID CLSID_KSAUDFNAME_MASTER_MUTE                                 = GUIDOF!KSAUDFNAME_MASTER_MUTE;
const GUID CLSID_KSAUDFNAME_MASTER_VOLUME                               = GUIDOF!KSAUDFNAME_MASTER_VOLUME;
const GUID CLSID_KSAUDFNAME_MICROPHONE_BOOST                            = GUIDOF!KSAUDFNAME_MICROPHONE_BOOST;
const GUID CLSID_KSAUDFNAME_MIC_IN_VOLUME                               = GUIDOF!KSAUDFNAME_MIC_IN_VOLUME;
const GUID CLSID_KSAUDFNAME_MIC_MUTE                                    = GUIDOF!KSAUDFNAME_MIC_MUTE;
const GUID CLSID_KSAUDFNAME_MIC_VOLUME                                  = GUIDOF!KSAUDFNAME_MIC_VOLUME;
const GUID CLSID_KSAUDFNAME_MIDI                                        = GUIDOF!KSAUDFNAME_MIDI;
const GUID CLSID_KSAUDFNAME_MIDI_IN_VOLUME                              = GUIDOF!KSAUDFNAME_MIDI_IN_VOLUME;
const GUID CLSID_KSAUDFNAME_MIDI_MUTE                                   = GUIDOF!KSAUDFNAME_MIDI_MUTE;
const GUID CLSID_KSAUDFNAME_MIDI_VOLUME                                 = GUIDOF!KSAUDFNAME_MIDI_VOLUME;
const GUID CLSID_KSAUDFNAME_MIDRANGE                                    = GUIDOF!KSAUDFNAME_MIDRANGE;
const GUID CLSID_KSAUDFNAME_MONO_MIX                                    = GUIDOF!KSAUDFNAME_MONO_MIX;
const GUID CLSID_KSAUDFNAME_MONO_MIX_MUTE                               = GUIDOF!KSAUDFNAME_MONO_MIX_MUTE;
const GUID CLSID_KSAUDFNAME_MONO_MIX_VOLUME                             = GUIDOF!KSAUDFNAME_MONO_MIX_VOLUME;
const GUID CLSID_KSAUDFNAME_MONO_OUT                                    = GUIDOF!KSAUDFNAME_MONO_OUT;
const GUID CLSID_KSAUDFNAME_MONO_OUT_MUTE                               = GUIDOF!KSAUDFNAME_MONO_OUT_MUTE;
const GUID CLSID_KSAUDFNAME_MONO_OUT_VOLUME                             = GUIDOF!KSAUDFNAME_MONO_OUT_VOLUME;
const GUID CLSID_KSAUDFNAME_PC_SPEAKER                                  = GUIDOF!KSAUDFNAME_PC_SPEAKER;
const GUID CLSID_KSAUDFNAME_PC_SPEAKER_MUTE                             = GUIDOF!KSAUDFNAME_PC_SPEAKER_MUTE;
const GUID CLSID_KSAUDFNAME_PC_SPEAKER_VOLUME                           = GUIDOF!KSAUDFNAME_PC_SPEAKER_VOLUME;
const GUID CLSID_KSAUDFNAME_PEAKMETER                                   = GUIDOF!KSAUDFNAME_PEAKMETER;
const GUID CLSID_KSAUDFNAME_RECORDING_CONTROL                           = GUIDOF!KSAUDFNAME_RECORDING_CONTROL;
const GUID CLSID_KSAUDFNAME_RECORDING_SOURCE                            = GUIDOF!KSAUDFNAME_RECORDING_SOURCE;
const GUID CLSID_KSAUDFNAME_STEREO_MIX                                  = GUIDOF!KSAUDFNAME_STEREO_MIX;
const GUID CLSID_KSAUDFNAME_STEREO_MIX_MUTE                             = GUIDOF!KSAUDFNAME_STEREO_MIX_MUTE;
const GUID CLSID_KSAUDFNAME_STEREO_MIX_VOLUME                           = GUIDOF!KSAUDFNAME_STEREO_MIX_VOLUME;
const GUID CLSID_KSAUDFNAME_TREBLE                                      = GUIDOF!KSAUDFNAME_TREBLE;
const GUID CLSID_KSAUDFNAME_VIDEO                                       = GUIDOF!KSAUDFNAME_VIDEO;
const GUID CLSID_KSAUDFNAME_VIDEO_MUTE                                  = GUIDOF!KSAUDFNAME_VIDEO_MUTE;
const GUID CLSID_KSAUDFNAME_VIDEO_VOLUME                                = GUIDOF!KSAUDFNAME_VIDEO_VOLUME;
const GUID CLSID_KSAUDFNAME_VOLUME_CONTROL                              = GUIDOF!KSAUDFNAME_VOLUME_CONTROL;
const GUID CLSID_KSAUDFNAME_WAVE_IN_VOLUME                              = GUIDOF!KSAUDFNAME_WAVE_IN_VOLUME;
const GUID CLSID_KSAUDFNAME_WAVE_MUTE                                   = GUIDOF!KSAUDFNAME_WAVE_MUTE;
const GUID CLSID_KSAUDFNAME_WAVE_OUT_MIX                                = GUIDOF!KSAUDFNAME_WAVE_OUT_MIX;
const GUID CLSID_KSAUDFNAME_WAVE_VOLUME                                 = GUIDOF!KSAUDFNAME_WAVE_VOLUME;
const GUID CLSID_KSCAMERAPROFILE_BalancedVideoAndPhoto                  = GUIDOF!KSCAMERAPROFILE_BalancedVideoAndPhoto;
const GUID CLSID_KSCAMERAPROFILE_FaceAuth_Mode                          = GUIDOF!KSCAMERAPROFILE_FaceAuth_Mode;
const GUID CLSID_KSCAMERAPROFILE_HDRWithWCGPhoto                        = GUIDOF!KSCAMERAPROFILE_HDRWithWCGPhoto;
const GUID CLSID_KSCAMERAPROFILE_HDRWithWCGVideo                        = GUIDOF!KSCAMERAPROFILE_HDRWithWCGVideo;
const GUID CLSID_KSCAMERAPROFILE_HighFrameRate                          = GUIDOF!KSCAMERAPROFILE_HighFrameRate;
const GUID CLSID_KSCAMERAPROFILE_HighQualityPhoto                       = GUIDOF!KSCAMERAPROFILE_HighQualityPhoto;
const GUID CLSID_KSCAMERAPROFILE_Legacy                                 = GUIDOF!KSCAMERAPROFILE_Legacy;
const GUID CLSID_KSCAMERAPROFILE_PhotoSequence                          = GUIDOF!KSCAMERAPROFILE_PhotoSequence;
const GUID CLSID_KSCAMERAPROFILE_VariablePhotoSequence                  = GUIDOF!KSCAMERAPROFILE_VariablePhotoSequence;
const GUID CLSID_KSCAMERAPROFILE_VideoConferencing                      = GUIDOF!KSCAMERAPROFILE_VideoConferencing;
const GUID CLSID_KSCAMERAPROFILE_VideoHDR8                              = GUIDOF!KSCAMERAPROFILE_VideoHDR8;
const GUID CLSID_KSCAMERAPROFILE_VideoRecording                         = GUIDOF!KSCAMERAPROFILE_VideoRecording;
const GUID CLSID_KSCATEGORY_ACOUSTIC_ECHO_CANCEL                        = GUIDOF!KSCATEGORY_ACOUSTIC_ECHO_CANCEL;
const GUID CLSID_KSCATEGORY_AUDIO                                       = GUIDOF!KSCATEGORY_AUDIO;
const GUID CLSID_KSCATEGORY_BRIDGE                                      = GUIDOF!KSCATEGORY_BRIDGE;
const GUID CLSID_KSCATEGORY_CAPTURE                                     = GUIDOF!KSCATEGORY_CAPTURE;
const GUID CLSID_KSCATEGORY_CLOCK                                       = GUIDOF!KSCATEGORY_CLOCK;
const GUID CLSID_KSCATEGORY_COMMUNICATIONSTRANSFORM                     = GUIDOF!KSCATEGORY_COMMUNICATIONSTRANSFORM;
const GUID CLSID_KSCATEGORY_CROSSBAR                                    = GUIDOF!KSCATEGORY_CROSSBAR;
const GUID CLSID_KSCATEGORY_DATACOMPRESSOR                              = GUIDOF!KSCATEGORY_DATACOMPRESSOR;
const GUID CLSID_KSCATEGORY_DATADECOMPRESSOR                            = GUIDOF!KSCATEGORY_DATADECOMPRESSOR;
const GUID CLSID_KSCATEGORY_DATATRANSFORM                               = GUIDOF!KSCATEGORY_DATATRANSFORM;
const GUID CLSID_KSCATEGORY_ENCODER                                     = GUIDOF!KSCATEGORY_ENCODER;
const GUID CLSID_KSCATEGORY_ESCALANTE_PLATFORM_DRIVER                   = GUIDOF!KSCATEGORY_ESCALANTE_PLATFORM_DRIVER;
const GUID CLSID_KSCATEGORY_FILESYSTEM                                  = GUIDOF!KSCATEGORY_FILESYSTEM;
const GUID CLSID_KSCATEGORY_INTERFACETRANSFORM                          = GUIDOF!KSCATEGORY_INTERFACETRANSFORM;
const GUID CLSID_KSCATEGORY_MEDIUMTRANSFORM                             = GUIDOF!KSCATEGORY_MEDIUMTRANSFORM;
const GUID CLSID_KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR                  = GUIDOF!KSCATEGORY_MICROPHONE_ARRAY_PROCESSOR;
const GUID CLSID_KSCATEGORY_MIXER                                       = GUIDOF!KSCATEGORY_MIXER;
const GUID CLSID_KSCATEGORY_MULTIPLEXER                                 = GUIDOF!KSCATEGORY_MULTIPLEXER;
const GUID CLSID_KSCATEGORY_NETWORK                                     = GUIDOF!KSCATEGORY_NETWORK;
const GUID CLSID_KSCATEGORY_NETWORK_CAMERA                              = GUIDOF!KSCATEGORY_NETWORK_CAMERA;
const GUID CLSID_KSCATEGORY_PROXY                                       = GUIDOF!KSCATEGORY_PROXY;
const GUID CLSID_KSCATEGORY_QUALITY                                     = GUIDOF!KSCATEGORY_QUALITY;
const GUID CLSID_KSCATEGORY_REALTIME                                    = GUIDOF!KSCATEGORY_REALTIME;
const GUID CLSID_KSCATEGORY_RENDER                                      = GUIDOF!KSCATEGORY_RENDER;
const GUID CLSID_KSCATEGORY_SENSOR_CAMERA                               = GUIDOF!KSCATEGORY_SENSOR_CAMERA;
const GUID CLSID_KSCATEGORY_SENSOR_GROUP                                = GUIDOF!KSCATEGORY_SENSOR_GROUP;
const GUID CLSID_KSCATEGORY_SPLITTER                                    = GUIDOF!KSCATEGORY_SPLITTER;
const GUID CLSID_KSCATEGORY_TEXT                                        = GUIDOF!KSCATEGORY_TEXT;
const GUID CLSID_KSCATEGORY_TOPOLOGY                                    = GUIDOF!KSCATEGORY_TOPOLOGY;
const GUID CLSID_KSCATEGORY_TVAUDIO                                     = GUIDOF!KSCATEGORY_TVAUDIO;
const GUID CLSID_KSCATEGORY_TVTUNER                                     = GUIDOF!KSCATEGORY_TVTUNER;
const GUID CLSID_KSCATEGORY_VBICODEC                                    = GUIDOF!KSCATEGORY_VBICODEC;
const GUID CLSID_KSCATEGORY_VIDEO                                       = GUIDOF!KSCATEGORY_VIDEO;
const GUID CLSID_KSCATEGORY_VIDEO_CAMERA                                = GUIDOF!KSCATEGORY_VIDEO_CAMERA;
const GUID CLSID_KSCATEGORY_VIRTUAL                                     = GUIDOF!KSCATEGORY_VIRTUAL;
const GUID CLSID_KSCATEGORY_VPMUX                                       = GUIDOF!KSCATEGORY_VPMUX;
const GUID CLSID_KSCATEGORY_WDMAUD_USE_PIN_NAME                         = GUIDOF!KSCATEGORY_WDMAUD_USE_PIN_NAME;
const GUID CLSID_KSCOMPONENTID_USBAUDIO                                 = GUIDOF!KSCOMPONENTID_USBAUDIO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_AC3_AUDIO                       = GUIDOF!KSDATAFORMAT_SPECIFIER_AC3_AUDIO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_ANALOGVIDEO                     = GUIDOF!KSDATAFORMAT_SPECIFIER_ANALOGVIDEO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO               = GUIDOF!KSDATAFORMAT_SPECIFIER_DIALECT_AC3_AUDIO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO             = GUIDOF!KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_AUDIO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO             = GUIDOF!KSDATAFORMAT_SPECIFIER_DIALECT_MPEG1_VIDEO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO             = GUIDOF!KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_AUDIO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO             = GUIDOF!KSDATAFORMAT_SPECIFIER_DIALECT_MPEG2_VIDEO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_DSOUND                          = GUIDOF!KSDATAFORMAT_SPECIFIER_DSOUND;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_FILEHANDLE                      = GUIDOF!KSDATAFORMAT_SPECIFIER_FILEHANDLE;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_FILENAME                        = GUIDOF!KSDATAFORMAT_SPECIFIER_FILENAME;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_H264_VIDEO                      = GUIDOF!KSDATAFORMAT_SPECIFIER_H264_VIDEO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_IMAGE                           = GUIDOF!KSDATAFORMAT_SPECIFIER_IMAGE;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_JPEG_IMAGE                      = GUIDOF!KSDATAFORMAT_SPECIFIER_JPEG_IMAGE;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_LPCM_AUDIO                      = GUIDOF!KSDATAFORMAT_SPECIFIER_LPCM_AUDIO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO                     = GUIDOF!KSDATAFORMAT_SPECIFIER_MPEG1_VIDEO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO                     = GUIDOF!KSDATAFORMAT_SPECIFIER_MPEG2_AUDIO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO                     = GUIDOF!KSDATAFORMAT_SPECIFIER_MPEG2_VIDEO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_NONE                            = GUIDOF!KSDATAFORMAT_SPECIFIER_NONE;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_VBI                             = GUIDOF!KSDATAFORMAT_SPECIFIER_VBI;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_VC_ID                           = GUIDOF!KSDATAFORMAT_SPECIFIER_VC_ID;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_VIDEOINFO                       = GUIDOF!KSDATAFORMAT_SPECIFIER_VIDEOINFO;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_VIDEOINFO2                      = GUIDOF!KSDATAFORMAT_SPECIFIER_VIDEOINFO2;
const GUID CLSID_KSDATAFORMAT_SPECIFIER_WAVEFORMATEX                    = GUIDOF!KSDATAFORMAT_SPECIFIER_WAVEFORMATEX;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_AC3_AUDIO                         = GUIDOF!KSDATAFORMAT_SUBTYPE_AC3_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_ADPCM                             = GUIDOF!KSDATAFORMAT_SUBTYPE_ADPCM;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_ALAW                              = GUIDOF!KSDATAFORMAT_SUBTYPE_ALAW;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_ANALOG                            = GUIDOF!KSDATAFORMAT_SUBTYPE_ANALOG;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_CC                                = GUIDOF!KSDATAFORMAT_SUBTYPE_CC;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_D16                               = GUIDOF!KSDATAFORMAT_SUBTYPE_D16;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_DRM                               = GUIDOF!KSDATAFORMAT_SUBTYPE_DRM;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_DSS_AUDIO                         = GUIDOF!KSDATAFORMAT_SUBTYPE_DSS_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_DSS_VIDEO                         = GUIDOF!KSDATAFORMAT_SUBTYPE_DSS_VIDEO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_DTS_AUDIO                         = GUIDOF!KSDATAFORMAT_SUBTYPE_DTS_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_AAC                      = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_AAC;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC                    = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_ATRAC;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL            = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS       = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS_ATMOS = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS_ATMOS;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT20              = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT20;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT21              = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MAT21;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP                = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_MLP;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DST                      = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_DST;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DTS                      = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_DTS;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD                   = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_DTS_HD;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1                    = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_MPEG1;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2                    = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_MPEG2;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3                    = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_MPEG3;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO            = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_ONE_BIT_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO                  = GUIDOF!KSDATAFORMAT_SUBTYPE_IEC61937_WMA_PRO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_IMAGE_RGB32                       = GUIDOF!KSDATAFORMAT_SUBTYPE_IMAGE_RGB32;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_JPEG                              = GUIDOF!KSDATAFORMAT_SUBTYPE_JPEG;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_L16                               = GUIDOF!KSDATAFORMAT_SUBTYPE_L16;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_L16_CUSTOM                        = GUIDOF!KSDATAFORMAT_SUBTYPE_L16_CUSTOM;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_L16_IR                            = GUIDOF!KSDATAFORMAT_SUBTYPE_L16_IR;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_L8                                = GUIDOF!KSDATAFORMAT_SUBTYPE_L8;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_L8_CUSTOM                         = GUIDOF!KSDATAFORMAT_SUBTYPE_L8_CUSTOM;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_L8_IR                             = GUIDOF!KSDATAFORMAT_SUBTYPE_L8_IR;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_LPCM_AUDIO                        = GUIDOF!KSDATAFORMAT_SUBTYPE_LPCM_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_Line21_BytePair                   = GUIDOF!KSDATAFORMAT_SUBTYPE_Line21_BytePair;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_Line21_GOPPacket                  = GUIDOF!KSDATAFORMAT_SUBTYPE_Line21_GOPPacket;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MIDI                              = GUIDOF!KSDATAFORMAT_SUBTYPE_MIDI;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MIDI_BUS                          = GUIDOF!KSDATAFORMAT_SUBTYPE_MIDI_BUS;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM                       = GUIDOF!KSDATAFORMAT_SUBTYPE_MJPG_CUSTOM;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MJPG_DEPTH                        = GUIDOF!KSDATAFORMAT_SUBTYPE_MJPG_DEPTH;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MJPG_IR                           = GUIDOF!KSDATAFORMAT_SUBTYPE_MJPG_IR;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MPEG                              = GUIDOF!KSDATAFORMAT_SUBTYPE_MPEG;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MPEG1Packet                       = GUIDOF!KSDATAFORMAT_SUBTYPE_MPEG1Packet;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MPEG1Payload                      = GUIDOF!KSDATAFORMAT_SUBTYPE_MPEG1Payload;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MPEG1Video                        = GUIDOF!KSDATAFORMAT_SUBTYPE_MPEG1Video;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO                       = GUIDOF!KSDATAFORMAT_SUBTYPE_MPEG2_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO                       = GUIDOF!KSDATAFORMAT_SUBTYPE_MPEG2_VIDEO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MPEGLAYER3                        = GUIDOF!KSDATAFORMAT_SUBTYPE_MPEGLAYER3;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MPEG_HEAAC                        = GUIDOF!KSDATAFORMAT_SUBTYPE_MPEG_HEAAC;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_MULAW                             = GUIDOF!KSDATAFORMAT_SUBTYPE_MULAW;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_NABTS                             = GUIDOF!KSDATAFORMAT_SUBTYPE_NABTS;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_NABTS_FEC                         = GUIDOF!KSDATAFORMAT_SUBTYPE_NABTS_FEC;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_NONE                              = GUIDOF!KSDATAFORMAT_SUBTYPE_NONE;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_OVERLAY                           = GUIDOF!KSDATAFORMAT_SUBTYPE_OVERLAY;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_RAW8                              = GUIDOF!KSDATAFORMAT_SUBTYPE_RAW8;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_RIFF                              = GUIDOF!KSDATAFORMAT_SUBTYPE_RIFF;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_RIFFMIDI                          = GUIDOF!KSDATAFORMAT_SUBTYPE_RIFFMIDI;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_RIFFWAVE                          = GUIDOF!KSDATAFORMAT_SUBTYPE_RIFFWAVE;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_SDDS_AUDIO                        = GUIDOF!KSDATAFORMAT_SUBTYPE_SDDS_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO                = GUIDOF!KSDATAFORMAT_SUBTYPE_STANDARD_AC3_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO              = GUIDOF!KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO              = GUIDOF!KSDATAFORMAT_SUBTYPE_STANDARD_MPEG1_VIDEO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO              = GUIDOF!KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_AUDIO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO              = GUIDOF!KSDATAFORMAT_SUBTYPE_STANDARD_MPEG2_VIDEO;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_SUBPICTURE                        = GUIDOF!KSDATAFORMAT_SUBTYPE_SUBPICTURE;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_TELETEXT                          = GUIDOF!KSDATAFORMAT_SUBTYPE_TELETEXT;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_VPVBI                             = GUIDOF!KSDATAFORMAT_SUBTYPE_VPVBI;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_VPVideo                           = GUIDOF!KSDATAFORMAT_SUBTYPE_VPVideo;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_WMAUDIO2                          = GUIDOF!KSDATAFORMAT_SUBTYPE_WMAUDIO2;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_WMAUDIO3                          = GUIDOF!KSDATAFORMAT_SUBTYPE_WMAUDIO3;
const GUID CLSID_KSDATAFORMAT_SUBTYPE_WMAUDIO_LOSSLESS                  = GUIDOF!KSDATAFORMAT_SUBTYPE_WMAUDIO_LOSSLESS;
const GUID CLSID_KSDATAFORMAT_TYPE_ANALOGAUDIO                          = GUIDOF!KSDATAFORMAT_TYPE_ANALOGAUDIO;
const GUID CLSID_KSDATAFORMAT_TYPE_ANALOGVIDEO                          = GUIDOF!KSDATAFORMAT_TYPE_ANALOGVIDEO;
const GUID CLSID_KSDATAFORMAT_TYPE_AUDIO                                = GUIDOF!KSDATAFORMAT_TYPE_AUDIO;
const GUID CLSID_KSDATAFORMAT_TYPE_AUXLine21Data                        = GUIDOF!KSDATAFORMAT_TYPE_AUXLine21Data;
const GUID CLSID_KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK                   = GUIDOF!KSDATAFORMAT_TYPE_DVD_ENCRYPTED_PACK;
const GUID CLSID_KSDATAFORMAT_TYPE_IMAGE                                = GUIDOF!KSDATAFORMAT_TYPE_IMAGE;
const GUID CLSID_KSDATAFORMAT_TYPE_MIDI                                 = GUIDOF!KSDATAFORMAT_TYPE_MIDI;
const GUID CLSID_KSDATAFORMAT_TYPE_MPEG2_PES                            = GUIDOF!KSDATAFORMAT_TYPE_MPEG2_PES;
const GUID CLSID_KSDATAFORMAT_TYPE_MPEG2_PROGRAM                        = GUIDOF!KSDATAFORMAT_TYPE_MPEG2_PROGRAM;
const GUID CLSID_KSDATAFORMAT_TYPE_MPEG2_TRANSPORT                      = GUIDOF!KSDATAFORMAT_TYPE_MPEG2_TRANSPORT;
const GUID CLSID_KSDATAFORMAT_TYPE_MUSIC                                = GUIDOF!KSDATAFORMAT_TYPE_MUSIC;
const GUID CLSID_KSDATAFORMAT_TYPE_NABTS                                = GUIDOF!KSDATAFORMAT_TYPE_NABTS;
const GUID CLSID_KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM           = GUIDOF!KSDATAFORMAT_TYPE_STANDARD_ELEMENTARY_STREAM;
const GUID CLSID_KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER                 = GUIDOF!KSDATAFORMAT_TYPE_STANDARD_PACK_HEADER;
const GUID CLSID_KSDATAFORMAT_TYPE_STANDARD_PES_PACKET                  = GUIDOF!KSDATAFORMAT_TYPE_STANDARD_PES_PACKET;
const GUID CLSID_KSDATAFORMAT_TYPE_STREAM                               = GUIDOF!KSDATAFORMAT_TYPE_STREAM;
const GUID CLSID_KSDATAFORMAT_TYPE_TEXT                                 = GUIDOF!KSDATAFORMAT_TYPE_TEXT;
const GUID CLSID_KSDATAFORMAT_TYPE_VBI                                  = GUIDOF!KSDATAFORMAT_TYPE_VBI;
const GUID CLSID_KSDATAFORMAT_TYPE_VIDEO                                = GUIDOF!KSDATAFORMAT_TYPE_VIDEO;
const GUID CLSID_KSDEGRADESETID_Standard                                = GUIDOF!KSDEGRADESETID_Standard;
const GUID CLSID_KSEVENTSETID_AudioControlChange                        = GUIDOF!KSEVENTSETID_AudioControlChange;
const GUID CLSID_KSEVENTSETID_CameraAsyncControl                        = GUIDOF!KSEVENTSETID_CameraAsyncControl;
const GUID CLSID_KSEVENTSETID_CameraEvent                               = GUIDOF!KSEVENTSETID_CameraEvent;
const GUID CLSID_KSEVENTSETID_Clock                                     = GUIDOF!KSEVENTSETID_Clock;
const GUID CLSID_KSEVENTSETID_Connection                                = GUIDOF!KSEVENTSETID_Connection;
const GUID CLSID_KSEVENTSETID_Device                                    = GUIDOF!KSEVENTSETID_Device;
const GUID CLSID_KSEVENTSETID_DynamicFormatChange                       = GUIDOF!KSEVENTSETID_DynamicFormatChange;
const GUID CLSID_KSEVENTSETID_EXTDEV_Command                            = GUIDOF!KSEVENTSETID_EXTDEV_Command;
const GUID CLSID_KSEVENTSETID_ExtendedCameraControl                     = GUIDOF!KSEVENTSETID_ExtendedCameraControl;
const GUID CLSID_KSEVENTSETID_LoopedStreaming                           = GUIDOF!KSEVENTSETID_LoopedStreaming;
const GUID CLSID_KSEVENTSETID_PinCapsChange                             = GUIDOF!KSEVENTSETID_PinCapsChange;
const GUID CLSID_KSEVENTSETID_SoundDetector                             = GUIDOF!KSEVENTSETID_SoundDetector;
const GUID CLSID_KSEVENTSETID_StreamAllocator                           = GUIDOF!KSEVENTSETID_StreamAllocator;
const GUID CLSID_KSEVENTSETID_Telephony                                 = GUIDOF!KSEVENTSETID_Telephony;
const GUID CLSID_KSEVENTSETID_VIDCAPTOSTI                               = GUIDOF!KSEVENTSETID_VIDCAPTOSTI;
const GUID CLSID_KSEVENTSETID_VIDCAP_TVAUDIO                            = GUIDOF!KSEVENTSETID_VIDCAP_TVAUDIO;
const GUID CLSID_KSEVENTSETID_VPNotify                                  = GUIDOF!KSEVENTSETID_VPNotify;
const GUID CLSID_KSEVENTSETID_VPVBINotify                               = GUIDOF!KSEVENTSETID_VPVBINotify;
const GUID CLSID_KSEVENTSETID_VolumeLimit                               = GUIDOF!KSEVENTSETID_VolumeLimit;
const GUID CLSID_KSINTERFACESETID_FileIo                                = GUIDOF!KSINTERFACESETID_FileIo;
const GUID CLSID_KSINTERFACESETID_Media                                 = GUIDOF!KSINTERFACESETID_Media;
const GUID CLSID_KSINTERFACESETID_Standard                              = GUIDOF!KSINTERFACESETID_Standard;
const GUID CLSID_KSMEDIUMSETID_MidiBus                                  = GUIDOF!KSMEDIUMSETID_MidiBus;
const GUID CLSID_KSMEDIUMSETID_Standard                                 = GUIDOF!KSMEDIUMSETID_Standard;
const GUID CLSID_KSMEDIUMSETID_VPBus                                    = GUIDOF!KSMEDIUMSETID_VPBus;
const GUID CLSID_KSMEMORY_TYPE_DEVICE_UNKNOWN                           = GUIDOF!KSMEMORY_TYPE_DEVICE_UNKNOWN;
const GUID CLSID_KSMEMORY_TYPE_KERNEL_NONPAGED                          = GUIDOF!KSMEMORY_TYPE_KERNEL_NONPAGED;
const GUID CLSID_KSMEMORY_TYPE_KERNEL_PAGED                             = GUIDOF!KSMEMORY_TYPE_KERNEL_PAGED;
const GUID CLSID_KSMEMORY_TYPE_SYSTEM                                   = GUIDOF!KSMEMORY_TYPE_SYSTEM;
const GUID CLSID_KSMEMORY_TYPE_USER                                     = GUIDOF!KSMEMORY_TYPE_USER;
const GUID CLSID_KSMETHODSETID_StreamAllocator                          = GUIDOF!KSMETHODSETID_StreamAllocator;
const GUID CLSID_KSMETHODSETID_StreamIo                                 = GUIDOF!KSMETHODSETID_StreamIo;
const GUID CLSID_KSMETHODSETID_Wavetable                                = GUIDOF!KSMETHODSETID_Wavetable;
const GUID CLSID_KSMFT_CATEGORY_AUDIO_DECODER                           = GUIDOF!KSMFT_CATEGORY_AUDIO_DECODER;
const GUID CLSID_KSMFT_CATEGORY_AUDIO_EFFECT                            = GUIDOF!KSMFT_CATEGORY_AUDIO_EFFECT;
const GUID CLSID_KSMFT_CATEGORY_AUDIO_ENCODER                           = GUIDOF!KSMFT_CATEGORY_AUDIO_ENCODER;
const GUID CLSID_KSMFT_CATEGORY_DEMULTIPLEXER                           = GUIDOF!KSMFT_CATEGORY_DEMULTIPLEXER;
const GUID CLSID_KSMFT_CATEGORY_MULTIPLEXER                             = GUIDOF!KSMFT_CATEGORY_MULTIPLEXER;
const GUID CLSID_KSMFT_CATEGORY_OTHER                                   = GUIDOF!KSMFT_CATEGORY_OTHER;
const GUID CLSID_KSMFT_CATEGORY_VIDEO_DECODER                           = GUIDOF!KSMFT_CATEGORY_VIDEO_DECODER;
const GUID CLSID_KSMFT_CATEGORY_VIDEO_EFFECT                            = GUIDOF!KSMFT_CATEGORY_VIDEO_EFFECT;
const GUID CLSID_KSMFT_CATEGORY_VIDEO_ENCODER                           = GUIDOF!KSMFT_CATEGORY_VIDEO_ENCODER;
const GUID CLSID_KSMFT_CATEGORY_VIDEO_PROCESSOR                         = GUIDOF!KSMFT_CATEGORY_VIDEO_PROCESSOR;
const GUID CLSID_KSMUSIC_TECHNOLOGY_FMSYNTH                             = GUIDOF!KSMUSIC_TECHNOLOGY_FMSYNTH;
const GUID CLSID_KSMUSIC_TECHNOLOGY_PORT                                = GUIDOF!KSMUSIC_TECHNOLOGY_PORT;
const GUID CLSID_KSMUSIC_TECHNOLOGY_SQSYNTH                             = GUIDOF!KSMUSIC_TECHNOLOGY_SQSYNTH;
const GUID CLSID_KSMUSIC_TECHNOLOGY_SWSYNTH                             = GUIDOF!KSMUSIC_TECHNOLOGY_SWSYNTH;
const GUID CLSID_KSMUSIC_TECHNOLOGY_WAVETABLE                           = GUIDOF!KSMUSIC_TECHNOLOGY_WAVETABLE;
const GUID CLSID_KSNAME_Allocator                                       = GUIDOF!KSNAME_Allocator;
const GUID CLSID_KSNAME_Clock                                           = GUIDOF!KSNAME_Clock;
const GUID CLSID_KSNAME_Filter                                          = GUIDOF!KSNAME_Filter;
const GUID CLSID_KSNAME_Pin                                             = GUIDOF!KSNAME_Pin;
const GUID CLSID_KSNAME_TopologyNode                                    = GUIDOF!KSNAME_TopologyNode;
const GUID CLSID_KSNODETYPE_1394_DA_STREAM                              = GUIDOF!KSNODETYPE_1394_DA_STREAM;
const GUID CLSID_KSNODETYPE_1394_DV_STREAM_SOUNDTRACK                   = GUIDOF!KSNODETYPE_1394_DV_STREAM_SOUNDTRACK;
const GUID CLSID_KSNODETYPE_3D_EFFECTS                                  = GUIDOF!KSNODETYPE_3D_EFFECTS;
const GUID CLSID_KSNODETYPE_ADC                                         = GUIDOF!KSNODETYPE_ADC;
const GUID CLSID_KSNODETYPE_AGC                                         = GUIDOF!KSNODETYPE_AGC;
const GUID CLSID_KSNODETYPE_ANALOG_CONNECTOR                            = GUIDOF!KSNODETYPE_ANALOG_CONNECTOR;
const GUID CLSID_KSNODETYPE_ANALOG_TAPE                                 = GUIDOF!KSNODETYPE_ANALOG_TAPE;
const GUID CLSID_KSNODETYPE_AUDIO_ENGINE                                = GUIDOF!KSNODETYPE_AUDIO_ENGINE;
const GUID CLSID_KSNODETYPE_AUDIO_KEYWORDDETECTOR                       = GUIDOF!KSNODETYPE_AUDIO_KEYWORDDETECTOR;
const GUID CLSID_KSNODETYPE_AUDIO_LOOPBACK                              = GUIDOF!KSNODETYPE_AUDIO_LOOPBACK;
const GUID CLSID_KSNODETYPE_BIDIRECTIONAL_UNDEFINED                     = GUIDOF!KSNODETYPE_BIDIRECTIONAL_UNDEFINED;
const GUID CLSID_KSNODETYPE_CABLE_TUNER_AUDIO                           = GUIDOF!KSNODETYPE_CABLE_TUNER_AUDIO;
const GUID CLSID_KSNODETYPE_CD_PLAYER                                   = GUIDOF!KSNODETYPE_CD_PLAYER;
const GUID CLSID_KSNODETYPE_CHORUS                                      = GUIDOF!KSNODETYPE_CHORUS;
const GUID CLSID_KSNODETYPE_COMMUNICATION_SPEAKER                       = GUIDOF!KSNODETYPE_COMMUNICATION_SPEAKER;
const GUID CLSID_KSNODETYPE_DAC                                         = GUIDOF!KSNODETYPE_DAC;
const GUID CLSID_KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE                   = GUIDOF!KSNODETYPE_DAT_IO_DIGITAL_AUDIO_TAPE;
const GUID CLSID_KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE             = GUIDOF!KSNODETYPE_DCC_IO_DIGITAL_COMPACT_CASSETTE;
const GUID CLSID_KSNODETYPE_DELAY                                       = GUIDOF!KSNODETYPE_DELAY;
const GUID CLSID_KSNODETYPE_DEMUX                                       = GUIDOF!KSNODETYPE_DEMUX;
const GUID CLSID_KSNODETYPE_DESKTOP_MICROPHONE                          = GUIDOF!KSNODETYPE_DESKTOP_MICROPHONE;
const GUID CLSID_KSNODETYPE_DESKTOP_SPEAKER                             = GUIDOF!KSNODETYPE_DESKTOP_SPEAKER;
const GUID CLSID_KSNODETYPE_DEV_SPECIFIC                                = GUIDOF!KSNODETYPE_DEV_SPECIFIC;
const GUID CLSID_KSNODETYPE_DIGITAL_AUDIO_INTERFACE                     = GUIDOF!KSNODETYPE_DIGITAL_AUDIO_INTERFACE;
const GUID CLSID_KSNODETYPE_DISPLAYPORT_INTERFACE                       = GUIDOF!KSNODETYPE_DISPLAYPORT_INTERFACE;
const GUID CLSID_KSNODETYPE_DOWN_LINE_PHONE                             = GUIDOF!KSNODETYPE_DOWN_LINE_PHONE;
const GUID CLSID_KSNODETYPE_DRM_DESCRAMBLE                              = GUIDOF!KSNODETYPE_DRM_DESCRAMBLE;
const GUID CLSID_KSNODETYPE_DSS_AUDIO                                   = GUIDOF!KSNODETYPE_DSS_AUDIO;
const GUID CLSID_KSNODETYPE_DVD_AUDIO                                   = GUIDOF!KSNODETYPE_DVD_AUDIO;
const GUID CLSID_KSNODETYPE_DYN_RANGE_COMPRESSOR                        = GUIDOF!KSNODETYPE_DYN_RANGE_COMPRESSOR;
const GUID CLSID_KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE                 = GUIDOF!KSNODETYPE_ECHO_CANCELING_SPEAKERPHONE;
const GUID CLSID_KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE               = GUIDOF!KSNODETYPE_ECHO_SUPPRESSING_SPEAKERPHONE;
const GUID CLSID_KSNODETYPE_EMBEDDED_UNDEFINED                          = GUIDOF!KSNODETYPE_EMBEDDED_UNDEFINED;
const GUID CLSID_KSNODETYPE_EQUALIZATION_NOISE                          = GUIDOF!KSNODETYPE_EQUALIZATION_NOISE;
const GUID CLSID_KSNODETYPE_EQUALIZER                                   = GUIDOF!KSNODETYPE_EQUALIZER;
const GUID CLSID_KSNODETYPE_EXTERNAL_UNDEFINED                          = GUIDOF!KSNODETYPE_EXTERNAL_UNDEFINED;
const GUID CLSID_KSNODETYPE_FM_RX                                       = GUIDOF!KSNODETYPE_FM_RX;
const GUID CLSID_KSNODETYPE_HANDSET                                     = GUIDOF!KSNODETYPE_HANDSET;
const GUID CLSID_KSNODETYPE_HDMI_INTERFACE                              = GUIDOF!KSNODETYPE_HDMI_INTERFACE;
const GUID CLSID_KSNODETYPE_HEADPHONES                                  = GUIDOF!KSNODETYPE_HEADPHONES;
const GUID CLSID_KSNODETYPE_HEADSET                                     = GUIDOF!KSNODETYPE_HEADSET;
const GUID CLSID_KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO                  = GUIDOF!KSNODETYPE_HEAD_MOUNTED_DISPLAY_AUDIO;
const GUID CLSID_KSNODETYPE_INPUT_UNDEFINED                             = GUIDOF!KSNODETYPE_INPUT_UNDEFINED;
const GUID CLSID_KSNODETYPE_LEGACY_AUDIO_CONNECTOR                      = GUIDOF!KSNODETYPE_LEGACY_AUDIO_CONNECTOR;
const GUID CLSID_KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE              = GUIDOF!KSNODETYPE_LEVEL_CALIBRATION_NOISE_SOURCE;
const GUID CLSID_KSNODETYPE_LINE_CONNECTOR                              = GUIDOF!KSNODETYPE_LINE_CONNECTOR;
const GUID CLSID_KSNODETYPE_LOUDNESS                                    = GUIDOF!KSNODETYPE_LOUDNESS;
const GUID CLSID_KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER               = GUIDOF!KSNODETYPE_LOW_FREQUENCY_EFFECTS_SPEAKER;
const GUID CLSID_KSNODETYPE_MICROPHONE                                  = GUIDOF!KSNODETYPE_MICROPHONE;
const GUID CLSID_KSNODETYPE_MICROPHONE_ARRAY                            = GUIDOF!KSNODETYPE_MICROPHONE_ARRAY;
const GUID CLSID_KSNODETYPE_MIDI_ELEMENT                                = GUIDOF!KSNODETYPE_MIDI_ELEMENT;
const GUID CLSID_KSNODETYPE_MIDI_JACK                                   = GUIDOF!KSNODETYPE_MIDI_JACK;
const GUID CLSID_KSNODETYPE_MINIDISK                                    = GUIDOF!KSNODETYPE_MINIDISK;
const GUID CLSID_KSNODETYPE_MULTITRACK_RECORDER                         = GUIDOF!KSNODETYPE_MULTITRACK_RECORDER;
const GUID CLSID_KSNODETYPE_MUTE                                        = GUIDOF!KSNODETYPE_MUTE;
const GUID CLSID_KSNODETYPE_MUX                                         = GUIDOF!KSNODETYPE_MUX;
const GUID CLSID_KSNODETYPE_NOISE_SUPPRESS                              = GUIDOF!KSNODETYPE_NOISE_SUPPRESS;
const GUID CLSID_KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE                 = GUIDOF!KSNODETYPE_OMNI_DIRECTIONAL_MICROPHONE;
const GUID CLSID_KSNODETYPE_OUTPUT_UNDEFINED                            = GUIDOF!KSNODETYPE_OUTPUT_UNDEFINED;
const GUID CLSID_KSNODETYPE_PARAMETRIC_EQUALIZER                        = GUIDOF!KSNODETYPE_PARAMETRIC_EQUALIZER;
const GUID CLSID_KSNODETYPE_PEAKMETER                                   = GUIDOF!KSNODETYPE_PEAKMETER;
const GUID CLSID_KSNODETYPE_PERSONAL_MICROPHONE                         = GUIDOF!KSNODETYPE_PERSONAL_MICROPHONE;
const GUID CLSID_KSNODETYPE_PHONE_LINE                                  = GUIDOF!KSNODETYPE_PHONE_LINE;
const GUID CLSID_KSNODETYPE_PHONOGRAPH                                  = GUIDOF!KSNODETYPE_PHONOGRAPH;
const GUID CLSID_KSNODETYPE_PROCESSING_MICROPHONE_ARRAY                 = GUIDOF!KSNODETYPE_PROCESSING_MICROPHONE_ARRAY;
const GUID CLSID_KSNODETYPE_PROLOGIC_DECODER                            = GUIDOF!KSNODETYPE_PROLOGIC_DECODER;
const GUID CLSID_KSNODETYPE_PROLOGIC_ENCODER                            = GUIDOF!KSNODETYPE_PROLOGIC_ENCODER;
const GUID CLSID_KSNODETYPE_RADIO_RECEIVER                              = GUIDOF!KSNODETYPE_RADIO_RECEIVER;
const GUID CLSID_KSNODETYPE_RADIO_TRANSMITTER                           = GUIDOF!KSNODETYPE_RADIO_TRANSMITTER;
const GUID CLSID_KSNODETYPE_REVERB                                      = GUIDOF!KSNODETYPE_REVERB;
const GUID CLSID_KSNODETYPE_ROOM_SPEAKER                                = GUIDOF!KSNODETYPE_ROOM_SPEAKER;
const GUID CLSID_KSNODETYPE_SATELLITE_RECEIVER_AUDIO                    = GUIDOF!KSNODETYPE_SATELLITE_RECEIVER_AUDIO;
const GUID CLSID_KSNODETYPE_SPDIF_INTERFACE                             = GUIDOF!KSNODETYPE_SPDIF_INTERFACE;
const GUID CLSID_KSNODETYPE_SPEAKER                                     = GUIDOF!KSNODETYPE_SPEAKER;
const GUID CLSID_KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION              = GUIDOF!KSNODETYPE_SPEAKERPHONE_NO_ECHO_REDUCTION;
const GUID CLSID_KSNODETYPE_SPEAKERS_STATIC_JACK                        = GUIDOF!KSNODETYPE_SPEAKERS_STATIC_JACK;
const GUID CLSID_KSNODETYPE_SRC                                         = GUIDOF!KSNODETYPE_SRC;
const GUID CLSID_KSNODETYPE_STEREO_WIDE                                 = GUIDOF!KSNODETYPE_STEREO_WIDE;
const GUID CLSID_KSNODETYPE_SUM                                         = GUIDOF!KSNODETYPE_SUM;
const GUID CLSID_KSNODETYPE_SUPERMIX                                    = GUIDOF!KSNODETYPE_SUPERMIX;
const GUID CLSID_KSNODETYPE_SYNTHESIZER                                 = GUIDOF!KSNODETYPE_SYNTHESIZER;
const GUID CLSID_KSNODETYPE_TELEPHONE                                   = GUIDOF!KSNODETYPE_TELEPHONE;
const GUID CLSID_KSNODETYPE_TELEPHONY_BIDI                              = GUIDOF!KSNODETYPE_TELEPHONY_BIDI;
const GUID CLSID_KSNODETYPE_TELEPHONY_UNDEFINED                         = GUIDOF!KSNODETYPE_TELEPHONY_UNDEFINED;
const GUID CLSID_KSNODETYPE_TONE                                        = GUIDOF!KSNODETYPE_TONE;
const GUID CLSID_KSNODETYPE_TV_TUNER_AUDIO                              = GUIDOF!KSNODETYPE_TV_TUNER_AUDIO;
const GUID CLSID_KSNODETYPE_UPDOWN_MIX                                  = GUIDOF!KSNODETYPE_UPDOWN_MIX;
const GUID CLSID_KSNODETYPE_VCR_AUDIO                                   = GUIDOF!KSNODETYPE_VCR_AUDIO;
const GUID CLSID_KSNODETYPE_VIDEO_CAMERA_TERMINAL                       = GUIDOF!KSNODETYPE_VIDEO_CAMERA_TERMINAL;
const GUID CLSID_KSNODETYPE_VIDEO_DISC_AUDIO                            = GUIDOF!KSNODETYPE_VIDEO_DISC_AUDIO;
const GUID CLSID_KSNODETYPE_VIDEO_INPUT_MTT                             = GUIDOF!KSNODETYPE_VIDEO_INPUT_MTT;
const GUID CLSID_KSNODETYPE_VIDEO_INPUT_TERMINAL                        = GUIDOF!KSNODETYPE_VIDEO_INPUT_TERMINAL;
const GUID CLSID_KSNODETYPE_VIDEO_OUTPUT_MTT                            = GUIDOF!KSNODETYPE_VIDEO_OUTPUT_MTT;
const GUID CLSID_KSNODETYPE_VIDEO_OUTPUT_TERMINAL                       = GUIDOF!KSNODETYPE_VIDEO_OUTPUT_TERMINAL;
const GUID CLSID_KSNODETYPE_VIDEO_PROCESSING                            = GUIDOF!KSNODETYPE_VIDEO_PROCESSING;
const GUID CLSID_KSNODETYPE_VIDEO_SELECTOR                              = GUIDOF!KSNODETYPE_VIDEO_SELECTOR;
const GUID CLSID_KSNODETYPE_VIDEO_STREAMING                             = GUIDOF!KSNODETYPE_VIDEO_STREAMING;
const GUID CLSID_KSNODETYPE_VOLUME                                      = GUIDOF!KSNODETYPE_VOLUME;
const GUID CLSID_KSNOTIFICATIONID_AudioModule                           = GUIDOF!KSNOTIFICATIONID_AudioModule;
const GUID CLSID_KSNOTIFICATIONID_SoundDetector                         = GUIDOF!KSNOTIFICATIONID_SoundDetector;
const GUID CLSID_KSPROPERTYSETID_ExtendedCameraControl                  = GUIDOF!KSPROPERTYSETID_ExtendedCameraControl;
const GUID CLSID_KSPROPERTYSETID_NetworkCameraControl                   = GUIDOF!KSPROPERTYSETID_NetworkCameraControl;
const GUID CLSID_KSPROPERTYSETID_PerFrameSettingControl                 = GUIDOF!KSPROPERTYSETID_PerFrameSettingControl;
const GUID CLSID_KSPROPSETID_AC3                                        = GUIDOF!KSPROPSETID_AC3;
const GUID CLSID_KSPROPSETID_Audio                                      = GUIDOF!KSPROPSETID_Audio;
const GUID CLSID_KSPROPSETID_AudioBufferDuration                        = GUIDOF!KSPROPSETID_AudioBufferDuration;
const GUID CLSID_KSPROPSETID_AudioDecoderOut                            = GUIDOF!KSPROPSETID_AudioDecoderOut;
const GUID CLSID_KSPROPSETID_AudioEngine                                = GUIDOF!KSPROPSETID_AudioEngine;
const GUID CLSID_KSPROPSETID_AudioModule                                = GUIDOF!KSPROPSETID_AudioModule;
const GUID CLSID_KSPROPSETID_AudioPosture                               = GUIDOF!KSPROPSETID_AudioPosture;
const GUID CLSID_KSPROPSETID_AudioSignalProcessing                      = GUIDOF!KSPROPSETID_AudioSignalProcessing;
const GUID CLSID_KSPROPSETID_Bibliographic                              = GUIDOF!KSPROPSETID_Bibliographic;
const GUID CLSID_KSPROPSETID_BtAudio                                    = GUIDOF!KSPROPSETID_BtAudio;
const GUID CLSID_KSPROPSETID_Clock                                      = GUIDOF!KSPROPSETID_Clock;
const GUID CLSID_KSPROPSETID_Connection                                 = GUIDOF!KSPROPSETID_Connection;
const GUID CLSID_KSPROPSETID_CopyProt                                   = GUIDOF!KSPROPSETID_CopyProt;
const GUID CLSID_KSPROPSETID_Cyclic                                     = GUIDOF!KSPROPSETID_Cyclic;
const GUID CLSID_KSPROPSETID_DirectSound3DBuffer                        = GUIDOF!KSPROPSETID_DirectSound3DBuffer;
const GUID CLSID_KSPROPSETID_DirectSound3DListener                      = GUIDOF!KSPROPSETID_DirectSound3DListener;
const GUID CLSID_KSPROPSETID_DrmAudioStream                             = GUIDOF!KSPROPSETID_DrmAudioStream;
const GUID CLSID_KSPROPSETID_DvdSubPic                                  = GUIDOF!KSPROPSETID_DvdSubPic;
const GUID CLSID_KSPROPSETID_FMRXControl                                = GUIDOF!KSPROPSETID_FMRXControl;
const GUID CLSID_KSPROPSETID_FMRXTopology                               = GUIDOF!KSPROPSETID_FMRXTopology;
const GUID CLSID_KSPROPSETID_General                                    = GUIDOF!KSPROPSETID_General;
const GUID CLSID_KSPROPSETID_Hrtf3d                                     = GUIDOF!KSPROPSETID_Hrtf3d;
const GUID CLSID_KSPROPSETID_InterleavedAudio                           = GUIDOF!KSPROPSETID_InterleavedAudio;
const GUID CLSID_KSPROPSETID_Itd3d                                      = GUIDOF!KSPROPSETID_Itd3d;
const GUID CLSID_KSPROPSETID_Jack                                       = GUIDOF!KSPROPSETID_Jack;
const GUID CLSID_KSPROPSETID_MPEG4_MediaType_Attributes                 = GUIDOF!KSPROPSETID_MPEG4_MediaType_Attributes;
const GUID CLSID_KSPROPSETID_MediaSeeking                               = GUIDOF!KSPROPSETID_MediaSeeking;
const GUID CLSID_KSPROPSETID_MemoryTransport                            = GUIDOF!KSPROPSETID_MemoryTransport;
const GUID CLSID_KSPROPSETID_Mpeg2Vid                                   = GUIDOF!KSPROPSETID_Mpeg2Vid;
const GUID CLSID_KSPROPSETID_OverlayUpdate                              = GUIDOF!KSPROPSETID_OverlayUpdate;
const GUID CLSID_KSPROPSETID_Pin                                        = GUIDOF!KSPROPSETID_Pin;
const GUID CLSID_KSPROPSETID_PinMDLCacheClearProp                       = GUIDOF!KSPROPSETID_PinMDLCacheClearProp;
const GUID CLSID_KSPROPSETID_Quality                                    = GUIDOF!KSPROPSETID_Quality;
const GUID CLSID_KSPROPSETID_RtAudio                                    = GUIDOF!KSPROPSETID_RtAudio;
const GUID CLSID_KSPROPSETID_SoundDetector                              = GUIDOF!KSPROPSETID_SoundDetector;
const GUID CLSID_KSPROPSETID_SoundDetector2                             = GUIDOF!KSPROPSETID_SoundDetector2;
const GUID CLSID_KSPROPSETID_Stream                                     = GUIDOF!KSPROPSETID_Stream;
const GUID CLSID_KSPROPSETID_StreamAllocator                            = GUIDOF!KSPROPSETID_StreamAllocator;
const GUID CLSID_KSPROPSETID_StreamInterface                            = GUIDOF!KSPROPSETID_StreamInterface;
const GUID CLSID_KSPROPSETID_TSRateChange                               = GUIDOF!KSPROPSETID_TSRateChange;
const GUID CLSID_KSPROPSETID_TelephonyControl                           = GUIDOF!KSPROPSETID_TelephonyControl;
const GUID CLSID_KSPROPSETID_TelephonyTopology                          = GUIDOF!KSPROPSETID_TelephonyTopology;
const GUID CLSID_KSPROPSETID_Topology                                   = GUIDOF!KSPROPSETID_Topology;
const GUID CLSID_KSPROPSETID_TopologyNode                               = GUIDOF!KSPROPSETID_TopologyNode;
const GUID CLSID_KSPROPSETID_VBICAP_PROPERTIES                          = GUIDOF!KSPROPSETID_VBICAP_PROPERTIES;
const GUID CLSID_KSPROPSETID_VBICodecFiltering                          = GUIDOF!KSPROPSETID_VBICodecFiltering;
const GUID CLSID_KSPROPSETID_VPConfig                                   = GUIDOF!KSPROPSETID_VPConfig;
const GUID CLSID_KSPROPSETID_VPVBIConfig                                = GUIDOF!KSPROPSETID_VPVBIConfig;
const GUID CLSID_KSPROPSETID_VramCapture                                = GUIDOF!KSPROPSETID_VramCapture;
const GUID CLSID_KSPROPSETID_Wave                                       = GUIDOF!KSPROPSETID_Wave;
const GUID CLSID_KSPROPTYPESETID_General                                = GUIDOF!KSPROPTYPESETID_General;
const GUID CLSID_KSTIME_FORMAT_BYTE                                     = GUIDOF!KSTIME_FORMAT_BYTE;
const GUID CLSID_KSTIME_FORMAT_FIELD                                    = GUIDOF!KSTIME_FORMAT_FIELD;
const GUID CLSID_KSTIME_FORMAT_FRAME                                    = GUIDOF!KSTIME_FORMAT_FRAME;
const GUID CLSID_KSTIME_FORMAT_MEDIA_TIME                               = GUIDOF!KSTIME_FORMAT_MEDIA_TIME;
const GUID CLSID_KSTIME_FORMAT_SAMPLE                                   = GUIDOF!KSTIME_FORMAT_SAMPLE;
const GUID CLSID_KS_SECURE_CAMERA_SCENARIO_ID                           = GUIDOF!KS_SECURE_CAMERA_SCENARIO_ID;
const GUID CLSID_MMDeviceEnumerator                                     = GUIDOF!MMDeviceEnumerator;
const GUID CLSID_PINNAME_DISPLAYPORT_OUT                                = GUIDOF!PINNAME_DISPLAYPORT_OUT;
const GUID CLSID_PINNAME_HDMI_OUT                                       = GUIDOF!PINNAME_HDMI_OUT;
const GUID CLSID_PINNAME_IMAGE                                          = GUIDOF!PINNAME_IMAGE;
const GUID CLSID_PINNAME_SPDIF_IN                                       = GUIDOF!PINNAME_SPDIF_IN;
const GUID CLSID_PINNAME_SPDIF_OUT                                      = GUIDOF!PINNAME_SPDIF_OUT;
const GUID CLSID_PINNAME_VIDEO_ANALOGVIDEOIN                            = GUIDOF!PINNAME_VIDEO_ANALOGVIDEOIN;
const GUID CLSID_PINNAME_VIDEO_CAPTURE                                  = GUIDOF!PINNAME_VIDEO_CAPTURE;
const GUID CLSID_PINNAME_VIDEO_CC                                       = GUIDOF!PINNAME_VIDEO_CC;
const GUID CLSID_PINNAME_VIDEO_CC_CAPTURE                               = GUIDOF!PINNAME_VIDEO_CC_CAPTURE;
const GUID CLSID_PINNAME_VIDEO_EDS                                      = GUIDOF!PINNAME_VIDEO_EDS;
const GUID CLSID_PINNAME_VIDEO_NABTS                                    = GUIDOF!PINNAME_VIDEO_NABTS;
const GUID CLSID_PINNAME_VIDEO_NABTS_CAPTURE                            = GUIDOF!PINNAME_VIDEO_NABTS_CAPTURE;
const GUID CLSID_PINNAME_VIDEO_PREVIEW                                  = GUIDOF!PINNAME_VIDEO_PREVIEW;
const GUID CLSID_PINNAME_VIDEO_STILL                                    = GUIDOF!PINNAME_VIDEO_STILL;
const GUID CLSID_PINNAME_VIDEO_TELETEXT                                 = GUIDOF!PINNAME_VIDEO_TELETEXT;
const GUID CLSID_PINNAME_VIDEO_TIMECODE                                 = GUIDOF!PINNAME_VIDEO_TIMECODE;
const GUID CLSID_PINNAME_VIDEO_VBI                                      = GUIDOF!PINNAME_VIDEO_VBI;
const GUID CLSID_PINNAME_VIDEO_VIDEOPORT                                = GUIDOF!PINNAME_VIDEO_VIDEOPORT;
const GUID CLSID_PINNAME_VIDEO_VIDEOPORT_VBI                            = GUIDOF!PINNAME_VIDEO_VIDEOPORT_VBI;
const GUID CLSID_PROPSETID_ALLOCATOR_CONTROL                            = GUIDOF!PROPSETID_ALLOCATOR_CONTROL;
const GUID CLSID_PROPSETID_EXT_DEVICE                                   = GUIDOF!PROPSETID_EXT_DEVICE;
const GUID CLSID_PROPSETID_EXT_TRANSPORT                                = GUIDOF!PROPSETID_EXT_TRANSPORT;
const GUID CLSID_PROPSETID_TIMECODE_READER                              = GUIDOF!PROPSETID_TIMECODE_READER;
const GUID CLSID_PROPSETID_TUNER                                        = GUIDOF!PROPSETID_TUNER;
const GUID CLSID_PROPSETID_VIDCAP_CAMERACONTROL                         = GUIDOF!PROPSETID_VIDCAP_CAMERACONTROL;
const GUID CLSID_PROPSETID_VIDCAP_CAMERACONTROL_FLASH                   = GUIDOF!PROPSETID_VIDCAP_CAMERACONTROL_FLASH;
const GUID CLSID_PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY    = GUIDOF!PROPSETID_VIDCAP_CAMERACONTROL_IMAGE_PIN_CAPABILITY;
const GUID CLSID_PROPSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST      = GUIDOF!PROPSETID_VIDCAP_CAMERACONTROL_REGION_OF_INTEREST;
const GUID CLSID_PROPSETID_VIDCAP_CAMERACONTROL_VIDEO_STABILIZATION     = GUIDOF!PROPSETID_VIDCAP_CAMERACONTROL_VIDEO_STABILIZATION;
const GUID CLSID_PROPSETID_VIDCAP_CROSSBAR                              = GUIDOF!PROPSETID_VIDCAP_CROSSBAR;
const GUID CLSID_PROPSETID_VIDCAP_DROPPEDFRAMES                         = GUIDOF!PROPSETID_VIDCAP_DROPPEDFRAMES;
const GUID CLSID_PROPSETID_VIDCAP_SELECTOR                              = GUIDOF!PROPSETID_VIDCAP_SELECTOR;
const GUID CLSID_PROPSETID_VIDCAP_TVAUDIO                               = GUIDOF!PROPSETID_VIDCAP_TVAUDIO;
const GUID CLSID_PROPSETID_VIDCAP_VIDEOCOMPRESSION                      = GUIDOF!PROPSETID_VIDCAP_VIDEOCOMPRESSION;
const GUID CLSID_PROPSETID_VIDCAP_VIDEOCONTROL                          = GUIDOF!PROPSETID_VIDCAP_VIDEOCONTROL;
const GUID CLSID_PROPSETID_VIDCAP_VIDEODECODER                          = GUIDOF!PROPSETID_VIDCAP_VIDEODECODER;
const GUID CLSID_PROPSETID_VIDCAP_VIDEOENCODER                          = GUIDOF!PROPSETID_VIDCAP_VIDEOENCODER;
const GUID CLSID_PROPSETID_VIDCAP_VIDEOPROCAMP                          = GUIDOF!PROPSETID_VIDCAP_VIDEOPROCAMP;

const GUID IID_IActivateAudioInterfaceAsyncOperation      = GUIDOF!IActivateAudioInterfaceAsyncOperation;
const GUID IID_IActivateAudioInterfaceCompletionHandler   = GUIDOF!IActivateAudioInterfaceCompletionHandler;
const GUID IID_IAudioAmbisonicsControl                    = GUIDOF!IAudioAmbisonicsControl;
const GUID IID_IAudioAutoGainControl                      = GUIDOF!IAudioAutoGainControl;
const GUID IID_IAudioBass                                 = GUIDOF!IAudioBass;
const GUID IID_IAudioCaptureClient                        = GUIDOF!IAudioCaptureClient;
const GUID IID_IAudioChannelConfig                        = GUIDOF!IAudioChannelConfig;
const GUID IID_IAudioClient                               = GUIDOF!IAudioClient;
const GUID IID_IAudioClient2                              = GUIDOF!IAudioClient2;
const GUID IID_IAudioClient3                              = GUIDOF!IAudioClient3;
const GUID IID_IAudioClock                                = GUIDOF!IAudioClock;
const GUID IID_IAudioClock2                               = GUIDOF!IAudioClock2;
const GUID IID_IAudioClockAdjustment                      = GUIDOF!IAudioClockAdjustment;
const GUID IID_IAudioEndpointFormatControl                = GUIDOF!IAudioEndpointFormatControl;
const GUID IID_IAudioEndpointLastBufferControl            = GUIDOF!IAudioEndpointLastBufferControl;
const GUID IID_IAudioEndpointOffloadStreamMeter           = GUIDOF!IAudioEndpointOffloadStreamMeter;
const GUID IID_IAudioEndpointOffloadStreamMute            = GUIDOF!IAudioEndpointOffloadStreamMute;
const GUID IID_IAudioEndpointOffloadStreamVolume          = GUIDOF!IAudioEndpointOffloadStreamVolume;
const GUID IID_IAudioEndpointVolume                       = GUIDOF!IAudioEndpointVolume;
const GUID IID_IAudioEndpointVolumeCallback               = GUIDOF!IAudioEndpointVolumeCallback;
const GUID IID_IAudioEndpointVolumeEx                     = GUIDOF!IAudioEndpointVolumeEx;
const GUID IID_IAudioFormatEnumerator                     = GUIDOF!IAudioFormatEnumerator;
const GUID IID_IAudioInputSelector                        = GUIDOF!IAudioInputSelector;
const GUID IID_IAudioLfxControl                           = GUIDOF!IAudioLfxControl;
const GUID IID_IAudioLoudness                             = GUIDOF!IAudioLoudness;
const GUID IID_IAudioMeterInformation                     = GUIDOF!IAudioMeterInformation;
const GUID IID_IAudioMidrange                             = GUIDOF!IAudioMidrange;
const GUID IID_IAudioMute                                 = GUIDOF!IAudioMute;
const GUID IID_IAudioOutputSelector                       = GUIDOF!IAudioOutputSelector;
const GUID IID_IAudioPeakMeter                            = GUIDOF!IAudioPeakMeter;
const GUID IID_IAudioRenderClient                         = GUIDOF!IAudioRenderClient;
const GUID IID_IAudioSessionControl                       = GUIDOF!IAudioSessionControl;
const GUID IID_IAudioSessionControl2                      = GUIDOF!IAudioSessionControl2;
const GUID IID_IAudioSessionEnumerator                    = GUIDOF!IAudioSessionEnumerator;
const GUID IID_IAudioSessionEvents                        = GUIDOF!IAudioSessionEvents;
const GUID IID_IAudioSessionManager                       = GUIDOF!IAudioSessionManager;
const GUID IID_IAudioSessionManager2                      = GUIDOF!IAudioSessionManager2;
const GUID IID_IAudioSessionNotification                  = GUIDOF!IAudioSessionNotification;
const GUID IID_IAudioStreamVolume                         = GUIDOF!IAudioStreamVolume;
const GUID IID_IAudioTreble                               = GUIDOF!IAudioTreble;
const GUID IID_IAudioVolumeDuckNotification               = GUIDOF!IAudioVolumeDuckNotification;
const GUID IID_IAudioVolumeLevel                          = GUIDOF!IAudioVolumeLevel;
const GUID IID_IChannelAudioVolume                        = GUIDOF!IChannelAudioVolume;
const GUID IID_IConnector                                 = GUIDOF!IConnector;
const GUID IID_IControlChangeNotify                       = GUIDOF!IControlChangeNotify;
const GUID IID_IControlInterface                          = GUIDOF!IControlInterface;
const GUID IID_IDeviceSpecificProperty                    = GUIDOF!IDeviceSpecificProperty;
const GUID IID_IDeviceTopology                            = GUIDOF!IDeviceTopology;
const GUID IID_IHardwareAudioEngineBase                   = GUIDOF!IHardwareAudioEngineBase;
const GUID IID_IKsFormatSupport                           = GUIDOF!IKsFormatSupport;
const GUID IID_IKsJackContainerId                         = GUIDOF!IKsJackContainerId;
const GUID IID_IKsJackDescription                         = GUIDOF!IKsJackDescription;
const GUID IID_IKsJackDescription2                        = GUIDOF!IKsJackDescription2;
const GUID IID_IKsJackSinkInformation                     = GUIDOF!IKsJackSinkInformation;
const GUID IID_IMMDevice                                  = GUIDOF!IMMDevice;
const GUID IID_IMMDeviceActivator                         = GUIDOF!IMMDeviceActivator;
const GUID IID_IMMDeviceCollection                        = GUIDOF!IMMDeviceCollection;
const GUID IID_IMMDeviceEnumerator                        = GUIDOF!IMMDeviceEnumerator;
const GUID IID_IMMEndpoint                                = GUIDOF!IMMEndpoint;
const GUID IID_IMMNotificationClient                      = GUIDOF!IMMNotificationClient;
const GUID IID_IPart                                      = GUIDOF!IPart;
const GUID IID_IPartsList                                 = GUIDOF!IPartsList;
const GUID IID_IPerChannelDbLevel                         = GUIDOF!IPerChannelDbLevel;
const GUID IID_ISimpleAudioVolume                         = GUIDOF!ISimpleAudioVolume;
const GUID IID_ISpatialAudioClient                        = GUIDOF!ISpatialAudioClient;
const GUID IID_ISpatialAudioMetadataClient                = GUIDOF!ISpatialAudioMetadataClient;
const GUID IID_ISpatialAudioMetadataCopier                = GUIDOF!ISpatialAudioMetadataCopier;
const GUID IID_ISpatialAudioMetadataItems                 = GUIDOF!ISpatialAudioMetadataItems;
const GUID IID_ISpatialAudioMetadataItemsBuffer           = GUIDOF!ISpatialAudioMetadataItemsBuffer;
const GUID IID_ISpatialAudioMetadataReader                = GUIDOF!ISpatialAudioMetadataReader;
const GUID IID_ISpatialAudioMetadataWriter                = GUIDOF!ISpatialAudioMetadataWriter;
const GUID IID_ISpatialAudioObject                        = GUIDOF!ISpatialAudioObject;
const GUID IID_ISpatialAudioObjectBase                    = GUIDOF!ISpatialAudioObjectBase;
const GUID IID_ISpatialAudioObjectForHrtf                 = GUIDOF!ISpatialAudioObjectForHrtf;
const GUID IID_ISpatialAudioObjectForMetadataCommands     = GUIDOF!ISpatialAudioObjectForMetadataCommands;
const GUID IID_ISpatialAudioObjectForMetadataItems        = GUIDOF!ISpatialAudioObjectForMetadataItems;
const GUID IID_ISpatialAudioObjectRenderStream            = GUIDOF!ISpatialAudioObjectRenderStream;
const GUID IID_ISpatialAudioObjectRenderStreamBase        = GUIDOF!ISpatialAudioObjectRenderStreamBase;
const GUID IID_ISpatialAudioObjectRenderStreamForHrtf     = GUIDOF!ISpatialAudioObjectRenderStreamForHrtf;
const GUID IID_ISpatialAudioObjectRenderStreamForMetadata = GUIDOF!ISpatialAudioObjectRenderStreamForMetadata;
const GUID IID_ISpatialAudioObjectRenderStreamNotify      = GUIDOF!ISpatialAudioObjectRenderStreamNotify;
const GUID IID_ISubunit                                   = GUIDOF!ISubunit;
