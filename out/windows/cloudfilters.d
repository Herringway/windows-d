module windows.cloudfilters;

public import system;
public import windows.com;
public import windows.filesystem;
public import windows.systemservices;

extern(Windows):

struct CF_CONNECTION_KEY__
{
    long Internal;
}

struct CF_FS_METADATA
{
    FILE_BASIC_INFO BasicInfo;
    LARGE_INTEGER FileSize;
}

enum CF_PLACEHOLDER_CREATE_FLAGS
{
    CF_PLACEHOLDER_CREATE_FLAG_NONE = 0,
    CF_PLACEHOLDER_CREATE_FLAG_DISABLE_ON_DEMAND_POPULATION = 1,
    CF_PLACEHOLDER_CREATE_FLAG_MARK_IN_SYNC = 2,
    CF_PLACEHOLDER_CREATE_FLAG_SUPERSEDE = 4,
    CF_PLACEHOLDER_CREATE_FLAG_ALWAYS_FULL = 8,
}

struct CF_PLACEHOLDER_CREATE_INFO
{
    const(wchar)* RelativeFileName;
    CF_FS_METADATA FsMetadata;
    void* FileIdentity;
    uint FileIdentityLength;
    CF_PLACEHOLDER_CREATE_FLAGS Flags;
    HRESULT Result;
    long CreateUsn;
}

enum CF_SYNC_PROVIDER_STATUS
{
    CF_PROVIDER_STATUS_DISCONNECTED = 0,
    CF_PROVIDER_STATUS_IDLE = 1,
    CF_PROVIDER_STATUS_POPULATE_NAMESPACE = 2,
    CF_PROVIDER_STATUS_POPULATE_METADATA = 4,
    CF_PROVIDER_STATUS_POPULATE_CONTENT = 8,
    CF_PROVIDER_STATUS_SYNC_INCREMENTAL = 16,
    CF_PROVIDER_STATUS_SYNC_FULL = 32,
    CF_PROVIDER_STATUS_CONNECTIVITY_LOST = 64,
    CF_PROVIDER_STATUS_CLEAR_FLAGS = -2147483648,
    CF_PROVIDER_STATUS_TERMINATED = -1073741823,
    CF_PROVIDER_STATUS_ERROR = -1073741822,
}

struct CF_PROCESS_INFO
{
    uint StructSize;
    uint ProcessId;
    const(wchar)* ImagePath;
    const(wchar)* PackageName;
    const(wchar)* ApplicationId;
    const(wchar)* CommandLine;
    uint SessionId;
}

struct CF_PLATFORM_INFO
{
    uint BuildNumber;
    uint RevisionNumber;
    uint IntegrationNumber;
}

enum CF_REGISTER_FLAGS
{
    CF_REGISTER_FLAG_NONE = 0,
    CF_REGISTER_FLAG_UPDATE = 1,
    CF_REGISTER_FLAG_DISABLE_ON_DEMAND_POPULATION_ON_ROOT = 2,
    CF_REGISTER_FLAG_MARK_IN_SYNC_ON_ROOT = 4,
}

enum CF_HYDRATION_POLICY_PRIMARY
{
    CF_HYDRATION_POLICY_PARTIAL = 0,
    CF_HYDRATION_POLICY_PROGRESSIVE = 1,
    CF_HYDRATION_POLICY_FULL = 2,
    CF_HYDRATION_POLICY_ALWAYS_FULL = 3,
}

struct CF_HYDRATION_POLICY_PRIMARY_USHORT
{
    ushort us;
}

enum CF_HYDRATION_POLICY_MODIFIER
{
    CF_HYDRATION_POLICY_MODIFIER_NONE = 0,
    CF_HYDRATION_POLICY_MODIFIER_VALIDATION_REQUIRED = 1,
    CF_HYDRATION_POLICY_MODIFIER_STREAMING_ALLOWED = 2,
    CF_HYDRATION_POLICY_MODIFIER_AUTO_DEHYDRATION_ALLOWED = 4,
}

struct CF_HYDRATION_POLICY_MODIFIER_USHORT
{
    ushort us;
}

struct CF_HYDRATION_POLICY
{
    CF_HYDRATION_POLICY_PRIMARY_USHORT Primary;
    CF_HYDRATION_POLICY_MODIFIER_USHORT Modifier;
}

enum CF_POPULATION_POLICY_PRIMARY
{
    CF_POPULATION_POLICY_PARTIAL = 0,
    CF_POPULATION_POLICY_FULL = 2,
    CF_POPULATION_POLICY_ALWAYS_FULL = 3,
}

struct CF_POPULATION_POLICY_PRIMARY_USHORT
{
    ushort us;
}

enum CF_POPULATION_POLICY_MODIFIER
{
    CF_POPULATION_POLICY_MODIFIER_NONE = 0,
}

struct CF_POPULATION_POLICY_MODIFIER_USHORT
{
    ushort us;
}

struct CF_POPULATION_POLICY
{
    CF_POPULATION_POLICY_PRIMARY_USHORT Primary;
    CF_POPULATION_POLICY_MODIFIER_USHORT Modifier;
}

enum CF_PLACEHOLDER_MANAGEMENT_POLICY
{
    CF_PLACEHOLDER_MANAGEMENT_POLICY_DEFAULT = 0,
    CF_PLACEHOLDER_MANAGEMENT_POLICY_CREATE_UNRESTRICTED = 1,
    CF_PLACEHOLDER_MANAGEMENT_POLICY_CONVERT_TO_UNRESTRICTED = 2,
    CF_PLACEHOLDER_MANAGEMENT_POLICY_UPDATE_UNRESTRICTED = 4,
}

enum CF_INSYNC_POLICY
{
    CF_INSYNC_POLICY_NONE = 0,
    CF_INSYNC_POLICY_TRACK_FILE_CREATION_TIME = 1,
    CF_INSYNC_POLICY_TRACK_FILE_READONLY_ATTRIBUTE = 2,
    CF_INSYNC_POLICY_TRACK_FILE_HIDDEN_ATTRIBUTE = 4,
    CF_INSYNC_POLICY_TRACK_FILE_SYSTEM_ATTRIBUTE = 8,
    CF_INSYNC_POLICY_TRACK_DIRECTORY_CREATION_TIME = 16,
    CF_INSYNC_POLICY_TRACK_DIRECTORY_READONLY_ATTRIBUTE = 32,
    CF_INSYNC_POLICY_TRACK_DIRECTORY_HIDDEN_ATTRIBUTE = 64,
    CF_INSYNC_POLICY_TRACK_DIRECTORY_SYSTEM_ATTRIBUTE = 128,
    CF_INSYNC_POLICY_TRACK_FILE_LAST_WRITE_TIME = 256,
    CF_INSYNC_POLICY_TRACK_DIRECTORY_LAST_WRITE_TIME = 512,
    CF_INSYNC_POLICY_TRACK_FILE_ALL = 5592335,
    CF_INSYNC_POLICY_TRACK_DIRECTORY_ALL = 11184880,
    CF_INSYNC_POLICY_TRACK_ALL = 16777215,
    CF_INSYNC_POLICY_PRESERVE_INSYNC_FOR_SYNC_ENGINE = -2147483648,
}

enum CF_HARDLINK_POLICY
{
    CF_HARDLINK_POLICY_NONE = 0,
    CF_HARDLINK_POLICY_ALLOWED = 1,
}

struct CF_SYNC_POLICIES
{
    uint StructSize;
    CF_HYDRATION_POLICY Hydration;
    CF_POPULATION_POLICY Population;
    CF_INSYNC_POLICY InSync;
    CF_HARDLINK_POLICY HardLink;
    CF_PLACEHOLDER_MANAGEMENT_POLICY PlaceholderManagement;
}

struct CF_SYNC_REGISTRATION
{
    uint StructSize;
    const(wchar)* ProviderName;
    const(wchar)* ProviderVersion;
    void* SyncRootIdentity;
    uint SyncRootIdentityLength;
    void* FileIdentity;
    uint FileIdentityLength;
    Guid ProviderId;
}

struct CF_CALLBACK_INFO
{
    uint StructSize;
    CF_CONNECTION_KEY__ ConnectionKey;
    void* CallbackContext;
    const(wchar)* VolumeGuidName;
    const(wchar)* VolumeDosName;
    uint VolumeSerialNumber;
    LARGE_INTEGER SyncRootFileId;
    void* SyncRootIdentity;
    uint SyncRootIdentityLength;
    LARGE_INTEGER FileId;
    LARGE_INTEGER FileSize;
    void* FileIdentity;
    uint FileIdentityLength;
    const(wchar)* NormalizedPath;
    LARGE_INTEGER TransferKey;
    ubyte PriorityHint;
    CORRELATION_VECTOR* CorrelationVector;
    CF_PROCESS_INFO* ProcessInfo;
    LARGE_INTEGER RequestKey;
}

enum CF_CALLBACK_CANCEL_FLAGS
{
    CF_CALLBACK_CANCEL_FLAG_NONE = 0,
    CF_CALLBACK_CANCEL_FLAG_IO_TIMEOUT = 1,
    CF_CALLBACK_CANCEL_FLAG_IO_ABORTED = 2,
}

enum CF_CALLBACK_FETCH_DATA_FLAGS
{
    CF_CALLBACK_FETCH_DATA_FLAG_NONE = 0,
    CF_CALLBACK_FETCH_DATA_FLAG_RECOVERY = 1,
    CF_CALLBACK_FETCH_DATA_FLAG_EXPLICIT_HYDRATION = 2,
}

enum CF_CALLBACK_VALIDATE_DATA_FLAGS
{
    CF_CALLBACK_VALIDATE_DATA_FLAG_NONE = 0,
    CF_CALLBACK_VALIDATE_DATA_FLAG_EXPLICIT_HYDRATION = 2,
}

enum CF_CALLBACK_FETCH_PLACEHOLDERS_FLAGS
{
    CF_CALLBACK_FETCH_PLACEHOLDERS_FLAG_NONE = 0,
}

enum CF_CALLBACK_OPEN_COMPLETION_FLAGS
{
    CF_CALLBACK_OPEN_COMPLETION_FLAG_NONE = 0,
    CF_CALLBACK_OPEN_COMPLETION_FLAG_PLACEHOLDER_UNKNOWN = 1,
    CF_CALLBACK_OPEN_COMPLETION_FLAG_PLACEHOLDER_UNSUPPORTED = 2,
}

enum CF_CALLBACK_CLOSE_COMPLETION_FLAGS
{
    CF_CALLBACK_CLOSE_COMPLETION_FLAG_NONE = 0,
    CF_CALLBACK_CLOSE_COMPLETION_FLAG_DELETED = 1,
}

enum CF_CALLBACK_DEHYDRATE_FLAGS
{
    CF_CALLBACK_DEHYDRATE_FLAG_NONE = 0,
    CF_CALLBACK_DEHYDRATE_FLAG_BACKGROUND = 1,
}

enum CF_CALLBACK_DEHYDRATE_COMPLETION_FLAGS
{
    CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_NONE = 0,
    CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_BACKGROUND = 1,
    CF_CALLBACK_DEHYDRATE_COMPLETION_FLAG_DEHYDRATED = 2,
}

enum CF_CALLBACK_DELETE_FLAGS
{
    CF_CALLBACK_DELETE_FLAG_NONE = 0,
    CF_CALLBACK_DELETE_FLAG_IS_DIRECTORY = 1,
    CF_CALLBACK_DELETE_FLAG_IS_UNDELETE = 2,
}

enum CF_CALLBACK_DELETE_COMPLETION_FLAGS
{
    CF_CALLBACK_DELETE_COMPLETION_FLAG_NONE = 0,
}

enum CF_CALLBACK_RENAME_FLAGS
{
    CF_CALLBACK_RENAME_FLAG_NONE = 0,
    CF_CALLBACK_RENAME_FLAG_IS_DIRECTORY = 1,
    CF_CALLBACK_RENAME_FLAG_SOURCE_IN_SCOPE = 2,
    CF_CALLBACK_RENAME_FLAG_TARGET_IN_SCOPE = 4,
}

enum CF_CALLBACK_RENAME_COMPLETION_FLAGS
{
    CF_CALLBACK_RENAME_COMPLETION_FLAG_NONE = 0,
}

enum CF_CALLBACK_DEHYDRATION_REASON
{
    CF_CALLBACK_DEHYDRATION_REASON_NONE = 0,
    CF_CALLBACK_DEHYDRATION_REASON_USER_MANUAL = 1,
    CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_LOW_SPACE = 2,
    CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_INACTIVITY = 3,
    CF_CALLBACK_DEHYDRATION_REASON_SYSTEM_OS_UPGRADE = 4,
}

struct CF_CALLBACK_PARAMETERS
{
    uint ParamSize;
    _Anonymous_e__Union Anonymous;
}

alias CF_CALLBACK = extern(Windows) void function(const(CF_CALLBACK_INFO)* CallbackInfo, const(CF_CALLBACK_PARAMETERS)* CallbackParameters);
enum CF_CALLBACK_TYPE
{
    CF_CALLBACK_TYPE_FETCH_DATA = 0,
    CF_CALLBACK_TYPE_VALIDATE_DATA = 1,
    CF_CALLBACK_TYPE_CANCEL_FETCH_DATA = 2,
    CF_CALLBACK_TYPE_FETCH_PLACEHOLDERS = 3,
    CF_CALLBACK_TYPE_CANCEL_FETCH_PLACEHOLDERS = 4,
    CF_CALLBACK_TYPE_NOTIFY_FILE_OPEN_COMPLETION = 5,
    CF_CALLBACK_TYPE_NOTIFY_FILE_CLOSE_COMPLETION = 6,
    CF_CALLBACK_TYPE_NOTIFY_DEHYDRATE = 7,
    CF_CALLBACK_TYPE_NOTIFY_DEHYDRATE_COMPLETION = 8,
    CF_CALLBACK_TYPE_NOTIFY_DELETE = 9,
    CF_CALLBACK_TYPE_NOTIFY_DELETE_COMPLETION = 10,
    CF_CALLBACK_TYPE_NOTIFY_RENAME = 11,
    CF_CALLBACK_TYPE_NOTIFY_RENAME_COMPLETION = 12,
    CF_CALLBACK_TYPE_NONE = -1,
}

struct CF_CALLBACK_REGISTRATION
{
    CF_CALLBACK_TYPE Type;
    CF_CALLBACK Callback;
}

enum CF_CONNECT_FLAGS
{
    CF_CONNECT_FLAG_NONE = 0,
    CF_CONNECT_FLAG_REQUIRE_PROCESS_INFO = 2,
    CF_CONNECT_FLAG_REQUIRE_FULL_FILE_PATH = 4,
    CF_CONNECT_FLAG_BLOCK_SELF_IMPLICIT_HYDRATION = 8,
}

enum CF_OPERATION_TYPE
{
    CF_OPERATION_TYPE_TRANSFER_DATA = 0,
    CF_OPERATION_TYPE_RETRIEVE_DATA = 1,
    CF_OPERATION_TYPE_ACK_DATA = 2,
    CF_OPERATION_TYPE_RESTART_HYDRATION = 3,
    CF_OPERATION_TYPE_TRANSFER_PLACEHOLDERS = 4,
    CF_OPERATION_TYPE_ACK_DEHYDRATE = 5,
    CF_OPERATION_TYPE_ACK_DELETE = 6,
    CF_OPERATION_TYPE_ACK_RENAME = 7,
}

struct CF_SYNC_STATUS
{
    uint StructSize;
    uint Code;
    uint DescriptionOffset;
    uint DescriptionLength;
    uint DeviceIdOffset;
    uint DeviceIdLength;
}

struct CF_OPERATION_INFO
{
    uint StructSize;
    CF_OPERATION_TYPE Type;
    CF_CONNECTION_KEY__ ConnectionKey;
    LARGE_INTEGER TransferKey;
    const(CORRELATION_VECTOR)* CorrelationVector;
    const(CF_SYNC_STATUS)* SyncStatus;
    LARGE_INTEGER RequestKey;
}

enum CF_OPERATION_TRANSFER_DATA_FLAGS
{
    CF_OPERATION_TRANSFER_DATA_FLAG_NONE = 0,
}

enum CF_OPERATION_RETRIEVE_DATA_FLAGS
{
    CF_OPERATION_RETRIEVE_DATA_FLAG_NONE = 0,
}

enum CF_OPERATION_ACK_DATA_FLAGS
{
    CF_OPERATION_ACK_DATA_FLAG_NONE = 0,
}

enum CF_OPERATION_RESTART_HYDRATION_FLAGS
{
    CF_OPERATION_RESTART_HYDRATION_FLAG_NONE = 0,
    CF_OPERATION_RESTART_HYDRATION_FLAG_MARK_IN_SYNC = 1,
}

enum CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAGS
{
    CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_NONE = 0,
    CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_STOP_ON_ERROR = 1,
    CF_OPERATION_TRANSFER_PLACEHOLDERS_FLAG_DISABLE_ON_DEMAND_POPULATION = 2,
}

enum CF_OPERATION_ACK_DEHYDRATE_FLAGS
{
    CF_OPERATION_ACK_DEHYDRATE_FLAG_NONE = 0,
}

enum CF_OPERATION_ACK_RENAME_FLAGS
{
    CF_OPERATION_ACK_RENAME_FLAG_NONE = 0,
}

enum CF_OPERATION_ACK_DELETE_FLAGS
{
    CF_OPERATION_ACK_DELETE_FLAG_NONE = 0,
}

struct CF_OPERATION_PARAMETERS
{
    uint ParamSize;
    _Anonymous_e__Union Anonymous;
}

enum CF_CREATE_FLAGS
{
    CF_CREATE_FLAG_NONE = 0,
    CF_CREATE_FLAG_STOP_ON_ERROR = 1,
}

enum CF_OPEN_FILE_FLAGS
{
    CF_OPEN_FILE_FLAG_NONE = 0,
    CF_OPEN_FILE_FLAG_EXCLUSIVE = 1,
    CF_OPEN_FILE_FLAG_WRITE_ACCESS = 2,
    CF_OPEN_FILE_FLAG_DELETE_ACCESS = 4,
    CF_OPEN_FILE_FLAG_FOREGROUND = 8,
}

struct CF_FILE_RANGE
{
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER Length;
}

enum CF_CONVERT_FLAGS
{
    CF_CONVERT_FLAG_NONE = 0,
    CF_CONVERT_FLAG_MARK_IN_SYNC = 1,
    CF_CONVERT_FLAG_DEHYDRATE = 2,
    CF_CONVERT_FLAG_ENABLE_ON_DEMAND_POPULATION = 4,
    CF_CONVERT_FLAG_ALWAYS_FULL = 8,
}

enum CF_UPDATE_FLAGS
{
    CF_UPDATE_FLAG_NONE = 0,
    CF_UPDATE_FLAG_VERIFY_IN_SYNC = 1,
    CF_UPDATE_FLAG_MARK_IN_SYNC = 2,
    CF_UPDATE_FLAG_DEHYDRATE = 4,
    CF_UPDATE_FLAG_ENABLE_ON_DEMAND_POPULATION = 8,
    CF_UPDATE_FLAG_DISABLE_ON_DEMAND_POPULATION = 16,
    CF_UPDATE_FLAG_REMOVE_FILE_IDENTITY = 32,
    CF_UPDATE_FLAG_CLEAR_IN_SYNC = 64,
    CF_UPDATE_FLAG_REMOVE_PROPERTY = 128,
    CF_UPDATE_FLAG_PASSTHROUGH_FS_METADATA = 256,
    CF_UPDATE_FLAG_ALWAYS_FULL = 512,
    CF_UPDATE_FLAG_ALLOW_PARTIAL = 1024,
}

enum CF_REVERT_FLAGS
{
    CF_REVERT_FLAG_NONE = 0,
}

enum CF_HYDRATE_FLAGS
{
    CF_HYDRATE_FLAG_NONE = 0,
}

enum CF_DEHYDRATE_FLAGS
{
    CF_DEHYDRATE_FLAG_NONE = 0,
    CF_DEHYDRATE_FLAG_BACKGROUND = 1,
}

enum CF_PIN_STATE
{
    CF_PIN_STATE_UNSPECIFIED = 0,
    CF_PIN_STATE_PINNED = 1,
    CF_PIN_STATE_UNPINNED = 2,
    CF_PIN_STATE_EXCLUDED = 3,
    CF_PIN_STATE_INHERIT = 4,
}

enum CF_SET_PIN_FLAGS
{
    CF_SET_PIN_FLAG_NONE = 0,
    CF_SET_PIN_FLAG_RECURSE = 1,
    CF_SET_PIN_FLAG_RECURSE_ONLY = 2,
    CF_SET_PIN_FLAG_RECURSE_STOP_ON_ERROR = 4,
}

enum CF_IN_SYNC_STATE
{
    CF_IN_SYNC_STATE_NOT_IN_SYNC = 0,
    CF_IN_SYNC_STATE_IN_SYNC = 1,
}

enum CF_SET_IN_SYNC_FLAGS
{
    CF_SET_IN_SYNC_FLAG_NONE = 0,
}

enum CF_PLACEHOLDER_STATE
{
    CF_PLACEHOLDER_STATE_NO_STATES = 0,
    CF_PLACEHOLDER_STATE_PLACEHOLDER = 1,
    CF_PLACEHOLDER_STATE_SYNC_ROOT = 2,
    CF_PLACEHOLDER_STATE_ESSENTIAL_PROP_PRESENT = 4,
    CF_PLACEHOLDER_STATE_IN_SYNC = 8,
    CF_PLACEHOLDER_STATE_PARTIAL = 16,
    CF_PLACEHOLDER_STATE_PARTIALLY_ON_DISK = 32,
    CF_PLACEHOLDER_STATE_INVALID = -1,
}

enum CF_PLACEHOLDER_INFO_CLASS
{
    CF_PLACEHOLDER_INFO_BASIC = 0,
    CF_PLACEHOLDER_INFO_STANDARD = 1,
}

struct CF_PLACEHOLDER_BASIC_INFO
{
    CF_PIN_STATE PinState;
    CF_IN_SYNC_STATE InSyncState;
    LARGE_INTEGER FileId;
    LARGE_INTEGER SyncRootFileId;
    uint FileIdentityLength;
    ubyte FileIdentity;
}

struct CF_PLACEHOLDER_STANDARD_INFO
{
    LARGE_INTEGER OnDiskDataSize;
    LARGE_INTEGER ValidatedDataSize;
    LARGE_INTEGER ModifiedDataSize;
    LARGE_INTEGER PropertiesSize;
    CF_PIN_STATE PinState;
    CF_IN_SYNC_STATE InSyncState;
    LARGE_INTEGER FileId;
    LARGE_INTEGER SyncRootFileId;
    uint FileIdentityLength;
    ubyte FileIdentity;
}

enum CF_SYNC_ROOT_INFO_CLASS
{
    CF_SYNC_ROOT_INFO_BASIC = 0,
    CF_SYNC_ROOT_INFO_STANDARD = 1,
    CF_SYNC_ROOT_INFO_PROVIDER = 2,
}

struct CF_SYNC_ROOT_BASIC_INFO
{
    LARGE_INTEGER SyncRootFileId;
}

struct CF_SYNC_ROOT_PROVIDER_INFO
{
    CF_SYNC_PROVIDER_STATUS ProviderStatus;
    ushort ProviderName;
    ushort ProviderVersion;
}

struct CF_SYNC_ROOT_STANDARD_INFO
{
    LARGE_INTEGER SyncRootFileId;
    CF_HYDRATION_POLICY HydrationPolicy;
    CF_POPULATION_POLICY PopulationPolicy;
    CF_INSYNC_POLICY InSyncPolicy;
    CF_HARDLINK_POLICY HardLinkPolicy;
    CF_SYNC_PROVIDER_STATUS ProviderStatus;
    ushort ProviderName;
    ushort ProviderVersion;
    uint SyncRootIdentityLength;
    ubyte SyncRootIdentity;
}

enum CF_PLACEHOLDER_RANGE_INFO_CLASS
{
    CF_PLACEHOLDER_RANGE_INFO_ONDISK = 1,
    CF_PLACEHOLDER_RANGE_INFO_VALIDATED = 2,
    CF_PLACEHOLDER_RANGE_INFO_MODIFIED = 3,
}

@DllImport("cldapi.dll")
HRESULT CfGetPlatformInfo(CF_PLATFORM_INFO* PlatformVersion);

@DllImport("cldapi.dll")
HRESULT CfRegisterSyncRoot(const(wchar)* SyncRootPath, const(CF_SYNC_REGISTRATION)* Registration, const(CF_SYNC_POLICIES)* Policies, CF_REGISTER_FLAGS RegisterFlags);

@DllImport("cldapi.dll")
HRESULT CfUnregisterSyncRoot(const(wchar)* SyncRootPath);

@DllImport("cldapi.dll")
HRESULT CfConnectSyncRoot(const(wchar)* SyncRootPath, const(CF_CALLBACK_REGISTRATION)* CallbackTable, void* CallbackContext, CF_CONNECT_FLAGS ConnectFlags, CF_CONNECTION_KEY__* ConnectionKey);

@DllImport("cldapi.dll")
HRESULT CfDisconnectSyncRoot(CF_CONNECTION_KEY__ ConnectionKey);

@DllImport("cldapi.dll")
HRESULT CfGetTransferKey(HANDLE FileHandle, LARGE_INTEGER* TransferKey);

@DllImport("cldapi.dll")
void CfReleaseTransferKey(HANDLE FileHandle, LARGE_INTEGER* TransferKey);

@DllImport("cldapi.dll")
HRESULT CfExecute(const(CF_OPERATION_INFO)* OpInfo, CF_OPERATION_PARAMETERS* OpParams);

@DllImport("cldapi.dll")
HRESULT CfUpdateSyncProviderStatus(CF_CONNECTION_KEY__ ConnectionKey, CF_SYNC_PROVIDER_STATUS ProviderStatus);

@DllImport("cldapi.dll")
HRESULT CfQuerySyncProviderStatus(CF_CONNECTION_KEY__ ConnectionKey, CF_SYNC_PROVIDER_STATUS* ProviderStatus);

@DllImport("cldapi.dll")
HRESULT CfReportSyncStatus(const(wchar)* SyncRootPath, CF_SYNC_STATUS* SyncStatus);

@DllImport("cldapi.dll")
HRESULT CfCreatePlaceholders(const(wchar)* BaseDirectoryPath, char* PlaceholderArray, uint PlaceholderCount, CF_CREATE_FLAGS CreateFlags, uint* EntriesProcessed);

@DllImport("cldapi.dll")
HRESULT CfOpenFileWithOplock(const(wchar)* FilePath, CF_OPEN_FILE_FLAGS Flags, int* ProtectedHandle);

@DllImport("cldapi.dll")
ubyte CfReferenceProtectedHandle(HANDLE ProtectedHandle);

@DllImport("cldapi.dll")
HANDLE CfGetWin32HandleFromProtectedHandle(HANDLE ProtectedHandle);

@DllImport("cldapi.dll")
void CfReleaseProtectedHandle(HANDLE ProtectedHandle);

@DllImport("cldapi.dll")
void CfCloseHandle(HANDLE FileHandle);

@DllImport("cldapi.dll")
HRESULT CfConvertToPlaceholder(HANDLE FileHandle, char* FileIdentity, uint FileIdentityLength, CF_CONVERT_FLAGS ConvertFlags, long* ConvertUsn, OVERLAPPED* Overlapped);

@DllImport("cldapi.dll")
HRESULT CfUpdatePlaceholder(HANDLE FileHandle, const(CF_FS_METADATA)* FsMetadata, char* FileIdentity, uint FileIdentityLength, char* DehydrateRangeArray, uint DehydrateRangeCount, CF_UPDATE_FLAGS UpdateFlags, long* UpdateUsn, OVERLAPPED* Overlapped);

@DllImport("cldapi.dll")
HRESULT CfRevertPlaceholder(HANDLE FileHandle, CF_REVERT_FLAGS RevertFlags, OVERLAPPED* Overlapped);

@DllImport("cldapi.dll")
HRESULT CfHydratePlaceholder(HANDLE FileHandle, LARGE_INTEGER StartingOffset, LARGE_INTEGER Length, CF_HYDRATE_FLAGS HydrateFlags, OVERLAPPED* Overlapped);

@DllImport("cldapi.dll")
HRESULT CfDehydratePlaceholder(HANDLE FileHandle, LARGE_INTEGER StartingOffset, LARGE_INTEGER Length, CF_DEHYDRATE_FLAGS DehydrateFlags, OVERLAPPED* Overlapped);

@DllImport("cldapi.dll")
HRESULT CfSetPinState(HANDLE FileHandle, CF_PIN_STATE PinState, CF_SET_PIN_FLAGS PinFlags, OVERLAPPED* Overlapped);

@DllImport("cldapi.dll")
HRESULT CfSetInSyncState(HANDLE FileHandle, CF_IN_SYNC_STATE InSyncState, CF_SET_IN_SYNC_FLAGS InSyncFlags, long* InSyncUsn);

@DllImport("cldapi.dll")
HRESULT CfSetCorrelationVector(HANDLE FileHandle, const(CORRELATION_VECTOR)* CorrelationVector);

@DllImport("cldapi.dll")
HRESULT CfGetCorrelationVector(HANDLE FileHandle, CORRELATION_VECTOR* CorrelationVector);

@DllImport("cldapi.dll")
CF_PLACEHOLDER_STATE CfGetPlaceholderStateFromAttributeTag(uint FileAttributes, uint ReparseTag);

@DllImport("cldapi.dll")
CF_PLACEHOLDER_STATE CfGetPlaceholderStateFromFileInfo(void* InfoBuffer, FILE_INFO_BY_HANDLE_CLASS InfoClass);

@DllImport("cldapi.dll")
CF_PLACEHOLDER_STATE CfGetPlaceholderStateFromFindData(const(WIN32_FIND_DATAA)* FindData);

@DllImport("cldapi.dll")
HRESULT CfGetPlaceholderInfo(HANDLE FileHandle, CF_PLACEHOLDER_INFO_CLASS InfoClass, char* InfoBuffer, uint InfoBufferLength, uint* ReturnedLength);

@DllImport("cldapi.dll")
HRESULT CfGetSyncRootInfoByPath(const(wchar)* FilePath, CF_SYNC_ROOT_INFO_CLASS InfoClass, void* InfoBuffer, uint InfoBufferLength, uint* ReturnedLength);

@DllImport("cldapi.dll")
HRESULT CfGetSyncRootInfoByHandle(HANDLE FileHandle, CF_SYNC_ROOT_INFO_CLASS InfoClass, void* InfoBuffer, uint InfoBufferLength, uint* ReturnedLength);

@DllImport("cldapi.dll")
HRESULT CfGetPlaceholderRangeInfo(HANDLE FileHandle, CF_PLACEHOLDER_RANGE_INFO_CLASS InfoClass, LARGE_INTEGER StartingOffset, LARGE_INTEGER Length, char* InfoBuffer, uint InfoBufferLength, uint* ReturnedLength);

@DllImport("cldapi.dll")
HRESULT CfReportProviderProgress(CF_CONNECTION_KEY__ ConnectionKey, LARGE_INTEGER TransferKey, LARGE_INTEGER ProviderProgressTotal, LARGE_INTEGER ProviderProgressCompleted);

@DllImport("cldapi.dll")
HRESULT CfReportProviderProgress2(CF_CONNECTION_KEY__ ConnectionKey, LARGE_INTEGER TransferKey, LARGE_INTEGER RequestKey, LARGE_INTEGER ProviderProgressTotal, LARGE_INTEGER ProviderProgressCompleted, uint TargetSessionId);

