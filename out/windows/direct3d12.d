module windows.direct3d12;

public import system;
public import windows.com;
public import windows.direct3d11;
public import windows.displaydevices;
public import windows.dxgi;
public import windows.kernel;
public import windows.systemservices;
public import windows.winrt;
public import windows.windowsandmessaging;

extern(Windows):

@DllImport("d3d12.dll")
HRESULT D3D12SerializeRootSignature(const(D3D12_ROOT_SIGNATURE_DESC)* pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);

@DllImport("d3d12.dll")
HRESULT D3D12CreateRootSignatureDeserializer(char* pSrcData, uint SrcDataSizeInBytes, const(Guid)* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);

@DllImport("d3d12.dll")
HRESULT D3D12SerializeVersionedRootSignature(const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC)* pRootSignature, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);

@DllImport("d3d12.dll")
HRESULT D3D12CreateVersionedRootSignatureDeserializer(char* pSrcData, uint SrcDataSizeInBytes, const(Guid)* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);

@DllImport("d3d12.dll")
HRESULT D3D12CreateDevice(IUnknown pAdapter, D3D_FEATURE_LEVEL MinimumFeatureLevel, const(Guid)* riid, void** ppDevice);

@DllImport("d3d12.dll")
HRESULT D3D12GetDebugInterface(const(Guid)* riid, void** ppvDebug);

@DllImport("d3d12.dll")
HRESULT D3D12EnableExperimentalFeatures(uint NumFeatures, char* pIIDs, char* pConfigurationStructs, char* pConfigurationStructSizes);

@DllImport("d3d11.dll")
HRESULT D3D11On12CreateDevice(IUnknown pDevice, uint Flags, char* pFeatureLevels, uint FeatureLevels, char* ppCommandQueues, uint NumQueues, uint NodeMask, ID3D11Device* ppDevice, ID3D11DeviceContext* ppImmediateContext, D3D_FEATURE_LEVEL* pChosenFeatureLevel);

enum D3D12_COMMAND_LIST_TYPE
{
    D3D12_COMMAND_LIST_TYPE_DIRECT = 0,
    D3D12_COMMAND_LIST_TYPE_BUNDLE = 1,
    D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
    D3D12_COMMAND_LIST_TYPE_COPY = 3,
    D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4,
    D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5,
    D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE = 6,
}

enum D3D12_COMMAND_QUEUE_FLAGS
{
    D3D12_COMMAND_QUEUE_FLAG_NONE = 0,
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 1,
}

enum D3D12_COMMAND_QUEUE_PRIORITY
{
    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0,
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100,
    D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000,
}

struct D3D12_COMMAND_QUEUE_DESC
{
    D3D12_COMMAND_LIST_TYPE Type;
    int Priority;
    D3D12_COMMAND_QUEUE_FLAGS Flags;
    uint NodeMask;
}

enum D3D12_PRIMITIVE_TOPOLOGY_TYPE
{
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4,
}

enum D3D12_INPUT_CLASSIFICATION
{
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0,
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1,
}

struct D3D12_INPUT_ELEMENT_DESC
{
    const(char)* SemanticName;
    uint SemanticIndex;
    DXGI_FORMAT Format;
    uint InputSlot;
    uint AlignedByteOffset;
    D3D12_INPUT_CLASSIFICATION InputSlotClass;
    uint InstanceDataStepRate;
}

enum D3D12_FILL_MODE
{
    D3D12_FILL_MODE_WIREFRAME = 2,
    D3D12_FILL_MODE_SOLID = 3,
}

enum D3D12_CULL_MODE
{
    D3D12_CULL_MODE_NONE = 1,
    D3D12_CULL_MODE_FRONT = 2,
    D3D12_CULL_MODE_BACK = 3,
}

struct D3D12_SO_DECLARATION_ENTRY
{
    uint Stream;
    const(char)* SemanticName;
    uint SemanticIndex;
    ubyte StartComponent;
    ubyte ComponentCount;
    ubyte OutputSlot;
}

struct D3D12_VIEWPORT
{
    float TopLeftX;
    float TopLeftY;
    float Width;
    float Height;
    float MinDepth;
    float MaxDepth;
}

struct D3D12_BOX
{
    uint left;
    uint top;
    uint front;
    uint right;
    uint bottom;
    uint back;
}

enum D3D12_COMPARISON_FUNC
{
    D3D12_COMPARISON_FUNC_NEVER = 1,
    D3D12_COMPARISON_FUNC_LESS = 2,
    D3D12_COMPARISON_FUNC_EQUAL = 3,
    D3D12_COMPARISON_FUNC_LESS_EQUAL = 4,
    D3D12_COMPARISON_FUNC_GREATER = 5,
    D3D12_COMPARISON_FUNC_NOT_EQUAL = 6,
    D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7,
    D3D12_COMPARISON_FUNC_ALWAYS = 8,
}

enum D3D12_DEPTH_WRITE_MASK
{
    D3D12_DEPTH_WRITE_MASK_ZERO = 0,
    D3D12_DEPTH_WRITE_MASK_ALL = 1,
}

enum D3D12_STENCIL_OP
{
    D3D12_STENCIL_OP_KEEP = 1,
    D3D12_STENCIL_OP_ZERO = 2,
    D3D12_STENCIL_OP_REPLACE = 3,
    D3D12_STENCIL_OP_INCR_SAT = 4,
    D3D12_STENCIL_OP_DECR_SAT = 5,
    D3D12_STENCIL_OP_INVERT = 6,
    D3D12_STENCIL_OP_INCR = 7,
    D3D12_STENCIL_OP_DECR = 8,
}

struct D3D12_DEPTH_STENCILOP_DESC
{
    D3D12_STENCIL_OP StencilFailOp;
    D3D12_STENCIL_OP StencilDepthFailOp;
    D3D12_STENCIL_OP StencilPassOp;
    D3D12_COMPARISON_FUNC StencilFunc;
}

struct D3D12_DEPTH_STENCIL_DESC
{
    BOOL DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    ubyte StencilReadMask;
    ubyte StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
}

struct D3D12_DEPTH_STENCIL_DESC1
{
    BOOL DepthEnable;
    D3D12_DEPTH_WRITE_MASK DepthWriteMask;
    D3D12_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    ubyte StencilReadMask;
    ubyte StencilWriteMask;
    D3D12_DEPTH_STENCILOP_DESC FrontFace;
    D3D12_DEPTH_STENCILOP_DESC BackFace;
    BOOL DepthBoundsTestEnable;
}

enum D3D12_BLEND
{
    D3D12_BLEND_ZERO = 1,
    D3D12_BLEND_ONE = 2,
    D3D12_BLEND_SRC_COLOR = 3,
    D3D12_BLEND_INV_SRC_COLOR = 4,
    D3D12_BLEND_SRC_ALPHA = 5,
    D3D12_BLEND_INV_SRC_ALPHA = 6,
    D3D12_BLEND_DEST_ALPHA = 7,
    D3D12_BLEND_INV_DEST_ALPHA = 8,
    D3D12_BLEND_DEST_COLOR = 9,
    D3D12_BLEND_INV_DEST_COLOR = 10,
    D3D12_BLEND_SRC_ALPHA_SAT = 11,
    D3D12_BLEND_BLEND_FACTOR = 14,
    D3D12_BLEND_INV_BLEND_FACTOR = 15,
    D3D12_BLEND_SRC1_COLOR = 16,
    D3D12_BLEND_INV_SRC1_COLOR = 17,
    D3D12_BLEND_SRC1_ALPHA = 18,
    D3D12_BLEND_INV_SRC1_ALPHA = 19,
}

enum D3D12_BLEND_OP
{
    D3D12_BLEND_OP_ADD = 1,
    D3D12_BLEND_OP_SUBTRACT = 2,
    D3D12_BLEND_OP_REV_SUBTRACT = 3,
    D3D12_BLEND_OP_MIN = 4,
    D3D12_BLEND_OP_MAX = 5,
}

enum D3D12_COLOR_WRITE_ENABLE
{
    D3D12_COLOR_WRITE_ENABLE_RED = 1,
    D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D12_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D12_COLOR_WRITE_ENABLE_ALL = 15,
}

enum D3D12_LOGIC_OP
{
    D3D12_LOGIC_OP_CLEAR = 0,
    D3D12_LOGIC_OP_SET = 1,
    D3D12_LOGIC_OP_COPY = 2,
    D3D12_LOGIC_OP_COPY_INVERTED = 3,
    D3D12_LOGIC_OP_NOOP = 4,
    D3D12_LOGIC_OP_INVERT = 5,
    D3D12_LOGIC_OP_AND = 6,
    D3D12_LOGIC_OP_NAND = 7,
    D3D12_LOGIC_OP_OR = 8,
    D3D12_LOGIC_OP_NOR = 9,
    D3D12_LOGIC_OP_XOR = 10,
    D3D12_LOGIC_OP_EQUIV = 11,
    D3D12_LOGIC_OP_AND_REVERSE = 12,
    D3D12_LOGIC_OP_AND_INVERTED = 13,
    D3D12_LOGIC_OP_OR_REVERSE = 14,
    D3D12_LOGIC_OP_OR_INVERTED = 15,
}

struct D3D12_RENDER_TARGET_BLEND_DESC
{
    BOOL BlendEnable;
    BOOL LogicOpEnable;
    D3D12_BLEND SrcBlend;
    D3D12_BLEND DestBlend;
    D3D12_BLEND_OP BlendOp;
    D3D12_BLEND SrcBlendAlpha;
    D3D12_BLEND DestBlendAlpha;
    D3D12_BLEND_OP BlendOpAlpha;
    D3D12_LOGIC_OP LogicOp;
    ubyte RenderTargetWriteMask;
}

struct D3D12_BLEND_DESC
{
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D12_RENDER_TARGET_BLEND_DESC RenderTarget;
}

enum D3D12_CONSERVATIVE_RASTERIZATION_MODE
{
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1,
}

struct D3D12_RASTERIZER_DESC
{
    D3D12_FILL_MODE FillMode;
    D3D12_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    int DepthBias;
    float DepthBiasClamp;
    float SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
    uint ForcedSampleCount;
    D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
}

const GUID IID_ID3D12Object = {0xC4FEC28F, 0x7966, 0x4E95, [0x9F, 0x94, 0xF4, 0x31, 0xCB, 0x56, 0xC3, 0xB8]};
@GUID(0xC4FEC28F, 0x7966, 0x4E95, [0x9F, 0x94, 0xF4, 0x31, 0xCB, 0x56, 0xC3, 0xB8]);
interface ID3D12Object : IUnknown
{
    HRESULT GetPrivateData(const(Guid)* guid, uint* pDataSize, char* pData);
    HRESULT SetPrivateData(const(Guid)* guid, uint DataSize, char* pData);
    HRESULT SetPrivateDataInterface(const(Guid)* guid, const(IUnknown) pData);
    HRESULT SetName(const(wchar)* Name);
}

const GUID IID_ID3D12DeviceChild = {0x905DB94B, 0xA00C, 0x4140, [0x9D, 0xF5, 0x2B, 0x64, 0xCA, 0x9E, 0xA3, 0x57]};
@GUID(0x905DB94B, 0xA00C, 0x4140, [0x9D, 0xF5, 0x2B, 0x64, 0xCA, 0x9E, 0xA3, 0x57]);
interface ID3D12DeviceChild : ID3D12Object
{
    HRESULT GetDevice(const(Guid)* riid, void** ppvDevice);
}

const GUID IID_ID3D12RootSignature = {0xC54A6B66, 0x72DF, 0x4EE8, [0x8B, 0xE5, 0xA9, 0x46, 0xA1, 0x42, 0x92, 0x14]};
@GUID(0xC54A6B66, 0x72DF, 0x4EE8, [0x8B, 0xE5, 0xA9, 0x46, 0xA1, 0x42, 0x92, 0x14]);
interface ID3D12RootSignature : ID3D12DeviceChild
{
}

struct D3D12_SHADER_BYTECODE
{
    const(void)* pShaderBytecode;
    uint BytecodeLength;
}

struct D3D12_STREAM_OUTPUT_DESC
{
    const(D3D12_SO_DECLARATION_ENTRY)* pSODeclaration;
    uint NumEntries;
    const(uint)* pBufferStrides;
    uint NumStrides;
    uint RasterizedStream;
}

struct D3D12_INPUT_LAYOUT_DESC
{
    const(D3D12_INPUT_ELEMENT_DESC)* pInputElementDescs;
    uint NumElements;
}

enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
{
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1,
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2,
}

struct D3D12_CACHED_PIPELINE_STATE
{
    const(void)* pCachedBlob;
    uint CachedBlobSizeInBytes;
}

enum D3D12_PIPELINE_STATE_FLAGS
{
    D3D12_PIPELINE_STATE_FLAG_NONE = 0,
    D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 1,
}

struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
{
    ID3D12RootSignature pRootSignature;
    D3D12_SHADER_BYTECODE VS;
    D3D12_SHADER_BYTECODE PS;
    D3D12_SHADER_BYTECODE DS;
    D3D12_SHADER_BYTECODE HS;
    D3D12_SHADER_BYTECODE GS;
    D3D12_STREAM_OUTPUT_DESC StreamOutput;
    D3D12_BLEND_DESC BlendState;
    uint SampleMask;
    D3D12_RASTERIZER_DESC RasterizerState;
    D3D12_DEPTH_STENCIL_DESC DepthStencilState;
    D3D12_INPUT_LAYOUT_DESC InputLayout;
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
    uint NumRenderTargets;
    DXGI_FORMAT RTVFormats;
    DXGI_FORMAT DSVFormat;
    DXGI_SAMPLE_DESC SampleDesc;
    uint NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
}

struct D3D12_COMPUTE_PIPELINE_STATE_DESC
{
    ID3D12RootSignature pRootSignature;
    D3D12_SHADER_BYTECODE CS;
    uint NodeMask;
    D3D12_CACHED_PIPELINE_STATE CachedPSO;
    D3D12_PIPELINE_STATE_FLAGS Flags;
}

struct D3D12_RT_FORMAT_ARRAY
{
    DXGI_FORMAT RTFormats;
    uint NumRenderTargets;
}

struct D3D12_PIPELINE_STATE_STREAM_DESC
{
    uint SizeInBytes;
    void* pPipelineStateSubobjectStream;
}

enum D3D12_PIPELINE_STATE_SUBOBJECT_TYPE
{
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE = 0,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS = 1,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS = 2,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS = 3,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS = 4,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS = 5,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS = 6,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT = 7,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND = 8,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK = 9,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER = 10,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL = 11,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT = 12,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE = 13,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY = 14,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS = 15,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT = 16,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC = 17,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK = 18,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO = 19,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS = 20,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 = 21,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING = 22,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS = 24,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS = 25,
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID = 26,
}

enum D3D12_FEATURE
{
    D3D12_FEATURE_D3D12_OPTIONS = 0,
    D3D12_FEATURE_ARCHITECTURE = 1,
    D3D12_FEATURE_FEATURE_LEVELS = 2,
    D3D12_FEATURE_FORMAT_SUPPORT = 3,
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4,
    D3D12_FEATURE_FORMAT_INFO = 5,
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6,
    D3D12_FEATURE_SHADER_MODEL = 7,
    D3D12_FEATURE_D3D12_OPTIONS1 = 8,
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT = 10,
    D3D12_FEATURE_ROOT_SIGNATURE = 12,
    D3D12_FEATURE_ARCHITECTURE1 = 16,
    D3D12_FEATURE_D3D12_OPTIONS2 = 18,
    D3D12_FEATURE_SHADER_CACHE = 19,
    D3D12_FEATURE_COMMAND_QUEUE_PRIORITY = 20,
    D3D12_FEATURE_D3D12_OPTIONS3 = 21,
    D3D12_FEATURE_EXISTING_HEAPS = 22,
    D3D12_FEATURE_D3D12_OPTIONS4 = 23,
    D3D12_FEATURE_SERIALIZATION = 24,
    D3D12_FEATURE_CROSS_NODE = 25,
    D3D12_FEATURE_D3D12_OPTIONS5 = 27,
    D3D12_FEATURE_D3D12_OPTIONS6 = 30,
    D3D12_FEATURE_QUERY_META_COMMAND = 31,
    D3D12_FEATURE_D3D12_OPTIONS7 = 32,
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = 33,
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES = 34,
}

enum D3D12_SHADER_MIN_PRECISION_SUPPORT
{
    D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 1,
    D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 2,
}

enum D3D12_TILED_RESOURCES_TIER
{
    D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0,
    D3D12_TILED_RESOURCES_TIER_1 = 1,
    D3D12_TILED_RESOURCES_TIER_2 = 2,
    D3D12_TILED_RESOURCES_TIER_3 = 3,
    D3D12_TILED_RESOURCES_TIER_4 = 4,
}

enum D3D12_RESOURCE_BINDING_TIER
{
    D3D12_RESOURCE_BINDING_TIER_1 = 1,
    D3D12_RESOURCE_BINDING_TIER_2 = 2,
    D3D12_RESOURCE_BINDING_TIER_3 = 3,
}

enum D3D12_CONSERVATIVE_RASTERIZATION_TIER
{
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3,
}

enum D3D12_FORMAT_SUPPORT1
{
    D3D12_FORMAT_SUPPORT1_NONE = 0,
    D3D12_FORMAT_SUPPORT1_BUFFER = 1,
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 2,
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 4,
    D3D12_FORMAT_SUPPORT1_SO_BUFFER = 8,
    D3D12_FORMAT_SUPPORT1_TEXTURE1D = 16,
    D3D12_FORMAT_SUPPORT1_TEXTURE2D = 32,
    D3D12_FORMAT_SUPPORT1_TEXTURE3D = 64,
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 128,
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 256,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 512,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 1024,
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 2048,
    D3D12_FORMAT_SUPPORT1_MIP = 4096,
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 16384,
    D3D12_FORMAT_SUPPORT1_BLENDABLE = 32768,
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 65536,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 262144,
    D3D12_FORMAT_SUPPORT1_DISPLAY = 524288,
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 1048576,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 2097152,
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 4194304,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 8388608,
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 16777216,
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 33554432,
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 67108864,
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 134217728,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 268435456,
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 536870912,
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 1073741824,
}

enum D3D12_FORMAT_SUPPORT2
{
    D3D12_FORMAT_SUPPORT2_NONE = 0,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16,
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64,
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128,
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256,
    D3D12_FORMAT_SUPPORT2_TILED = 512,
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384,
    D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK = 32768,
}

enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
{
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0,
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 1,
}

enum D3D12_CROSS_NODE_SHARING_TIER
{
    D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0,
    D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1,
    D3D12_CROSS_NODE_SHARING_TIER_1 = 2,
    D3D12_CROSS_NODE_SHARING_TIER_2 = 3,
    D3D12_CROSS_NODE_SHARING_TIER_3 = 4,
}

enum D3D12_RESOURCE_HEAP_TIER
{
    D3D12_RESOURCE_HEAP_TIER_1 = 1,
    D3D12_RESOURCE_HEAP_TIER_2 = 2,
}

enum D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
{
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED = 0,
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 = 1,
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 = 2,
}

enum D3D12_VIEW_INSTANCING_TIER
{
    D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED = 0,
    D3D12_VIEW_INSTANCING_TIER_1 = 1,
    D3D12_VIEW_INSTANCING_TIER_2 = 2,
    D3D12_VIEW_INSTANCING_TIER_3 = 3,
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS
{
    BOOL DoublePrecisionFloatShaderOps;
    BOOL OutputMergerLogicOp;
    D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
    D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
    D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
    BOOL PSSpecifiedStencilRefSupported;
    BOOL TypedUAVLoadAdditionalFormats;
    BOOL ROVsSupported;
    D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    uint MaxGPUVirtualAddressBitsPerResource;
    BOOL StandardSwizzle64KBSupported;
    D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
    BOOL CrossAdapterRowMajorTextureSupported;
    BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
    D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
{
    BOOL WaveOps;
    uint WaveLaneCountMin;
    uint WaveLaneCountMax;
    uint TotalLaneCount;
    BOOL ExpandedComputeResourceStates;
    BOOL Int64ShaderOps;
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
{
    BOOL DepthBoundsTestSupported;
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER ProgrammableSamplePositionsTier;
}

enum D3D_ROOT_SIGNATURE_VERSION
{
    D3D_ROOT_SIGNATURE_VERSION_1 = 1,
    D3D_ROOT_SIGNATURE_VERSION_1_0 = 1,
    D3D_ROOT_SIGNATURE_VERSION_1_1 = 2,
}

struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
{
    D3D_ROOT_SIGNATURE_VERSION HighestVersion;
}

struct D3D12_FEATURE_DATA_ARCHITECTURE
{
    uint NodeIndex;
    BOOL TileBasedRenderer;
    BOOL UMA;
    BOOL CacheCoherentUMA;
}

struct D3D12_FEATURE_DATA_ARCHITECTURE1
{
    uint NodeIndex;
    BOOL TileBasedRenderer;
    BOOL UMA;
    BOOL CacheCoherentUMA;
    BOOL IsolatedMMU;
}

struct D3D12_FEATURE_DATA_FEATURE_LEVELS
{
    uint NumFeatureLevels;
    const(D3D_FEATURE_LEVEL)* pFeatureLevelsRequested;
    D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
}

enum D3D_SHADER_MODEL
{
    D3D_SHADER_MODEL_5_1 = 81,
    D3D_SHADER_MODEL_6_0 = 96,
    D3D_SHADER_MODEL_6_1 = 97,
    D3D_SHADER_MODEL_6_2 = 98,
    D3D_SHADER_MODEL_6_3 = 99,
    D3D_SHADER_MODEL_6_4 = 100,
    D3D_SHADER_MODEL_6_5 = 101,
    D3D_SHADER_MODEL_6_6 = 102,
}

struct D3D12_FEATURE_DATA_SHADER_MODEL
{
    D3D_SHADER_MODEL HighestShaderModel;
}

struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
{
    DXGI_FORMAT Format;
    D3D12_FORMAT_SUPPORT1 Support1;
    D3D12_FORMAT_SUPPORT2 Support2;
}

struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
{
    DXGI_FORMAT Format;
    uint SampleCount;
    D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
    uint NumQualityLevels;
}

struct D3D12_FEATURE_DATA_FORMAT_INFO
{
    DXGI_FORMAT Format;
    ubyte PlaneCount;
}

struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
{
    uint MaxGPUVirtualAddressBitsPerResource;
    uint MaxGPUVirtualAddressBitsPerProcess;
}

enum D3D12_SHADER_CACHE_SUPPORT_FLAGS
{
    D3D12_SHADER_CACHE_SUPPORT_NONE = 0,
    D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 1,
    D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 2,
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 4,
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 8,
}

struct D3D12_FEATURE_DATA_SHADER_CACHE
{
    D3D12_SHADER_CACHE_SUPPORT_FLAGS SupportFlags;
}

struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
{
    D3D12_COMMAND_LIST_TYPE CommandListType;
    uint Priority;
    BOOL PriorityForTypeIsSupported;
}

enum D3D12_COMMAND_LIST_SUPPORT_FLAGS
{
    D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = 1,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = 2,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = 4,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = 8,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = 16,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = 32,
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE = 64,
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
{
    BOOL CopyQueueTimestampQueriesSupported;
    BOOL CastingFullyTypedFormatSupported;
    D3D12_COMMAND_LIST_SUPPORT_FLAGS WriteBufferImmediateSupportFlags;
    D3D12_VIEW_INSTANCING_TIER ViewInstancingTier;
    BOOL BarycentricsSupported;
}

struct D3D12_FEATURE_DATA_EXISTING_HEAPS
{
    BOOL Supported;
}

enum D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
{
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 = 0,
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 = 1,
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2 = 2,
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS4
{
    BOOL MSAA64KBAlignedTextureSupported;
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER SharedResourceCompatibilityTier;
    BOOL Native16BitShaderOpsSupported;
}

enum D3D12_HEAP_SERIALIZATION_TIER
{
    D3D12_HEAP_SERIALIZATION_TIER_0 = 0,
    D3D12_HEAP_SERIALIZATION_TIER_10 = 10,
}

struct D3D12_FEATURE_DATA_SERIALIZATION
{
    uint NodeIndex;
    D3D12_HEAP_SERIALIZATION_TIER HeapSerializationTier;
}

struct D3D12_FEATURE_DATA_CROSS_NODE
{
    D3D12_CROSS_NODE_SHARING_TIER SharingTier;
    BOOL AtomicShaderInstructions;
}

enum D3D12_RENDER_PASS_TIER
{
    D3D12_RENDER_PASS_TIER_0 = 0,
    D3D12_RENDER_PASS_TIER_1 = 1,
    D3D12_RENDER_PASS_TIER_2 = 2,
}

enum D3D12_RAYTRACING_TIER
{
    D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0,
    D3D12_RAYTRACING_TIER_1_0 = 10,
    D3D12_RAYTRACING_TIER_1_1 = 11,
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS5
{
    BOOL SRVOnlyTiledResourceTier3;
    D3D12_RENDER_PASS_TIER RenderPassesTier;
    D3D12_RAYTRACING_TIER RaytracingTier;
}

enum D3D12_VARIABLE_SHADING_RATE_TIER
{
    D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED = 0,
    D3D12_VARIABLE_SHADING_RATE_TIER_1 = 1,
    D3D12_VARIABLE_SHADING_RATE_TIER_2 = 2,
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS6
{
    BOOL AdditionalShadingRatesSupported;
    BOOL PerPrimitiveShadingRateSupportedWithViewportIndexing;
    D3D12_VARIABLE_SHADING_RATE_TIER VariableShadingRateTier;
    uint ShadingRateImageTileSize;
    BOOL BackgroundProcessingSupported;
}

enum D3D12_MESH_SHADER_TIER
{
    D3D12_MESH_SHADER_TIER_NOT_SUPPORTED = 0,
    D3D12_MESH_SHADER_TIER_1 = 10,
}

enum D3D12_SAMPLER_FEEDBACK_TIER
{
    D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED = 0,
    D3D12_SAMPLER_FEEDBACK_TIER_0_9 = 90,
    D3D12_SAMPLER_FEEDBACK_TIER_1_0 = 100,
}

struct D3D12_FEATURE_DATA_D3D12_OPTIONS7
{
    D3D12_MESH_SHADER_TIER MeshShaderTier;
    D3D12_SAMPLER_FEEDBACK_TIER SamplerFeedbackTier;
}

struct D3D12_FEATURE_DATA_QUERY_META_COMMAND
{
    Guid CommandId;
    uint NodeMask;
    const(void)* pQueryInputData;
    uint QueryInputDataSizeInBytes;
    void* pQueryOutputData;
    uint QueryOutputDataSizeInBytes;
}

struct D3D12_RESOURCE_ALLOCATION_INFO
{
    ulong SizeInBytes;
    ulong Alignment;
}

struct D3D12_RESOURCE_ALLOCATION_INFO1
{
    ulong Offset;
    ulong Alignment;
    ulong SizeInBytes;
}

enum D3D12_HEAP_TYPE
{
    D3D12_HEAP_TYPE_DEFAULT = 1,
    D3D12_HEAP_TYPE_UPLOAD = 2,
    D3D12_HEAP_TYPE_READBACK = 3,
    D3D12_HEAP_TYPE_CUSTOM = 4,
}

enum D3D12_CPU_PAGE_PROPERTY
{
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3,
}

enum D3D12_MEMORY_POOL
{
    D3D12_MEMORY_POOL_UNKNOWN = 0,
    D3D12_MEMORY_POOL_L0 = 1,
    D3D12_MEMORY_POOL_L1 = 2,
}

struct D3D12_HEAP_PROPERTIES
{
    D3D12_HEAP_TYPE Type;
    D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
    D3D12_MEMORY_POOL MemoryPoolPreference;
    uint CreationNodeMask;
    uint VisibleNodeMask;
}

enum D3D12_HEAP_FLAGS
{
    D3D12_HEAP_FLAG_NONE = 0,
    D3D12_HEAP_FLAG_SHARED = 1,
    D3D12_HEAP_FLAG_DENY_BUFFERS = 4,
    D3D12_HEAP_FLAG_ALLOW_DISPLAY = 8,
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 32,
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 64,
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 128,
    D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 256,
    D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 512,
    D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 1024,
    D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT = 2048,
    D3D12_HEAP_FLAG_CREATE_NOT_ZEROED = 4096,
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 192,
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 68,
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 132,
}

struct D3D12_HEAP_DESC
{
    ulong SizeInBytes;
    D3D12_HEAP_PROPERTIES Properties;
    ulong Alignment;
    D3D12_HEAP_FLAGS Flags;
}

enum D3D12_RESOURCE_DIMENSION
{
    D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D12_RESOURCE_DIMENSION_BUFFER = 1,
    D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4,
}

enum D3D12_TEXTURE_LAYOUT
{
    D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1,
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3,
}

enum D3D12_RESOURCE_FLAGS
{
    D3D12_RESOURCE_FLAG_NONE = 0,
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 1,
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 2,
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 4,
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 8,
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 16,
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 32,
    D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 64,
}

struct D3D12_MIP_REGION
{
    uint Width;
    uint Height;
    uint Depth;
}

struct D3D12_RESOURCE_DESC
{
    D3D12_RESOURCE_DIMENSION Dimension;
    ulong Alignment;
    ulong Width;
    uint Height;
    ushort DepthOrArraySize;
    ushort MipLevels;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D12_TEXTURE_LAYOUT Layout;
    D3D12_RESOURCE_FLAGS Flags;
}

struct D3D12_RESOURCE_DESC1
{
    D3D12_RESOURCE_DIMENSION Dimension;
    ulong Alignment;
    ulong Width;
    uint Height;
    ushort DepthOrArraySize;
    ushort MipLevels;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D12_TEXTURE_LAYOUT Layout;
    D3D12_RESOURCE_FLAGS Flags;
    D3D12_MIP_REGION SamplerFeedbackMipRegion;
}

struct D3D12_DEPTH_STENCIL_VALUE
{
    float Depth;
    ubyte Stencil;
}

struct D3D12_CLEAR_VALUE
{
    DXGI_FORMAT Format;
    _Anonymous_e__Union Anonymous;
}

struct D3D12_RANGE
{
    uint Begin;
    uint End;
}

struct D3D12_RANGE_UINT64
{
    ulong Begin;
    ulong End;
}

struct D3D12_SUBRESOURCE_RANGE_UINT64
{
    uint Subresource;
    D3D12_RANGE_UINT64 Range;
}

struct D3D12_SUBRESOURCE_INFO
{
    ulong Offset;
    uint RowPitch;
    uint DepthPitch;
}

struct D3D12_TILED_RESOURCE_COORDINATE
{
    uint X;
    uint Y;
    uint Z;
    uint Subresource;
}

struct D3D12_TILE_REGION_SIZE
{
    uint NumTiles;
    BOOL UseBox;
    uint Width;
    ushort Height;
    ushort Depth;
}

enum D3D12_TILE_RANGE_FLAGS
{
    D3D12_TILE_RANGE_FLAG_NONE = 0,
    D3D12_TILE_RANGE_FLAG_NULL = 1,
    D3D12_TILE_RANGE_FLAG_SKIP = 2,
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4,
}

struct D3D12_SUBRESOURCE_TILING
{
    uint WidthInTiles;
    ushort HeightInTiles;
    ushort DepthInTiles;
    uint StartTileIndexInOverallResource;
}

struct D3D12_TILE_SHAPE
{
    uint WidthInTexels;
    uint HeightInTexels;
    uint DepthInTexels;
}

struct D3D12_PACKED_MIP_INFO
{
    ubyte NumStandardMips;
    ubyte NumPackedMips;
    uint NumTilesForPackedMips;
    uint StartTileIndexInOverallResource;
}

enum D3D12_TILE_MAPPING_FLAGS
{
    D3D12_TILE_MAPPING_FLAG_NONE = 0,
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 1,
}

enum D3D12_TILE_COPY_FLAGS
{
    D3D12_TILE_COPY_FLAG_NONE = 0,
    D3D12_TILE_COPY_FLAG_NO_HAZARD = 1,
    D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2,
    D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4,
}

enum D3D12_RESOURCE_STATES
{
    D3D12_RESOURCE_STATE_COMMON = 0,
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 1,
    D3D12_RESOURCE_STATE_INDEX_BUFFER = 2,
    D3D12_RESOURCE_STATE_RENDER_TARGET = 4,
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 8,
    D3D12_RESOURCE_STATE_DEPTH_WRITE = 16,
    D3D12_RESOURCE_STATE_DEPTH_READ = 32,
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 64,
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 128,
    D3D12_RESOURCE_STATE_STREAM_OUT = 256,
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 512,
    D3D12_RESOURCE_STATE_COPY_DEST = 1024,
    D3D12_RESOURCE_STATE_COPY_SOURCE = 2048,
    D3D12_RESOURCE_STATE_RESOLVE_DEST = 4096,
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 8192,
    D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 4194304,
    D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE = 16777216,
    D3D12_RESOURCE_STATE_GENERIC_READ = 2755,
    D3D12_RESOURCE_STATE_PRESENT = 0,
    D3D12_RESOURCE_STATE_PREDICATION = 512,
    D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 65536,
    D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 131072,
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 262144,
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 524288,
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 2097152,
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 8388608,
}

enum D3D12_RESOURCE_BARRIER_TYPE
{
    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0,
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING = 1,
    D3D12_RESOURCE_BARRIER_TYPE_UAV = 2,
}

struct D3D12_RESOURCE_TRANSITION_BARRIER
{
    ID3D12Resource pResource;
    uint Subresource;
    D3D12_RESOURCE_STATES StateBefore;
    D3D12_RESOURCE_STATES StateAfter;
}

struct D3D12_RESOURCE_ALIASING_BARRIER
{
    ID3D12Resource pResourceBefore;
    ID3D12Resource pResourceAfter;
}

struct D3D12_RESOURCE_UAV_BARRIER
{
    ID3D12Resource pResource;
}

enum D3D12_RESOURCE_BARRIER_FLAGS
{
    D3D12_RESOURCE_BARRIER_FLAG_NONE = 0,
    D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 1,
    D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 2,
}

struct D3D12_RESOURCE_BARRIER
{
    D3D12_RESOURCE_BARRIER_TYPE Type;
    D3D12_RESOURCE_BARRIER_FLAGS Flags;
    _Anonymous_e__Union Anonymous;
}

struct D3D12_SUBRESOURCE_FOOTPRINT
{
    DXGI_FORMAT Format;
    uint Width;
    uint Height;
    uint Depth;
    uint RowPitch;
}

struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
{
    ulong Offset;
    D3D12_SUBRESOURCE_FOOTPRINT Footprint;
}

enum D3D12_TEXTURE_COPY_TYPE
{
    D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0,
    D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1,
}

struct D3D12_TEXTURE_COPY_LOCATION
{
    ID3D12Resource pResource;
    D3D12_TEXTURE_COPY_TYPE Type;
    _Anonymous_e__Union Anonymous;
}

enum D3D12_RESOLVE_MODE
{
    D3D12_RESOLVE_MODE_DECOMPRESS = 0,
    D3D12_RESOLVE_MODE_MIN = 1,
    D3D12_RESOLVE_MODE_MAX = 2,
    D3D12_RESOLVE_MODE_AVERAGE = 3,
    D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK = 4,
    D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK = 5,
}

struct D3D12_SAMPLE_POSITION
{
    byte X;
    byte Y;
}

struct D3D12_VIEW_INSTANCE_LOCATION
{
    uint ViewportArrayIndex;
    uint RenderTargetArrayIndex;
}

enum D3D12_VIEW_INSTANCING_FLAGS
{
    D3D12_VIEW_INSTANCING_FLAG_NONE = 0,
    D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING = 1,
}

struct D3D12_VIEW_INSTANCING_DESC
{
    uint ViewInstanceCount;
    const(D3D12_VIEW_INSTANCE_LOCATION)* pViewInstanceLocations;
    D3D12_VIEW_INSTANCING_FLAGS Flags;
}

enum D3D12_SHADER_COMPONENT_MAPPING
{
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2,
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4,
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5,
}

enum D3D12_BUFFER_SRV_FLAGS
{
    D3D12_BUFFER_SRV_FLAG_NONE = 0,
    D3D12_BUFFER_SRV_FLAG_RAW = 1,
}

struct D3D12_BUFFER_SRV
{
    ulong FirstElement;
    uint NumElements;
    uint StructureByteStride;
    D3D12_BUFFER_SRV_FLAGS Flags;
}

struct D3D12_TEX1D_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    float ResourceMinLODClamp;
}

struct D3D12_TEX1D_ARRAY_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint FirstArraySlice;
    uint ArraySize;
    float ResourceMinLODClamp;
}

struct D3D12_TEX2D_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint PlaneSlice;
    float ResourceMinLODClamp;
}

struct D3D12_TEX2D_ARRAY_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint FirstArraySlice;
    uint ArraySize;
    uint PlaneSlice;
    float ResourceMinLODClamp;
}

struct D3D12_TEX3D_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    float ResourceMinLODClamp;
}

struct D3D12_TEXCUBE_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    float ResourceMinLODClamp;
}

struct D3D12_TEXCUBE_ARRAY_SRV
{
    uint MostDetailedMip;
    uint MipLevels;
    uint First2DArrayFace;
    uint NumCubes;
    float ResourceMinLODClamp;
}

struct D3D12_TEX2DMS_SRV
{
    uint UnusedField_NothingToDefine;
}

struct D3D12_TEX2DMS_ARRAY_SRV
{
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
{
    ulong Location;
}

enum D3D12_SRV_DIMENSION
{
    D3D12_SRV_DIMENSION_UNKNOWN = 0,
    D3D12_SRV_DIMENSION_BUFFER = 1,
    D3D12_SRV_DIMENSION_TEXTURE1D = 2,
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_SRV_DIMENSION_TEXTURE2D = 4,
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_SRV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_SRV_DIMENSION_TEXTURE3D = 8,
    D3D12_SRV_DIMENSION_TEXTURECUBE = 9,
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
    D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE = 11,
}

struct D3D12_SHADER_RESOURCE_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_SRV_DIMENSION ViewDimension;
    uint Shader4ComponentMapping;
    _Anonymous_e__Union Anonymous;
}

struct D3D12_CONSTANT_BUFFER_VIEW_DESC
{
    ulong BufferLocation;
    uint SizeInBytes;
}

enum D3D12_FILTER
{
    D3D12_FILTER_MIN_MAG_MIP_POINT = 0,
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1,
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5,
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16,
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20,
    D3D12_FILTER_MIN_MAG_MIP_LINEAR = 21,
    D3D12_FILTER_ANISOTROPIC = 85,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128,
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132,
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144,
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145,
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148,
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149,
    D3D12_FILTER_COMPARISON_ANISOTROPIC = 213,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256,
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260,
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272,
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273,
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276,
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277,
    D3D12_FILTER_MINIMUM_ANISOTROPIC = 341,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384,
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388,
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400,
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401,
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404,
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405,
    D3D12_FILTER_MAXIMUM_ANISOTROPIC = 469,
}

enum D3D12_FILTER_TYPE
{
    D3D12_FILTER_TYPE_POINT = 0,
    D3D12_FILTER_TYPE_LINEAR = 1,
}

enum D3D12_FILTER_REDUCTION_TYPE
{
    D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0,
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2,
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3,
}

enum D3D12_TEXTURE_ADDRESS_MODE
{
    D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2,
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3,
    D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4,
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5,
}

struct D3D12_SAMPLER_DESC
{
    D3D12_FILTER Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    float MipLODBias;
    uint MaxAnisotropy;
    D3D12_COMPARISON_FUNC ComparisonFunc;
    float BorderColor;
    float MinLOD;
    float MaxLOD;
}

enum D3D12_BUFFER_UAV_FLAGS
{
    D3D12_BUFFER_UAV_FLAG_NONE = 0,
    D3D12_BUFFER_UAV_FLAG_RAW = 1,
}

struct D3D12_BUFFER_UAV
{
    ulong FirstElement;
    uint NumElements;
    uint StructureByteStride;
    ulong CounterOffsetInBytes;
    D3D12_BUFFER_UAV_FLAGS Flags;
}

struct D3D12_TEX1D_UAV
{
    uint MipSlice;
}

struct D3D12_TEX1D_ARRAY_UAV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX2D_UAV
{
    uint MipSlice;
    uint PlaneSlice;
}

struct D3D12_TEX2D_ARRAY_UAV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
    uint PlaneSlice;
}

struct D3D12_TEX3D_UAV
{
    uint MipSlice;
    uint FirstWSlice;
    uint WSize;
}

enum D3D12_UAV_DIMENSION
{
    D3D12_UAV_DIMENSION_UNKNOWN = 0,
    D3D12_UAV_DIMENSION_BUFFER = 1,
    D3D12_UAV_DIMENSION_TEXTURE1D = 2,
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_UAV_DIMENSION_TEXTURE2D = 4,
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_UAV_DIMENSION_TEXTURE3D = 8,
}

struct D3D12_UNORDERED_ACCESS_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_UAV_DIMENSION ViewDimension;
    _Anonymous_e__Union Anonymous;
}

struct D3D12_BUFFER_RTV
{
    ulong FirstElement;
    uint NumElements;
}

struct D3D12_TEX1D_RTV
{
    uint MipSlice;
}

struct D3D12_TEX1D_ARRAY_RTV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX2D_RTV
{
    uint MipSlice;
    uint PlaneSlice;
}

struct D3D12_TEX2DMS_RTV
{
    uint UnusedField_NothingToDefine;
}

struct D3D12_TEX2D_ARRAY_RTV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
    uint PlaneSlice;
}

struct D3D12_TEX2DMS_ARRAY_RTV
{
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX3D_RTV
{
    uint MipSlice;
    uint FirstWSlice;
    uint WSize;
}

enum D3D12_RTV_DIMENSION
{
    D3D12_RTV_DIMENSION_UNKNOWN = 0,
    D3D12_RTV_DIMENSION_BUFFER = 1,
    D3D12_RTV_DIMENSION_TEXTURE1D = 2,
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D12_RTV_DIMENSION_TEXTURE2D = 4,
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D12_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D12_RTV_DIMENSION_TEXTURE3D = 8,
}

struct D3D12_RENDER_TARGET_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_RTV_DIMENSION ViewDimension;
    _Anonymous_e__Union Anonymous;
}

struct D3D12_TEX1D_DSV
{
    uint MipSlice;
}

struct D3D12_TEX1D_ARRAY_DSV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX2D_DSV
{
    uint MipSlice;
}

struct D3D12_TEX2D_ARRAY_DSV
{
    uint MipSlice;
    uint FirstArraySlice;
    uint ArraySize;
}

struct D3D12_TEX2DMS_DSV
{
    uint UnusedField_NothingToDefine;
}

struct D3D12_TEX2DMS_ARRAY_DSV
{
    uint FirstArraySlice;
    uint ArraySize;
}

enum D3D12_DSV_FLAGS
{
    D3D12_DSV_FLAG_NONE = 0,
    D3D12_DSV_FLAG_READ_ONLY_DEPTH = 1,
    D3D12_DSV_FLAG_READ_ONLY_STENCIL = 2,
}

enum D3D12_DSV_DIMENSION
{
    D3D12_DSV_DIMENSION_UNKNOWN = 0,
    D3D12_DSV_DIMENSION_TEXTURE1D = 1,
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D12_DSV_DIMENSION_TEXTURE2D = 3,
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D12_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
}

struct D3D12_DEPTH_STENCIL_VIEW_DESC
{
    DXGI_FORMAT Format;
    D3D12_DSV_DIMENSION ViewDimension;
    D3D12_DSV_FLAGS Flags;
    _Anonymous_e__Union Anonymous;
}

enum D3D12_CLEAR_FLAGS
{
    D3D12_CLEAR_FLAG_DEPTH = 1,
    D3D12_CLEAR_FLAG_STENCIL = 2,
}

enum D3D12_FENCE_FLAGS
{
    D3D12_FENCE_FLAG_NONE = 0,
    D3D12_FENCE_FLAG_SHARED = 1,
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 2,
    D3D12_FENCE_FLAG_NON_MONITORED = 4,
}

enum D3D12_DESCRIPTOR_HEAP_TYPE
{
    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0,
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = 1,
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV = 2,
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV = 3,
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = 4,
}

enum D3D12_DESCRIPTOR_HEAP_FLAGS
{
    D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0,
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 1,
}

struct D3D12_DESCRIPTOR_HEAP_DESC
{
    D3D12_DESCRIPTOR_HEAP_TYPE Type;
    uint NumDescriptors;
    D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
    uint NodeMask;
}

enum D3D12_DESCRIPTOR_RANGE_TYPE
{
    D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0,
    D3D12_DESCRIPTOR_RANGE_TYPE_UAV = 1,
    D3D12_DESCRIPTOR_RANGE_TYPE_CBV = 2,
    D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = 3,
}

struct D3D12_DESCRIPTOR_RANGE
{
    D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
    uint NumDescriptors;
    uint BaseShaderRegister;
    uint RegisterSpace;
    uint OffsetInDescriptorsFromTableStart;
}

struct D3D12_ROOT_DESCRIPTOR_TABLE
{
    uint NumDescriptorRanges;
    const(D3D12_DESCRIPTOR_RANGE)* pDescriptorRanges;
}

struct D3D12_ROOT_CONSTANTS
{
    uint ShaderRegister;
    uint RegisterSpace;
    uint Num32BitValues;
}

struct D3D12_ROOT_DESCRIPTOR
{
    uint ShaderRegister;
    uint RegisterSpace;
}

enum D3D12_SHADER_VISIBILITY
{
    D3D12_SHADER_VISIBILITY_ALL = 0,
    D3D12_SHADER_VISIBILITY_VERTEX = 1,
    D3D12_SHADER_VISIBILITY_HULL = 2,
    D3D12_SHADER_VISIBILITY_DOMAIN = 3,
    D3D12_SHADER_VISIBILITY_GEOMETRY = 4,
    D3D12_SHADER_VISIBILITY_PIXEL = 5,
    D3D12_SHADER_VISIBILITY_AMPLIFICATION = 6,
    D3D12_SHADER_VISIBILITY_MESH = 7,
}

enum D3D12_ROOT_PARAMETER_TYPE
{
    D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0,
    D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = 1,
    D3D12_ROOT_PARAMETER_TYPE_CBV = 2,
    D3D12_ROOT_PARAMETER_TYPE_SRV = 3,
    D3D12_ROOT_PARAMETER_TYPE_UAV = 4,
}

struct D3D12_ROOT_PARAMETER
{
    D3D12_ROOT_PARAMETER_TYPE ParameterType;
    _Anonymous_e__Union Anonymous;
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}

enum D3D12_ROOT_SIGNATURE_FLAGS
{
    D3D12_ROOT_SIGNATURE_FLAG_NONE = 0,
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 1,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 2,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 4,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 8,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 16,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 32,
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 64,
    D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 128,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS = 256,
    D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS = 512,
}

enum D3D12_STATIC_BORDER_COLOR
{
    D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0,
    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = 1,
    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = 2,
}

struct D3D12_STATIC_SAMPLER_DESC
{
    D3D12_FILTER Filter;
    D3D12_TEXTURE_ADDRESS_MODE AddressU;
    D3D12_TEXTURE_ADDRESS_MODE AddressV;
    D3D12_TEXTURE_ADDRESS_MODE AddressW;
    float MipLODBias;
    uint MaxAnisotropy;
    D3D12_COMPARISON_FUNC ComparisonFunc;
    D3D12_STATIC_BORDER_COLOR BorderColor;
    float MinLOD;
    float MaxLOD;
    uint ShaderRegister;
    uint RegisterSpace;
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}

struct D3D12_ROOT_SIGNATURE_DESC
{
    uint NumParameters;
    const(D3D12_ROOT_PARAMETER)* pParameters;
    uint NumStaticSamplers;
    const(D3D12_STATIC_SAMPLER_DESC)* pStaticSamplers;
    D3D12_ROOT_SIGNATURE_FLAGS Flags;
}

enum D3D12_DESCRIPTOR_RANGE_FLAGS
{
    D3D12_DESCRIPTOR_RANGE_FLAG_NONE = 0,
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE = 1,
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE = 2,
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4,
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC = 8,
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 65536,
}

struct D3D12_DESCRIPTOR_RANGE1
{
    D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
    uint NumDescriptors;
    uint BaseShaderRegister;
    uint RegisterSpace;
    D3D12_DESCRIPTOR_RANGE_FLAGS Flags;
    uint OffsetInDescriptorsFromTableStart;
}

struct D3D12_ROOT_DESCRIPTOR_TABLE1
{
    uint NumDescriptorRanges;
    const(D3D12_DESCRIPTOR_RANGE1)* pDescriptorRanges;
}

enum D3D12_ROOT_DESCRIPTOR_FLAGS
{
    D3D12_ROOT_DESCRIPTOR_FLAG_NONE = 0,
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE = 2,
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 4,
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC = 8,
}

struct D3D12_ROOT_DESCRIPTOR1
{
    uint ShaderRegister;
    uint RegisterSpace;
    D3D12_ROOT_DESCRIPTOR_FLAGS Flags;
}

struct D3D12_ROOT_PARAMETER1
{
    D3D12_ROOT_PARAMETER_TYPE ParameterType;
    _Anonymous_e__Union Anonymous;
    D3D12_SHADER_VISIBILITY ShaderVisibility;
}

struct D3D12_ROOT_SIGNATURE_DESC1
{
    uint NumParameters;
    const(D3D12_ROOT_PARAMETER1)* pParameters;
    uint NumStaticSamplers;
    const(D3D12_STATIC_SAMPLER_DESC)* pStaticSamplers;
    D3D12_ROOT_SIGNATURE_FLAGS Flags;
}

struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
{
    D3D_ROOT_SIGNATURE_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

const GUID IID_ID3D12RootSignatureDeserializer = {0x34AB647B, 0x3CC8, 0x46AC, [0x84, 0x1B, 0xC0, 0x96, 0x56, 0x45, 0xC0, 0x46]};
@GUID(0x34AB647B, 0x3CC8, 0x46AC, [0x84, 0x1B, 0xC0, 0x96, 0x56, 0x45, 0xC0, 0x46]);
interface ID3D12RootSignatureDeserializer : IUnknown
{
    D3D12_ROOT_SIGNATURE_DESC* GetRootSignatureDesc();
}

const GUID IID_ID3D12VersionedRootSignatureDeserializer = {0x7F91CE67, 0x090C, 0x4BB7, [0xB7, 0x8E, 0xED, 0x8F, 0xF2, 0xE3, 0x1D, 0xA0]};
@GUID(0x7F91CE67, 0x090C, 0x4BB7, [0xB7, 0x8E, 0xED, 0x8F, 0xF2, 0xE3, 0x1D, 0xA0]);
interface ID3D12VersionedRootSignatureDeserializer : IUnknown
{
    HRESULT GetRootSignatureDescAtVersion(D3D_ROOT_SIGNATURE_VERSION convertToVersion, const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC)** ppDesc);
    D3D12_VERSIONED_ROOT_SIGNATURE_DESC* GetUnconvertedRootSignatureDesc();
}

alias PFN_D3D12_SERIALIZE_ROOT_SIGNATURE = extern(Windows) HRESULT function(const(D3D12_ROOT_SIGNATURE_DESC)* pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);
alias PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER = extern(Windows) HRESULT function(char* pSrcData, uint SrcDataSizeInBytes, const(Guid)* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
alias PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE = extern(Windows) HRESULT function(const(D3D12_VERSIONED_ROOT_SIGNATURE_DESC)* pRootSignature, ID3DBlob* ppBlob, ID3DBlob* ppErrorBlob);
alias PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER = extern(Windows) HRESULT function(char* pSrcData, uint SrcDataSizeInBytes, const(Guid)* pRootSignatureDeserializerInterface, void** ppRootSignatureDeserializer);
struct D3D12_CPU_DESCRIPTOR_HANDLE
{
    uint ptr;
}

struct D3D12_GPU_DESCRIPTOR_HANDLE
{
    ulong ptr;
}

struct D3D12_DISCARD_REGION
{
    uint NumRects;
    const(RECT)* pRects;
    uint FirstSubresource;
    uint NumSubresources;
}

enum D3D12_QUERY_HEAP_TYPE
{
    D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0,
    D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1,
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2,
    D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3,
    D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS = 4,
    D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP = 5,
}

struct D3D12_QUERY_HEAP_DESC
{
    D3D12_QUERY_HEAP_TYPE Type;
    uint Count;
    uint NodeMask;
}

enum D3D12_QUERY_TYPE
{
    D3D12_QUERY_TYPE_OCCLUSION = 0,
    D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1,
    D3D12_QUERY_TYPE_TIMESTAMP = 2,
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6,
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7,
    D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS = 8,
}

enum D3D12_PREDICATION_OP
{
    D3D12_PREDICATION_OP_EQUAL_ZERO = 0,
    D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1,
}

struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
{
    ulong IAVertices;
    ulong IAPrimitives;
    ulong VSInvocations;
    ulong GSInvocations;
    ulong GSPrimitives;
    ulong CInvocations;
    ulong CPrimitives;
    ulong PSInvocations;
    ulong HSInvocations;
    ulong DSInvocations;
    ulong CSInvocations;
}

struct D3D12_QUERY_DATA_SO_STATISTICS
{
    ulong NumPrimitivesWritten;
    ulong PrimitivesStorageNeeded;
}

struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
{
    ulong BufferLocation;
    ulong SizeInBytes;
    ulong BufferFilledSizeLocation;
}

struct D3D12_DRAW_ARGUMENTS
{
    uint VertexCountPerInstance;
    uint InstanceCount;
    uint StartVertexLocation;
    uint StartInstanceLocation;
}

struct D3D12_DRAW_INDEXED_ARGUMENTS
{
    uint IndexCountPerInstance;
    uint InstanceCount;
    uint StartIndexLocation;
    int BaseVertexLocation;
    uint StartInstanceLocation;
}

struct D3D12_DISPATCH_ARGUMENTS
{
    uint ThreadGroupCountX;
    uint ThreadGroupCountY;
    uint ThreadGroupCountZ;
}

struct D3D12_VERTEX_BUFFER_VIEW
{
    ulong BufferLocation;
    uint SizeInBytes;
    uint StrideInBytes;
}

struct D3D12_INDEX_BUFFER_VIEW
{
    ulong BufferLocation;
    uint SizeInBytes;
    DXGI_FORMAT Format;
}

enum D3D12_INDIRECT_ARGUMENT_TYPE
{
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0,
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = 1,
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = 2,
    D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = 3,
    D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = 4,
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = 5,
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = 6,
    D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = 7,
    D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = 8,
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS = 9,
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH = 10,
}

struct D3D12_INDIRECT_ARGUMENT_DESC
{
    D3D12_INDIRECT_ARGUMENT_TYPE Type;
    _Anonymous_e__Union Anonymous;
}

struct D3D12_COMMAND_SIGNATURE_DESC
{
    uint ByteStride;
    uint NumArgumentDescs;
    const(D3D12_INDIRECT_ARGUMENT_DESC)* pArgumentDescs;
    uint NodeMask;
}

const GUID IID_ID3D12Pageable = {0x63EE58FB, 0x1268, 0x4835, [0x86, 0xDA, 0xF0, 0x08, 0xCE, 0x62, 0xF0, 0xD6]};
@GUID(0x63EE58FB, 0x1268, 0x4835, [0x86, 0xDA, 0xF0, 0x08, 0xCE, 0x62, 0xF0, 0xD6]);
interface ID3D12Pageable : ID3D12DeviceChild
{
}

const GUID IID_ID3D12Heap = {0x6B3B2502, 0x6E51, 0x45B3, [0x90, 0xEE, 0x98, 0x84, 0x26, 0x5E, 0x8D, 0xF3]};
@GUID(0x6B3B2502, 0x6E51, 0x45B3, [0x90, 0xEE, 0x98, 0x84, 0x26, 0x5E, 0x8D, 0xF3]);
interface ID3D12Heap : ID3D12Pageable
{
    D3D12_HEAP_DESC GetDesc();
}

const GUID IID_ID3D12Resource = {0x696442BE, 0xA72E, 0x4059, [0xBC, 0x79, 0x5B, 0x5C, 0x98, 0x04, 0x0F, 0xAD]};
@GUID(0x696442BE, 0xA72E, 0x4059, [0xBC, 0x79, 0x5B, 0x5C, 0x98, 0x04, 0x0F, 0xAD]);
interface ID3D12Resource : ID3D12Pageable
{
    HRESULT Map(uint Subresource, const(D3D12_RANGE)* pReadRange, void** ppData);
    void Unmap(uint Subresource, const(D3D12_RANGE)* pWrittenRange);
    D3D12_RESOURCE_DESC GetDesc();
    ulong GetGPUVirtualAddress();
    HRESULT WriteToSubresource(uint DstSubresource, const(D3D12_BOX)* pDstBox, const(void)* pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
    HRESULT ReadFromSubresource(void* pDstData, uint DstRowPitch, uint DstDepthPitch, uint SrcSubresource, const(D3D12_BOX)* pSrcBox);
    HRESULT GetHeapProperties(D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS* pHeapFlags);
}

const GUID IID_ID3D12CommandAllocator = {0x6102DEE4, 0xAF59, 0x4B09, [0xB9, 0x99, 0xB4, 0x4D, 0x73, 0xF0, 0x9B, 0x24]};
@GUID(0x6102DEE4, 0xAF59, 0x4B09, [0xB9, 0x99, 0xB4, 0x4D, 0x73, 0xF0, 0x9B, 0x24]);
interface ID3D12CommandAllocator : ID3D12Pageable
{
    HRESULT Reset();
}

const GUID IID_ID3D12Fence = {0x0A753DCF, 0xC4D8, 0x4B91, [0xAD, 0xF6, 0xBE, 0x5A, 0x60, 0xD9, 0x5A, 0x76]};
@GUID(0x0A753DCF, 0xC4D8, 0x4B91, [0xAD, 0xF6, 0xBE, 0x5A, 0x60, 0xD9, 0x5A, 0x76]);
interface ID3D12Fence : ID3D12Pageable
{
    ulong GetCompletedValue();
    HRESULT SetEventOnCompletion(ulong Value, HANDLE hEvent);
    HRESULT Signal(ulong Value);
}

const GUID IID_ID3D12Fence1 = {0x433685FE, 0xE22B, 0x4CA0, [0xA8, 0xDB, 0xB5, 0xB4, 0xF4, 0xDD, 0x0E, 0x4A]};
@GUID(0x433685FE, 0xE22B, 0x4CA0, [0xA8, 0xDB, 0xB5, 0xB4, 0xF4, 0xDD, 0x0E, 0x4A]);
interface ID3D12Fence1 : ID3D12Fence
{
    D3D12_FENCE_FLAGS GetCreationFlags();
}

const GUID IID_ID3D12PipelineState = {0x765A30F3, 0xF624, 0x4C6F, [0xA8, 0x28, 0xAC, 0xE9, 0x48, 0x62, 0x24, 0x45]};
@GUID(0x765A30F3, 0xF624, 0x4C6F, [0xA8, 0x28, 0xAC, 0xE9, 0x48, 0x62, 0x24, 0x45]);
interface ID3D12PipelineState : ID3D12Pageable
{
    HRESULT GetCachedBlob(ID3DBlob* ppBlob);
}

const GUID IID_ID3D12DescriptorHeap = {0x8EFB471D, 0x616C, 0x4F49, [0x90, 0xF7, 0x12, 0x7B, 0xB7, 0x63, 0xFA, 0x51]};
@GUID(0x8EFB471D, 0x616C, 0x4F49, [0x90, 0xF7, 0x12, 0x7B, 0xB7, 0x63, 0xFA, 0x51]);
interface ID3D12DescriptorHeap : ID3D12Pageable
{
    D3D12_DESCRIPTOR_HEAP_DESC GetDesc();
    D3D12_CPU_DESCRIPTOR_HANDLE GetCPUDescriptorHandleForHeapStart();
    D3D12_GPU_DESCRIPTOR_HANDLE GetGPUDescriptorHandleForHeapStart();
}

const GUID IID_ID3D12QueryHeap = {0x0D9658AE, 0xED45, 0x469E, [0xA6, 0x1D, 0x97, 0x0E, 0xC5, 0x83, 0xCA, 0xB4]};
@GUID(0x0D9658AE, 0xED45, 0x469E, [0xA6, 0x1D, 0x97, 0x0E, 0xC5, 0x83, 0xCA, 0xB4]);
interface ID3D12QueryHeap : ID3D12Pageable
{
}

const GUID IID_ID3D12CommandSignature = {0xC36A797C, 0xEC80, 0x4F0A, [0x89, 0x85, 0xA7, 0xB2, 0x47, 0x50, 0x82, 0xD1]};
@GUID(0xC36A797C, 0xEC80, 0x4F0A, [0x89, 0x85, 0xA7, 0xB2, 0x47, 0x50, 0x82, 0xD1]);
interface ID3D12CommandSignature : ID3D12Pageable
{
}

const GUID IID_ID3D12CommandList = {0x7116D91C, 0xE7E4, 0x47CE, [0xB8, 0xC6, 0xEC, 0x81, 0x68, 0xF4, 0x37, 0xE5]};
@GUID(0x7116D91C, 0xE7E4, 0x47CE, [0xB8, 0xC6, 0xEC, 0x81, 0x68, 0xF4, 0x37, 0xE5]);
interface ID3D12CommandList : ID3D12DeviceChild
{
    D3D12_COMMAND_LIST_TYPE GetType();
}

const GUID IID_ID3D12GraphicsCommandList = {0x5B160D0F, 0xAC1B, 0x4185, [0x8B, 0xA8, 0xB3, 0xAE, 0x42, 0xA5, 0xA4, 0x55]};
@GUID(0x5B160D0F, 0xAC1B, 0x4185, [0x8B, 0xA8, 0xB3, 0xAE, 0x42, 0xA5, 0xA4, 0x55]);
interface ID3D12GraphicsCommandList : ID3D12CommandList
{
    HRESULT Close();
    HRESULT Reset(ID3D12CommandAllocator pAllocator, ID3D12PipelineState pInitialState);
    void ClearState(ID3D12PipelineState pPipelineState);
    void DrawInstanced(uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
    void DrawIndexedInstanced(uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);
    void Dispatch(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);
    void CopyBufferRegion(ID3D12Resource pDstBuffer, ulong DstOffset, ID3D12Resource pSrcBuffer, ulong SrcOffset, ulong NumBytes);
    void CopyTextureRegion(const(D3D12_TEXTURE_COPY_LOCATION)* pDst, uint DstX, uint DstY, uint DstZ, const(D3D12_TEXTURE_COPY_LOCATION)* pSrc, const(D3D12_BOX)* pSrcBox);
    void CopyResource(ID3D12Resource pDstResource, ID3D12Resource pSrcResource);
    void CopyTiles(ID3D12Resource pTiledResource, const(D3D12_TILED_RESOURCE_COORDINATE)* pTileRegionStartCoordinate, const(D3D12_TILE_REGION_SIZE)* pTileRegionSize, ID3D12Resource pBuffer, ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);
    void ResolveSubresource(ID3D12Resource pDstResource, uint DstSubresource, ID3D12Resource pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
    void IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology);
    void RSSetViewports(uint NumViewports, char* pViewports);
    void RSSetScissorRects(uint NumRects, char* pRects);
    void OMSetBlendFactor(char* BlendFactor);
    void OMSetStencilRef(uint StencilRef);
    void SetPipelineState(ID3D12PipelineState pPipelineState);
    void ResourceBarrier(uint NumBarriers, char* pBarriers);
    void ExecuteBundle(ID3D12GraphicsCommandList pCommandList);
    void SetDescriptorHeaps(uint NumDescriptorHeaps, char* ppDescriptorHeaps);
    void SetComputeRootSignature(ID3D12RootSignature pRootSignature);
    void SetGraphicsRootSignature(ID3D12RootSignature pRootSignature);
    void SetComputeRootDescriptorTable(uint RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);
    void SetGraphicsRootDescriptorTable(uint RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);
    void SetComputeRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues);
    void SetGraphicsRoot32BitConstant(uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues);
    void SetComputeRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, char* pSrcData, uint DestOffsetIn32BitValues);
    void SetGraphicsRoot32BitConstants(uint RootParameterIndex, uint Num32BitValuesToSet, char* pSrcData, uint DestOffsetIn32BitValues);
    void SetComputeRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation);
    void SetGraphicsRootConstantBufferView(uint RootParameterIndex, ulong BufferLocation);
    void SetComputeRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation);
    void SetGraphicsRootShaderResourceView(uint RootParameterIndex, ulong BufferLocation);
    void SetComputeRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation);
    void SetGraphicsRootUnorderedAccessView(uint RootParameterIndex, ulong BufferLocation);
    void IASetIndexBuffer(const(D3D12_INDEX_BUFFER_VIEW)* pView);
    void IASetVertexBuffers(uint StartSlot, uint NumViews, char* pViews);
    void SOSetTargets(uint StartSlot, uint NumViews, char* pViews);
    void OMSetRenderTargets(uint NumRenderTargetDescriptors, const(D3D12_CPU_DESCRIPTOR_HANDLE)* pRenderTargetDescriptors, BOOL RTsSingleHandleToDescriptorRange, const(D3D12_CPU_DESCRIPTOR_HANDLE)* pDepthStencilDescriptor);
    void ClearDepthStencilView(D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, float Depth, ubyte Stencil, uint NumRects, char* pRects);
    void ClearRenderTargetView(D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, const(float)* ColorRGBA, uint NumRects, char* pRects);
    void ClearUnorderedAccessViewUint(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource pResource, const(uint)* Values, uint NumRects, char* pRects);
    void ClearUnorderedAccessViewFloat(D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, ID3D12Resource pResource, const(float)* Values, uint NumRects, char* pRects);
    void DiscardResource(ID3D12Resource pResource, const(D3D12_DISCARD_REGION)* pRegion);
    void BeginQuery(ID3D12QueryHeap pQueryHeap, D3D12_QUERY_TYPE Type, uint Index);
    void EndQuery(ID3D12QueryHeap pQueryHeap, D3D12_QUERY_TYPE Type, uint Index);
    void ResolveQueryData(ID3D12QueryHeap pQueryHeap, D3D12_QUERY_TYPE Type, uint StartIndex, uint NumQueries, ID3D12Resource pDestinationBuffer, ulong AlignedDestinationBufferOffset);
    void SetPredication(ID3D12Resource pBuffer, ulong AlignedBufferOffset, D3D12_PREDICATION_OP Operation);
    void SetMarker(uint Metadata, char* pData, uint Size);
    void BeginEvent(uint Metadata, char* pData, uint Size);
    void EndEvent();
    void ExecuteIndirect(ID3D12CommandSignature pCommandSignature, uint MaxCommandCount, ID3D12Resource pArgumentBuffer, ulong ArgumentBufferOffset, ID3D12Resource pCountBuffer, ulong CountBufferOffset);
}

const GUID IID_ID3D12GraphicsCommandList1 = {0x553103FB, 0x1FE7, 0x4557, [0xBB, 0x38, 0x94, 0x6D, 0x7D, 0x0E, 0x7C, 0xA7]};
@GUID(0x553103FB, 0x1FE7, 0x4557, [0xBB, 0x38, 0x94, 0x6D, 0x7D, 0x0E, 0x7C, 0xA7]);
interface ID3D12GraphicsCommandList1 : ID3D12GraphicsCommandList
{
    void AtomicCopyBufferUINT(ID3D12Resource pDstBuffer, ulong DstOffset, ID3D12Resource pSrcBuffer, ulong SrcOffset, uint Dependencies, char* ppDependentResources, char* pDependentSubresourceRanges);
    void AtomicCopyBufferUINT64(ID3D12Resource pDstBuffer, ulong DstOffset, ID3D12Resource pSrcBuffer, ulong SrcOffset, uint Dependencies, char* ppDependentResources, char* pDependentSubresourceRanges);
    void OMSetDepthBounds(float Min, float Max);
    void SetSamplePositions(uint NumSamplesPerPixel, uint NumPixels, char* pSamplePositions);
    void ResolveSubresourceRegion(ID3D12Resource pDstResource, uint DstSubresource, uint DstX, uint DstY, ID3D12Resource pSrcResource, uint SrcSubresource, RECT* pSrcRect, DXGI_FORMAT Format, D3D12_RESOLVE_MODE ResolveMode);
    void SetViewInstanceMask(uint Mask);
}

struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
{
    ulong Dest;
    uint Value;
}

enum D3D12_WRITEBUFFERIMMEDIATE_MODE
{
    D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT = 0,
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN = 1,
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT = 2,
}

const GUID IID_ID3D12GraphicsCommandList2 = {0x38C3E585, 0xFF17, 0x412C, [0x91, 0x50, 0x4F, 0xC6, 0xF9, 0xD7, 0x2A, 0x28]};
@GUID(0x38C3E585, 0xFF17, 0x412C, [0x91, 0x50, 0x4F, 0xC6, 0xF9, 0xD7, 0x2A, 0x28]);
interface ID3D12GraphicsCommandList2 : ID3D12GraphicsCommandList1
{
    void WriteBufferImmediate(uint Count, char* pParams, char* pModes);
}

const GUID IID_ID3D12CommandQueue = {0x0EC870A6, 0x5D7E, 0x4C22, [0x8C, 0xFC, 0x5B, 0xAA, 0xE0, 0x76, 0x16, 0xED]};
@GUID(0x0EC870A6, 0x5D7E, 0x4C22, [0x8C, 0xFC, 0x5B, 0xAA, 0xE0, 0x76, 0x16, 0xED]);
interface ID3D12CommandQueue : ID3D12Pageable
{
    void UpdateTileMappings(ID3D12Resource pResource, uint NumResourceRegions, char* pResourceRegionStartCoordinates, char* pResourceRegionSizes, ID3D12Heap pHeap, uint NumRanges, char* pRangeFlags, char* pHeapRangeStartOffsets, char* pRangeTileCounts, D3D12_TILE_MAPPING_FLAGS Flags);
    void CopyTileMappings(ID3D12Resource pDstResource, const(D3D12_TILED_RESOURCE_COORDINATE)* pDstRegionStartCoordinate, ID3D12Resource pSrcResource, const(D3D12_TILED_RESOURCE_COORDINATE)* pSrcRegionStartCoordinate, const(D3D12_TILE_REGION_SIZE)* pRegionSize, D3D12_TILE_MAPPING_FLAGS Flags);
    void ExecuteCommandLists(uint NumCommandLists, char* ppCommandLists);
    void SetMarker(uint Metadata, char* pData, uint Size);
    void BeginEvent(uint Metadata, char* pData, uint Size);
    void EndEvent();
    HRESULT Signal(ID3D12Fence pFence, ulong Value);
    HRESULT Wait(ID3D12Fence pFence, ulong Value);
    HRESULT GetTimestampFrequency(ulong* pFrequency);
    HRESULT GetClockCalibration(ulong* pGpuTimestamp, ulong* pCpuTimestamp);
    D3D12_COMMAND_QUEUE_DESC GetDesc();
}

const GUID IID_ID3D12Device = {0x189819F1, 0x1DB6, 0x4B57, [0xBE, 0x54, 0x18, 0x21, 0x33, 0x9B, 0x85, 0xF7]};
@GUID(0x189819F1, 0x1DB6, 0x4B57, [0xBE, 0x54, 0x18, 0x21, 0x33, 0x9B, 0x85, 0xF7]);
interface ID3D12Device : ID3D12Object
{
    uint GetNodeCount();
    HRESULT CreateCommandQueue(const(D3D12_COMMAND_QUEUE_DESC)* pDesc, const(Guid)* riid, void** ppCommandQueue);
    HRESULT CreateCommandAllocator(D3D12_COMMAND_LIST_TYPE type, const(Guid)* riid, void** ppCommandAllocator);
    HRESULT CreateGraphicsPipelineState(const(D3D12_GRAPHICS_PIPELINE_STATE_DESC)* pDesc, const(Guid)* riid, void** ppPipelineState);
    HRESULT CreateComputePipelineState(const(D3D12_COMPUTE_PIPELINE_STATE_DESC)* pDesc, const(Guid)* riid, void** ppPipelineState);
    HRESULT CreateCommandList(uint nodeMask, D3D12_COMMAND_LIST_TYPE type, ID3D12CommandAllocator pCommandAllocator, ID3D12PipelineState pInitialState, const(Guid)* riid, void** ppCommandList);
    HRESULT CheckFeatureSupport(D3D12_FEATURE Feature, char* pFeatureSupportData, uint FeatureSupportDataSize);
    HRESULT CreateDescriptorHeap(const(D3D12_DESCRIPTOR_HEAP_DESC)* pDescriptorHeapDesc, const(Guid)* riid, void** ppvHeap);
    uint GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);
    HRESULT CreateRootSignature(uint nodeMask, char* pBlobWithRootSignature, uint blobLengthInBytes, const(Guid)* riid, void** ppvRootSignature);
    void CreateConstantBufferView(const(D3D12_CONSTANT_BUFFER_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateShaderResourceView(ID3D12Resource pResource, const(D3D12_SHADER_RESOURCE_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateUnorderedAccessView(ID3D12Resource pResource, ID3D12Resource pCounterResource, const(D3D12_UNORDERED_ACCESS_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateRenderTargetView(ID3D12Resource pResource, const(D3D12_RENDER_TARGET_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateDepthStencilView(ID3D12Resource pResource, const(D3D12_DEPTH_STENCIL_VIEW_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CreateSampler(const(D3D12_SAMPLER_DESC)* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void CopyDescriptors(uint NumDestDescriptorRanges, char* pDestDescriptorRangeStarts, char* pDestDescriptorRangeSizes, uint NumSrcDescriptorRanges, char* pSrcDescriptorRangeStarts, char* pSrcDescriptorRangeSizes, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);
    void CopyDescriptorsSimple(uint NumDescriptors, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);
    D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo(uint visibleMask, uint numResourceDescs, char* pResourceDescs);
    D3D12_HEAP_PROPERTIES GetCustomHeapProperties(uint nodeMask, D3D12_HEAP_TYPE heapType);
    HRESULT CreateCommittedResource(const(D3D12_HEAP_PROPERTIES)* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialResourceState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, const(Guid)* riidResource, void** ppvResource);
    HRESULT CreateHeap(const(D3D12_HEAP_DESC)* pDesc, const(Guid)* riid, void** ppvHeap);
    HRESULT CreatePlacedResource(ID3D12Heap pHeap, ulong HeapOffset, const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, const(Guid)* riid, void** ppvResource);
    HRESULT CreateReservedResource(const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, const(Guid)* riid, void** ppvResource);
    HRESULT CreateSharedHandle(ID3D12DeviceChild pObject, const(SECURITY_ATTRIBUTES)* pAttributes, uint Access, const(wchar)* Name, HANDLE* pHandle);
    HRESULT OpenSharedHandle(HANDLE NTHandle, const(Guid)* riid, void** ppvObj);
    HRESULT OpenSharedHandleByName(const(wchar)* Name, uint Access, HANDLE* pNTHandle);
    HRESULT MakeResident(uint NumObjects, char* ppObjects);
    HRESULT Evict(uint NumObjects, char* ppObjects);
    HRESULT CreateFence(ulong InitialValue, D3D12_FENCE_FLAGS Flags, const(Guid)* riid, void** ppFence);
    HRESULT GetDeviceRemovedReason();
    void GetCopyableFootprints(const(D3D12_RESOURCE_DESC)* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, char* pLayouts, char* pNumRows, char* pRowSizeInBytes, ulong* pTotalBytes);
    HRESULT CreateQueryHeap(const(D3D12_QUERY_HEAP_DESC)* pDesc, const(Guid)* riid, void** ppvHeap);
    HRESULT SetStablePowerState(BOOL Enable);
    HRESULT CreateCommandSignature(const(D3D12_COMMAND_SIGNATURE_DESC)* pDesc, ID3D12RootSignature pRootSignature, const(Guid)* riid, void** ppvCommandSignature);
    void GetResourceTiling(ID3D12Resource pTiledResource, uint* pNumTilesForEntireResource, D3D12_PACKED_MIP_INFO* pPackedMipDesc, D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, char* pSubresourceTilingsForNonPackedMips);
    LUID GetAdapterLuid();
}

const GUID IID_ID3D12PipelineLibrary = {0xC64226A8, 0x9201, 0x46AF, [0xB4, 0xCC, 0x53, 0xFB, 0x9F, 0xF7, 0x41, 0x4F]};
@GUID(0xC64226A8, 0x9201, 0x46AF, [0xB4, 0xCC, 0x53, 0xFB, 0x9F, 0xF7, 0x41, 0x4F]);
interface ID3D12PipelineLibrary : ID3D12DeviceChild
{
    HRESULT StorePipeline(const(wchar)* pName, ID3D12PipelineState pPipeline);
    HRESULT LoadGraphicsPipeline(const(wchar)* pName, const(D3D12_GRAPHICS_PIPELINE_STATE_DESC)* pDesc, const(Guid)* riid, void** ppPipelineState);
    HRESULT LoadComputePipeline(const(wchar)* pName, const(D3D12_COMPUTE_PIPELINE_STATE_DESC)* pDesc, const(Guid)* riid, void** ppPipelineState);
    uint GetSerializedSize();
    HRESULT Serialize(char* pData, uint DataSizeInBytes);
}

const GUID IID_ID3D12PipelineLibrary1 = {0x80EABF42, 0x2568, 0x4E5E, [0xBD, 0x82, 0xC3, 0x7F, 0x86, 0x96, 0x1D, 0xC3]};
@GUID(0x80EABF42, 0x2568, 0x4E5E, [0xBD, 0x82, 0xC3, 0x7F, 0x86, 0x96, 0x1D, 0xC3]);
interface ID3D12PipelineLibrary1 : ID3D12PipelineLibrary
{
    HRESULT LoadPipeline(const(wchar)* pName, const(D3D12_PIPELINE_STATE_STREAM_DESC)* pDesc, const(Guid)* riid, void** ppPipelineState);
}

enum D3D12_MULTIPLE_FENCE_WAIT_FLAGS
{
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE = 0,
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY = 1,
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL = 0,
}

enum D3D12_RESIDENCY_PRIORITY
{
    D3D12_RESIDENCY_PRIORITY_MINIMUM = 671088640,
    D3D12_RESIDENCY_PRIORITY_LOW = 1342177280,
    D3D12_RESIDENCY_PRIORITY_NORMAL = 2013265920,
    D3D12_RESIDENCY_PRIORITY_HIGH = -1610547200,
    D3D12_RESIDENCY_PRIORITY_MAXIMUM = -939524096,
}

const GUID IID_ID3D12Device1 = {0x77ACCE80, 0x638E, 0x4E65, [0x88, 0x95, 0xC1, 0xF2, 0x33, 0x86, 0x86, 0x3E]};
@GUID(0x77ACCE80, 0x638E, 0x4E65, [0x88, 0x95, 0xC1, 0xF2, 0x33, 0x86, 0x86, 0x3E]);
interface ID3D12Device1 : ID3D12Device
{
    HRESULT CreatePipelineLibrary(char* pLibraryBlob, uint BlobLength, const(Guid)* riid, void** ppPipelineLibrary);
    HRESULT SetEventOnMultipleFenceCompletion(char* ppFences, char* pFenceValues, uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, HANDLE hEvent);
    HRESULT SetResidencyPriority(uint NumObjects, char* ppObjects, char* pPriorities);
}

const GUID IID_ID3D12Device2 = {0x30BAA41E, 0xB15B, 0x475C, [0xA0, 0xBB, 0x1A, 0xF5, 0xC5, 0xB6, 0x43, 0x28]};
@GUID(0x30BAA41E, 0xB15B, 0x475C, [0xA0, 0xBB, 0x1A, 0xF5, 0xC5, 0xB6, 0x43, 0x28]);
interface ID3D12Device2 : ID3D12Device1
{
    HRESULT CreatePipelineState(const(D3D12_PIPELINE_STATE_STREAM_DESC)* pDesc, const(Guid)* riid, void** ppPipelineState);
}

enum D3D12_RESIDENCY_FLAGS
{
    D3D12_RESIDENCY_FLAG_NONE = 0,
    D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET = 1,
}

const GUID IID_ID3D12Device3 = {0x81DADC15, 0x2BAD, 0x4392, [0x93, 0xC5, 0x10, 0x13, 0x45, 0xC4, 0xAA, 0x98]};
@GUID(0x81DADC15, 0x2BAD, 0x4392, [0x93, 0xC5, 0x10, 0x13, 0x45, 0xC4, 0xAA, 0x98]);
interface ID3D12Device3 : ID3D12Device2
{
    HRESULT OpenExistingHeapFromAddress(const(void)* pAddress, const(Guid)* riid, void** ppvHeap);
    HRESULT OpenExistingHeapFromFileMapping(HANDLE hFileMapping, const(Guid)* riid, void** ppvHeap);
    HRESULT EnqueueMakeResident(D3D12_RESIDENCY_FLAGS Flags, uint NumObjects, char* ppObjects, ID3D12Fence pFenceToSignal, ulong FenceValueToSignal);
}

enum D3D12_COMMAND_LIST_FLAGS
{
    D3D12_COMMAND_LIST_FLAG_NONE = 0,
}

enum D3D12_COMMAND_POOL_FLAGS
{
    D3D12_COMMAND_POOL_FLAG_NONE = 0,
}

enum D3D12_COMMAND_RECORDER_FLAGS
{
    D3D12_COMMAND_RECORDER_FLAG_NONE = 0,
}

enum D3D12_PROTECTED_SESSION_STATUS
{
    D3D12_PROTECTED_SESSION_STATUS_OK = 0,
    D3D12_PROTECTED_SESSION_STATUS_INVALID = 1,
}

const GUID IID_ID3D12ProtectedSession = {0xA1533D18, 0x0AC1, 0x4084, [0x85, 0xB9, 0x89, 0xA9, 0x61, 0x16, 0x80, 0x6B]};
@GUID(0xA1533D18, 0x0AC1, 0x4084, [0x85, 0xB9, 0x89, 0xA9, 0x61, 0x16, 0x80, 0x6B]);
interface ID3D12ProtectedSession : ID3D12DeviceChild
{
    HRESULT GetStatusFence(const(Guid)* riid, void** ppFence);
    D3D12_PROTECTED_SESSION_STATUS GetSessionStatus();
}

enum D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS
{
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0,
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 1,
}

struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
{
    uint NodeIndex;
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS Support;
}

enum D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
{
    D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0,
}

struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
{
    uint NodeMask;
    D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
}

const GUID IID_ID3D12ProtectedResourceSession = {0x6CD696F4, 0xF289, 0x40CC, [0x80, 0x91, 0x5A, 0x6C, 0x0A, 0x09, 0x9C, 0x3D]};
@GUID(0x6CD696F4, 0xF289, 0x40CC, [0x80, 0x91, 0x5A, 0x6C, 0x0A, 0x09, 0x9C, 0x3D]);
interface ID3D12ProtectedResourceSession : ID3D12ProtectedSession
{
    D3D12_PROTECTED_RESOURCE_SESSION_DESC GetDesc();
}

const GUID IID_ID3D12Device4 = {0xE865DF17, 0xA9EE, 0x46F9, [0xA4, 0x63, 0x30, 0x98, 0x31, 0x5A, 0xA2, 0xE5]};
@GUID(0xE865DF17, 0xA9EE, 0x46F9, [0xA4, 0x63, 0x30, 0x98, 0x31, 0x5A, 0xA2, 0xE5]);
interface ID3D12Device4 : ID3D12Device3
{
    HRESULT CreateCommandList1(uint nodeMask, D3D12_COMMAND_LIST_TYPE type, D3D12_COMMAND_LIST_FLAGS flags, const(Guid)* riid, void** ppCommandList);
    HRESULT CreateProtectedResourceSession(const(D3D12_PROTECTED_RESOURCE_SESSION_DESC)* pDesc, const(Guid)* riid, void** ppSession);
    HRESULT CreateCommittedResource1(const(D3D12_HEAP_PROPERTIES)* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialResourceState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, ID3D12ProtectedResourceSession pProtectedSession, const(Guid)* riidResource, void** ppvResource);
    HRESULT CreateHeap1(const(D3D12_HEAP_DESC)* pDesc, ID3D12ProtectedResourceSession pProtectedSession, const(Guid)* riid, void** ppvHeap);
    HRESULT CreateReservedResource1(const(D3D12_RESOURCE_DESC)* pDesc, D3D12_RESOURCE_STATES InitialState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, ID3D12ProtectedResourceSession pProtectedSession, const(Guid)* riid, void** ppvResource);
    D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1(uint visibleMask, uint numResourceDescs, char* pResourceDescs, char* pResourceAllocationInfo1);
}

enum D3D12_LIFETIME_STATE
{
    D3D12_LIFETIME_STATE_IN_USE = 0,
    D3D12_LIFETIME_STATE_NOT_IN_USE = 1,
}

const GUID IID_ID3D12LifetimeOwner = {0xE667AF9F, 0xCD56, 0x4F46, [0x83, 0xCE, 0x03, 0x2E, 0x59, 0x5D, 0x70, 0xA8]};
@GUID(0xE667AF9F, 0xCD56, 0x4F46, [0x83, 0xCE, 0x03, 0x2E, 0x59, 0x5D, 0x70, 0xA8]);
interface ID3D12LifetimeOwner : IUnknown
{
    void LifetimeStateUpdated(D3D12_LIFETIME_STATE NewState);
}

const GUID IID_ID3D12SwapChainAssistant = {0xF1DF64B6, 0x57FD, 0x49CD, [0x88, 0x07, 0xC0, 0xEB, 0x88, 0xB4, 0x5C, 0x8F]};
@GUID(0xF1DF64B6, 0x57FD, 0x49CD, [0x88, 0x07, 0xC0, 0xEB, 0x88, 0xB4, 0x5C, 0x8F]);
interface ID3D12SwapChainAssistant : IUnknown
{
    LUID GetLUID();
    HRESULT GetSwapChainObject(const(Guid)* riid, void** ppv);
    HRESULT GetCurrentResourceAndCommandQueue(const(Guid)* riidResource, void** ppvResource, const(Guid)* riidQueue, void** ppvQueue);
    HRESULT InsertImplicitSync();
}

const GUID IID_ID3D12LifetimeTracker = {0x3FD03D36, 0x4EB1, 0x424A, [0xA5, 0x82, 0x49, 0x4E, 0xCB, 0x8B, 0xA8, 0x13]};
@GUID(0x3FD03D36, 0x4EB1, 0x424A, [0xA5, 0x82, 0x49, 0x4E, 0xCB, 0x8B, 0xA8, 0x13]);
interface ID3D12LifetimeTracker : ID3D12DeviceChild
{
    HRESULT DestroyOwnedObject(ID3D12DeviceChild pObject);
}

enum D3D12_META_COMMAND_PARAMETER_TYPE
{
    D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0,
    D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 = 1,
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2,
    D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3,
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4,
}

enum D3D12_META_COMMAND_PARAMETER_FLAGS
{
    D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 1,
    D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 2,
}

enum D3D12_META_COMMAND_PARAMETER_STAGE
{
    D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0,
    D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1,
    D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2,
}

struct D3D12_META_COMMAND_PARAMETER_DESC
{
    const(wchar)* Name;
    D3D12_META_COMMAND_PARAMETER_TYPE Type;
    D3D12_META_COMMAND_PARAMETER_FLAGS Flags;
    D3D12_RESOURCE_STATES RequiredResourceState;
    uint StructureOffset;
}

enum D3D12_GRAPHICS_STATES
{
    D3D12_GRAPHICS_STATE_NONE = 0,
    D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = 1,
    D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = 2,
    D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = 4,
    D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = 8,
    D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = 16,
    D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = 32,
    D3D12_GRAPHICS_STATE_RS_VIEWPORTS = 64,
    D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = 128,
    D3D12_GRAPHICS_STATE_PREDICATION = 256,
    D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = 512,
    D3D12_GRAPHICS_STATE_OM_STENCIL_REF = 1024,
    D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = 2048,
    D3D12_GRAPHICS_STATE_PIPELINE_STATE = 4096,
    D3D12_GRAPHICS_STATE_SO_TARGETS = 8192,
    D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = 16384,
    D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = 32768,
    D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = 65536,
}

struct D3D12_META_COMMAND_DESC
{
    Guid Id;
    const(wchar)* Name;
    D3D12_GRAPHICS_STATES InitializationDirtyState;
    D3D12_GRAPHICS_STATES ExecutionDirtyState;
}

const GUID IID_ID3D12StateObject = {0x47016943, 0xFCA8, 0x4594, [0x93, 0xEA, 0xAF, 0x25, 0x8B, 0x55, 0x34, 0x6D]};
@GUID(0x47016943, 0xFCA8, 0x4594, [0x93, 0xEA, 0xAF, 0x25, 0x8B, 0x55, 0x34, 0x6D]);
interface ID3D12StateObject : ID3D12Pageable
{
}

const GUID IID_ID3D12StateObjectProperties = {0xDE5FA827, 0x9BF9, 0x4F26, [0x89, 0xFF, 0xD7, 0xF5, 0x6F, 0xDE, 0x38, 0x60]};
@GUID(0xDE5FA827, 0x9BF9, 0x4F26, [0x89, 0xFF, 0xD7, 0xF5, 0x6F, 0xDE, 0x38, 0x60]);
interface ID3D12StateObjectProperties : IUnknown
{
    void* GetShaderIdentifier(const(wchar)* pExportName);
    ulong GetShaderStackSize(const(wchar)* pExportName);
    ulong GetPipelineStackSize();
    void SetPipelineStackSize(ulong PipelineStackSizeInBytes);
}

enum D3D12_STATE_SUBOBJECT_TYPE
{
    D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0,
    D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1,
    D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2,
    D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3,
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5,
    D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6,
    D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7,
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8,
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9,
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10,
    D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11,
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1 = 12,
    D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = 13,
}

struct D3D12_STATE_SUBOBJECT
{
    D3D12_STATE_SUBOBJECT_TYPE Type;
    const(void)* pDesc;
}

enum D3D12_STATE_OBJECT_FLAGS
{
    D3D12_STATE_OBJECT_FLAG_NONE = 0,
    D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 1,
    D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 2,
    D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS = 4,
}

struct D3D12_STATE_OBJECT_CONFIG
{
    D3D12_STATE_OBJECT_FLAGS Flags;
}

struct D3D12_GLOBAL_ROOT_SIGNATURE
{
    ID3D12RootSignature pGlobalRootSignature;
}

struct D3D12_LOCAL_ROOT_SIGNATURE
{
    ID3D12RootSignature pLocalRootSignature;
}

struct D3D12_NODE_MASK
{
    uint NodeMask;
}

enum D3D12_EXPORT_FLAGS
{
    D3D12_EXPORT_FLAG_NONE = 0,
}

struct D3D12_EXPORT_DESC
{
    const(wchar)* Name;
    const(wchar)* ExportToRename;
    D3D12_EXPORT_FLAGS Flags;
}

struct D3D12_DXIL_LIBRARY_DESC
{
    D3D12_SHADER_BYTECODE DXILLibrary;
    uint NumExports;
    D3D12_EXPORT_DESC* pExports;
}

struct D3D12_EXISTING_COLLECTION_DESC
{
    ID3D12StateObject pExistingCollection;
    uint NumExports;
    D3D12_EXPORT_DESC* pExports;
}

struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
{
    const(D3D12_STATE_SUBOBJECT)* pSubobjectToAssociate;
    uint NumExports;
    ushort** pExports;
}

struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
{
    const(wchar)* SubobjectToAssociate;
    uint NumExports;
    ushort** pExports;
}

enum D3D12_HIT_GROUP_TYPE
{
    D3D12_HIT_GROUP_TYPE_TRIANGLES = 0,
    D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 1,
}

struct D3D12_HIT_GROUP_DESC
{
    const(wchar)* HitGroupExport;
    D3D12_HIT_GROUP_TYPE Type;
    const(wchar)* AnyHitShaderImport;
    const(wchar)* ClosestHitShaderImport;
    const(wchar)* IntersectionShaderImport;
}

struct D3D12_RAYTRACING_SHADER_CONFIG
{
    uint MaxPayloadSizeInBytes;
    uint MaxAttributeSizeInBytes;
}

struct D3D12_RAYTRACING_PIPELINE_CONFIG
{
    uint MaxTraceRecursionDepth;
}

enum D3D12_RAYTRACING_PIPELINE_FLAGS
{
    D3D12_RAYTRACING_PIPELINE_FLAG_NONE = 0,
    D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES = 256,
    D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512,
}

struct D3D12_RAYTRACING_PIPELINE_CONFIG1
{
    uint MaxTraceRecursionDepth;
    D3D12_RAYTRACING_PIPELINE_FLAGS Flags;
}

enum D3D12_STATE_OBJECT_TYPE
{
    D3D12_STATE_OBJECT_TYPE_COLLECTION = 0,
    D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3,
}

struct D3D12_STATE_OBJECT_DESC
{
    D3D12_STATE_OBJECT_TYPE Type;
    uint NumSubobjects;
    const(D3D12_STATE_SUBOBJECT)* pSubobjects;
}

enum D3D12_RAYTRACING_GEOMETRY_FLAGS
{
    D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0,
    D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 1,
    D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 2,
}

enum D3D12_RAYTRACING_GEOMETRY_TYPE
{
    D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0,
    D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = 1,
}

enum D3D12_RAYTRACING_INSTANCE_FLAGS
{
    D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0,
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 1,
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 2,
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 4,
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 8,
}

struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
{
    ulong StartAddress;
    ulong StrideInBytes;
}

struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE
{
    ulong StartAddress;
    ulong SizeInBytes;
}

struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
{
    ulong StartAddress;
    ulong SizeInBytes;
    ulong StrideInBytes;
}

struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
{
    ulong Transform3x4;
    DXGI_FORMAT IndexFormat;
    DXGI_FORMAT VertexFormat;
    uint IndexCount;
    uint VertexCount;
    ulong IndexBuffer;
    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE VertexBuffer;
}

struct D3D12_RAYTRACING_AABB
{
    float MinX;
    float MinY;
    float MinZ;
    float MaxX;
    float MaxY;
    float MaxZ;
}

struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
{
    ulong AABBCount;
    D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE AABBs;
}

enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 1,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 2,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 4,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 8,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 16,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 32,
}

enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 1,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 2,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 3,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 4,
}

enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 1,
}

enum D3D12_ELEMENTS_LAYOUT
{
    D3D12_ELEMENTS_LAYOUT_ARRAY = 0,
    D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 1,
}

enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 1,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 2,
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 3,
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
{
    ulong DestBuffer;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE InfoType;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
{
    ulong CompactedSizeInBytes;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
{
    ulong DecodedSizeInBytes;
}

struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
    uint NumDescs;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
{
    ulong SerializedSizeInBytes;
    ulong NumBottomLevelAccelerationStructurePointers;
}

struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
{
    Guid DriverOpaqueGUID;
    ubyte DriverOpaqueVersioningData;
}

enum D3D12_SERIALIZED_DATA_TYPE
{
    D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0,
}

enum D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
{
    D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0,
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 1,
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 2,
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 3,
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 4,
}

struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
{
    D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;
    ulong SerializedSizeInBytesIncludingHeader;
    ulong DeserializedSizeInBytes;
    ulong NumBottomLevelAccelerationStructurePointersAfterHeader;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
{
    ulong CurrentSizeInBytes;
}

struct D3D12_RAYTRACING_INSTANCE_DESC
{
    float Transform;
    uint _bitfield1;
    uint _bitfield2;
    ulong AccelerationStructure;
}

struct D3D12_RAYTRACING_GEOMETRY_DESC
{
    D3D12_RAYTRACING_GEOMETRY_TYPE Type;
    D3D12_RAYTRACING_GEOMETRY_FLAGS Flags;
    _Anonymous_e__Union Anonymous;
}

struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
{
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS Flags;
    uint NumDescs;
    D3D12_ELEMENTS_LAYOUT DescsLayout;
    _Anonymous_e__Union Anonymous;
}

struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
{
    ulong DestAccelerationStructureData;
    D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS Inputs;
    ulong SourceAccelerationStructureData;
    ulong ScratchAccelerationStructureData;
}

struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
{
    ulong ResultDataMaxSizeInBytes;
    ulong ScratchDataSizeInBytes;
    ulong UpdateScratchDataSizeInBytes;
}

enum D3D12_RAY_FLAGS
{
    D3D12_RAY_FLAG_NONE = 0,
    D3D12_RAY_FLAG_FORCE_OPAQUE = 1,
    D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 2,
    D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 4,
    D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 8,
    D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 16,
    D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 32,
    D3D12_RAY_FLAG_CULL_OPAQUE = 64,
    D3D12_RAY_FLAG_CULL_NON_OPAQUE = 128,
    D3D12_RAY_FLAG_SKIP_TRIANGLES = 256,
    D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 512,
}

enum D3D12_HIT_KIND
{
    D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 254,
    D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 255,
}

const GUID IID_ID3D12Device5 = {0x8B4F173B, 0x2FEA, 0x4B80, [0x8F, 0x58, 0x43, 0x07, 0x19, 0x1A, 0xB9, 0x5D]};
@GUID(0x8B4F173B, 0x2FEA, 0x4B80, [0x8F, 0x58, 0x43, 0x07, 0x19, 0x1A, 0xB9, 0x5D]);
interface ID3D12Device5 : ID3D12Device4
{
    HRESULT CreateLifetimeTracker(ID3D12LifetimeOwner pOwner, const(Guid)* riid, void** ppvTracker);
    void RemoveDevice();
    HRESULT EnumerateMetaCommands(uint* pNumMetaCommands, char* pDescs);
    HRESULT EnumerateMetaCommandParameters(const(Guid)* CommandId, D3D12_META_COMMAND_PARAMETER_STAGE Stage, uint* pTotalStructureSizeInBytes, uint* pParameterCount, char* pParameterDescs);
    HRESULT CreateMetaCommand(const(Guid)* CommandId, uint NodeMask, char* pCreationParametersData, uint CreationParametersDataSizeInBytes, const(Guid)* riid, void** ppMetaCommand);
    HRESULT CreateStateObject(const(D3D12_STATE_OBJECT_DESC)* pDesc, const(Guid)* riid, void** ppStateObject);
    void GetRaytracingAccelerationStructurePrebuildInfo(const(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS)* pDesc, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo);
    D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS CheckDriverMatchingIdentifier(D3D12_SERIALIZED_DATA_TYPE SerializedDataType, const(D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER)* pIdentifierToCheck);
}

enum D3D12_AUTO_BREADCRUMB_OP
{
    D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0,
    D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1,
    D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2,
    D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3,
    D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5,
    D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6,
    D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7,
    D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8,
    D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9,
    D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11,
    D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12,
    D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13,
    D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14,
    D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16,
    D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18,
    D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19,
    D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20,
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21,
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22,
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23,
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 = 24,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25,
    D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26,
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27,
    D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28,
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29,
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30,
    D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31,
    D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32,
    D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33,
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34,
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36,
    D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37,
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38,
    D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39,
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND = 40,
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND = 41,
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH = 42,
}

struct D3D12_AUTO_BREADCRUMB_NODE
{
    const(byte)* pCommandListDebugNameA;
    const(ushort)* pCommandListDebugNameW;
    const(byte)* pCommandQueueDebugNameA;
    const(ushort)* pCommandQueueDebugNameW;
    ID3D12GraphicsCommandList pCommandList;
    ID3D12CommandQueue pCommandQueue;
    uint BreadcrumbCount;
    const(uint)* pLastBreadcrumbValue;
    const(D3D12_AUTO_BREADCRUMB_OP)* pCommandHistory;
    const(D3D12_AUTO_BREADCRUMB_NODE)* pNext;
}

struct D3D12_DRED_BREADCRUMB_CONTEXT
{
    uint BreadcrumbIndex;
    const(ushort)* pContextString;
}

struct D3D12_AUTO_BREADCRUMB_NODE1
{
    const(byte)* pCommandListDebugNameA;
    const(ushort)* pCommandListDebugNameW;
    const(byte)* pCommandQueueDebugNameA;
    const(ushort)* pCommandQueueDebugNameW;
    ID3D12GraphicsCommandList pCommandList;
    ID3D12CommandQueue pCommandQueue;
    uint BreadcrumbCount;
    const(uint)* pLastBreadcrumbValue;
    const(D3D12_AUTO_BREADCRUMB_OP)* pCommandHistory;
    const(D3D12_AUTO_BREADCRUMB_NODE1)* pNext;
    uint BreadcrumbContextsCount;
    D3D12_DRED_BREADCRUMB_CONTEXT* pBreadcrumbContexts;
}

enum D3D12_DRED_VERSION
{
    D3D12_DRED_VERSION_1_0 = 1,
    D3D12_DRED_VERSION_1_1 = 2,
    D3D12_DRED_VERSION_1_2 = 3,
}

enum D3D12_DRED_FLAGS
{
    D3D12_DRED_FLAG_NONE = 0,
    D3D12_DRED_FLAG_FORCE_ENABLE = 1,
    D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2,
}

enum D3D12_DRED_ENABLEMENT
{
    D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED = 0,
    D3D12_DRED_ENABLEMENT_FORCED_OFF = 1,
    D3D12_DRED_ENABLEMENT_FORCED_ON = 2,
}

struct D3D12_DEVICE_REMOVED_EXTENDED_DATA
{
    D3D12_DRED_FLAGS Flags;
    D3D12_AUTO_BREADCRUMB_NODE* pHeadAutoBreadcrumbNode;
}

enum D3D12_DRED_ALLOCATION_TYPE
{
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE = 19,
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR = 20,
    D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE = 21,
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST = 22,
    D3D12_DRED_ALLOCATION_TYPE_FENCE = 23,
    D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP = 24,
    D3D12_DRED_ALLOCATION_TYPE_HEAP = 25,
    D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP = 27,
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE = 28,
    D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY = 29,
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER = 30,
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR = 32,
    D3D12_DRED_ALLOCATION_TYPE_RESOURCE = 34,
    D3D12_DRED_ALLOCATION_TYPE_PASS = 35,
    D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION = 36,
    D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY = 37,
    D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION = 38,
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP = 39,
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL = 40,
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER = 41,
    D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT = 42,
    D3D12_DRED_ALLOCATION_TYPE_METACOMMAND = 43,
    D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP = 44,
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR = 45,
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP = 46,
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND = 47,
    D3D12_DRED_ALLOCATION_TYPE_INVALID = -1,
}

struct D3D12_DRED_ALLOCATION_NODE
{
    const(byte)* ObjectNameA;
    const(ushort)* ObjectNameW;
    D3D12_DRED_ALLOCATION_TYPE AllocationType;
    const(D3D12_DRED_ALLOCATION_NODE)* pNext;
}

struct D3D12_DRED_ALLOCATION_NODE1
{
    const(byte)* ObjectNameA;
    const(ushort)* ObjectNameW;
    D3D12_DRED_ALLOCATION_TYPE AllocationType;
    const(D3D12_DRED_ALLOCATION_NODE1)* pNext;
    const(IUnknown) pObject;
}

struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
{
    const(D3D12_AUTO_BREADCRUMB_NODE)* pHeadAutoBreadcrumbNode;
}

struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
{
    const(D3D12_AUTO_BREADCRUMB_NODE1)* pHeadAutoBreadcrumbNode;
}

struct D3D12_DRED_PAGE_FAULT_OUTPUT
{
    ulong PageFaultVA;
    const(D3D12_DRED_ALLOCATION_NODE)* pHeadExistingAllocationNode;
    const(D3D12_DRED_ALLOCATION_NODE)* pHeadRecentFreedAllocationNode;
}

struct D3D12_DRED_PAGE_FAULT_OUTPUT1
{
    ulong PageFaultVA;
    const(D3D12_DRED_ALLOCATION_NODE1)* pHeadExistingAllocationNode;
    const(D3D12_DRED_ALLOCATION_NODE1)* pHeadRecentFreedAllocationNode;
}

struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1
{
    HRESULT DeviceRemovedReason;
    D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT AutoBreadcrumbsOutput;
    D3D12_DRED_PAGE_FAULT_OUTPUT PageFaultOutput;
}

struct D3D12_DEVICE_REMOVED_EXTENDED_DATA2
{
    HRESULT DeviceRemovedReason;
    D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 AutoBreadcrumbsOutput;
    D3D12_DRED_PAGE_FAULT_OUTPUT1 PageFaultOutput;
}

struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
{
    D3D12_DRED_VERSION Version;
    _Anonymous_e__Union Anonymous;
}

const GUID IID_ID3D12DeviceRemovedExtendedDataSettings = {0x82BC481C, 0x6B9B, 0x4030, [0xAE, 0xDB, 0x7E, 0xE3, 0xD1, 0xDF, 0x1E, 0x63]};
@GUID(0x82BC481C, 0x6B9B, 0x4030, [0xAE, 0xDB, 0x7E, 0xE3, 0xD1, 0xDF, 0x1E, 0x63]);
interface ID3D12DeviceRemovedExtendedDataSettings : IUnknown
{
    void SetAutoBreadcrumbsEnablement(D3D12_DRED_ENABLEMENT Enablement);
    void SetPageFaultEnablement(D3D12_DRED_ENABLEMENT Enablement);
    void SetWatsonDumpEnablement(D3D12_DRED_ENABLEMENT Enablement);
}

const GUID IID_ID3D12DeviceRemovedExtendedDataSettings1 = {0xDBD5AE51, 0x3317, 0x4F0A, [0xAD, 0xF9, 0x1D, 0x7C, 0xED, 0xCA, 0xAE, 0x0B]};
@GUID(0xDBD5AE51, 0x3317, 0x4F0A, [0xAD, 0xF9, 0x1D, 0x7C, 0xED, 0xCA, 0xAE, 0x0B]);
interface ID3D12DeviceRemovedExtendedDataSettings1 : ID3D12DeviceRemovedExtendedDataSettings
{
    void SetBreadcrumbContextEnablement(D3D12_DRED_ENABLEMENT Enablement);
}

const GUID IID_ID3D12DeviceRemovedExtendedData = {0x98931D33, 0x5AE8, 0x4791, [0xAA, 0x3C, 0x1A, 0x73, 0xA2, 0x93, 0x4E, 0x71]};
@GUID(0x98931D33, 0x5AE8, 0x4791, [0xAA, 0x3C, 0x1A, 0x73, 0xA2, 0x93, 0x4E, 0x71]);
interface ID3D12DeviceRemovedExtendedData : IUnknown
{
    HRESULT GetAutoBreadcrumbsOutput(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT* pOutput);
    HRESULT GetPageFaultAllocationOutput(D3D12_DRED_PAGE_FAULT_OUTPUT* pOutput);
}

const GUID IID_ID3D12DeviceRemovedExtendedData1 = {0x9727A022, 0xCF1D, 0x4DDA, [0x9E, 0xBA, 0xEF, 0xFA, 0x65, 0x3F, 0xC5, 0x06]};
@GUID(0x9727A022, 0xCF1D, 0x4DDA, [0x9E, 0xBA, 0xEF, 0xFA, 0x65, 0x3F, 0xC5, 0x06]);
interface ID3D12DeviceRemovedExtendedData1 : ID3D12DeviceRemovedExtendedData
{
    HRESULT GetAutoBreadcrumbsOutput1(D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1* pOutput);
    HRESULT GetPageFaultAllocationOutput1(D3D12_DRED_PAGE_FAULT_OUTPUT1* pOutput);
}

enum D3D12_BACKGROUND_PROCESSING_MODE
{
    D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED = 0,
    D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS = 1,
    D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK = 2,
    D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM = 3,
}

enum D3D12_MEASUREMENTS_ACTION
{
    D3D12_MEASUREMENTS_ACTION_KEEP_ALL = 0,
    D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS = 1,
    D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY = 2,
    D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS = 3,
}

const GUID IID_ID3D12Device6 = {0xC70B221B, 0x40E4, 0x4A17, [0x89, 0xAF, 0x02, 0x5A, 0x07, 0x27, 0xA6, 0xDC]};
@GUID(0xC70B221B, 0x40E4, 0x4A17, [0x89, 0xAF, 0x02, 0x5A, 0x07, 0x27, 0xA6, 0xDC]);
interface ID3D12Device6 : ID3D12Device5
{
    HRESULT SetBackgroundProcessingMode(D3D12_BACKGROUND_PROCESSING_MODE Mode, D3D12_MEASUREMENTS_ACTION MeasurementsAction, HANDLE hEventToSignalUponCompletion, int* pbFurtherMeasurementsDesired);
}

struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT
{
    uint NodeIndex;
    uint Count;
}

struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES
{
    uint NodeIndex;
    uint Count;
    Guid* pTypes;
}

struct D3D12_PROTECTED_RESOURCE_SESSION_DESC1
{
    uint NodeMask;
    D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
    Guid ProtectionType;
}

const GUID IID_ID3D12ProtectedResourceSession1 = {0xD6F12DD6, 0x76FB, 0x406E, [0x89, 0x61, 0x42, 0x96, 0xEE, 0xFC, 0x04, 0x09]};
@GUID(0xD6F12DD6, 0x76FB, 0x406E, [0x89, 0x61, 0x42, 0x96, 0xEE, 0xFC, 0x04, 0x09]);
interface ID3D12ProtectedResourceSession1 : ID3D12ProtectedResourceSession
{
    D3D12_PROTECTED_RESOURCE_SESSION_DESC1 GetDesc1();
}

const GUID IID_ID3D12Device7 = {0x5C014B53, 0x68A1, 0x4B9B, [0x8B, 0xD1, 0xDD, 0x60, 0x46, 0xB9, 0x35, 0x8B]};
@GUID(0x5C014B53, 0x68A1, 0x4B9B, [0x8B, 0xD1, 0xDD, 0x60, 0x46, 0xB9, 0x35, 0x8B]);
interface ID3D12Device7 : ID3D12Device6
{
    HRESULT AddToStateObject(const(D3D12_STATE_OBJECT_DESC)* pAddition, ID3D12StateObject pStateObjectToGrowFrom, const(Guid)* riid, void** ppNewStateObject);
    HRESULT CreateProtectedResourceSession1(const(D3D12_PROTECTED_RESOURCE_SESSION_DESC1)* pDesc, const(Guid)* riid, void** ppSession);
}

const GUID IID_ID3D12Device8 = {0x9218E6BB, 0xF944, 0x4F7E, [0xA7, 0x5C, 0xB1, 0xB2, 0xC7, 0xB7, 0x01, 0xF3]};
@GUID(0x9218E6BB, 0xF944, 0x4F7E, [0xA7, 0x5C, 0xB1, 0xB2, 0xC7, 0xB7, 0x01, 0xF3]);
interface ID3D12Device8 : ID3D12Device7
{
    D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo2(uint visibleMask, uint numResourceDescs, char* pResourceDescs, char* pResourceAllocationInfo1);
    HRESULT CreateCommittedResource2(const(D3D12_HEAP_PROPERTIES)* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, const(D3D12_RESOURCE_DESC1)* pDesc, D3D12_RESOURCE_STATES InitialResourceState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, ID3D12ProtectedResourceSession pProtectedSession, const(Guid)* riidResource, void** ppvResource);
    HRESULT CreatePlacedResource1(ID3D12Heap pHeap, ulong HeapOffset, const(D3D12_RESOURCE_DESC1)* pDesc, D3D12_RESOURCE_STATES InitialState, const(D3D12_CLEAR_VALUE)* pOptimizedClearValue, const(Guid)* riid, void** ppvResource);
    void CreateSamplerFeedbackUnorderedAccessView(ID3D12Resource pTargetedResource, ID3D12Resource pFeedbackResource, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);
    void GetCopyableFootprints1(const(D3D12_RESOURCE_DESC1)* pResourceDesc, uint FirstSubresource, uint NumSubresources, ulong BaseOffset, char* pLayouts, char* pNumRows, char* pRowSizeInBytes, ulong* pTotalBytes);
}

const GUID IID_ID3D12Resource1 = {0x9D5E227A, 0x4430, 0x4161, [0x88, 0xB3, 0x3E, 0xCA, 0x6B, 0xB1, 0x6E, 0x19]};
@GUID(0x9D5E227A, 0x4430, 0x4161, [0x88, 0xB3, 0x3E, 0xCA, 0x6B, 0xB1, 0x6E, 0x19]);
interface ID3D12Resource1 : ID3D12Resource
{
    HRESULT GetProtectedResourceSession(const(Guid)* riid, void** ppProtectedSession);
}

const GUID IID_ID3D12Resource2 = {0xBE36EC3B, 0xEA85, 0x4AEB, [0xA4, 0x5A, 0xE9, 0xD7, 0x64, 0x04, 0xA4, 0x95]};
@GUID(0xBE36EC3B, 0xEA85, 0x4AEB, [0xA4, 0x5A, 0xE9, 0xD7, 0x64, 0x04, 0xA4, 0x95]);
interface ID3D12Resource2 : ID3D12Resource1
{
    D3D12_RESOURCE_DESC1 GetDesc1();
}

const GUID IID_ID3D12Heap1 = {0x572F7389, 0x2168, 0x49E3, [0x96, 0x93, 0xD6, 0xDF, 0x58, 0x71, 0xBF, 0x6D]};
@GUID(0x572F7389, 0x2168, 0x49E3, [0x96, 0x93, 0xD6, 0xDF, 0x58, 0x71, 0xBF, 0x6D]);
interface ID3D12Heap1 : ID3D12Heap
{
    HRESULT GetProtectedResourceSession(const(Guid)* riid, void** ppProtectedSession);
}

const GUID IID_ID3D12GraphicsCommandList3 = {0x6FDA83A7, 0xB84C, 0x4E38, [0x9A, 0xC8, 0xC7, 0xBD, 0x22, 0x01, 0x6B, 0x3D]};
@GUID(0x6FDA83A7, 0xB84C, 0x4E38, [0x9A, 0xC8, 0xC7, 0xBD, 0x22, 0x01, 0x6B, 0x3D]);
interface ID3D12GraphicsCommandList3 : ID3D12GraphicsCommandList2
{
    void SetProtectedResourceSession(ID3D12ProtectedResourceSession pProtectedResourceSession);
}

enum D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE
{
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = 1,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = 2,
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = 3,
}

struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
{
    D3D12_CLEAR_VALUE ClearValue;
}

struct D3D12_RENDER_PASS_BEGINNING_ACCESS
{
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE Type;
    _Anonymous_e__Union Anonymous;
}

enum D3D12_RENDER_PASS_ENDING_ACCESS_TYPE
{
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0,
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = 1,
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = 2,
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = 3,
}

struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
{
    uint SrcSubresource;
    uint DstSubresource;
    uint DstX;
    uint DstY;
    RECT SrcRect;
}

struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
{
    ID3D12Resource pSrcResource;
    ID3D12Resource pDstResource;
    uint SubresourceCount;
    const(D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS)* pSubresourceParameters;
    DXGI_FORMAT Format;
    D3D12_RESOLVE_MODE ResolveMode;
    BOOL PreserveResolveSource;
}

struct D3D12_RENDER_PASS_ENDING_ACCESS
{
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE Type;
    _Anonymous_e__Union Anonymous;
}

struct D3D12_RENDER_PASS_RENDER_TARGET_DESC
{
    D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
    D3D12_RENDER_PASS_BEGINNING_ACCESS BeginningAccess;
    D3D12_RENDER_PASS_ENDING_ACCESS EndingAccess;
}

struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
{
    D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
    D3D12_RENDER_PASS_BEGINNING_ACCESS DepthBeginningAccess;
    D3D12_RENDER_PASS_BEGINNING_ACCESS StencilBeginningAccess;
    D3D12_RENDER_PASS_ENDING_ACCESS DepthEndingAccess;
    D3D12_RENDER_PASS_ENDING_ACCESS StencilEndingAccess;
}

enum D3D12_RENDER_PASS_FLAGS
{
    D3D12_RENDER_PASS_FLAG_NONE = 0,
    D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 1,
    D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 2,
    D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 4,
}

const GUID IID_ID3D12MetaCommand = {0xDBB84C27, 0x36CE, 0x4FC9, [0xB8, 0x01, 0xF0, 0x48, 0xC4, 0x6A, 0xC5, 0x70]};
@GUID(0xDBB84C27, 0x36CE, 0x4FC9, [0xB8, 0x01, 0xF0, 0x48, 0xC4, 0x6A, 0xC5, 0x70]);
interface ID3D12MetaCommand : ID3D12Pageable
{
    ulong GetRequiredParameterResourceSize(D3D12_META_COMMAND_PARAMETER_STAGE Stage, uint ParameterIndex);
}

struct D3D12_DISPATCH_RAYS_DESC
{
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE RayGenerationShaderRecord;
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE MissShaderTable;
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE HitGroupTable;
    D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE CallableShaderTable;
    uint Width;
    uint Height;
    uint Depth;
}

const GUID IID_ID3D12GraphicsCommandList4 = {0x8754318E, 0xD3A9, 0x4541, [0x98, 0xCF, 0x64, 0x5B, 0x50, 0xDC, 0x48, 0x74]};
@GUID(0x8754318E, 0xD3A9, 0x4541, [0x98, 0xCF, 0x64, 0x5B, 0x50, 0xDC, 0x48, 0x74]);
interface ID3D12GraphicsCommandList4 : ID3D12GraphicsCommandList3
{
    void BeginRenderPass(uint NumRenderTargets, char* pRenderTargets, const(D3D12_RENDER_PASS_DEPTH_STENCIL_DESC)* pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags);
    void EndRenderPass();
    void InitializeMetaCommand(ID3D12MetaCommand pMetaCommand, char* pInitializationParametersData, uint InitializationParametersDataSizeInBytes);
    void ExecuteMetaCommand(ID3D12MetaCommand pMetaCommand, char* pExecutionParametersData, uint ExecutionParametersDataSizeInBytes);
    void BuildRaytracingAccelerationStructure(const(D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC)* pDesc, uint NumPostbuildInfoDescs, char* pPostbuildInfoDescs);
    void EmitRaytracingAccelerationStructurePostbuildInfo(const(D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC)* pDesc, uint NumSourceAccelerationStructures, char* pSourceAccelerationStructureData);
    void CopyRaytracingAccelerationStructure(ulong DestAccelerationStructureData, ulong SourceAccelerationStructureData, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode);
    void SetPipelineState1(ID3D12StateObject pStateObject);
    void DispatchRays(const(D3D12_DISPATCH_RAYS_DESC)* pDesc);
}

const GUID IID_ID3D12Tools = {0x7071E1F0, 0xE84B, 0x4B33, [0x97, 0x4F, 0x12, 0xFA, 0x49, 0xDE, 0x65, 0xC5]};
@GUID(0x7071E1F0, 0xE84B, 0x4B33, [0x97, 0x4F, 0x12, 0xFA, 0x49, 0xDE, 0x65, 0xC5]);
interface ID3D12Tools : IUnknown
{
    void EnableShaderInstrumentation(BOOL bEnable);
    BOOL ShaderInstrumentationEnabled();
}

struct D3D12_SUBRESOURCE_DATA
{
    const(void)* pData;
    int RowPitch;
    int SlicePitch;
}

struct D3D12_MEMCPY_DEST
{
    void* pData;
    uint RowPitch;
    uint SlicePitch;
}

const GUID IID_ID3D12Debug = {0x344488B7, 0x6846, 0x474B, [0xB9, 0x89, 0xF0, 0x27, 0x44, 0x82, 0x45, 0xE0]};
@GUID(0x344488B7, 0x6846, 0x474B, [0xB9, 0x89, 0xF0, 0x27, 0x44, 0x82, 0x45, 0xE0]);
interface ID3D12Debug : IUnknown
{
    void EnableDebugLayer();
}

enum D3D12_GPU_BASED_VALIDATION_FLAGS
{
    D3D12_GPU_BASED_VALIDATION_FLAGS_NONE = 0,
    D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING = 1,
}

const GUID IID_ID3D12Debug1 = {0xAFFAA4CA, 0x63FE, 0x4D8E, [0xB8, 0xAD, 0x15, 0x90, 0x00, 0xAF, 0x43, 0x04]};
@GUID(0xAFFAA4CA, 0x63FE, 0x4D8E, [0xB8, 0xAD, 0x15, 0x90, 0x00, 0xAF, 0x43, 0x04]);
interface ID3D12Debug1 : IUnknown
{
    void EnableDebugLayer();
    void SetEnableGPUBasedValidation(BOOL Enable);
    void SetEnableSynchronizedCommandQueueValidation(BOOL Enable);
}

const GUID IID_ID3D12Debug2 = {0x93A665C4, 0xA3B2, 0x4E5D, [0xB6, 0x92, 0xA2, 0x6A, 0xE1, 0x4E, 0x33, 0x74]};
@GUID(0x93A665C4, 0xA3B2, 0x4E5D, [0xB6, 0x92, 0xA2, 0x6A, 0xE1, 0x4E, 0x33, 0x74]);
interface ID3D12Debug2 : IUnknown
{
    void SetGPUBasedValidationFlags(D3D12_GPU_BASED_VALIDATION_FLAGS Flags);
}

const GUID IID_ID3D12Debug3 = {0x5CF4E58F, 0xF671, 0x4FF1, [0xA5, 0x42, 0x36, 0x86, 0xE3, 0xD1, 0x53, 0xD1]};
@GUID(0x5CF4E58F, 0xF671, 0x4FF1, [0xA5, 0x42, 0x36, 0x86, 0xE3, 0xD1, 0x53, 0xD1]);
interface ID3D12Debug3 : ID3D12Debug
{
    void SetEnableGPUBasedValidation(BOOL Enable);
    void SetEnableSynchronizedCommandQueueValidation(BOOL Enable);
    void SetGPUBasedValidationFlags(D3D12_GPU_BASED_VALIDATION_FLAGS Flags);
}

enum D3D12_RLDO_FLAGS
{
    D3D12_RLDO_NONE = 0,
    D3D12_RLDO_SUMMARY = 1,
    D3D12_RLDO_DETAIL = 2,
    D3D12_RLDO_IGNORE_INTERNAL = 4,
}

enum D3D12_DEBUG_DEVICE_PARAMETER_TYPE
{
    D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS = 0,
    D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 1,
    D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR = 2,
}

enum D3D12_DEBUG_FEATURE
{
    D3D12_DEBUG_FEATURE_NONE = 0,
    D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS = 1,
    D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING = 2,
    D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION = 4,
    D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7 = 8,
}

enum D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE
{
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE = 0,
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY = 1,
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION = 2,
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION = 3,
    NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES = 4,
}

enum D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS
{
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE = 0,
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS = 1,
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS = 2,
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS = 4,
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK = 7,
}

struct D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS
{
    uint MaxMessagesPerCommandList;
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE DefaultShaderPatchMode;
    D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS PipelineStateCreateFlags;
}

struct D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR
{
    float SlowdownFactor;
}

const GUID IID_ID3D12DebugDevice1 = {0xA9B71770, 0xD099, 0x4A65, [0xA6, 0x98, 0x3D, 0xEE, 0x10, 0x02, 0x0F, 0x88]};
@GUID(0xA9B71770, 0xD099, 0x4A65, [0xA6, 0x98, 0x3D, 0xEE, 0x10, 0x02, 0x0F, 0x88]);
interface ID3D12DebugDevice1 : IUnknown
{
    HRESULT SetDebugParameter(D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, char* pData, uint DataSize);
    HRESULT GetDebugParameter(D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, char* pData, uint DataSize);
    HRESULT ReportLiveDeviceObjects(D3D12_RLDO_FLAGS Flags);
}

const GUID IID_ID3D12DebugDevice = {0x3FEBD6DD, 0x4973, 0x4787, [0x81, 0x94, 0xE4, 0x5F, 0x9E, 0x28, 0x92, 0x3E]};
@GUID(0x3FEBD6DD, 0x4973, 0x4787, [0x81, 0x94, 0xE4, 0x5F, 0x9E, 0x28, 0x92, 0x3E]);
interface ID3D12DebugDevice : IUnknown
{
    HRESULT SetFeatureMask(D3D12_DEBUG_FEATURE Mask);
    D3D12_DEBUG_FEATURE GetFeatureMask();
    HRESULT ReportLiveDeviceObjects(D3D12_RLDO_FLAGS Flags);
}

const GUID IID_ID3D12DebugDevice2 = {0x60ECCBC1, 0x378D, 0x4DF1, [0x89, 0x4C, 0xF8, 0xAC, 0x5C, 0xE4, 0xD7, 0xDD]};
@GUID(0x60ECCBC1, 0x378D, 0x4DF1, [0x89, 0x4C, 0xF8, 0xAC, 0x5C, 0xE4, 0xD7, 0xDD]);
interface ID3D12DebugDevice2 : ID3D12DebugDevice
{
    HRESULT SetDebugParameter(D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, char* pData, uint DataSize);
    HRESULT GetDebugParameter(D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, char* pData, uint DataSize);
}

const GUID IID_ID3D12DebugCommandQueue = {0x09E0BF36, 0x54AC, 0x484F, [0x88, 0x47, 0x4B, 0xAE, 0xEA, 0xB6, 0x05, 0x3A]};
@GUID(0x09E0BF36, 0x54AC, 0x484F, [0x88, 0x47, 0x4B, 0xAE, 0xEA, 0xB6, 0x05, 0x3A]);
interface ID3D12DebugCommandQueue : IUnknown
{
    BOOL AssertResourceState(ID3D12Resource pResource, uint Subresource, uint State);
}

enum D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE
{
    D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 0,
}

struct D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS
{
    D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE ShaderPatchMode;
}

const GUID IID_ID3D12DebugCommandList1 = {0x102CA951, 0x311B, 0x4B01, [0xB1, 0x1F, 0xEC, 0xB8, 0x3E, 0x06, 0x1B, 0x37]};
@GUID(0x102CA951, 0x311B, 0x4B01, [0xB1, 0x1F, 0xEC, 0xB8, 0x3E, 0x06, 0x1B, 0x37]);
interface ID3D12DebugCommandList1 : IUnknown
{
    BOOL AssertResourceState(ID3D12Resource pResource, uint Subresource, uint State);
    HRESULT SetDebugParameter(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, char* pData, uint DataSize);
    HRESULT GetDebugParameter(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, char* pData, uint DataSize);
}

const GUID IID_ID3D12DebugCommandList = {0x09E0BF36, 0x54AC, 0x484F, [0x88, 0x47, 0x4B, 0xAE, 0xEA, 0xB6, 0x05, 0x3F]};
@GUID(0x09E0BF36, 0x54AC, 0x484F, [0x88, 0x47, 0x4B, 0xAE, 0xEA, 0xB6, 0x05, 0x3F]);
interface ID3D12DebugCommandList : IUnknown
{
    BOOL AssertResourceState(ID3D12Resource pResource, uint Subresource, uint State);
    HRESULT SetFeatureMask(D3D12_DEBUG_FEATURE Mask);
    D3D12_DEBUG_FEATURE GetFeatureMask();
}

const GUID IID_ID3D12DebugCommandList2 = {0xAEB575CF, 0x4E06, 0x48BE, [0xBA, 0x3B, 0xC4, 0x50, 0xFC, 0x96, 0x65, 0x2E]};
@GUID(0xAEB575CF, 0x4E06, 0x48BE, [0xBA, 0x3B, 0xC4, 0x50, 0xFC, 0x96, 0x65, 0x2E]);
interface ID3D12DebugCommandList2 : ID3D12DebugCommandList
{
    HRESULT SetDebugParameter(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, char* pData, uint DataSize);
    HRESULT GetDebugParameter(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, char* pData, uint DataSize);
}

const GUID IID_ID3D12SharingContract = {0x0ADF7D52, 0x929C, 0x4E61, [0xAD, 0xDB, 0xFF, 0xED, 0x30, 0xDE, 0x66, 0xEF]};
@GUID(0x0ADF7D52, 0x929C, 0x4E61, [0xAD, 0xDB, 0xFF, 0xED, 0x30, 0xDE, 0x66, 0xEF]);
interface ID3D12SharingContract : IUnknown
{
    void Present(ID3D12Resource pResource, uint Subresource, HWND window);
    void SharedFenceSignal(ID3D12Fence pFence, ulong FenceValue);
    void BeginCapturableWork(const(Guid)* guid);
    void EndCapturableWork(const(Guid)* guid);
}

enum D3D12_MESSAGE_CATEGORY
{
    D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
    D3D12_MESSAGE_CATEGORY_MISCELLANEOUS = 1,
    D3D12_MESSAGE_CATEGORY_INITIALIZATION = 2,
    D3D12_MESSAGE_CATEGORY_CLEANUP = 3,
    D3D12_MESSAGE_CATEGORY_COMPILATION = 4,
    D3D12_MESSAGE_CATEGORY_STATE_CREATION = 5,
    D3D12_MESSAGE_CATEGORY_STATE_SETTING = 6,
    D3D12_MESSAGE_CATEGORY_STATE_GETTING = 7,
    D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8,
    D3D12_MESSAGE_CATEGORY_EXECUTION = 9,
    D3D12_MESSAGE_CATEGORY_SHADER = 10,
}

enum D3D12_MESSAGE_SEVERITY
{
    D3D12_MESSAGE_SEVERITY_CORRUPTION = 0,
    D3D12_MESSAGE_SEVERITY_ERROR = 1,
    D3D12_MESSAGE_SEVERITY_WARNING = 2,
    D3D12_MESSAGE_SEVERITY_INFO = 3,
    D3D12_MESSAGE_SEVERITY_MESSAGE = 4,
}

enum D3D12_MESSAGE_ID
{
    D3D12_MESSAGE_ID_UNKNOWN = 0,
    D3D12_MESSAGE_ID_STRING_FROM_APPLICATION = 1,
    D3D12_MESSAGE_ID_CORRUPTED_THIS = 2,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1 = 3,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2 = 4,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3 = 5,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4 = 6,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5 = 7,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6 = 8,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7 = 9,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8 = 10,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9 = 11,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10 = 12,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11 = 13,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12 = 14,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13 = 15,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14 = 16,
    D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15 = 17,
    D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING = 18,
    D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 19,
    D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 20,
    D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 21,
    D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 24,
    D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 25,
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 26,
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 27,
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 28,
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE = 29,
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE = 30,
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 31,
    D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 32,
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 35,
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 36,
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 37,
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 38,
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE = 39,
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE = 40,
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 41,
    D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 42,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 45,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 46,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 47,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 48,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 49,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 52,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 53,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 54,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 55,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 56,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 57,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 58,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 59,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 60,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 61,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 62,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 63,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 64,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 65,
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 66,
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 67,
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 68,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 69,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 70,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 71,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 72,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 73,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 74,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 75,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 76,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 79,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 80,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 81,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 82,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 83,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 84,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 85,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 86,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 87,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 88,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 89,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 90,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 91,
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 92,
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 93,
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 94,
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 95,
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 96,
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 97,
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 98,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 100,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 101,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 102,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 103,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 104,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 105,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 106,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 107,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 108,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 109,
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 111,
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 112,
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 113,
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 114,
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 115,
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 116,
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 117,
    D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 135,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET = 200,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH = 201,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET = 202,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 209,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL = 210,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET = 211,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID = 212,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL = 213,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY = 219,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED = 221,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED = 222,
    D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 232,
    D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 233,
    D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 234,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 239,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 240,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 245,
    D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 253,
    D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 255,
    D3D12_MESSAGE_ID_LIVE_DEVICE = 274,
    D3D12_MESSAGE_ID_LIVE_SWAPCHAIN = 275,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 276,
    D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 277,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 278,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 280,
    D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 283,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 284,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 285,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 286,
    D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 287,
    D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 289,
    D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 290,
    D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 291,
    D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 292,
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 294,
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 295,
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 296,
    D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 297,
    D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 310,
    D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 318,
    D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 321,
    D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 322,
    D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 323,
    D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 331,
    D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 332,
    D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 333,
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 334,
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 335,
    D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 336,
    D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 337,
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 340,
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 341,
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 342,
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE = 343,
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE = 344,
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 345,
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 346,
    D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 354,
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 401,
    D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 403,
    D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 410,
    D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 412,
    D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 414,
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 416,
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 418,
    D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 420,
    D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 422,
    D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 425,
    D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 426,
    D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 427,
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 428,
    D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 429,
    D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 430,
    D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 431,
    D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 447,
    D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 448,
    D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 493,
    D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 494,
    D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 506,
    D3D12_MESSAGE_ID_CREATEDEVICE_WARNING = 507,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE = 519,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER = 520,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE = 521,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS = 522,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS = 523,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS = 524,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES = 525,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION = 526,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH = 527,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE = 528,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT = 529,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS = 530,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS = 531,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT = 532,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER = 533,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END = 534,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN = 535,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG = 536,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE = 537,
    D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE = 538,
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION = 540,
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET = 541,
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE = 542,
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET = 543,
    D3D12_MESSAGE_ID_COMMAND_LIST_OPEN = 544,
    D3D12_MESSAGE_ID_INVALID_BUNDLE_API = 546,
    D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED = 547,
    D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE = 549,
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC = 552,
    D3D12_MESSAGE_ID_COMMAND_LIST_SYNC = 553,
    D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID = 554,
    D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE = 557,
    D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR = 558,
    D3D12_MESSAGE_ID_CREATE_PIPELINESTATE = 559,
    D3D12_MESSAGE_ID_CREATE_COMMANDLIST12 = 560,
    D3D12_MESSAGE_ID_CREATE_RESOURCE = 562,
    D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP = 563,
    D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE = 564,
    D3D12_MESSAGE_ID_CREATE_LIBRARY = 565,
    D3D12_MESSAGE_ID_CREATE_HEAP = 566,
    D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE = 567,
    D3D12_MESSAGE_ID_CREATE_QUERYHEAP = 568,
    D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE = 569,
    D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE = 570,
    D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR = 571,
    D3D12_MESSAGE_ID_LIVE_PIPELINESTATE = 572,
    D3D12_MESSAGE_ID_LIVE_COMMANDLIST12 = 573,
    D3D12_MESSAGE_ID_LIVE_RESOURCE = 575,
    D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP = 576,
    D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE = 577,
    D3D12_MESSAGE_ID_LIVE_LIBRARY = 578,
    D3D12_MESSAGE_ID_LIVE_HEAP = 579,
    D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE = 580,
    D3D12_MESSAGE_ID_LIVE_QUERYHEAP = 581,
    D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE = 582,
    D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE = 583,
    D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR = 584,
    D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE = 585,
    D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12 = 586,
    D3D12_MESSAGE_ID_DESTROY_RESOURCE = 588,
    D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP = 589,
    D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE = 590,
    D3D12_MESSAGE_ID_DESTROY_LIBRARY = 591,
    D3D12_MESSAGE_ID_DESTROY_HEAP = 592,
    D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE = 593,
    D3D12_MESSAGE_ID_DESTROY_QUERYHEAP = 594,
    D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE = 595,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS = 597,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS = 599,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN = 602,
    D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN = 603,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC = 604,
    D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE = 607,
    D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 608,
    D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 609,
    D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH = 610,
    D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE = 611,
    D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE = 613,
    D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 614,
    D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE = 615,
    D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 616,
    D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE = 622,
    D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC = 623,
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE = 624,
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE = 625,
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 626,
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL = 627,
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES = 628,
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT = 629,
    D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS = 630,
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS = 631,
    D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN = 632,
    D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN = 633,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES = 634,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE = 635,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 636,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL = 637,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES = 638,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS = 639,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS = 640,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN = 641,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN = 642,
    D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE = 643,
    D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE = 644,
    D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC = 645,
    D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE = 646,
    D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 647,
    D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE = 649,
    D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC = 650,
    D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE = 652,
    D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES = 653,
    D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR = 654,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN = 655,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT = 656,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET = 657,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET = 658,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH = 659,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX = 660,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE = 661,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK = 662,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE = 663,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 664,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION = 665,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 666,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH = 667,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 668,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 669,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 670,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 671,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 672,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY = 673,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE = 674,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 675,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 676,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH = 677,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 678,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET = 679,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET = 680,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH = 681,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT = 682,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS = 683,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES = 684,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC = 685,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH = 686,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH = 687,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH = 688,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH = 689,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH = 690,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE = 691,
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE = 692,
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH = 693,
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE = 694,
    D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE = 695,
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND = 696,
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED = 697,
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION = 698,
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE = 699,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES = 700,
    D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP = 701,
    D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS = 702,
    D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY = 703,
    D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY = 705,
    D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID = 708,
    D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID = 709,
    D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID = 710,
    D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID = 711,
    D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID = 712,
    D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC = 713,
    D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC = 715,
    D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC = 717,
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY = 718,
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT = 719,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY = 720,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT = 721,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS = 722,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC = 723,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT = 724,
    D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID = 725,
    D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID = 726,
    D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID = 727,
    D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID = 728,
    D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS = 729,
    D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS = 731,
    D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY = 732,
    D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS = 733,
    D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS = 734,
    D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED = 735,
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT = 737,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT = 738,
    D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE = 739,
    D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET = 740,
    D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE = 739,
    D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET = 740,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP = 741,
    D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID = 742,
    D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID = 743,
    D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS = 744,
    D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION = 745,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE = 815,
    D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT = 816,
    D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT = 817,
    D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH = 818,
    D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE = 820,
    D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE = 821,
    D3D12_MESSAGE_ID_MAP_INVALIDHEAP = 822,
    D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP = 823,
    D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE = 824,
    D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE = 825,
    D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE = 826,
    D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE = 827,
    D3D12_MESSAGE_ID_MAP_INVALIDRANGE = 828,
    D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE = 829,
    D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER = 832,
    D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN = 833,
    D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN = 834,
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED = 835,
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH = 836,
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST = 837,
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST = 838,
    D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST = 839,
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION = 840,
    D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS = 841,
    D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC = 842,
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION = 843,
    D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS = 844,
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS = 845,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST = 846,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE = 847,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION = 848,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE = 849,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE = 850,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET = 851,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT = 852,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT = 853,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS = 854,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH = 855,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT = 856,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT = 857,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS = 858,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC = 859,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE = 860,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION = 861,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE = 862,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE = 863,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET = 864,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT = 865,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT = 866,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS = 867,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH = 868,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT = 869,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT = 870,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS = 871,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES = 872,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX = 873,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH = 874,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX = 875,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS = 876,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX = 877,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT = 878,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH = 879,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT = 880,
    D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER = 881,
    D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH = 882,
    D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE = 883,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB = 884,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH = 885,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH = 886,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH = 887,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED = 888,
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP = 889,
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE = 890,
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX = 891,
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE = 892,
    D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX = 893,
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP = 894,
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE = 895,
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX = 896,
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE = 897,
    D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX = 898,
    D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED = 899,
    D3D12_MESSAGE_ID_INVALID_NODE_INDEX = 900,
    D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE = 901,
    D3D12_MESSAGE_ID_NODE_MASK_MISMATCH = 902,
    D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY = 903,
    D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES = 904,
    D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES = 905,
    D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES = 906,
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE = 907,
    D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS = 908,
    D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE = 909,
    D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS = 910,
    D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS = 911,
    D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT = 912,
    D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS = 913,
    D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES = 914,
    D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE = 915,
    D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT = 916,
    D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT = 917,
    D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY = 918,
    D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE = 919,
    D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY = 920,
    D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE = 921,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS = 922,
    D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE = 923,
    D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED = 924,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT = 925,
    D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS = 926,
    D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED = 927,
    D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY = 929,
    D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE = 930,
    D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE = 931,
    D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT = 932,
    D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT = 933,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED = 934,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED = 935,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS = 936,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS = 937,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED = 938,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH = 939,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH = 940,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH = 941,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE = 942,
    D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST = 943,
    D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE = 944,
    D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC = 945,
    D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE = 946,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST = 947,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE = 948,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC = 949,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE = 950,
    D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH = 951,
    D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET = 952,
    D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH = 953,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS = 954,
    D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH = 955,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH = 956,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END = 957,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE = 958,
    D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 959,
    D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE = 960,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS = 961,
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB = 962,
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH = 963,
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH = 964,
    D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED = 965,
    D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY = 966,
    D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY = 967,
    D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY = 968,
    D3D12_MESSAGE_ID_STOREPIPELINE_NONAME = 969,
    D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME = 970,
    D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND = 971,
    D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC = 972,
    D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY = 973,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH = 974,
    D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS = 975,
    D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED = 976,
    D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED = 977,
    D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED = 978,
    D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST = 979,
    D3D12_MESSAGE_ID_CREATE_VIDEODECODER = 980,
    D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM = 981,
    D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST = 982,
    D3D12_MESSAGE_ID_LIVE_VIDEODECODER = 983,
    D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM = 984,
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST = 985,
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODER = 986,
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM = 987,
    D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS = 988,
    D3D12_MESSAGE_ID_DEPRECATED_API = 989,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE = 990,
    D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET = 991,
    D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET = 992,
    D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET = 993,
    D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET = 994,
    D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE = 995,
    D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS = 996,
    D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D = 997,
    D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE = 998,
    D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE = 999,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED = 1000,
    D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE = 1001,
    D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE = 1002,
    D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE = 1003,
    D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET = 1004,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS = 1005,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH = 1006,
    D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS = 1007,
    D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS = 1008,
    D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY = 1009,
    D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS = 1013,
    D3D12_MESSAGE_ID_BEGIN_EVENT = 1014,
    D3D12_MESSAGE_ID_END_EVENT = 1015,
    D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS = 1016,
    D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED = 1017,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT = 1018,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT = 1019,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM = 1020,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM = 1021,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE = 1022,
    D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH = 1023,
    D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME = 1024,
    D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME = 1025,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE = 1026,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST = 1027,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION = 1028,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS = 1029,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC = 1030,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION = 1031,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS = 1032,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT = 1033,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES = 1034,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES = 1035,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE = 1036,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE = 1037,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS = 1038,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS = 1039,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES = 1040,
    D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG = 1041,
    D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE = 1042,
    D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS = 1043,
    D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE = 1044,
    D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET = 1045,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH = 1046,
    D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE = 1047,
    D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED = 1048,
    D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS = 1049,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT = 1050,
    D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE = 1051,
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST = 1052,
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE = 1053,
    D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE = 1054,
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST = 1055,
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE = 1056,
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE = 1057,
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST = 1058,
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE = 1059,
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 1060,
    D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM = 1061,
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 1062,
    D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM = 1063,
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 1064,
    D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM = 1065,
    D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS = 1066,
    D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT = 1067,
    D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION = 1068,
    D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY = 1069,
    D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION = 1070,
    D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION = 1071,
    D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY = 1072,
    D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION = 1073,
    D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION = 1074,
    D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY = 1075,
    D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION = 1076,
    D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED = 1077,
    D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION = 1078,
    D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED = 1079,
    D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED = 1080,
    D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE = 1081,
    D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR = 1082,
    D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP = 1083,
    D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP = 1084,
    D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP = 1085,
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN = 1086,
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN = 1087,
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS = 1088,
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE = 1089,
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST = 1090,
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE = 1091,
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT = 1092,
    D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED = 1093,
    D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS = 1094,
    D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED = 1095,
    D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS = 1096,
    D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1097,
    D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1098,
    D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE = 1099,
    D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED = 1100,
    D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT = 1101,
    D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED = 1102,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR = 1103,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED = 1104,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR = 1105,
    D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT = 1106,
    D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT = 1107,
    D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE = 1108,
    D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT = 1109,
    D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT = 1110,
    D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS = 1111,
    D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED = 1112,
    D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT = 1113,
    D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED = 1114,
    D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER = 1115,
    D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER = 1116,
    D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER = 1117,
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED = 1118,
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS = 1119,
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS = 1120,
    D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS = 1121,
    D3D12_MESSAGE_ID_CREATE_COMMANDPOOL = 1122,
    D3D12_MESSAGE_ID_LIVE_COMMANDPOOL = 1123,
    D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL = 1124,
    D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS = 1125,
    D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED = 1126,
    D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH = 1127,
    D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION = 1128,
    D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST = 1129,
    D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST = 1130,
    D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST = 1131,
    D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS = 1132,
    D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET = 1133,
    D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING = 1134,
    D3D12_MESSAGE_ID_COMMAND_POOL_SYNC = 1135,
    D3D12_MESSAGE_ID_EVICT_UNDERFLOW = 1136,
    D3D12_MESSAGE_ID_CREATE_META_COMMAND = 1137,
    D3D12_MESSAGE_ID_LIVE_META_COMMAND = 1138,
    D3D12_MESSAGE_ID_DESTROY_META_COMMAND = 1139,
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE = 1140,
    D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE = 1141,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE = 1142,
    D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE = 1143,
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER = 1144,
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC = 1145,
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED = 1146,
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION = 1147,
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS = 1148,
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET = 1149,
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION = 1150,
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS = 1151,
    D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN = 1152,
    D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER = 1153,
    D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES = 1154,
    D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE = 1155,
    D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS = 1156,
    D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED = 1157,
    D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1158,
    D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID = 1159,
    D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1160,
    D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID = 1161,
    D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID = 1162,
    D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER = 1163,
    D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER = 1164,
    D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER = 1165,
    D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED = 1166,
    D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 1167,
    D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 1168,
    D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 1169,
    D3D12_MESSAGE_ID_RENDER_PASS_ERROR = 1170,
    D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID = 1171,
    D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS = 1172,
    D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION = 1173,
    D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH = 1174,
    D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND = 1175,
    D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS = 1176,
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST = 1177,
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST = 1178,
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST = 1179,
    D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE = 1180,
    D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE = 1181,
    D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE = 1182,
    D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR = 1183,
    D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR = 1184,
    D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR = 1185,
    D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP = 1186,
    D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP = 1187,
    D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP = 1188,
    D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 1189,
    D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 1190,
    D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 1191,
    D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 1192,
    D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 1193,
    D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR = 1194,
    D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR = 1195,
    D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR = 1196,
    D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR = 1197,
    D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR = 1198,
    D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID = 1199,
    D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID = 1200,
    D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE = 1201,
    D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER = 1202,
    D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED = 1203,
    D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES = 1204,
    D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN = 1205,
    D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST = 1206,
    D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED = 1207,
    D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME = 1208,
    D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS = 1209,
    D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS = 1210,
    D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH = 1211,
    D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 1212,
    D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS = 1213,
    D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE = 1214,
    D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR = 1215,
    D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL = 1216,
    D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT = 1217,
    D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT = 1218,
    D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1219,
    D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT = 1220,
    D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1221,
    D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE = 1222,
    D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT = 1223,
    D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL = 1224,
    D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND = 1225,
    D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND = 1226,
    D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND = 1227,
    D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID = 1228,
    D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT = 1229,
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY = 1230,
    D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR = 1231,
    D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1232,
    D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE = 1233,
    D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP = 1234,
    D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER = 1235,
    D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2 = 1236,
    D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1 = 1237,
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT = 1238,
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE = 1239,
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL = 1240,
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT = 1241,
    D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY = 1242,
    D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE = 1243,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH = 1244,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH = 1245,
    D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR = 1246,
    D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT = 1247,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH = 1248,
    D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE = 1249,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH = 1250,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH = 1251,
    D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT = 1252,
    D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH = 1253,
    D3D12_MESSAGE_ID_EMPTY_DISPATCH = 1254,
    D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1255,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION = 1256,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION = 1257,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT = 1258,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY = 1259,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT = 1260,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG = 1261,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS = 1262,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1263,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT = 1264,
    D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE = 1265,
    D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY = 1266,
    D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 1267,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT = 1268,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT = 1269,
    D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH = 1270,
    D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE = 1271,
    D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE = 1272,
    D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE = 1273,
    D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1274,
    D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1275,
    D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE = 1276,
    D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS = 1277,
    D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE = 1278,
    D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY = 1279,
    D3D12_MESSAGE_ID_D3D12_MESSAGES_END = 1280,
}

struct D3D12_MESSAGE
{
    D3D12_MESSAGE_CATEGORY Category;
    D3D12_MESSAGE_SEVERITY Severity;
    D3D12_MESSAGE_ID ID;
    const(byte)* pDescription;
    uint DescriptionByteLength;
}

struct D3D12_INFO_QUEUE_FILTER_DESC
{
    uint NumCategories;
    D3D12_MESSAGE_CATEGORY* pCategoryList;
    uint NumSeverities;
    D3D12_MESSAGE_SEVERITY* pSeverityList;
    uint NumIDs;
    D3D12_MESSAGE_ID* pIDList;
}

struct D3D12_INFO_QUEUE_FILTER
{
    D3D12_INFO_QUEUE_FILTER_DESC AllowList;
    D3D12_INFO_QUEUE_FILTER_DESC DenyList;
}

const GUID IID_ID3D12InfoQueue = {0x0742A90B, 0xC387, 0x483F, [0xB9, 0x46, 0x30, 0xA7, 0xE4, 0xE6, 0x14, 0x58]};
@GUID(0x0742A90B, 0xC387, 0x483F, [0xB9, 0x46, 0x30, 0xA7, 0xE4, 0xE6, 0x14, 0x58]);
interface ID3D12InfoQueue : IUnknown
{
    HRESULT SetMessageCountLimit(ulong MessageCountLimit);
    void ClearStoredMessages();
    HRESULT GetMessageA(ulong MessageIndex, char* pMessage, uint* pMessageByteLength);
    ulong GetNumMessagesAllowedByStorageFilter();
    ulong GetNumMessagesDeniedByStorageFilter();
    ulong GetNumStoredMessages();
    ulong GetNumStoredMessagesAllowedByRetrievalFilter();
    ulong GetNumMessagesDiscardedByMessageCountLimit();
    ulong GetMessageCountLimit();
    HRESULT AddStorageFilterEntries(D3D12_INFO_QUEUE_FILTER* pFilter);
    HRESULT GetStorageFilter(char* pFilter, uint* pFilterByteLength);
    void ClearStorageFilter();
    HRESULT PushEmptyStorageFilter();
    HRESULT PushCopyOfStorageFilter();
    HRESULT PushStorageFilter(D3D12_INFO_QUEUE_FILTER* pFilter);
    void PopStorageFilter();
    uint GetStorageFilterStackSize();
    HRESULT AddRetrievalFilterEntries(D3D12_INFO_QUEUE_FILTER* pFilter);
    HRESULT GetRetrievalFilter(char* pFilter, uint* pFilterByteLength);
    void ClearRetrievalFilter();
    HRESULT PushEmptyRetrievalFilter();
    HRESULT PushCopyOfRetrievalFilter();
    HRESULT PushRetrievalFilter(D3D12_INFO_QUEUE_FILTER* pFilter);
    void PopRetrievalFilter();
    uint GetRetrievalFilterStackSize();
    HRESULT AddMessage(D3D12_MESSAGE_CATEGORY Category, D3D12_MESSAGE_SEVERITY Severity, D3D12_MESSAGE_ID ID, const(char)* pDescription);
    HRESULT AddApplicationMessage(D3D12_MESSAGE_SEVERITY Severity, const(char)* pDescription);
    HRESULT SetBreakOnCategory(D3D12_MESSAGE_CATEGORY Category, BOOL bEnable);
    HRESULT SetBreakOnSeverity(D3D12_MESSAGE_SEVERITY Severity, BOOL bEnable);
    HRESULT SetBreakOnID(D3D12_MESSAGE_ID ID, BOOL bEnable);
    BOOL GetBreakOnCategory(D3D12_MESSAGE_CATEGORY Category);
    BOOL GetBreakOnSeverity(D3D12_MESSAGE_SEVERITY Severity);
    BOOL GetBreakOnID(D3D12_MESSAGE_ID ID);
    void SetMuteDebugOutput(BOOL bMute);
    BOOL GetMuteDebugOutput();
}

alias PFN_D3D12_CREATE_DEVICE = extern(Windows) HRESULT function(IUnknown param0, D3D_FEATURE_LEVEL param1, const(Guid)* param2, void** param3);
alias PFN_D3D12_GET_DEBUG_INTERFACE = extern(Windows) HRESULT function(const(Guid)* param0, void** param1);
enum D3D12_AXIS_SHADING_RATE
{
    D3D12_AXIS_SHADING_RATE_1X = 0,
    D3D12_AXIS_SHADING_RATE_2X = 1,
    D3D12_AXIS_SHADING_RATE_4X = 2,
}

enum D3D12_SHADING_RATE
{
    D3D12_SHADING_RATE_1X1 = 0,
    D3D12_SHADING_RATE_1X2 = 1,
    D3D12_SHADING_RATE_2X1 = 4,
    D3D12_SHADING_RATE_2X2 = 5,
    D3D12_SHADING_RATE_2X4 = 6,
    D3D12_SHADING_RATE_4X2 = 9,
    D3D12_SHADING_RATE_4X4 = 10,
}

enum D3D12_SHADING_RATE_COMBINER
{
    D3D12_SHADING_RATE_COMBINER_PASSTHROUGH = 0,
    D3D12_SHADING_RATE_COMBINER_OVERRIDE = 1,
    D3D12_SHADING_RATE_COMBINER_MIN = 2,
    D3D12_SHADING_RATE_COMBINER_MAX = 3,
    D3D12_SHADING_RATE_COMBINER_SUM = 4,
}

const GUID IID_ID3D12GraphicsCommandList5 = {0x55050859, 0x4024, 0x474C, [0x87, 0xF5, 0x64, 0x72, 0xEA, 0xEE, 0x44, 0xEA]};
@GUID(0x55050859, 0x4024, 0x474C, [0x87, 0xF5, 0x64, 0x72, 0xEA, 0xEE, 0x44, 0xEA]);
interface ID3D12GraphicsCommandList5 : ID3D12GraphicsCommandList4
{
    void RSSetShadingRate(D3D12_SHADING_RATE baseShadingRate, char* combiners);
    void RSSetShadingRateImage(ID3D12Resource shadingRateImage);
}

struct D3D12_DISPATCH_MESH_ARGUMENTS
{
    uint ThreadGroupCountX;
    uint ThreadGroupCountY;
    uint ThreadGroupCountZ;
}

const GUID IID_ID3D12GraphicsCommandList6 = {0xC3827890, 0xE548, 0x4CFA, [0x96, 0xCF, 0x56, 0x89, 0xA9, 0x37, 0x0F, 0x80]};
@GUID(0xC3827890, 0xE548, 0x4CFA, [0x96, 0xCF, 0x56, 0x89, 0xA9, 0x37, 0x0F, 0x80]);
interface ID3D12GraphicsCommandList6 : ID3D12GraphicsCommandList5
{
    void DispatchMesh(uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);
}

alias PFN_D3D11ON12_CREATE_DEVICE = extern(Windows) HRESULT function(IUnknown param0, uint param1, char* param2, uint FeatureLevels, char* param4, uint NumQueues, uint param6, ID3D11Device* param7, ID3D11DeviceContext* param8, D3D_FEATURE_LEVEL* param9);
struct D3D11_RESOURCE_FLAGS
{
    uint BindFlags;
    uint MiscFlags;
    uint CPUAccessFlags;
    uint StructureByteStride;
}

const GUID IID_ID3D11On12Device = {0x85611E73, 0x70A9, 0x490E, [0x96, 0x14, 0xA9, 0xE3, 0x02, 0x77, 0x79, 0x04]};
@GUID(0x85611E73, 0x70A9, 0x490E, [0x96, 0x14, 0xA9, 0xE3, 0x02, 0x77, 0x79, 0x04]);
interface ID3D11On12Device : IUnknown
{
    HRESULT CreateWrappedResource(IUnknown pResource12, const(D3D11_RESOURCE_FLAGS)* pFlags11, D3D12_RESOURCE_STATES InState, D3D12_RESOURCE_STATES OutState, const(Guid)* riid, void** ppResource11);
    void ReleaseWrappedResources(char* ppResources, uint NumResources);
    void AcquireWrappedResources(char* ppResources, uint NumResources);
}

const GUID IID_ID3D11On12Device1 = {0xBDB64DF4, 0xEA2F, 0x4C70, [0xB8, 0x61, 0xAA, 0xAB, 0x12, 0x58, 0xBB, 0x5D]};
@GUID(0xBDB64DF4, 0xEA2F, 0x4C70, [0xB8, 0x61, 0xAA, 0xAB, 0x12, 0x58, 0xBB, 0x5D]);
interface ID3D11On12Device1 : ID3D11On12Device
{
    HRESULT GetD3D12Device(const(Guid)* riid, void** ppvDevice);
}

const GUID IID_ID3D11On12Device2 = {0xDC90F331, 0x4740, 0x43FA, [0x86, 0x6E, 0x67, 0xF1, 0x2C, 0xB5, 0x82, 0x23]};
@GUID(0xDC90F331, 0x4740, 0x43FA, [0x86, 0x6E, 0x67, 0xF1, 0x2C, 0xB5, 0x82, 0x23]);
interface ID3D11On12Device2 : ID3D11On12Device1
{
    HRESULT UnwrapUnderlyingResource(ID3D11Resource pResource11, ID3D12CommandQueue pCommandQueue, const(Guid)* riid, void** ppvResource12);
    HRESULT ReturnUnderlyingResource(ID3D11Resource pResource11, uint NumSync, char* pSignalValues, char* ppFences);
}

enum D3D12_SHADER_VERSION_TYPE
{
    D3D12_SHVER_PIXEL_SHADER = 0,
    D3D12_SHVER_VERTEX_SHADER = 1,
    D3D12_SHVER_GEOMETRY_SHADER = 2,
    D3D12_SHVER_HULL_SHADER = 3,
    D3D12_SHVER_DOMAIN_SHADER = 4,
    D3D12_SHVER_COMPUTE_SHADER = 5,
    D3D12_SHVER_RESERVED0 = 65520,
}

struct D3D12_SIGNATURE_PARAMETER_DESC
{
    const(char)* SemanticName;
    uint SemanticIndex;
    uint Register;
    D3D_NAME SystemValueType;
    D3D_REGISTER_COMPONENT_TYPE ComponentType;
    ubyte Mask;
    ubyte ReadWriteMask;
    uint Stream;
    D3D_MIN_PRECISION MinPrecision;
}

struct D3D12_SHADER_BUFFER_DESC
{
    const(char)* Name;
    D3D_CBUFFER_TYPE Type;
    uint Variables;
    uint Size;
    uint uFlags;
}

struct D3D12_SHADER_VARIABLE_DESC
{
    const(char)* Name;
    uint StartOffset;
    uint Size;
    uint uFlags;
    void* DefaultValue;
    uint StartTexture;
    uint TextureSize;
    uint StartSampler;
    uint SamplerSize;
}

struct D3D12_SHADER_TYPE_DESC
{
    D3D_SHADER_VARIABLE_CLASS Class;
    D3D_SHADER_VARIABLE_TYPE Type;
    uint Rows;
    uint Columns;
    uint Elements;
    uint Members;
    uint Offset;
    const(char)* Name;
}

struct D3D12_SHADER_DESC
{
    uint Version;
    const(char)* Creator;
    uint Flags;
    uint ConstantBuffers;
    uint BoundResources;
    uint InputParameters;
    uint OutputParameters;
    uint InstructionCount;
    uint TempRegisterCount;
    uint TempArrayCount;
    uint DefCount;
    uint DclCount;
    uint TextureNormalInstructions;
    uint TextureLoadInstructions;
    uint TextureCompInstructions;
    uint TextureBiasInstructions;
    uint TextureGradientInstructions;
    uint FloatInstructionCount;
    uint IntInstructionCount;
    uint UintInstructionCount;
    uint StaticFlowControlCount;
    uint DynamicFlowControlCount;
    uint MacroInstructionCount;
    uint ArrayInstructionCount;
    uint CutInstructionCount;
    uint EmitInstructionCount;
    D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
    uint GSMaxOutputVertexCount;
    D3D_PRIMITIVE InputPrimitive;
    uint PatchConstantParameters;
    uint cGSInstanceCount;
    uint cControlPoints;
    D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
    D3D_TESSELLATOR_PARTITIONING HSPartitioning;
    D3D_TESSELLATOR_DOMAIN TessellatorDomain;
    uint cBarrierInstructions;
    uint cInterlockedInstructions;
    uint cTextureStoreInstructions;
}

struct D3D12_SHADER_INPUT_BIND_DESC
{
    const(char)* Name;
    D3D_SHADER_INPUT_TYPE Type;
    uint BindPoint;
    uint BindCount;
    uint uFlags;
    D3D_RESOURCE_RETURN_TYPE ReturnType;
    D3D_SRV_DIMENSION Dimension;
    uint NumSamples;
    uint Space;
    uint uID;
}

struct D3D12_LIBRARY_DESC
{
    const(char)* Creator;
    uint Flags;
    uint FunctionCount;
}

struct D3D12_FUNCTION_DESC
{
    uint Version;
    const(char)* Creator;
    uint Flags;
    uint ConstantBuffers;
    uint BoundResources;
    uint InstructionCount;
    uint TempRegisterCount;
    uint TempArrayCount;
    uint DefCount;
    uint DclCount;
    uint TextureNormalInstructions;
    uint TextureLoadInstructions;
    uint TextureCompInstructions;
    uint TextureBiasInstructions;
    uint TextureGradientInstructions;
    uint FloatInstructionCount;
    uint IntInstructionCount;
    uint UintInstructionCount;
    uint StaticFlowControlCount;
    uint DynamicFlowControlCount;
    uint MacroInstructionCount;
    uint ArrayInstructionCount;
    uint MovInstructionCount;
    uint MovcInstructionCount;
    uint ConversionInstructionCount;
    uint BitwiseInstructionCount;
    D3D_FEATURE_LEVEL MinFeatureLevel;
    ulong RequiredFeatureFlags;
    const(char)* Name;
    int FunctionParameterCount;
    BOOL HasReturn;
    BOOL Has10Level9VertexShader;
    BOOL Has10Level9PixelShader;
}

struct D3D12_PARAMETER_DESC
{
    const(char)* Name;
    const(char)* SemanticName;
    D3D_SHADER_VARIABLE_TYPE Type;
    D3D_SHADER_VARIABLE_CLASS Class;
    uint Rows;
    uint Columns;
    D3D_INTERPOLATION_MODE InterpolationMode;
    D3D_PARAMETER_FLAGS Flags;
    uint FirstInRegister;
    uint FirstInComponent;
    uint FirstOutRegister;
    uint FirstOutComponent;
}

const GUID IID_ID3D12ShaderReflectionType = {0xE913C351, 0x783D, 0x48CA, [0xA1, 0xD1, 0x4F, 0x30, 0x62, 0x84, 0xAD, 0x56]};
@GUID(0xE913C351, 0x783D, 0x48CA, [0xA1, 0xD1, 0x4F, 0x30, 0x62, 0x84, 0xAD, 0x56]);
interface ID3D12ShaderReflectionType
{
    HRESULT GetDesc(D3D12_SHADER_TYPE_DESC* pDesc);
    ID3D12ShaderReflectionType GetMemberTypeByIndex(uint Index);
    ID3D12ShaderReflectionType GetMemberTypeByName(const(char)* Name);
    byte* GetMemberTypeName(uint Index);
    HRESULT IsEqual(ID3D12ShaderReflectionType pType);
    ID3D12ShaderReflectionType GetSubType();
    ID3D12ShaderReflectionType GetBaseClass();
    uint GetNumInterfaces();
    ID3D12ShaderReflectionType GetInterfaceByIndex(uint uIndex);
    HRESULT IsOfType(ID3D12ShaderReflectionType pType);
    HRESULT ImplementsInterface(ID3D12ShaderReflectionType pBase);
}

const GUID IID_ID3D12ShaderReflectionVariable = {0x8337A8A6, 0xA216, 0x444A, [0xB2, 0xF4, 0x31, 0x47, 0x33, 0xA7, 0x3A, 0xEA]};
@GUID(0x8337A8A6, 0xA216, 0x444A, [0xB2, 0xF4, 0x31, 0x47, 0x33, 0xA7, 0x3A, 0xEA]);
interface ID3D12ShaderReflectionVariable
{
    HRESULT GetDesc(D3D12_SHADER_VARIABLE_DESC* pDesc);
    ID3D12ShaderReflectionType GetType();
    ID3D12ShaderReflectionConstantBuffer GetBuffer();
    uint GetInterfaceSlot(uint uArrayIndex);
}

const GUID IID_ID3D12ShaderReflectionConstantBuffer = {0xC59598B4, 0x48B3, 0x4869, [0xB9, 0xB1, 0xB1, 0x61, 0x8B, 0x14, 0xA8, 0xB7]};
@GUID(0xC59598B4, 0x48B3, 0x4869, [0xB9, 0xB1, 0xB1, 0x61, 0x8B, 0x14, 0xA8, 0xB7]);
interface ID3D12ShaderReflectionConstantBuffer
{
    HRESULT GetDesc(D3D12_SHADER_BUFFER_DESC* pDesc);
    ID3D12ShaderReflectionVariable GetVariableByIndex(uint Index);
    ID3D12ShaderReflectionVariable GetVariableByName(const(char)* Name);
}

const GUID IID_ID3D12ShaderReflection = {0x5A58797D, 0xA72C, 0x478D, [0x8B, 0xA2, 0xEF, 0xC6, 0xB0, 0xEF, 0xE8, 0x8E]};
@GUID(0x5A58797D, 0xA72C, 0x478D, [0x8B, 0xA2, 0xEF, 0xC6, 0xB0, 0xEF, 0xE8, 0x8E]);
interface ID3D12ShaderReflection : IUnknown
{
    HRESULT GetDesc(D3D12_SHADER_DESC* pDesc);
    ID3D12ShaderReflectionConstantBuffer GetConstantBufferByIndex(uint Index);
    ID3D12ShaderReflectionConstantBuffer GetConstantBufferByName(const(char)* Name);
    HRESULT GetResourceBindingDesc(uint ResourceIndex, D3D12_SHADER_INPUT_BIND_DESC* pDesc);
    HRESULT GetInputParameterDesc(uint ParameterIndex, D3D12_SIGNATURE_PARAMETER_DESC* pDesc);
    HRESULT GetOutputParameterDesc(uint ParameterIndex, D3D12_SIGNATURE_PARAMETER_DESC* pDesc);
    HRESULT GetPatchConstantParameterDesc(uint ParameterIndex, D3D12_SIGNATURE_PARAMETER_DESC* pDesc);
    ID3D12ShaderReflectionVariable GetVariableByName(const(char)* Name);
    HRESULT GetResourceBindingDescByName(const(char)* Name, D3D12_SHADER_INPUT_BIND_DESC* pDesc);
    uint GetMovInstructionCount();
    uint GetMovcInstructionCount();
    uint GetConversionInstructionCount();
    uint GetBitwiseInstructionCount();
    D3D_PRIMITIVE GetGSInputPrimitive();
    BOOL IsSampleFrequencyShader();
    uint GetNumInterfaceSlots();
    HRESULT GetMinFeatureLevel(D3D_FEATURE_LEVEL* pLevel);
    uint GetThreadGroupSize(uint* pSizeX, uint* pSizeY, uint* pSizeZ);
    ulong GetRequiresFlags();
}

const GUID IID_ID3D12LibraryReflection = {0x8E349D19, 0x54DB, 0x4A56, [0x9D, 0xC9, 0x11, 0x9D, 0x87, 0xBD, 0xB8, 0x04]};
@GUID(0x8E349D19, 0x54DB, 0x4A56, [0x9D, 0xC9, 0x11, 0x9D, 0x87, 0xBD, 0xB8, 0x04]);
interface ID3D12LibraryReflection : IUnknown
{
    HRESULT GetDesc(D3D12_LIBRARY_DESC* pDesc);
    ID3D12FunctionReflection GetFunctionByIndex(int FunctionIndex);
}

const GUID IID_ID3D12FunctionReflection = {0x1108795C, 0x2772, 0x4BA9, [0xB2, 0xA8, 0xD4, 0x64, 0xDC, 0x7E, 0x27, 0x99]};
@GUID(0x1108795C, 0x2772, 0x4BA9, [0xB2, 0xA8, 0xD4, 0x64, 0xDC, 0x7E, 0x27, 0x99]);
interface ID3D12FunctionReflection
{
    HRESULT GetDesc(D3D12_FUNCTION_DESC* pDesc);
    ID3D12ShaderReflectionConstantBuffer GetConstantBufferByIndex(uint BufferIndex);
    ID3D12ShaderReflectionConstantBuffer GetConstantBufferByName(const(char)* Name);
    HRESULT GetResourceBindingDesc(uint ResourceIndex, D3D12_SHADER_INPUT_BIND_DESC* pDesc);
    ID3D12ShaderReflectionVariable GetVariableByName(const(char)* Name);
    HRESULT GetResourceBindingDescByName(const(char)* Name, D3D12_SHADER_INPUT_BIND_DESC* pDesc);
    ID3D12FunctionParameterReflection GetFunctionParameter(int ParameterIndex);
}

const GUID IID_ID3D12FunctionParameterReflection = {0xEC25F42D, 0x7006, 0x4F2B, [0xB3, 0x3E, 0x02, 0xCC, 0x33, 0x75, 0x73, 0x3F]};
@GUID(0xEC25F42D, 0x7006, 0x4F2B, [0xB3, 0x3E, 0x02, 0xCC, 0x33, 0x75, 0x73, 0x3F]);
interface ID3D12FunctionParameterReflection
{
    HRESULT GetDesc(D3D12_PARAMETER_DESC* pDesc);
}

const GUID IID_IHolographicCameraInterop = {0x7CC1F9C5, 0x6D02, 0x41FA, [0x95, 0x00, 0xE1, 0x80, 0x9E, 0xB4, 0x8E, 0xEC]};
@GUID(0x7CC1F9C5, 0x6D02, 0x41FA, [0x95, 0x00, 0xE1, 0x80, 0x9E, 0xB4, 0x8E, 0xEC]);
interface IHolographicCameraInterop : IInspectable
{
    HRESULT CreateDirect3D12BackBufferResource(ID3D12Device pDevice, D3D12_RESOURCE_DESC* pTexture2DDesc, ID3D12Resource* ppCreatedTexture2DResource);
    HRESULT CreateDirect3D12HardwareProtectedBackBufferResource(ID3D12Device pDevice, D3D12_RESOURCE_DESC* pTexture2DDesc, ID3D12ProtectedResourceSession pProtectedResourceSession, ID3D12Resource* ppCreatedTexture2DResource);
    HRESULT AcquireDirect3D12BufferResource(ID3D12Resource pResourceToAcquire, ID3D12CommandQueue pCommandQueue);
    HRESULT AcquireDirect3D12BufferResourceWithTimeout(ID3D12Resource pResourceToAcquire, ID3D12CommandQueue pCommandQueue, ulong duration);
    HRESULT UnacquireDirect3D12BufferResource(ID3D12Resource pResourceToUnacquire);
}

const GUID IID_IHolographicCameraRenderingParametersInterop = {0xF75B68D6, 0xD1FD, 0x4707, [0xAA, 0xFD, 0xFA, 0x6F, 0x4C, 0x0E, 0x3B, 0xF4]};
@GUID(0xF75B68D6, 0xD1FD, 0x4707, [0xAA, 0xFD, 0xFA, 0x6F, 0x4C, 0x0E, 0x3B, 0xF4]);
interface IHolographicCameraRenderingParametersInterop : IInspectable
{
    HRESULT CommitDirect3D12Resource(ID3D12Resource pColorResourceToCommit, ID3D12Fence pColorResourceFence, ulong colorResourceFenceSignalValue);
    HRESULT CommitDirect3D12ResourceWithDepthData(ID3D12Resource pColorResourceToCommit, ID3D12Fence pColorResourceFence, ulong colorResourceFenceSignalValue, ID3D12Resource pDepthResourceToCommit, ID3D12Fence pDepthResourceFence, ulong depthResourceFenceSignalValue);
}

const GUID IID_IHolographicQuadLayerInterop = {0xCFA688F0, 0x639E, 0x4A47, [0x83, 0xD7, 0x6B, 0x7F, 0x5E, 0xBF, 0x7F, 0xED]};
@GUID(0xCFA688F0, 0x639E, 0x4A47, [0x83, 0xD7, 0x6B, 0x7F, 0x5E, 0xBF, 0x7F, 0xED]);
interface IHolographicQuadLayerInterop : IInspectable
{
    HRESULT CreateDirect3D12ContentBufferResource(ID3D12Device pDevice, D3D12_RESOURCE_DESC* pTexture2DDesc, ID3D12Resource* ppTexture2DResource);
    HRESULT CreateDirect3D12HardwareProtectedContentBufferResource(ID3D12Device pDevice, D3D12_RESOURCE_DESC* pTexture2DDesc, ID3D12ProtectedResourceSession pProtectedResourceSession, ID3D12Resource* ppCreatedTexture2DResource);
    HRESULT AcquireDirect3D12BufferResource(ID3D12Resource pResourceToAcquire, ID3D12CommandQueue pCommandQueue);
    HRESULT AcquireDirect3D12BufferResourceWithTimeout(ID3D12Resource pResourceToAcquire, ID3D12CommandQueue pCommandQueue, ulong duration);
    HRESULT UnacquireDirect3D12BufferResource(ID3D12Resource pResourceToUnacquire);
}

const GUID IID_IHolographicQuadLayerUpdateParametersInterop = {0xE5F549CD, 0xC909, 0x444F, [0x88, 0x09, 0x7C, 0xC1, 0x8A, 0x9C, 0x89, 0x20]};
@GUID(0xE5F549CD, 0xC909, 0x444F, [0x88, 0x09, 0x7C, 0xC1, 0x8A, 0x9C, 0x89, 0x20]);
interface IHolographicQuadLayerUpdateParametersInterop : IInspectable
{
    HRESULT CommitDirect3D12Resource(ID3D12Resource pColorResourceToCommit, ID3D12Fence pColorResourceFence, ulong colorResourceFenceSignalValue);
}

