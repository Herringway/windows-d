module windows.windowswebservices;

public import system;
public import windows.com;
public import windows.security;
public import windows.systemservices;
public import windows.winrt;
public import windows.windowsandmessaging;
public import windows.windowsprogramming;

extern(Windows):

struct WS_XML_READER
{
}

struct WS_XML_WRITER
{
}

struct WS_XML_BUFFER
{
}

struct WS_CHANNEL
{
}

struct WS_OPERATION_CONTEXT
{
}

struct WS_ERROR
{
}

struct WS_HEAP
{
}

struct WS_LISTENER
{
}

struct WS_MESSAGE
{
}

struct WS_SECURITY_TOKEN
{
}

struct WS_SECURITY_CONTEXT
{
}

struct WS_SERVICE_HOST
{
}

struct WS_SERVICE_PROXY
{
}

struct WS_METADATA
{
}

struct WS_POLICY
{
}

enum WS_XML_READER_PROPERTY_ID
{
    WS_XML_READER_PROPERTY_MAX_DEPTH = 0,
    WS_XML_READER_PROPERTY_ALLOW_FRAGMENT = 1,
    WS_XML_READER_PROPERTY_MAX_ATTRIBUTES = 2,
    WS_XML_READER_PROPERTY_READ_DECLARATION = 3,
    WS_XML_READER_PROPERTY_CHARSET = 4,
    WS_XML_READER_PROPERTY_ROW = 5,
    WS_XML_READER_PROPERTY_COLUMN = 6,
    WS_XML_READER_PROPERTY_UTF8_TRIM_SIZE = 7,
    WS_XML_READER_PROPERTY_STREAM_BUFFER_SIZE = 8,
    WS_XML_READER_PROPERTY_IN_ATTRIBUTE = 9,
    WS_XML_READER_PROPERTY_STREAM_MAX_ROOT_MIME_PART_SIZE = 10,
    WS_XML_READER_PROPERTY_STREAM_MAX_MIME_HEADERS_SIZE = 11,
    WS_XML_READER_PROPERTY_MAX_MIME_PARTS = 12,
    WS_XML_READER_PROPERTY_ALLOW_INVALID_CHARACTER_REFERENCES = 13,
    WS_XML_READER_PROPERTY_MAX_NAMESPACES = 14,
}

enum WS_XML_CANONICALIZATION_ALGORITHM
{
    WS_EXCLUSIVE_XML_CANONICALIZATION_ALGORITHM = 0,
    WS_EXCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM = 1,
    WS_INCLUSIVE_XML_CANONICALIZATION_ALGORITHM = 2,
    WS_INCLUSIVE_WITH_COMMENTS_XML_CANONICALIZATION_ALGORITHM = 3,
}

enum WS_XML_CANONICALIZATION_PROPERTY_ID
{
    WS_XML_CANONICALIZATION_PROPERTY_ALGORITHM = 0,
    WS_XML_CANONICALIZATION_PROPERTY_INCLUSIVE_PREFIXES = 1,
    WS_XML_CANONICALIZATION_PROPERTY_OMITTED_ELEMENT = 2,
    WS_XML_CANONICALIZATION_PROPERTY_OUTPUT_BUFFER_SIZE = 3,
}

enum WS_XML_WRITER_PROPERTY_ID
{
    WS_XML_WRITER_PROPERTY_MAX_DEPTH = 0,
    WS_XML_WRITER_PROPERTY_ALLOW_FRAGMENT = 1,
    WS_XML_WRITER_PROPERTY_MAX_ATTRIBUTES = 2,
    WS_XML_WRITER_PROPERTY_WRITE_DECLARATION = 3,
    WS_XML_WRITER_PROPERTY_INDENT = 4,
    WS_XML_WRITER_PROPERTY_BUFFER_TRIM_SIZE = 5,
    WS_XML_WRITER_PROPERTY_CHARSET = 6,
    WS_XML_WRITER_PROPERTY_BUFFERS = 7,
    WS_XML_WRITER_PROPERTY_BUFFER_MAX_SIZE = 8,
    WS_XML_WRITER_PROPERTY_BYTES = 9,
    WS_XML_WRITER_PROPERTY_IN_ATTRIBUTE = 10,
    WS_XML_WRITER_PROPERTY_MAX_MIME_PARTS_BUFFER_SIZE = 11,
    WS_XML_WRITER_PROPERTY_INITIAL_BUFFER = 12,
    WS_XML_WRITER_PROPERTY_ALLOW_INVALID_CHARACTER_REFERENCES = 13,
    WS_XML_WRITER_PROPERTY_MAX_NAMESPACES = 14,
    WS_XML_WRITER_PROPERTY_BYTES_WRITTEN = 15,
    WS_XML_WRITER_PROPERTY_BYTES_TO_CLOSE = 16,
    WS_XML_WRITER_PROPERTY_COMPRESS_EMPTY_ELEMENTS = 17,
    WS_XML_WRITER_PROPERTY_EMIT_UNCOMPRESSED_EMPTY_ELEMENTS = 18,
}

enum WS_XML_BUFFER_PROPERTY_ID
{
}

enum WS_XML_TEXT_TYPE
{
    WS_XML_TEXT_TYPE_UTF8 = 1,
    WS_XML_TEXT_TYPE_UTF16 = 2,
    WS_XML_TEXT_TYPE_BASE64 = 3,
    WS_XML_TEXT_TYPE_BOOL = 4,
    WS_XML_TEXT_TYPE_INT32 = 5,
    WS_XML_TEXT_TYPE_INT64 = 6,
    WS_XML_TEXT_TYPE_UINT64 = 7,
    WS_XML_TEXT_TYPE_FLOAT = 8,
    WS_XML_TEXT_TYPE_DOUBLE = 9,
    WS_XML_TEXT_TYPE_DECIMAL = 10,
    WS_XML_TEXT_TYPE_GUID = 11,
    WS_XML_TEXT_TYPE_UNIQUE_ID = 12,
    WS_XML_TEXT_TYPE_DATETIME = 13,
    WS_XML_TEXT_TYPE_TIMESPAN = 14,
    WS_XML_TEXT_TYPE_QNAME = 15,
    WS_XML_TEXT_TYPE_LIST = 16,
}

enum WS_XML_NODE_TYPE
{
    WS_XML_NODE_TYPE_ELEMENT = 1,
    WS_XML_NODE_TYPE_TEXT = 2,
    WS_XML_NODE_TYPE_END_ELEMENT = 3,
    WS_XML_NODE_TYPE_COMMENT = 4,
    WS_XML_NODE_TYPE_CDATA = 6,
    WS_XML_NODE_TYPE_END_CDATA = 7,
    WS_XML_NODE_TYPE_EOF = 8,
    WS_XML_NODE_TYPE_BOF = 9,
}

enum WS_MOVE_TO
{
    WS_MOVE_TO_ROOT_ELEMENT = 0,
    WS_MOVE_TO_NEXT_ELEMENT = 1,
    WS_MOVE_TO_PREVIOUS_ELEMENT = 2,
    WS_MOVE_TO_CHILD_ELEMENT = 3,
    WS_MOVE_TO_END_ELEMENT = 4,
    WS_MOVE_TO_PARENT_ELEMENT = 5,
    WS_MOVE_TO_NEXT_NODE = 6,
    WS_MOVE_TO_PREVIOUS_NODE = 7,
    WS_MOVE_TO_FIRST_NODE = 8,
    WS_MOVE_TO_BOF = 9,
    WS_MOVE_TO_EOF = 10,
    WS_MOVE_TO_CHILD_NODE = 11,
}

enum WS_VALUE_TYPE
{
    WS_BOOL_VALUE_TYPE = 0,
    WS_INT8_VALUE_TYPE = 1,
    WS_INT16_VALUE_TYPE = 2,
    WS_INT32_VALUE_TYPE = 3,
    WS_INT64_VALUE_TYPE = 4,
    WS_UINT8_VALUE_TYPE = 5,
    WS_UINT16_VALUE_TYPE = 6,
    WS_UINT32_VALUE_TYPE = 7,
    WS_UINT64_VALUE_TYPE = 8,
    WS_FLOAT_VALUE_TYPE = 9,
    WS_DOUBLE_VALUE_TYPE = 10,
    WS_DECIMAL_VALUE_TYPE = 11,
    WS_DATETIME_VALUE_TYPE = 12,
    WS_TIMESPAN_VALUE_TYPE = 13,
    WS_GUID_VALUE_TYPE = 14,
    WS_DURATION_VALUE_TYPE = 15,
}

enum WS_XML_READER_INPUT_TYPE
{
    WS_XML_READER_INPUT_TYPE_BUFFER = 1,
    WS_XML_READER_INPUT_TYPE_STREAM = 2,
}

enum WS_XML_READER_ENCODING_TYPE
{
    WS_XML_READER_ENCODING_TYPE_TEXT = 1,
    WS_XML_READER_ENCODING_TYPE_BINARY = 2,
    WS_XML_READER_ENCODING_TYPE_MTOM = 3,
    WS_XML_READER_ENCODING_TYPE_RAW = 4,
}

enum WS_CHARSET
{
    WS_CHARSET_AUTO = 0,
    WS_CHARSET_UTF8 = 1,
    WS_CHARSET_UTF16LE = 2,
    WS_CHARSET_UTF16BE = 3,
}

enum WS_XML_WRITER_ENCODING_TYPE
{
    WS_XML_WRITER_ENCODING_TYPE_TEXT = 1,
    WS_XML_WRITER_ENCODING_TYPE_BINARY = 2,
    WS_XML_WRITER_ENCODING_TYPE_MTOM = 3,
    WS_XML_WRITER_ENCODING_TYPE_RAW = 4,
}

enum WS_XML_WRITER_OUTPUT_TYPE
{
    WS_XML_WRITER_OUTPUT_TYPE_BUFFER = 1,
    WS_XML_WRITER_OUTPUT_TYPE_STREAM = 2,
}

enum WS_CALLBACK_MODEL
{
    WS_SHORT_CALLBACK = 0,
    WS_LONG_CALLBACK = 1,
}

enum WS_ENCODING
{
    WS_ENCODING_XML_BINARY_1 = 0,
    WS_ENCODING_XML_BINARY_SESSION_1 = 1,
    WS_ENCODING_XML_MTOM_UTF8 = 2,
    WS_ENCODING_XML_MTOM_UTF16BE = 3,
    WS_ENCODING_XML_MTOM_UTF16LE = 4,
    WS_ENCODING_XML_UTF8 = 5,
    WS_ENCODING_XML_UTF16BE = 6,
    WS_ENCODING_XML_UTF16LE = 7,
    WS_ENCODING_RAW = 8,
}

enum WS_CHANNEL_STATE
{
    WS_CHANNEL_STATE_CREATED = 0,
    WS_CHANNEL_STATE_OPENING = 1,
    WS_CHANNEL_STATE_ACCEPTING = 2,
    WS_CHANNEL_STATE_OPEN = 3,
    WS_CHANNEL_STATE_FAULTED = 4,
    WS_CHANNEL_STATE_CLOSING = 5,
    WS_CHANNEL_STATE_CLOSED = 6,
}

enum WS_RECEIVE_OPTION
{
    WS_RECEIVE_REQUIRED_MESSAGE = 1,
    WS_RECEIVE_OPTIONAL_MESSAGE = 2,
}

enum WS_CHANNEL_BINDING
{
    WS_HTTP_CHANNEL_BINDING = 0,
    WS_TCP_CHANNEL_BINDING = 1,
    WS_UDP_CHANNEL_BINDING = 2,
    WS_CUSTOM_CHANNEL_BINDING = 3,
    WS_NAMEDPIPE_CHANNEL_BINDING = 4,
}

enum WS_CHANNEL_TYPE
{
    WS_CHANNEL_TYPE_INPUT = 1,
    WS_CHANNEL_TYPE_OUTPUT = 2,
    WS_CHANNEL_TYPE_SESSION = 4,
    WS_CHANNEL_TYPE_INPUT_SESSION = 5,
    WS_CHANNEL_TYPE_OUTPUT_SESSION = 6,
    WS_CHANNEL_TYPE_DUPLEX = 3,
    WS_CHANNEL_TYPE_DUPLEX_SESSION = 7,
    WS_CHANNEL_TYPE_REQUEST = 8,
    WS_CHANNEL_TYPE_REPLY = 16,
}

enum WS_TRANSFER_MODE
{
    WS_STREAMED_INPUT_TRANSFER_MODE = 1,
    WS_STREAMED_OUTPUT_TRANSFER_MODE = 2,
    WS_BUFFERED_TRANSFER_MODE = 0,
    WS_STREAMED_TRANSFER_MODE = 3,
}

enum WS_HTTP_PROXY_SETTING_MODE
{
    WS_HTTP_PROXY_SETTING_MODE_AUTO = 1,
    WS_HTTP_PROXY_SETTING_MODE_NONE = 2,
    WS_HTTP_PROXY_SETTING_MODE_CUSTOM = 3,
}

enum WS_CHANNEL_PROPERTY_ID
{
    WS_CHANNEL_PROPERTY_MAX_BUFFERED_MESSAGE_SIZE = 0,
    WS_CHANNEL_PROPERTY_MAX_STREAMED_MESSAGE_SIZE = 1,
    WS_CHANNEL_PROPERTY_MAX_STREAMED_START_SIZE = 2,
    WS_CHANNEL_PROPERTY_MAX_STREAMED_FLUSH_SIZE = 3,
    WS_CHANNEL_PROPERTY_ENCODING = 4,
    WS_CHANNEL_PROPERTY_ENVELOPE_VERSION = 5,
    WS_CHANNEL_PROPERTY_ADDRESSING_VERSION = 6,
    WS_CHANNEL_PROPERTY_MAX_SESSION_DICTIONARY_SIZE = 7,
    WS_CHANNEL_PROPERTY_STATE = 8,
    WS_CHANNEL_PROPERTY_ASYNC_CALLBACK_MODEL = 9,
    WS_CHANNEL_PROPERTY_IP_VERSION = 10,
    WS_CHANNEL_PROPERTY_RESOLVE_TIMEOUT = 11,
    WS_CHANNEL_PROPERTY_CONNECT_TIMEOUT = 12,
    WS_CHANNEL_PROPERTY_SEND_TIMEOUT = 13,
    WS_CHANNEL_PROPERTY_RECEIVE_RESPONSE_TIMEOUT = 14,
    WS_CHANNEL_PROPERTY_RECEIVE_TIMEOUT = 15,
    WS_CHANNEL_PROPERTY_CLOSE_TIMEOUT = 16,
    WS_CHANNEL_PROPERTY_ENABLE_TIMEOUTS = 17,
    WS_CHANNEL_PROPERTY_TRANSFER_MODE = 18,
    WS_CHANNEL_PROPERTY_MULTICAST_INTERFACE = 19,
    WS_CHANNEL_PROPERTY_MULTICAST_HOPS = 20,
    WS_CHANNEL_PROPERTY_REMOTE_ADDRESS = 21,
    WS_CHANNEL_PROPERTY_REMOTE_IP_ADDRESS = 22,
    WS_CHANNEL_PROPERTY_HTTP_CONNECTION_ID = 23,
    WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_CALLBACKS = 24,
    WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_PARAMETERS = 25,
    WS_CHANNEL_PROPERTY_CUSTOM_CHANNEL_INSTANCE = 26,
    WS_CHANNEL_PROPERTY_TRANSPORT_URL = 27,
    WS_CHANNEL_PROPERTY_NO_DELAY = 28,
    WS_CHANNEL_PROPERTY_SEND_KEEP_ALIVES = 29,
    WS_CHANNEL_PROPERTY_KEEP_ALIVE_TIME = 30,
    WS_CHANNEL_PROPERTY_KEEP_ALIVE_INTERVAL = 31,
    WS_CHANNEL_PROPERTY_MAX_HTTP_SERVER_CONNECTIONS = 32,
    WS_CHANNEL_PROPERTY_IS_SESSION_SHUT_DOWN = 33,
    WS_CHANNEL_PROPERTY_CHANNEL_TYPE = 34,
    WS_CHANNEL_PROPERTY_TRIM_BUFFERED_MESSAGE_SIZE = 35,
    WS_CHANNEL_PROPERTY_ENCODER = 36,
    WS_CHANNEL_PROPERTY_DECODER = 37,
    WS_CHANNEL_PROPERTY_PROTECTION_LEVEL = 38,
    WS_CHANNEL_PROPERTY_COOKIE_MODE = 39,
    WS_CHANNEL_PROPERTY_HTTP_PROXY_SETTING_MODE = 40,
    WS_CHANNEL_PROPERTY_CUSTOM_HTTP_PROXY = 41,
    WS_CHANNEL_PROPERTY_HTTP_MESSAGE_MAPPING = 42,
    WS_CHANNEL_PROPERTY_ENABLE_HTTP_REDIRECT = 43,
    WS_CHANNEL_PROPERTY_HTTP_REDIRECT_CALLBACK_CONTEXT = 44,
    WS_CHANNEL_PROPERTY_FAULTS_AS_ERRORS = 45,
    WS_CHANNEL_PROPERTY_ALLOW_UNSECURED_FAULTS = 46,
    WS_CHANNEL_PROPERTY_HTTP_SERVER_SPN = 47,
    WS_CHANNEL_PROPERTY_HTTP_PROXY_SPN = 48,
    WS_CHANNEL_PROPERTY_MAX_HTTP_REQUEST_HEADERS_BUFFER_SIZE = 49,
}

enum WS_COOKIE_MODE
{
    WS_MANUAL_COOKIE_MODE = 1,
    WS_AUTO_COOKIE_MODE = 2,
}

enum WS_OPERATION_CONTEXT_PROPERTY_ID
{
    WS_OPERATION_CONTEXT_PROPERTY_CHANNEL = 0,
    WS_OPERATION_CONTEXT_PROPERTY_CONTRACT_DESCRIPTION = 1,
    WS_OPERATION_CONTEXT_PROPERTY_HOST_USER_STATE = 2,
    WS_OPERATION_CONTEXT_PROPERTY_CHANNEL_USER_STATE = 3,
    WS_OPERATION_CONTEXT_PROPERTY_INPUT_MESSAGE = 4,
    WS_OPERATION_CONTEXT_PROPERTY_OUTPUT_MESSAGE = 5,
    WS_OPERATION_CONTEXT_PROPERTY_HEAP = 6,
    WS_OPERATION_CONTEXT_PROPERTY_LISTENER = 7,
    WS_OPERATION_CONTEXT_PROPERTY_ENDPOINT_ADDRESS = 8,
}

enum WS_ENDPOINT_IDENTITY_TYPE
{
    WS_DNS_ENDPOINT_IDENTITY_TYPE = 1,
    WS_UPN_ENDPOINT_IDENTITY_TYPE = 2,
    WS_SPN_ENDPOINT_IDENTITY_TYPE = 3,
    WS_RSA_ENDPOINT_IDENTITY_TYPE = 4,
    WS_CERT_ENDPOINT_IDENTITY_TYPE = 5,
    WS_UNKNOWN_ENDPOINT_IDENTITY_TYPE = 6,
}

enum WS_ENDPOINT_ADDRESS_EXTENSION_TYPE
{
    WS_ENDPOINT_ADDRESS_EXTENSION_METADATA_ADDRESS = 1,
}

enum WS_ERROR_PROPERTY_ID
{
    WS_ERROR_PROPERTY_STRING_COUNT = 0,
    WS_ERROR_PROPERTY_ORIGINAL_ERROR_CODE = 1,
    WS_ERROR_PROPERTY_LANGID = 2,
}

enum WS_EXCEPTION_CODE
{
    WS_EXCEPTION_CODE_USAGE_FAILURE = -1069744128,
    WS_EXCEPTION_CODE_INTERNAL_FAILURE = -1069744127,
}

enum WS_FAULT_ERROR_PROPERTY_ID
{
    WS_FAULT_ERROR_PROPERTY_FAULT = 0,
    WS_FAULT_ERROR_PROPERTY_ACTION = 1,
    WS_FAULT_ERROR_PROPERTY_HEADER = 2,
}

enum WS_FAULT_DISCLOSURE
{
    WS_MINIMAL_FAULT_DISCLOSURE = 0,
    WS_FULL_FAULT_DISCLOSURE = 1,
}

enum WS_HEAP_PROPERTY_ID
{
    WS_HEAP_PROPERTY_MAX_SIZE = 0,
    WS_HEAP_PROPERTY_TRIM_SIZE = 1,
    WS_HEAP_PROPERTY_REQUESTED_SIZE = 2,
    WS_HEAP_PROPERTY_ACTUAL_SIZE = 3,
}

enum WS_LISTENER_STATE
{
    WS_LISTENER_STATE_CREATED = 0,
    WS_LISTENER_STATE_OPENING = 1,
    WS_LISTENER_STATE_OPEN = 2,
    WS_LISTENER_STATE_FAULTED = 3,
    WS_LISTENER_STATE_CLOSING = 4,
    WS_LISTENER_STATE_CLOSED = 5,
}

enum WS_LISTENER_PROPERTY_ID
{
    WS_LISTENER_PROPERTY_LISTEN_BACKLOG = 0,
    WS_LISTENER_PROPERTY_IP_VERSION = 1,
    WS_LISTENER_PROPERTY_STATE = 2,
    WS_LISTENER_PROPERTY_ASYNC_CALLBACK_MODEL = 3,
    WS_LISTENER_PROPERTY_CHANNEL_TYPE = 4,
    WS_LISTENER_PROPERTY_CHANNEL_BINDING = 5,
    WS_LISTENER_PROPERTY_CONNECT_TIMEOUT = 6,
    WS_LISTENER_PROPERTY_IS_MULTICAST = 7,
    WS_LISTENER_PROPERTY_MULTICAST_INTERFACES = 8,
    WS_LISTENER_PROPERTY_MULTICAST_LOOPBACK = 9,
    WS_LISTENER_PROPERTY_CLOSE_TIMEOUT = 10,
    WS_LISTENER_PROPERTY_TO_HEADER_MATCHING_OPTIONS = 11,
    WS_LISTENER_PROPERTY_TRANSPORT_URL_MATCHING_OPTIONS = 12,
    WS_LISTENER_PROPERTY_CUSTOM_LISTENER_CALLBACKS = 13,
    WS_LISTENER_PROPERTY_CUSTOM_LISTENER_PARAMETERS = 14,
    WS_LISTENER_PROPERTY_CUSTOM_LISTENER_INSTANCE = 15,
    WS_LISTENER_PROPERTY_DISALLOWED_USER_AGENT = 16,
}

enum WS_IP_VERSION
{
    WS_IP_VERSION_4 = 1,
    WS_IP_VERSION_6 = 2,
    WS_IP_VERSION_AUTO = 3,
}

enum WS_MESSAGE_STATE
{
    WS_MESSAGE_STATE_EMPTY = 1,
    WS_MESSAGE_STATE_INITIALIZED = 2,
    WS_MESSAGE_STATE_READING = 3,
    WS_MESSAGE_STATE_WRITING = 4,
    WS_MESSAGE_STATE_DONE = 5,
}

enum WS_MESSAGE_INITIALIZATION
{
    WS_BLANK_MESSAGE = 0,
    WS_DUPLICATE_MESSAGE = 1,
    WS_REQUEST_MESSAGE = 2,
    WS_REPLY_MESSAGE = 3,
    WS_FAULT_MESSAGE = 4,
}

enum WS_REPEATING_HEADER_OPTION
{
    WS_REPEATING_HEADER = 1,
    WS_SINGLETON_HEADER = 2,
}

enum WS_HEADER_TYPE
{
    WS_ACTION_HEADER = 1,
    WS_TO_HEADER = 2,
    WS_MESSAGE_ID_HEADER = 3,
    WS_RELATES_TO_HEADER = 4,
    WS_FROM_HEADER = 5,
    WS_REPLY_TO_HEADER = 6,
    WS_FAULT_TO_HEADER = 7,
}

enum WS_ADDRESSING_VERSION
{
    WS_ADDRESSING_VERSION_0_9 = 1,
    WS_ADDRESSING_VERSION_1_0 = 2,
    WS_ADDRESSING_VERSION_TRANSPORT = 3,
}

enum WS_ENVELOPE_VERSION
{
    WS_ENVELOPE_VERSION_SOAP_1_1 = 1,
    WS_ENVELOPE_VERSION_SOAP_1_2 = 2,
    WS_ENVELOPE_VERSION_NONE = 3,
}

enum WS_MESSAGE_PROPERTY_ID
{
    WS_MESSAGE_PROPERTY_STATE = 0,
    WS_MESSAGE_PROPERTY_HEAP = 1,
    WS_MESSAGE_PROPERTY_ENVELOPE_VERSION = 2,
    WS_MESSAGE_PROPERTY_ADDRESSING_VERSION = 3,
    WS_MESSAGE_PROPERTY_HEADER_BUFFER = 4,
    WS_MESSAGE_PROPERTY_HEADER_POSITION = 5,
    WS_MESSAGE_PROPERTY_BODY_READER = 6,
    WS_MESSAGE_PROPERTY_BODY_WRITER = 7,
    WS_MESSAGE_PROPERTY_IS_ADDRESSED = 8,
    WS_MESSAGE_PROPERTY_HEAP_PROPERTIES = 9,
    WS_MESSAGE_PROPERTY_XML_READER_PROPERTIES = 10,
    WS_MESSAGE_PROPERTY_XML_WRITER_PROPERTIES = 11,
    WS_MESSAGE_PROPERTY_IS_FAULT = 12,
    WS_MESSAGE_PROPERTY_MAX_PROCESSED_HEADERS = 13,
    WS_MESSAGE_PROPERTY_USERNAME = 14,
    WS_MESSAGE_PROPERTY_ENCODED_CERT = 15,
    WS_MESSAGE_PROPERTY_TRANSPORT_SECURITY_WINDOWS_TOKEN = 16,
    WS_MESSAGE_PROPERTY_HTTP_HEADER_AUTH_WINDOWS_TOKEN = 17,
    WS_MESSAGE_PROPERTY_MESSAGE_SECURITY_WINDOWS_TOKEN = 18,
    WS_MESSAGE_PROPERTY_SAML_ASSERTION = 19,
    WS_MESSAGE_PROPERTY_SECURITY_CONTEXT = 20,
    WS_MESSAGE_PROPERTY_PROTECTION_LEVEL = 21,
}

enum WS_SECURITY_BINDING_TYPE
{
    WS_SSL_TRANSPORT_SECURITY_BINDING_TYPE = 1,
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TYPE = 2,
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TYPE = 3,
    WS_USERNAME_MESSAGE_SECURITY_BINDING_TYPE = 4,
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TYPE = 5,
    WS_XML_TOKEN_MESSAGE_SECURITY_BINDING_TYPE = 6,
    WS_SAML_MESSAGE_SECURITY_BINDING_TYPE = 7,
    WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TYPE = 8,
    WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING_TYPE = 9,
}

enum WS_HTTP_HEADER_AUTH_TARGET
{
    WS_HTTP_HEADER_AUTH_TARGET_SERVICE = 1,
    WS_HTTP_HEADER_AUTH_TARGET_PROXY = 2,
}

enum WS_WINDOWS_INTEGRATED_AUTH_PACKAGE
{
    WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_KERBEROS = 1,
    WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_NTLM = 2,
    WS_WINDOWS_INTEGRATED_AUTH_PACKAGE_SPNEGO = 3,
}

enum WS_SECURITY_HEADER_VERSION
{
    WS_SECURITY_HEADER_VERSION_1_0 = 1,
    WS_SECURITY_HEADER_VERSION_1_1 = 2,
}

enum WS_TRUST_VERSION
{
    WS_TRUST_VERSION_FEBRUARY_2005 = 1,
    WS_TRUST_VERSION_1_3 = 2,
}

enum WS_REQUEST_SECURITY_TOKEN_ACTION
{
    WS_REQUEST_SECURITY_TOKEN_ACTION_ISSUE = 1,
    WS_REQUEST_SECURITY_TOKEN_ACTION_NEW_CONTEXT = 2,
    WS_REQUEST_SECURITY_TOKEN_ACTION_RENEW_CONTEXT = 3,
}

enum WS_SECURE_CONVERSATION_VERSION
{
    WS_SECURE_CONVERSATION_VERSION_FEBRUARY_2005 = 1,
    WS_SECURE_CONVERSATION_VERSION_1_3 = 2,
}

enum WS_SECURE_PROTOCOL
{
    WS_SECURE_PROTOCOL_SSL2 = 1,
    WS_SECURE_PROTOCOL_SSL3 = 2,
    WS_SECURE_PROTOCOL_TLS1_0 = 4,
    WS_SECURE_PROTOCOL_TLS1_1 = 8,
    WS_SECURE_PROTOCOL_TLS1_2 = 16,
}

enum WS_SECURITY_TIMESTAMP_USAGE
{
    WS_SECURITY_TIMESTAMP_USAGE_ALWAYS = 1,
    WS_SECURITY_TIMESTAMP_USAGE_NEVER = 2,
    WS_SECURITY_TIMESTAMP_USAGE_REQUESTS_ONLY = 3,
}

enum WS_SECURITY_HEADER_LAYOUT
{
    WS_SECURITY_HEADER_LAYOUT_STRICT = 1,
    WS_SECURITY_HEADER_LAYOUT_LAX = 2,
    WS_SECURITY_HEADER_LAYOUT_LAX_WITH_TIMESTAMP_FIRST = 3,
    WS_SECURITY_HEADER_LAYOUT_LAX_WITH_TIMESTAMP_LAST = 4,
}

enum WS_SECURITY_ALGORITHM_PROPERTY_ID
{
}

enum WS_SECURITY_ALGORITHM_ID
{
    WS_SECURITY_ALGORITHM_DEFAULT = 0,
    WS_SECURITY_ALGORITHM_CANONICALIZATION_EXCLUSIVE = 1,
    WS_SECURITY_ALGORITHM_CANONICALIZATION_EXCLUSIVE_WITH_COMMENTS = 2,
    WS_SECURITY_ALGORITHM_DIGEST_SHA1 = 3,
    WS_SECURITY_ALGORITHM_DIGEST_SHA_256 = 4,
    WS_SECURITY_ALGORITHM_DIGEST_SHA_384 = 5,
    WS_SECURITY_ALGORITHM_DIGEST_SHA_512 = 6,
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA1 = 7,
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_256 = 8,
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_384 = 9,
    WS_SECURITY_ALGORITHM_SYMMETRIC_SIGNATURE_HMAC_SHA_512 = 10,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA1 = 11,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_DSA_SHA1 = 12,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_256 = 13,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_384 = 14,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_SIGNATURE_RSA_SHA_512 = 15,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_KEYWRAP_RSA_1_5 = 16,
    WS_SECURITY_ALGORITHM_ASYMMETRIC_KEYWRAP_RSA_OAEP = 17,
    WS_SECURITY_ALGORITHM_KEY_DERIVATION_P_SHA1 = 18,
}

enum WS_PROTECTION_LEVEL
{
    WS_PROTECTION_LEVEL_NONE = 1,
    WS_PROTECTION_LEVEL_SIGN = 2,
    WS_PROTECTION_LEVEL_SIGN_AND_ENCRYPT = 3,
}

enum WS_SECURITY_PROPERTY_ID
{
    WS_SECURITY_PROPERTY_TRANSPORT_PROTECTION_LEVEL = 1,
    WS_SECURITY_PROPERTY_ALGORITHM_SUITE = 2,
    WS_SECURITY_PROPERTY_ALGORITHM_SUITE_NAME = 3,
    WS_SECURITY_PROPERTY_MAX_ALLOWED_LATENCY = 4,
    WS_SECURITY_PROPERTY_TIMESTAMP_VALIDITY_DURATION = 5,
    WS_SECURITY_PROPERTY_MAX_ALLOWED_CLOCK_SKEW = 6,
    WS_SECURITY_PROPERTY_TIMESTAMP_USAGE = 7,
    WS_SECURITY_PROPERTY_SECURITY_HEADER_LAYOUT = 8,
    WS_SECURITY_PROPERTY_SECURITY_HEADER_VERSION = 9,
    WS_SECURITY_PROPERTY_EXTENDED_PROTECTION_POLICY = 10,
    WS_SECURITY_PROPERTY_EXTENDED_PROTECTION_SCENARIO = 11,
    WS_SECURITY_PROPERTY_SERVICE_IDENTITIES = 12,
}

enum WS_SECURITY_KEY_TYPE
{
    WS_SECURITY_KEY_TYPE_NONE = 1,
    WS_SECURITY_KEY_TYPE_SYMMETRIC = 2,
    WS_SECURITY_KEY_TYPE_ASYMMETRIC = 3,
}

enum WS_SECURITY_ALGORITHM_SUITE_NAME
{
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256 = 1,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192 = 2,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128 = 3,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_RSA15 = 4,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_RSA15 = 5,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_RSA15 = 6,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_SHA256 = 7,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_SHA256 = 8,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_SHA256 = 9,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC256_SHA256_RSA15 = 10,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC192_SHA256_RSA15 = 11,
    WS_SECURITY_ALGORITHM_SUITE_NAME_BASIC128_SHA256_RSA15 = 12,
}

enum WS_SECURITY_TOKEN_REFERENCE_MODE
{
    WS_SECURITY_TOKEN_REFERENCE_MODE_LOCAL_ID = 1,
    WS_SECURITY_TOKEN_REFERENCE_MODE_XML_BUFFER = 2,
    WS_SECURITY_TOKEN_REFERENCE_MODE_CERT_THUMBPRINT = 3,
    WS_SECURITY_TOKEN_REFERENCE_MODE_SECURITY_CONTEXT_ID = 4,
    WS_SECURITY_TOKEN_REFERENCE_MODE_SAML_ASSERTION_ID = 5,
}

enum WS_SECURITY_KEY_ENTROPY_MODE
{
    WS_SECURITY_KEY_ENTROPY_MODE_CLIENT_ONLY = 1,
    WS_SECURITY_KEY_ENTROPY_MODE_SERVER_ONLY = 2,
    WS_SECURITY_KEY_ENTROPY_MODE_COMBINED = 3,
}

enum WS_EXTENDED_PROTECTION_POLICY
{
    WS_EXTENDED_PROTECTION_POLICY_NEVER = 1,
    WS_EXTENDED_PROTECTION_POLICY_WHEN_SUPPORTED = 2,
    WS_EXTENDED_PROTECTION_POLICY_ALWAYS = 3,
}

enum WS_EXTENDED_PROTECTION_SCENARIO
{
    WS_EXTENDED_PROTECTION_SCENARIO_BOUND_SERVER = 1,
    WS_EXTENDED_PROTECTION_SCENARIO_TERMINATED_SSL = 2,
}

enum WS_SECURITY_BINDING_PROPERTY_ID
{
    WS_SECURITY_BINDING_PROPERTY_REQUIRE_SSL_CLIENT_CERT = 1,
    WS_SECURITY_BINDING_PROPERTY_WINDOWS_INTEGRATED_AUTH_PACKAGE = 2,
    WS_SECURITY_BINDING_PROPERTY_REQUIRE_SERVER_AUTH = 3,
    WS_SECURITY_BINDING_PROPERTY_ALLOW_ANONYMOUS_CLIENTS = 4,
    WS_SECURITY_BINDING_PROPERTY_ALLOWED_IMPERSONATION_LEVEL = 5,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_SCHEME = 6,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_TARGET = 7,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_BASIC_REALM = 8,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_DIGEST_REALM = 9,
    WS_SECURITY_BINDING_PROPERTY_HTTP_HEADER_AUTH_DIGEST_DOMAIN = 10,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_KEY_SIZE = 11,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_KEY_ENTROPY_MODE = 12,
    WS_SECURITY_BINDING_PROPERTY_MESSAGE_PROPERTIES = 13,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_MAX_PENDING_CONTEXTS = 14,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_MAX_ACTIVE_CONTEXTS = 15,
    WS_SECURITY_BINDING_PROPERTY_SECURE_CONVERSATION_VERSION = 16,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_SUPPORT_RENEW = 17,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_RENEWAL_INTERVAL = 18,
    WS_SECURITY_BINDING_PROPERTY_SECURITY_CONTEXT_ROLLOVER_INTERVAL = 19,
    WS_SECURITY_BINDING_PROPERTY_CERT_FAILURES_TO_IGNORE = 20,
    WS_SECURITY_BINDING_PROPERTY_DISABLE_CERT_REVOCATION_CHECK = 21,
    WS_SECURITY_BINDING_PROPERTY_DISALLOWED_SECURE_PROTOCOLS = 22,
    WS_SECURITY_BINDING_PROPERTY_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT = 23,
}

enum WS_CERT_CREDENTIAL_TYPE
{
    WS_SUBJECT_NAME_CERT_CREDENTIAL_TYPE = 1,
    WS_THUMBPRINT_CERT_CREDENTIAL_TYPE = 2,
    WS_CUSTOM_CERT_CREDENTIAL_TYPE = 3,
}

enum WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE
{
    WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 1,
    WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 2,
    WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE = 3,
}

enum WS_USERNAME_CREDENTIAL_TYPE
{
    WS_STRING_USERNAME_CREDENTIAL_TYPE = 1,
}

enum WS_SECURITY_TOKEN_PROPERTY_ID
{
    WS_SECURITY_TOKEN_PROPERTY_KEY_TYPE = 1,
    WS_SECURITY_TOKEN_PROPERTY_VALID_FROM_TIME = 2,
    WS_SECURITY_TOKEN_PROPERTY_VALID_TILL_TIME = 3,
    WS_SECURITY_TOKEN_PROPERTY_SERIALIZED_XML = 4,
    WS_SECURITY_TOKEN_PROPERTY_ATTACHED_REFERENCE_XML = 5,
    WS_SECURITY_TOKEN_PROPERTY_UNATTACHED_REFERENCE_XML = 6,
    WS_SECURITY_TOKEN_PROPERTY_SYMMETRIC_KEY = 7,
}

enum WS_SECURITY_KEY_HANDLE_TYPE
{
    WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 1,
    WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 2,
    WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE_TYPE = 3,
}

enum WS_MESSAGE_SECURITY_USAGE
{
    WS_SUPPORTING_MESSAGE_SECURITY_USAGE = 1,
}

enum WS_SECURITY_CONTEXT_PROPERTY_ID
{
    WS_SECURITY_CONTEXT_PROPERTY_IDENTIFIER = 1,
    WS_SECURITY_CONTEXT_PROPERTY_USERNAME = 2,
    WS_SECURITY_CONTEXT_PROPERTY_MESSAGE_SECURITY_WINDOWS_TOKEN = 3,
    WS_SECURITY_CONTEXT_PROPERTY_SAML_ASSERTION = 4,
}

enum WS_XML_SECURITY_TOKEN_PROPERTY_ID
{
    WS_XML_SECURITY_TOKEN_PROPERTY_ATTACHED_REFERENCE = 1,
    WS_XML_SECURITY_TOKEN_PROPERTY_UNATTACHED_REFERENCE = 2,
    WS_XML_SECURITY_TOKEN_PROPERTY_VALID_FROM_TIME = 3,
    WS_XML_SECURITY_TOKEN_PROPERTY_VALID_TILL_TIME = 4,
}

enum WS_SAML_AUTHENTICATOR_TYPE
{
    WS_CERT_SIGNED_SAML_AUTHENTICATOR_TYPE = 1,
}

enum WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID
{
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_APPLIES_TO = 1,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_TRUST_VERSION = 2,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_SECURE_CONVERSATION_VERSION = 3,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_TYPE = 4,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_REQUEST_ACTION = 5,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_EXISTING_TOKEN = 6,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_TYPE = 7,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_SIZE = 8,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ISSUED_TOKEN_KEY_ENTROPY = 9,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_LOCAL_REQUEST_PARAMETERS = 10,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_SERVICE_REQUEST_PARAMETERS = 11,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_MESSAGE_PROPERTIES = 12,
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_BEARER_KEY_TYPE_VERSION = 13,
}

enum WS_SECURITY_BEARER_KEY_TYPE_VERSION
{
    WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ORIGINAL_SPECIFICATION = 1,
    WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ORIGINAL_SCHEMA = 2,
    WS_SECURITY_BEARER_KEY_TYPE_VERSION_1_3_ERRATA_01 = 3,
}

enum WS_TYPE
{
    WS_BOOL_TYPE = 0,
    WS_INT8_TYPE = 1,
    WS_INT16_TYPE = 2,
    WS_INT32_TYPE = 3,
    WS_INT64_TYPE = 4,
    WS_UINT8_TYPE = 5,
    WS_UINT16_TYPE = 6,
    WS_UINT32_TYPE = 7,
    WS_UINT64_TYPE = 8,
    WS_FLOAT_TYPE = 9,
    WS_DOUBLE_TYPE = 10,
    WS_DECIMAL_TYPE = 11,
    WS_DATETIME_TYPE = 12,
    WS_TIMESPAN_TYPE = 13,
    WS_GUID_TYPE = 14,
    WS_UNIQUE_ID_TYPE = 15,
    WS_STRING_TYPE = 16,
    WS_WSZ_TYPE = 17,
    WS_BYTES_TYPE = 18,
    WS_XML_STRING_TYPE = 19,
    WS_XML_QNAME_TYPE = 20,
    WS_XML_BUFFER_TYPE = 21,
    WS_CHAR_ARRAY_TYPE = 22,
    WS_UTF8_ARRAY_TYPE = 23,
    WS_BYTE_ARRAY_TYPE = 24,
    WS_DESCRIPTION_TYPE = 25,
    WS_STRUCT_TYPE = 26,
    WS_CUSTOM_TYPE = 27,
    WS_ENDPOINT_ADDRESS_TYPE = 28,
    WS_FAULT_TYPE = 29,
    WS_VOID_TYPE = 30,
    WS_ENUM_TYPE = 31,
    WS_DURATION_TYPE = 32,
    WS_UNION_TYPE = 33,
    WS_ANY_ATTRIBUTES_TYPE = 34,
}

enum WS_FIELD_MAPPING
{
    WS_TYPE_ATTRIBUTE_FIELD_MAPPING = 0,
    WS_ATTRIBUTE_FIELD_MAPPING = 1,
    WS_ELEMENT_FIELD_MAPPING = 2,
    WS_REPEATING_ELEMENT_FIELD_MAPPING = 3,
    WS_TEXT_FIELD_MAPPING = 4,
    WS_NO_FIELD_MAPPING = 5,
    WS_XML_ATTRIBUTE_FIELD_MAPPING = 6,
    WS_ELEMENT_CHOICE_FIELD_MAPPING = 7,
    WS_REPEATING_ELEMENT_CHOICE_FIELD_MAPPING = 8,
    WS_ANY_ELEMENT_FIELD_MAPPING = 9,
    WS_REPEATING_ANY_ELEMENT_FIELD_MAPPING = 10,
    WS_ANY_CONTENT_FIELD_MAPPING = 11,
    WS_ANY_ATTRIBUTES_FIELD_MAPPING = 12,
}

enum WS_TYPE_MAPPING
{
    WS_ELEMENT_TYPE_MAPPING = 1,
    WS_ATTRIBUTE_TYPE_MAPPING = 2,
    WS_ELEMENT_CONTENT_TYPE_MAPPING = 3,
    WS_ANY_ELEMENT_TYPE_MAPPING = 4,
}

enum WS_READ_OPTION
{
    WS_READ_REQUIRED_VALUE = 1,
    WS_READ_REQUIRED_POINTER = 2,
    WS_READ_OPTIONAL_POINTER = 3,
    WS_READ_NILLABLE_POINTER = 4,
    WS_READ_NILLABLE_VALUE = 5,
}

enum WS_WRITE_OPTION
{
    WS_WRITE_REQUIRED_VALUE = 1,
    WS_WRITE_REQUIRED_POINTER = 2,
    WS_WRITE_NILLABLE_VALUE = 3,
    WS_WRITE_NILLABLE_POINTER = 4,
}

enum WS_SERVICE_CANCEL_REASON
{
    WS_SERVICE_HOST_ABORT = 0,
    WS_SERVICE_CHANNEL_FAULTED = 1,
}

enum WS_OPERATION_STYLE
{
    WS_NON_RPC_LITERAL_OPERATION = 0,
    WS_RPC_LITERAL_OPERATION = 1,
}

enum WS_PARAMETER_TYPE
{
    WS_PARAMETER_TYPE_NORMAL = 0,
    WS_PARAMETER_TYPE_ARRAY = 1,
    WS_PARAMETER_TYPE_ARRAY_COUNT = 2,
    WS_PARAMETER_TYPE_MESSAGES = 3,
}

enum WS_SERVICE_ENDPOINT_PROPERTY_ID
{
    WS_SERVICE_ENDPOINT_PROPERTY_ACCEPT_CHANNEL_CALLBACK = 0,
    WS_SERVICE_ENDPOINT_PROPERTY_CLOSE_CHANNEL_CALLBACK = 1,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_ACCEPTING_CHANNELS = 2,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CONCURRENCY = 3,
    WS_SERVICE_ENDPOINT_PROPERTY_BODY_HEAP_MAX_SIZE = 4,
    WS_SERVICE_ENDPOINT_PROPERTY_BODY_HEAP_TRIM_SIZE = 5,
    WS_SERVICE_ENDPOINT_PROPERTY_MESSAGE_PROPERTIES = 6,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CALL_POOL_SIZE = 7,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CHANNEL_POOL_SIZE = 8,
    WS_SERVICE_ENDPOINT_PROPERTY_LISTENER_PROPERTIES = 9,
    WS_SERVICE_ENDPOINT_PROPERTY_CHECK_MUST_UNDERSTAND = 10,
    WS_SERVICE_ENDPOINT_PROPERTY_METADATA_EXCHANGE_TYPE = 11,
    WS_SERVICE_ENDPOINT_PROPERTY_METADATA = 12,
    WS_SERVICE_ENDPOINT_PROPERTY_METADATA_EXCHANGE_URL_SUFFIX = 13,
    WS_SERVICE_ENDPOINT_PROPERTY_MAX_CHANNELS = 14,
}

enum WS_METADATA_EXCHANGE_TYPE
{
    WS_METADATA_EXCHANGE_TYPE_NONE = 0,
    WS_METADATA_EXCHANGE_TYPE_MEX = 1,
    WS_METADATA_EXCHANGE_TYPE_HTTP_GET = 2,
}

enum WS_SERVICE_PROPERTY_ID
{
    WS_SERVICE_PROPERTY_HOST_USER_STATE = 0,
    WS_SERVICE_PROPERTY_FAULT_DISCLOSURE = 1,
    WS_SERVICE_PROPERTY_FAULT_LANGID = 2,
    WS_SERVICE_PROPERTY_HOST_STATE = 3,
    WS_SERVICE_PROPERTY_METADATA = 4,
    WS_SERVICE_PROPERTY_CLOSE_TIMEOUT = 5,
}

enum WS_SERVICE_HOST_STATE
{
    WS_SERVICE_HOST_STATE_CREATED = 0,
    WS_SERVICE_HOST_STATE_OPENING = 1,
    WS_SERVICE_HOST_STATE_OPEN = 2,
    WS_SERVICE_HOST_STATE_CLOSING = 3,
    WS_SERVICE_HOST_STATE_CLOSED = 4,
    WS_SERVICE_HOST_STATE_FAULTED = 5,
}

enum WS_SERVICE_PROXY_STATE
{
    WS_SERVICE_PROXY_STATE_CREATED = 0,
    WS_SERVICE_PROXY_STATE_OPENING = 1,
    WS_SERVICE_PROXY_STATE_OPEN = 2,
    WS_SERVICE_PROXY_STATE_CLOSING = 3,
    WS_SERVICE_PROXY_STATE_CLOSED = 4,
    WS_SERVICE_PROXY_STATE_FAULTED = 5,
}

enum WS_PROXY_PROPERTY_ID
{
    WS_PROXY_PROPERTY_CALL_TIMEOUT = 0,
    WS_PROXY_PROPERTY_MESSAGE_PROPERTIES = 1,
    WS_PROXY_PROPERTY_MAX_CALL_POOL_SIZE = 2,
    WS_PROXY_PROPERTY_STATE = 3,
    WS_PROXY_PROPERTY_MAX_PENDING_CALLS = 4,
    WS_PROXY_PROPERTY_MAX_CLOSE_TIMEOUT = 5,
    WS_PROXY_FAULT_LANG_ID = 6,
}

enum WS_CALL_PROPERTY_ID
{
    WS_CALL_PROPERTY_CHECK_MUST_UNDERSTAND = 0,
    WS_CALL_PROPERTY_SEND_MESSAGE_CONTEXT = 1,
    WS_CALL_PROPERTY_RECEIVE_MESSAGE_CONTEXT = 2,
    WS_CALL_PROPERTY_CALL_ID = 3,
}

enum WS_TRACE_API
{
    WS_TRACE_API_NONE = -1,
    WS_TRACE_API_START_READER_CANONICALIZATION = 0,
    WS_TRACE_API_END_READER_CANONICALIZATION = 1,
    WS_TRACE_API_START_WRITER_CANONICALIZATION = 2,
    WS_TRACE_API_END_WRITER_CANONICALIZATION = 3,
    WS_TRACE_API_CREATE_XML_BUFFER = 4,
    WS_TRACE_API_REMOVE_NODE = 5,
    WS_TRACE_API_CREATE_READER = 6,
    WS_TRACE_API_SET_INPUT = 7,
    WS_TRACE_API_SET_INPUT_TO_BUFFER = 8,
    WS_TRACE_API_FREE_XML_READER = 9,
    WS_TRACE_API_GET_READER_PROPERTY = 10,
    WS_TRACE_API_GET_READER_NODE = 11,
    WS_TRACE_API_FILL_READER = 12,
    WS_TRACE_API_READ_START_ELEMENT = 13,
    WS_TRACE_API_READ_TO_START_ELEMENT = 14,
    WS_TRACE_API_READ_START_ATTRIBUTE = 15,
    WS_TRACE_API_READ_END_ATTRIBUTE = 16,
    WS_TRACE_API_READ_NODE = 17,
    WS_TRACE_API_SKIP_NODE = 18,
    WS_TRACE_API_READ_END_ELEMENT = 19,
    WS_TRACE_API_FIND_ATTRIBUTE = 20,
    WS_TRACE_API_READ_ELEMENT_VALUE = 21,
    WS_TRACE_API_READ_CHARS = 22,
    WS_TRACE_API_READ_CHARS_UTF8 = 23,
    WS_TRACE_API_READ_BYTES = 24,
    WS_TRACE_API_READ_ARRAY = 25,
    WS_TRACE_API_GET_READER_POSITION = 26,
    WS_TRACE_API_SET_READER_POSITION = 27,
    WS_TRACE_API_MOVE_READER = 28,
    WS_TRACE_API_CREATE_WRITER = 29,
    WS_TRACE_API_FREE_XML_WRITER = 30,
    WS_TRACE_API_SET_OUTPUT = 31,
    WS_TRACE_API_SET_OUTPUT_TO_BUFFER = 32,
    WS_TRACE_API_GET_WRITER_PROPERTY = 33,
    WS_TRACE_API_FLUSH_WRITER = 34,
    WS_TRACE_API_WRITE_START_ELEMENT = 35,
    WS_TRACE_API_WRITE_END_START_ELEMENT = 36,
    WS_TRACE_API_WRITE_XMLNS_ATTRIBUTE = 37,
    WS_TRACE_API_WRITE_START_ATTRIBUTE = 38,
    WS_TRACE_API_WRITE_END_ATTRIBUTE = 39,
    WS_TRACE_API_WRITE_VALUE = 40,
    WS_TRACE_API_WRITE_XML_BUFFER = 41,
    WS_TRACE_API_READ_XML_BUFFER = 42,
    WS_TRACE_API_WRITE_XML_BUFFER_TO_BYTES = 43,
    WS_TRACE_API_READ_XML_BUFFER_FROM_BYTES = 44,
    WS_TRACE_API_WRITE_ARRAY = 45,
    WS_TRACE_API_WRITE_QUALIFIED_NAME = 46,
    WS_TRACE_API_WRITE_CHARS = 47,
    WS_TRACE_API_WRITE_CHARS_UTF8 = 48,
    WS_TRACE_API_WRITE_BYTES = 49,
    WS_TRACE_API_PUSH_BYTES = 50,
    WS_TRACE_API_PULL_BYTES = 51,
    WS_TRACE_API_WRITE_END_ELEMENT = 52,
    WS_TRACE_API_WRITE_TEXT = 53,
    WS_TRACE_API_WRITE_START_CDATA = 54,
    WS_TRACE_API_WRITE_END_CDATA = 55,
    WS_TRACE_API_WRITE_NODE = 56,
    WS_TRACE_API_PREFIX_FROM_NAMESPACE = 57,
    WS_TRACE_API_GET_WRITER_POSITION = 58,
    WS_TRACE_API_SET_WRITER_POSITION = 59,
    WS_TRACE_API_MOVE_WRITER = 60,
    WS_TRACE_API_TRIM_XML_WHITESPACE = 61,
    WS_TRACE_API_VERIFY_XML_NCNAME = 62,
    WS_TRACE_API_XML_STRING_EQUALS = 63,
    WS_TRACE_API_NAMESPACE_FROM_PREFIX = 64,
    WS_TRACE_API_READ_QUALIFIED_NAME = 65,
    WS_TRACE_API_GET_XML_ATTRIBUTE = 66,
    WS_TRACE_API_COPY_NODE = 67,
    WS_TRACE_API_ASYNC_EXECUTE = 68,
    WS_TRACE_API_CREATE_CHANNEL = 69,
    WS_TRACE_API_OPEN_CHANNEL = 70,
    WS_TRACE_API_SEND_MESSAGE = 71,
    WS_TRACE_API_RECEIVE_MESSAGE = 72,
    WS_TRACE_API_REQUEST_REPLY = 73,
    WS_TRACE_API_SEND_REPLY_MESSAGE = 74,
    WS_TRACE_API_SEND_FAULT_MESSAGE_FOR_ERROR = 75,
    WS_TRACE_API_GET_CHANNEL_PROPERTY = 76,
    WS_TRACE_API_SET_CHANNEL_PROPERTY = 77,
    WS_TRACE_API_WRITE_MESSAGE_START = 78,
    WS_TRACE_API_WRITE_MESSAGE_END = 79,
    WS_TRACE_API_READ_MESSAGE_START = 80,
    WS_TRACE_API_READ_MESSAGE_END = 81,
    WS_TRACE_API_CLOSE_CHANNEL = 82,
    WS_TRACE_API_ABORT_CHANNEL = 83,
    WS_TRACE_API_FREE_CHANNEL = 84,
    WS_TRACE_API_RESET_CHANNEL = 85,
    WS_TRACE_API_ABANDON_MESSAGE = 86,
    WS_TRACE_API_SHUTDOWN_SESSION_CHANNEL = 87,
    WS_TRACE_API_GET_CONTEXT_PROPERTY = 88,
    WS_TRACE_API_GET_DICTIONARY = 89,
    WS_TRACE_API_READ_ENDPOINT_ADDRESS_EXTENSION = 90,
    WS_TRACE_API_CREATE_ERROR = 91,
    WS_TRACE_API_ADD_ERROR_STRING = 92,
    WS_TRACE_API_GET_ERROR_STRING = 93,
    WS_TRACE_API_COPY_ERROR = 94,
    WS_TRACE_API_GET_ERROR_PROPERTY = 95,
    WS_TRACE_API_SET_ERROR_PROPERTY = 96,
    WS_TRACE_API_RESET_ERROR = 97,
    WS_TRACE_API_FREE_ERROR = 98,
    WS_TRACE_API_GET_FAULT_ERROR_PROPERTY = 99,
    WS_TRACE_API_SET_FAULT_ERROR_PROPERTY = 100,
    WS_TRACE_API_CREATE_FAULT_FROM_ERROR = 101,
    WS_TRACE_API_SET_FAULT_ERROR_DETAIL = 102,
    WS_TRACE_API_GET_FAULT_ERROR_DETAIL = 103,
    WS_TRACE_API_CREATE_HEAP = 104,
    WS_TRACE_API_ALLOC = 105,
    WS_TRACE_API_GET_HEAP_PROPERTY = 106,
    WS_TRACE_API_RESET_HEAP = 107,
    WS_TRACE_API_FREE_HEAP = 108,
    WS_TRACE_API_CREATE_LISTENER = 109,
    WS_TRACE_API_OPEN_LISTENER = 110,
    WS_TRACE_API_ACCEPT_CHANNEL = 111,
    WS_TRACE_API_CLOSE_LISTENER = 112,
    WS_TRACE_API_ABORT_LISTENER = 113,
    WS_TRACE_API_RESET_LISTENER = 114,
    WS_TRACE_API_FREE_LISTENER = 115,
    WS_TRACE_API_GET_LISTENER_PROPERTY = 116,
    WS_TRACE_API_SET_LISTENER_PROPERTY = 117,
    WS_TRACE_API_CREATE_CHANNEL_FOR_LISTENER = 118,
    WS_TRACE_API_CREATE_MESSAGE = 119,
    WS_TRACE_API_CREATE_MESSAGE_FOR_CHANNEL = 120,
    WS_TRACE_API_INITIALIZE_MESSAGE = 121,
    WS_TRACE_API_RESET_MESSAGE = 122,
    WS_TRACE_API_FREE_MESSAGE = 123,
    WS_TRACE_API_GET_HEADER_ATTRIBUTES = 124,
    WS_TRACE_API_GET_HEADER = 125,
    WS_TRACE_API_GET_CUSTOM_HEADER = 126,
    WS_TRACE_API_REMOVE_HEADER = 127,
    WS_TRACE_API_SET_HEADER = 128,
    WS_TRACE_API_REMOVE_CUSTOM_HEADER = 129,
    WS_TRACE_API_ADD_CUSTOM_HEADER = 130,
    WS_TRACE_API_ADD_MAPPED_HEADER = 131,
    WS_TRACE_API_REMOVE_MAPPED_HEADER = 132,
    WS_TRACE_API_GET_MAPPED_HEADER = 133,
    WS_TRACE_API_WRITE_BODY = 134,
    WS_TRACE_API_READ_BODY = 135,
    WS_TRACE_API_WRITE_ENVELOPE_START = 136,
    WS_TRACE_API_WRITE_ENVELOPE_END = 137,
    WS_TRACE_API_READ_ENVELOPE_START = 138,
    WS_TRACE_API_READ_ENVELOPE_END = 139,
    WS_TRACE_API_GET_MESSAGE_PROPERTY = 140,
    WS_TRACE_API_SET_MESSAGE_PROPERTY = 141,
    WS_TRACE_API_ADDRESS_MESSAGE = 142,
    WS_TRACE_API_CHECK_MUST_UNDERSTAND_HEADERS = 143,
    WS_TRACE_API_MARK_HEADER_AS_UNDERSTOOD = 144,
    WS_TRACE_API_FILL_BODY = 145,
    WS_TRACE_API_FLUSH_BODY = 146,
    WS_TRACE_API_REQUEST_SECURITY_TOKEN = 147,
    WS_TRACE_API_GET_SECURITY_TOKEN_PROPERTY = 148,
    WS_TRACE_API_CREATE_XML_SECURITY_TOKEN = 149,
    WS_TRACE_API_FREE_SECURITY_TOKEN = 150,
    WS_TRACE_API_REVOKE_SECURITY_CONTEXT = 151,
    WS_TRACE_API_GET_SECURITY_CONTEXT_PROPERTY = 152,
    WS_TRACE_API_READ_ELEMENT_TYPE = 153,
    WS_TRACE_API_READ_ATTRIBUTE_TYPE = 154,
    WS_TRACE_API_READ_TYPE = 155,
    WS_TRACE_API_WRITE_ELEMENT_TYPE = 156,
    WS_TRACE_API_WRITE_ATTRIBUTE_TYPE = 157,
    WS_TRACE_API_WRITE_TYPE = 158,
    WS_TRACE_API_SERVICE_REGISTER_FOR_CANCEL = 159,
    WS_TRACE_API_GET_SERVICE_HOST_PROPERTY = 160,
    WS_TRACE_API_CREATE_SERVICE_HOST = 161,
    WS_TRACE_API_OPEN_SERVICE_HOST = 162,
    WS_TRACE_API_CLOSE_SERVICE_HOST = 163,
    WS_TRACE_API_ABORT_SERVICE_HOST = 164,
    WS_TRACE_API_FREE_SERVICE_HOST = 165,
    WS_TRACE_API_RESET_SERVICE_HOST = 166,
    WS_TRACE_API_GET_SERVICE_PROXY_PROPERTY = 167,
    WS_TRACE_API_CREATE_SERVICE_PROXY = 168,
    WS_TRACE_API_OPEN_SERVICE_PROXY = 169,
    WS_TRACE_API_CLOSE_SERVICE_PROXY = 170,
    WS_TRACE_API_ABORT_SERVICE_PROXY = 171,
    WS_TRACE_API_FREE_SERVICE_PROXY = 172,
    WS_TRACE_API_RESET_SERVICE_PROXY = 173,
    WS_TRACE_API_ABORT_CALL = 174,
    WS_TRACE_API_CALL = 175,
    WS_TRACE_API_DECODE_URL = 176,
    WS_TRACE_API_ENCODE_URL = 177,
    WS_TRACE_API_COMBINE_URL = 178,
    WS_TRACE_API_DATETIME_TO_FILETIME = 179,
    WS_TRACE_API_FILETIME_TO_DATETIME = 180,
    WS_TRACE_API_DUMP_MEMORY = 181,
    WS_TRACE_API_SET_AUTOFAIL = 182,
    WS_TRACE_API_CREATE_METADATA = 183,
    WS_TRACE_API_READ_METADATA = 184,
    WS_TRACE_API_FREE_METADATA = 185,
    WS_TRACE_API_RESET_METADATA = 186,
    WS_TRACE_API_GET_METADATA_PROPERTY = 187,
    WS_TRACE_API_GET_MISSING_METADATA_DOCUMENT_ADDRESS = 188,
    WS_TRACE_API_GET_METADATA_ENDPOINTS = 189,
    WS_TRACE_API_MATCH_POLICY_ALTERNATIVE = 190,
    WS_TRACE_API_GET_POLICY_PROPERTY = 191,
    WS_TRACE_API_GET_POLICY_ALTERNATIVE_COUNT = 192,
    WS_TRACE_API_WS_CREATE_SERVICE_PROXY_FROM_TEMPLATE = 193,
    WS_TRACE_API_WS_CREATE_SERVICE_HOST_FROM_TEMPLATE = 194,
}

enum WS_URL_SCHEME_TYPE
{
    WS_URL_HTTP_SCHEME_TYPE = 0,
    WS_URL_HTTPS_SCHEME_TYPE = 1,
    WS_URL_NETTCP_SCHEME_TYPE = 2,
    WS_URL_SOAPUDP_SCHEME_TYPE = 3,
    WS_URL_NETPIPE_SCHEME_TYPE = 4,
}

enum WS_DATETIME_FORMAT
{
    WS_DATETIME_FORMAT_UTC = 0,
    WS_DATETIME_FORMAT_LOCAL = 1,
    WS_DATETIME_FORMAT_NONE = 2,
}

enum WS_METADATA_STATE
{
    WS_METADATA_STATE_CREATED = 1,
    WS_METADATA_STATE_RESOLVED = 2,
    WS_METADATA_STATE_FAULTED = 3,
}

enum WS_METADATA_PROPERTY_ID
{
    WS_METADATA_PROPERTY_STATE = 1,
    WS_METADATA_PROPERTY_HEAP_PROPERTIES = 2,
    WS_METADATA_PROPERTY_POLICY_PROPERTIES = 3,
    WS_METADATA_PROPERTY_HEAP_REQUESTED_SIZE = 4,
    WS_METADATA_PROPERTY_MAX_DOCUMENTS = 5,
    WS_METADATA_PROPERTY_HOST_NAMES = 6,
    WS_METADATA_PROPERTY_VERIFY_HOST_NAMES = 7,
}

enum WS_POLICY_STATE
{
    WS_POLICY_STATE_CREATED = 1,
    WS_POLICY_STATE_FAULTED = 2,
}

enum WS_POLICY_PROPERTY_ID
{
    WS_POLICY_PROPERTY_STATE = 1,
    WS_POLICY_PROPERTY_MAX_ALTERNATIVES = 2,
    WS_POLICY_PROPERTY_MAX_DEPTH = 3,
    WS_POLICY_PROPERTY_MAX_EXTENSIONS = 4,
}

enum WS_SECURITY_BINDING_CONSTRAINT_TYPE
{
    WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT_TYPE = 1,
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT_TYPE = 2,
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT_TYPE = 3,
    WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 4,
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 5,
    WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 6,
    WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 7,
    WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT_TYPE = 8,
}

enum WS_POLICY_EXTENSION_TYPE
{
    WS_ENDPOINT_POLICY_EXTENSION_TYPE = 1,
}

enum WS_BINDING_TEMPLATE_TYPE
{
    WS_HTTP_BINDING_TEMPLATE_TYPE = 0,
    WS_HTTP_SSL_BINDING_TEMPLATE_TYPE = 1,
    WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE_TYPE = 2,
    WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE_TYPE = 3,
    WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE_TYPE = 4,
    WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE = 5,
    WS_TCP_BINDING_TEMPLATE_TYPE = 6,
    WS_TCP_SSPI_BINDING_TEMPLATE_TYPE = 7,
    WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE_TYPE = 8,
    WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE_TYPE = 9,
    WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 10,
    WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 11,
    WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 12,
    WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE_TYPE = 13,
}

alias WS_READ_CALLBACK = extern(Windows) HRESULT function(void* callbackState, char* bytes, uint maxSize, uint* actualSize, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_WRITE_CALLBACK = extern(Windows) HRESULT function(void* callbackState, char* buffers, uint count, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_PUSH_BYTES_CALLBACK = extern(Windows) HRESULT function(void* callbackState, WS_WRITE_CALLBACK writeCallback, void* writeCallbackState, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_PULL_BYTES_CALLBACK = extern(Windows) HRESULT function(void* callbackState, char* bytes, uint maxSize, uint* actualSize, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_DYNAMIC_STRING_CALLBACK = extern(Windows) HRESULT function(void* callbackState, const(WS_XML_STRING)* string, int* found, uint* id, WS_ERROR* error);
alias WS_ASYNC_CALLBACK = extern(Windows) void function(HRESULT errorCode, WS_CALLBACK_MODEL callbackModel, void* callbackState);
alias WS_ASYNC_FUNCTION = extern(Windows) HRESULT function(HRESULT hr, WS_CALLBACK_MODEL callbackModel, void* callbackState, WS_ASYNC_OPERATION* next, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_CREATE_CHANNEL_CALLBACK = extern(Windows) HRESULT function(WS_CHANNEL_TYPE channelType, char* channelParameters, uint channelParametersSize, void** channelInstance, WS_ERROR* error);
alias WS_FREE_CHANNEL_CALLBACK = extern(Windows) void function(void* channelInstance);
alias WS_RESET_CHANNEL_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, WS_ERROR* error);
alias WS_ABORT_CHANNEL_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, WS_ERROR* error);
alias WS_OPEN_CHANNEL_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, const(WS_ENDPOINT_ADDRESS)* endpointAddress, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_CLOSE_CHANNEL_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_SET_CHANNEL_PROPERTY_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, WS_CHANNEL_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);
alias WS_GET_CHANNEL_PROPERTY_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, WS_CHANNEL_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);
alias WS_READ_MESSAGE_START_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, WS_MESSAGE* message, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_READ_MESSAGE_END_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, WS_MESSAGE* message, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_WRITE_MESSAGE_START_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, WS_MESSAGE* message, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_WRITE_MESSAGE_END_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, WS_MESSAGE* message, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_ABANDON_MESSAGE_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, WS_MESSAGE* message, WS_ERROR* error);
alias WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK = extern(Windows) HRESULT function(void* channelInstance, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_CREATE_ENCODER_CALLBACK = extern(Windows) HRESULT function(void* createContext, WS_WRITE_CALLBACK writeCallback, void* writeContext, void** encoderContext, WS_ERROR* error);
alias WS_ENCODER_GET_CONTENT_TYPE_CALLBACK = extern(Windows) HRESULT function(void* encoderContext, const(WS_STRING)* contentType, WS_STRING* newContentType, WS_STRING* contentEncoding, WS_ERROR* error);
alias WS_ENCODER_START_CALLBACK = extern(Windows) HRESULT function(void* encoderContext, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_ENCODER_ENCODE_CALLBACK = extern(Windows) HRESULT function(void* encoderContext, char* buffers, uint count, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_ENCODER_END_CALLBACK = extern(Windows) HRESULT function(void* encoderContext, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_FREE_ENCODER_CALLBACK = extern(Windows) void function(void* encoderContext);
alias WS_CREATE_DECODER_CALLBACK = extern(Windows) HRESULT function(void* createContext, WS_READ_CALLBACK readCallback, void* readContext, void** decoderContext, WS_ERROR* error);
alias WS_DECODER_GET_CONTENT_TYPE_CALLBACK = extern(Windows) HRESULT function(void* decoderContext, const(WS_STRING)* contentType, const(WS_STRING)* contentEncoding, WS_STRING* newContentType, WS_ERROR* error);
alias WS_DECODER_START_CALLBACK = extern(Windows) HRESULT function(void* encoderContext, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_DECODER_DECODE_CALLBACK = extern(Windows) HRESULT function(void* encoderContext, char* buffer, uint maxLength, uint* length, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_DECODER_END_CALLBACK = extern(Windows) HRESULT function(void* encoderContext, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_FREE_DECODER_CALLBACK = extern(Windows) void function(void* decoderContext);
alias WS_HTTP_REDIRECT_CALLBACK = extern(Windows) HRESULT function(void* state, const(WS_STRING)* originalUrl, const(WS_STRING)* newUrl);
alias WS_CREATE_LISTENER_CALLBACK = extern(Windows) HRESULT function(WS_CHANNEL_TYPE channelType, char* listenerParameters, uint listenerParametersSize, void** listenerInstance, WS_ERROR* error);
alias WS_FREE_LISTENER_CALLBACK = extern(Windows) void function(void* listenerInstance);
alias WS_RESET_LISTENER_CALLBACK = extern(Windows) HRESULT function(void* listenerInstance, WS_ERROR* error);
alias WS_OPEN_LISTENER_CALLBACK = extern(Windows) HRESULT function(void* listenerInstance, const(WS_STRING)* url, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_CLOSE_LISTENER_CALLBACK = extern(Windows) HRESULT function(void* listenerInstance, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_GET_LISTENER_PROPERTY_CALLBACK = extern(Windows) HRESULT function(void* listenerInstance, WS_LISTENER_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);
alias WS_SET_LISTENER_PROPERTY_CALLBACK = extern(Windows) HRESULT function(void* listenerInstance, WS_LISTENER_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);
alias WS_ACCEPT_CHANNEL_CALLBACK = extern(Windows) HRESULT function(void* listenerInstance, void* channelInstance, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_ABORT_LISTENER_CALLBACK = extern(Windows) HRESULT function(void* listenerInstance, WS_ERROR* error);
alias WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK = extern(Windows) HRESULT function(void* listenerInstance, char* channelParameters, uint channelParametersSize, void** channelInstance, WS_ERROR* error);
alias WS_MESSAGE_DONE_CALLBACK = extern(Windows) void function(void* doneCallbackState);
alias WS_CERTIFICATE_VALIDATION_CALLBACK = extern(Windows) HRESULT function(CERT_CONTEXT* certContext, void* state);
alias WS_GET_CERT_CALLBACK = extern(Windows) HRESULT function(void* getCertCallbackState, const(WS_ENDPOINT_ADDRESS)* targetAddress, const(WS_STRING)* viaUri, const(CERT_CONTEXT)** cert, WS_ERROR* error);
alias WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK = extern(Windows) HRESULT function(void* certIssuerListNotificationCallbackState, const(SecPkgContext_IssuerListInfoEx)* issuerList, WS_ERROR* error);
alias WS_VALIDATE_PASSWORD_CALLBACK = extern(Windows) HRESULT function(void* passwordValidatorCallbackState, const(WS_STRING)* username, const(WS_STRING)* password, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_VALIDATE_SAML_CALLBACK = extern(Windows) HRESULT function(void* samlValidatorCallbackState, WS_XML_BUFFER* samlAssertion, WS_ERROR* error);
alias WS_DURATION_COMPARISON_CALLBACK = extern(Windows) HRESULT function(const(WS_DURATION)* duration1, const(WS_DURATION)* duration2, int* result, WS_ERROR* error);
alias WS_READ_TYPE_CALLBACK = extern(Windows) HRESULT function(WS_XML_READER* reader, WS_TYPE_MAPPING typeMapping, const(void)* descriptionData, WS_HEAP* heap, char* value, uint valueSize, WS_ERROR* error);
alias WS_WRITE_TYPE_CALLBACK = extern(Windows) HRESULT function(WS_XML_WRITER* writer, WS_TYPE_MAPPING typeMapping, const(void)* descriptionData, char* value, uint valueSize, WS_ERROR* error);
alias WS_IS_DEFAULT_VALUE_CALLBACK = extern(Windows) HRESULT function(const(void)* descriptionData, char* value, char* defaultValue, uint valueSize, int* isDefault, WS_ERROR* error);
alias WS_SERVICE_MESSAGE_RECEIVE_CALLBACK = extern(Windows) HRESULT function(const(WS_OPERATION_CONTEXT)* context, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_OPERATION_CANCEL_CALLBACK = extern(Windows) void function(const(WS_SERVICE_CANCEL_REASON) reason, void* state);
alias WS_OPERATION_FREE_STATE_CALLBACK = extern(Windows) void function(void* state);
alias WS_SERVICE_STUB_CALLBACK = extern(Windows) HRESULT function(const(WS_OPERATION_CONTEXT)* context, void* frame, const(void)* callback, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_SERVICE_ACCEPT_CHANNEL_CALLBACK = extern(Windows) HRESULT function(const(WS_OPERATION_CONTEXT)* context, void** channelState, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);
alias WS_SERVICE_CLOSE_CHANNEL_CALLBACK = extern(Windows) HRESULT function(const(WS_OPERATION_CONTEXT)* context, const(WS_ASYNC_CONTEXT)* asyncContext);
alias WS_SERVICE_SECURITY_CALLBACK = extern(Windows) HRESULT function(const(WS_OPERATION_CONTEXT)* context, int* authorized, WS_ERROR* error);
alias WS_PROXY_MESSAGE_CALLBACK = extern(Windows) HRESULT function(WS_MESSAGE* message, WS_HEAP* heap, void* state, WS_ERROR* error);
struct WS_XML_DICTIONARY
{
    Guid guid;
    WS_XML_STRING* strings;
    uint stringCount;
    BOOL isConst;
}

struct WS_XML_STRING
{
    uint length;
    ubyte* bytes;
    WS_XML_DICTIONARY* dictionary;
    uint id;
}

struct WS_XML_QNAME
{
    WS_XML_STRING localName;
    WS_XML_STRING ns;
}

struct WS_XML_NODE_POSITION
{
    WS_XML_BUFFER* buffer;
    void* node;
}

struct WS_XML_READER_PROPERTY
{
    WS_XML_READER_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_XML_CANONICALIZATION_INCLUSIVE_PREFIXES
{
    uint prefixCount;
    WS_XML_STRING* prefixes;
}

struct WS_XML_CANONICALIZATION_PROPERTY
{
    WS_XML_CANONICALIZATION_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_XML_WRITER_PROPERTY
{
    WS_XML_WRITER_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_XML_BUFFER_PROPERTY
{
    WS_XML_BUFFER_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_XML_TEXT
{
    WS_XML_TEXT_TYPE textType;
}

struct WS_XML_UTF8_TEXT
{
    WS_XML_TEXT text;
    WS_XML_STRING value;
}

struct WS_XML_UTF16_TEXT
{
    WS_XML_TEXT text;
    ubyte* bytes;
    uint byteCount;
}

struct WS_XML_BASE64_TEXT
{
    WS_XML_TEXT text;
    ubyte* bytes;
    uint length;
}

struct WS_XML_BOOL_TEXT
{
    WS_XML_TEXT text;
    BOOL value;
}

struct WS_XML_INT32_TEXT
{
    WS_XML_TEXT text;
    int value;
}

struct WS_XML_INT64_TEXT
{
    WS_XML_TEXT text;
    long value;
}

struct WS_XML_UINT64_TEXT
{
    WS_XML_TEXT text;
    ulong value;
}

struct WS_XML_FLOAT_TEXT
{
    WS_XML_TEXT text;
    float value;
}

struct WS_XML_DOUBLE_TEXT
{
    WS_XML_TEXT text;
    double value;
}

struct WS_XML_DECIMAL_TEXT
{
    WS_XML_TEXT text;
    DECIMAL value;
}

struct WS_XML_GUID_TEXT
{
    WS_XML_TEXT text;
    Guid value;
}

struct WS_XML_UNIQUE_ID_TEXT
{
    WS_XML_TEXT text;
    Guid value;
}

struct WS_DATETIME
{
    ulong ticks;
    WS_DATETIME_FORMAT format;
}

struct WS_XML_DATETIME_TEXT
{
    WS_XML_TEXT text;
    WS_DATETIME value;
}

struct WS_TIMESPAN
{
    long ticks;
}

struct WS_XML_TIMESPAN_TEXT
{
    WS_XML_TEXT text;
    WS_TIMESPAN value;
}

struct WS_XML_QNAME_TEXT
{
    WS_XML_TEXT text;
    WS_XML_STRING* prefix;
    WS_XML_STRING* localName;
    WS_XML_STRING* ns;
}

struct WS_XML_LIST_TEXT
{
    WS_XML_TEXT text;
    uint itemCount;
    WS_XML_TEXT** items;
}

struct WS_XML_NODE
{
    WS_XML_NODE_TYPE nodeType;
}

struct WS_XML_ATTRIBUTE
{
    ubyte singleQuote;
    ubyte isXmlNs;
    WS_XML_STRING* prefix;
    WS_XML_STRING* localName;
    WS_XML_STRING* ns;
    WS_XML_TEXT* value;
}

struct WS_XML_ELEMENT_NODE
{
    WS_XML_NODE node;
    WS_XML_STRING* prefix;
    WS_XML_STRING* localName;
    WS_XML_STRING* ns;
    uint attributeCount;
    WS_XML_ATTRIBUTE** attributes;
    BOOL isEmpty;
}

struct WS_XML_TEXT_NODE
{
    WS_XML_NODE node;
    WS_XML_TEXT* text;
}

struct WS_XML_COMMENT_NODE
{
    WS_XML_NODE node;
    WS_XML_STRING value;
}

struct WS_XML_READER_INPUT
{
    WS_XML_READER_INPUT_TYPE inputType;
}

struct WS_XML_READER_BUFFER_INPUT
{
    WS_XML_READER_INPUT input;
    void* encodedData;
    uint encodedDataSize;
}

struct WS_XML_READER_STREAM_INPUT
{
    WS_XML_READER_INPUT input;
    WS_READ_CALLBACK readCallback;
    void* readCallbackState;
}

struct WS_XML_READER_ENCODING
{
    WS_XML_READER_ENCODING_TYPE encodingType;
}

struct WS_XML_READER_TEXT_ENCODING
{
    WS_XML_READER_ENCODING encoding;
    WS_CHARSET charSet;
}

struct WS_XML_READER_BINARY_ENCODING
{
    WS_XML_READER_ENCODING encoding;
    WS_XML_DICTIONARY* staticDictionary;
    WS_XML_DICTIONARY* dynamicDictionary;
}

struct WS_STRING
{
    uint length;
    ushort* chars;
}

struct WS_XML_READER_MTOM_ENCODING
{
    WS_XML_READER_ENCODING encoding;
    WS_XML_READER_ENCODING* textEncoding;
    BOOL readMimeHeader;
    WS_STRING startInfo;
    WS_STRING boundary;
    WS_STRING startUri;
}

struct WS_XML_READER_RAW_ENCODING
{
    WS_XML_READER_ENCODING encoding;
}

struct WS_XML_WRITER_ENCODING
{
    WS_XML_WRITER_ENCODING_TYPE encodingType;
}

struct WS_XML_WRITER_TEXT_ENCODING
{
    WS_XML_WRITER_ENCODING encoding;
    WS_CHARSET charSet;
}

struct WS_XML_WRITER_BINARY_ENCODING
{
    WS_XML_WRITER_ENCODING encoding;
    WS_XML_DICTIONARY* staticDictionary;
    WS_DYNAMIC_STRING_CALLBACK dynamicStringCallback;
    void* dynamicStringCallbackState;
}

struct WS_XML_WRITER_MTOM_ENCODING
{
    WS_XML_WRITER_ENCODING encoding;
    WS_XML_WRITER_ENCODING* textEncoding;
    BOOL writeMimeHeader;
    WS_STRING boundary;
    WS_STRING startInfo;
    WS_STRING startUri;
    uint maxInlineByteCount;
}

struct WS_XML_WRITER_RAW_ENCODING
{
    WS_XML_WRITER_ENCODING encoding;
}

struct WS_XML_WRITER_OUTPUT
{
    WS_XML_WRITER_OUTPUT_TYPE outputType;
}

struct WS_XML_WRITER_BUFFER_OUTPUT
{
    WS_XML_WRITER_OUTPUT output;
}

struct WS_XML_WRITER_STREAM_OUTPUT
{
    WS_XML_WRITER_OUTPUT output;
    WS_WRITE_CALLBACK writeCallback;
    void* writeCallbackState;
}

struct WS_XML_WRITER_PROPERTIES
{
    WS_XML_WRITER_PROPERTY* properties;
    uint propertyCount;
}

struct WS_XML_READER_PROPERTIES
{
    WS_XML_READER_PROPERTY* properties;
    uint propertyCount;
}

struct WS_ASYNC_CONTEXT
{
    WS_ASYNC_CALLBACK callback;
    void* callbackState;
}

struct WS_ASYNC_STATE
{
    void* internal0;
    void* internal1;
    void* internal2;
    void* internal3;
    void* internal4;
}

struct WS_ASYNC_OPERATION
{
    WS_ASYNC_FUNCTION function;
}

struct WS_CHANNEL_PROPERTY
{
    WS_CHANNEL_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_CUSTOM_HTTP_PROXY
{
    WS_STRING servers;
    WS_STRING bypass;
}

struct WS_CHANNEL_PROPERTIES
{
    WS_CHANNEL_PROPERTY* properties;
    uint propertyCount;
}

struct WS_CUSTOM_CHANNEL_CALLBACKS
{
    WS_CREATE_CHANNEL_CALLBACK createChannelCallback;
    WS_FREE_CHANNEL_CALLBACK freeChannelCallback;
    WS_RESET_CHANNEL_CALLBACK resetChannelCallback;
    WS_OPEN_CHANNEL_CALLBACK openChannelCallback;
    WS_CLOSE_CHANNEL_CALLBACK closeChannelCallback;
    WS_ABORT_CHANNEL_CALLBACK abortChannelCallback;
    WS_GET_CHANNEL_PROPERTY_CALLBACK getChannelPropertyCallback;
    WS_SET_CHANNEL_PROPERTY_CALLBACK setChannelPropertyCallback;
    WS_WRITE_MESSAGE_START_CALLBACK writeMessageStartCallback;
    WS_WRITE_MESSAGE_END_CALLBACK writeMessageEndCallback;
    WS_READ_MESSAGE_START_CALLBACK readMessageStartCallback;
    WS_READ_MESSAGE_END_CALLBACK readMessageEndCallback;
    WS_ABANDON_MESSAGE_CALLBACK abandonMessageCallback;
    WS_SHUTDOWN_SESSION_CHANNEL_CALLBACK shutdownSessionChannelCallback;
}

struct WS_HTTP_HEADER_MAPPING
{
    WS_XML_STRING headerName;
    uint headerMappingOptions;
}

struct WS_HTTP_MESSAGE_MAPPING
{
    uint requestMappingOptions;
    uint responseMappingOptions;
    WS_HTTP_HEADER_MAPPING** requestHeaderMappings;
    uint requestHeaderMappingCount;
    WS_HTTP_HEADER_MAPPING** responseHeaderMappings;
    uint responseHeaderMappingCount;
}

struct WS_ELEMENT_DESCRIPTION
{
    WS_XML_STRING* elementLocalName;
    WS_XML_STRING* elementNs;
    WS_TYPE type;
    void* typeDescription;
}

struct WS_MESSAGE_DESCRIPTION
{
    WS_XML_STRING* action;
    WS_ELEMENT_DESCRIPTION* bodyElementDescription;
}

struct WS_CHANNEL_ENCODER
{
    void* createContext;
    WS_CREATE_ENCODER_CALLBACK createEncoderCallback;
    WS_ENCODER_GET_CONTENT_TYPE_CALLBACK encoderGetContentTypeCallback;
    WS_ENCODER_START_CALLBACK encoderStartCallback;
    WS_ENCODER_ENCODE_CALLBACK encoderEncodeCallback;
    WS_ENCODER_END_CALLBACK encoderEndCallback;
    WS_FREE_ENCODER_CALLBACK freeEncoderCallback;
}

struct WS_CHANNEL_DECODER
{
    void* createContext;
    WS_CREATE_DECODER_CALLBACK createDecoderCallback;
    WS_DECODER_GET_CONTENT_TYPE_CALLBACK decoderGetContentTypeCallback;
    WS_DECODER_START_CALLBACK decoderStartCallback;
    WS_DECODER_DECODE_CALLBACK decoderDecodeCallback;
    WS_DECODER_END_CALLBACK decoderEndCallback;
    WS_FREE_DECODER_CALLBACK freeDecoderCallback;
}

struct WS_HTTP_REDIRECT_CALLBACK_CONTEXT
{
    WS_HTTP_REDIRECT_CALLBACK callback;
    void* state;
}

struct WS_ENDPOINT_IDENTITY
{
    WS_ENDPOINT_IDENTITY_TYPE identityType;
}

struct WS_ENDPOINT_ADDRESS
{
    WS_STRING url;
    WS_XML_BUFFER* headers;
    WS_XML_BUFFER* extensions;
    WS_ENDPOINT_IDENTITY* identity;
}

struct WS_DNS_ENDPOINT_IDENTITY
{
    WS_ENDPOINT_IDENTITY identity;
    WS_STRING dns;
}

struct WS_UPN_ENDPOINT_IDENTITY
{
    WS_ENDPOINT_IDENTITY identity;
    WS_STRING upn;
}

struct WS_SPN_ENDPOINT_IDENTITY
{
    WS_ENDPOINT_IDENTITY identity;
    WS_STRING spn;
}

struct WS_BYTES
{
    uint length;
    ubyte* bytes;
}

struct WS_RSA_ENDPOINT_IDENTITY
{
    WS_ENDPOINT_IDENTITY identity;
    WS_BYTES modulus;
    WS_BYTES exponent;
}

struct WS_CERT_ENDPOINT_IDENTITY
{
    WS_ENDPOINT_IDENTITY identity;
    WS_BYTES rawCertificateData;
}

struct WS_UNKNOWN_ENDPOINT_IDENTITY
{
    WS_ENDPOINT_IDENTITY identity;
    WS_XML_BUFFER* element;
}

struct WS_ERROR_PROPERTY
{
    WS_ERROR_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_FAULT_REASON
{
    WS_STRING text;
    WS_STRING lang;
}

struct WS_FAULT_CODE
{
    WS_XML_QNAME value;
    WS_FAULT_CODE* subCode;
}

struct WS_FAULT
{
    WS_FAULT_CODE* code;
    WS_FAULT_REASON* reasons;
    uint reasonCount;
    WS_STRING actor;
    WS_STRING node;
    WS_XML_BUFFER* detail;
}

struct WS_FAULT_DETAIL_DESCRIPTION
{
    WS_XML_STRING* action;
    WS_ELEMENT_DESCRIPTION* detailElementDescription;
}

struct WS_HEAP_PROPERTY
{
    WS_HEAP_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_HEAP_PROPERTIES
{
    WS_HEAP_PROPERTY* properties;
    uint propertyCount;
}

struct WS_LISTENER_PROPERTY
{
    WS_LISTENER_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_DISALLOWED_USER_AGENT_SUBSTRINGS
{
    uint subStringCount;
    WS_STRING** subStrings;
}

struct WS_LISTENER_PROPERTIES
{
    WS_LISTENER_PROPERTY* properties;
    uint propertyCount;
}

struct WS_HOST_NAMES
{
    WS_STRING* hostNames;
    uint hostNameCount;
}

struct WS_CUSTOM_LISTENER_CALLBACKS
{
    WS_CREATE_LISTENER_CALLBACK createListenerCallback;
    WS_FREE_LISTENER_CALLBACK freeListenerCallback;
    WS_RESET_LISTENER_CALLBACK resetListenerCallback;
    WS_OPEN_LISTENER_CALLBACK openListenerCallback;
    WS_CLOSE_LISTENER_CALLBACK closeListenerCallback;
    WS_ABORT_LISTENER_CALLBACK abortListenerCallback;
    WS_GET_LISTENER_PROPERTY_CALLBACK getListenerPropertyCallback;
    WS_SET_LISTENER_PROPERTY_CALLBACK setListenerPropertyCallback;
    WS_CREATE_CHANNEL_FOR_LISTENER_CALLBACK createChannelForListenerCallback;
    WS_ACCEPT_CHANNEL_CALLBACK acceptChannelCallback;
}

struct WS_MESSAGE_PROPERTY
{
    WS_MESSAGE_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_MESSAGE_PROPERTIES
{
    WS_MESSAGE_PROPERTY* properties;
    uint propertyCount;
}

struct WS_SECURITY_ALGORITHM_PROPERTY
{
    WS_SECURITY_ALGORITHM_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_SECURITY_ALGORITHM_SUITE
{
    WS_SECURITY_ALGORITHM_ID canonicalizationAlgorithm;
    WS_SECURITY_ALGORITHM_ID digestAlgorithm;
    WS_SECURITY_ALGORITHM_ID symmetricSignatureAlgorithm;
    WS_SECURITY_ALGORITHM_ID asymmetricSignatureAlgorithm;
    WS_SECURITY_ALGORITHM_ID encryptionAlgorithm;
    WS_SECURITY_ALGORITHM_ID keyDerivationAlgorithm;
    WS_SECURITY_ALGORITHM_ID symmetricKeyWrapAlgorithm;
    WS_SECURITY_ALGORITHM_ID asymmetricKeyWrapAlgorithm;
    uint minSymmetricKeyLength;
    uint maxSymmetricKeyLength;
    uint minAsymmetricKeyLength;
    uint maxAsymmetricKeyLength;
    WS_SECURITY_ALGORITHM_PROPERTY* properties;
    uint propertyCount;
}

struct WS_SECURITY_PROPERTY
{
    WS_SECURITY_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_SECURITY_PROPERTIES
{
    WS_SECURITY_PROPERTY* properties;
    uint propertyCount;
}

struct WS_SECURITY_BINDING_PROPERTY
{
    WS_SECURITY_BINDING_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_SECURITY_BINDING_PROPERTIES
{
    WS_SECURITY_BINDING_PROPERTY* properties;
    uint propertyCount;
}

struct WS_SERVICE_SECURITY_IDENTITIES
{
    WS_STRING* serviceIdentities;
    uint serviceIdentityCount;
}

struct WS_CERTIFICATE_VALIDATION_CALLBACK_CONTEXT
{
    WS_CERTIFICATE_VALIDATION_CALLBACK callback;
    void* state;
}

struct WS_CERT_CREDENTIAL
{
    WS_CERT_CREDENTIAL_TYPE credentialType;
}

struct WS_SUBJECT_NAME_CERT_CREDENTIAL
{
    WS_CERT_CREDENTIAL credential;
    uint storeLocation;
    WS_STRING storeName;
    WS_STRING subjectName;
}

struct WS_THUMBPRINT_CERT_CREDENTIAL
{
    WS_CERT_CREDENTIAL credential;
    uint storeLocation;
    WS_STRING storeName;
    WS_STRING thumbprint;
}

struct WS_CUSTOM_CERT_CREDENTIAL
{
    WS_CERT_CREDENTIAL credential;
    WS_GET_CERT_CALLBACK getCertCallback;
    void* getCertCallbackState;
    WS_CERT_ISSUER_LIST_NOTIFICATION_CALLBACK certIssuerListNotificationCallback;
    void* certIssuerListNotificationCallbackState;
}

struct WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
{
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL_TYPE credentialType;
}

struct WS_STRING_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
{
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL credential;
    WS_STRING username;
    WS_STRING password;
    WS_STRING domain;
}

struct WS_DEFAULT_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
{
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL credential;
}

struct WS_OPAQUE_WINDOWS_INTEGRATED_AUTH_CREDENTIAL
{
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL credential;
    void* opaqueAuthIdentity;
}

struct WS_USERNAME_CREDENTIAL
{
    WS_USERNAME_CREDENTIAL_TYPE credentialType;
}

struct WS_STRING_USERNAME_CREDENTIAL
{
    WS_USERNAME_CREDENTIAL credential;
    WS_STRING username;
    WS_STRING password;
}

struct WS_SECURITY_KEY_HANDLE
{
    WS_SECURITY_KEY_HANDLE_TYPE keyHandleType;
}

struct WS_RAW_SYMMETRIC_SECURITY_KEY_HANDLE
{
    WS_SECURITY_KEY_HANDLE keyHandle;
    WS_BYTES rawKeyBytes;
}

struct WS_NCRYPT_ASYMMETRIC_SECURITY_KEY_HANDLE
{
    WS_SECURITY_KEY_HANDLE keyHandle;
    uint asymmetricKey;
}

struct WS_CAPI_ASYMMETRIC_SECURITY_KEY_HANDLE
{
    WS_SECURITY_KEY_HANDLE keyHandle;
    uint provider;
    uint keySpec;
}

struct WS_SECURITY_BINDING
{
    WS_SECURITY_BINDING_TYPE bindingType;
    WS_SECURITY_BINDING_PROPERTY* properties;
    uint propertyCount;
}

struct WS_SSL_TRANSPORT_SECURITY_BINDING
{
    WS_SECURITY_BINDING binding;
    WS_CERT_CREDENTIAL* localCertCredential;
}

struct WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING
{
    WS_SECURITY_BINDING binding;
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
}

struct WS_NAMEDPIPE_SSPI_TRANSPORT_SECURITY_BINDING
{
    WS_SECURITY_BINDING binding;
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
}

struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING
{
    WS_SECURITY_BINDING binding;
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
}

struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING
{
    WS_SECURITY_BINDING binding;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
}

struct WS_USERNAME_MESSAGE_SECURITY_BINDING
{
    WS_SECURITY_BINDING binding;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
    WS_USERNAME_CREDENTIAL* clientCredential;
    WS_VALIDATE_PASSWORD_CALLBACK passwordValidator;
    void* passwordValidatorCallbackState;
}

struct WS_SECURITY_DESCRIPTION
{
    WS_SECURITY_BINDING** securityBindings;
    uint securityBindingCount;
    WS_SECURITY_PROPERTY* properties;
    uint propertyCount;
}

struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING
{
    WS_SECURITY_BINDING binding;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
    WS_SECURITY_DESCRIPTION* bootstrapSecurityDescription;
}

struct WS_SECURITY_CONTEXT_PROPERTY
{
    WS_SECURITY_CONTEXT_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_XML_SECURITY_TOKEN_PROPERTY
{
    WS_XML_SECURITY_TOKEN_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_XML_TOKEN_MESSAGE_SECURITY_BINDING
{
    WS_SECURITY_BINDING binding;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
    WS_SECURITY_TOKEN* xmlToken;
}

struct WS_SAML_AUTHENTICATOR
{
    WS_SAML_AUTHENTICATOR_TYPE authenticatorType;
}

struct WS_CERT_SIGNED_SAML_AUTHENTICATOR
{
    WS_SAML_AUTHENTICATOR authenticator;
    const(CERT_CONTEXT)** trustedIssuerCerts;
    uint trustedIssuerCertCount;
    const(CERT_CONTEXT)* decryptionCert;
    WS_VALIDATE_SAML_CALLBACK samlValidator;
    void* samlValidatorCallbackState;
}

struct WS_SAML_MESSAGE_SECURITY_BINDING
{
    WS_SECURITY_BINDING binding;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
    WS_SAML_AUTHENTICATOR* authenticator;
}

struct WS_REQUEST_SECURITY_TOKEN_PROPERTY
{
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_ANY_ATTRIBUTE
{
    WS_XML_STRING localName;
    WS_XML_STRING ns;
    WS_XML_TEXT* value;
}

struct WS_ANY_ATTRIBUTES
{
    WS_ANY_ATTRIBUTE* attributes;
    uint attributeCount;
}

struct WS_BOOL_DESCRIPTION
{
    BOOL value;
}

struct WS_GUID_DESCRIPTION
{
    Guid value;
}

struct WS_DATETIME_DESCRIPTION
{
    WS_DATETIME minValue;
    WS_DATETIME maxValue;
}

struct WS_DURATION
{
    BOOL negative;
    uint years;
    uint months;
    uint days;
    uint hours;
    uint minutes;
    uint seconds;
    uint milliseconds;
    uint ticks;
}

struct WS_DURATION_DESCRIPTION
{
    WS_DURATION minValue;
    WS_DURATION maxValue;
    WS_DURATION_COMPARISON_CALLBACK comparer;
}

struct WS_TIMESPAN_DESCRIPTION
{
    WS_TIMESPAN minValue;
    WS_TIMESPAN maxValue;
}

struct WS_UNIQUE_ID_DESCRIPTION
{
    uint minCharCount;
    uint maxCharCount;
}

struct WS_STRING_DESCRIPTION
{
    uint minCharCount;
    uint maxCharCount;
}

struct WS_XML_STRING_DESCRIPTION
{
    uint minByteCount;
    uint maxByteCount;
}

struct WS_XML_QNAME_DESCRIPTION
{
    uint minLocalNameByteCount;
    uint maxLocalNameByteCount;
    uint minNsByteCount;
    uint maxNsByteCount;
}

struct WS_CHAR_ARRAY_DESCRIPTION
{
    uint minCharCount;
    uint maxCharCount;
}

struct WS_BYTE_ARRAY_DESCRIPTION
{
    uint minByteCount;
    uint maxByteCount;
}

struct WS_UTF8_ARRAY_DESCRIPTION
{
    uint minByteCount;
    uint maxByteCount;
}

struct WS_WSZ_DESCRIPTION
{
    uint minCharCount;
    uint maxCharCount;
}

struct WS_INT8_DESCRIPTION
{
    byte minValue;
    byte maxValue;
}

struct WS_UINT8_DESCRIPTION
{
    ubyte minValue;
    ubyte maxValue;
}

struct WS_INT16_DESCRIPTION
{
    short minValue;
    short maxValue;
}

struct WS_UINT16_DESCRIPTION
{
    ushort minValue;
    ushort maxValue;
}

struct WS_INT32_DESCRIPTION
{
    int minValue;
    int maxValue;
}

struct WS_UINT32_DESCRIPTION
{
    uint minValue;
    uint maxValue;
}

struct WS_INT64_DESCRIPTION
{
    long minValue;
    long maxValue;
}

struct WS_UINT64_DESCRIPTION
{
    ulong minValue;
    ulong maxValue;
}

struct WS_FLOAT_DESCRIPTION
{
    float minValue;
    float maxValue;
}

struct WS_DOUBLE_DESCRIPTION
{
    double minValue;
    double maxValue;
}

struct WS_DECIMAL_DESCRIPTION
{
    DECIMAL minValue;
    DECIMAL maxValue;
}

struct WS_BYTES_DESCRIPTION
{
    uint minByteCount;
    uint maxByteCount;
}

struct WS_ENUM_VALUE
{
    int value;
    WS_XML_STRING* name;
}

struct WS_ENUM_DESCRIPTION
{
    WS_ENUM_VALUE* values;
    uint valueCount;
    uint maxByteCount;
    uint* nameIndices;
}

struct WS_ITEM_RANGE
{
    uint minItemCount;
    uint maxItemCount;
}

struct WS_DEFAULT_VALUE
{
    void* value;
    uint valueSize;
}

struct WS_FIELD_DESCRIPTION
{
    WS_FIELD_MAPPING mapping;
    WS_XML_STRING* localName;
    WS_XML_STRING* ns;
    WS_TYPE type;
    void* typeDescription;
    uint offset;
    uint options;
    WS_DEFAULT_VALUE* defaultValue;
    uint countOffset;
    WS_XML_STRING* itemLocalName;
    WS_XML_STRING* itemNs;
    WS_ITEM_RANGE* itemRange;
}

struct WS_UNION_FIELD_DESCRIPTION
{
    int value;
    WS_FIELD_DESCRIPTION field;
}

struct WS_STRUCT_DESCRIPTION
{
    uint size;
    uint alignment;
    WS_FIELD_DESCRIPTION** fields;
    uint fieldCount;
    WS_XML_STRING* typeLocalName;
    WS_XML_STRING* typeNs;
    WS_STRUCT_DESCRIPTION* parentType;
    WS_STRUCT_DESCRIPTION** subTypes;
    uint subTypeCount;
    uint structOptions;
}

struct WS_UNION_DESCRIPTION
{
    uint size;
    uint alignment;
    WS_UNION_FIELD_DESCRIPTION** fields;
    uint fieldCount;
    uint enumOffset;
    int noneEnumValue;
    uint* valueIndices;
}

struct WS_ENDPOINT_ADDRESS_DESCRIPTION
{
    WS_ADDRESSING_VERSION addressingVersion;
}

struct WS_FAULT_DESCRIPTION
{
    WS_ENVELOPE_VERSION envelopeVersion;
}

struct WS_VOID_DESCRIPTION
{
    uint size;
}

struct WS_CUSTOM_TYPE_DESCRIPTION
{
    uint size;
    uint alignment;
    WS_READ_TYPE_CALLBACK readCallback;
    WS_WRITE_TYPE_CALLBACK writeCallback;
    void* descriptionData;
    WS_IS_DEFAULT_VALUE_CALLBACK isDefaultValueCallback;
}

struct WS_ATTRIBUTE_DESCRIPTION
{
    WS_XML_STRING* attributeLocalName;
    WS_XML_STRING* attributeNs;
    WS_TYPE type;
    void* typeDescription;
}

struct WS_PARAMETER_DESCRIPTION
{
    WS_PARAMETER_TYPE parameterType;
    ushort inputMessageIndex;
    ushort outputMessageIndex;
}

struct WS_OPERATION_DESCRIPTION
{
    uint versionInfo;
    WS_MESSAGE_DESCRIPTION* inputMessageDescription;
    WS_MESSAGE_DESCRIPTION* outputMessageDescription;
    uint inputMessageOptions;
    uint outputMessageOptions;
    ushort parameterCount;
    WS_PARAMETER_DESCRIPTION* parameterDescription;
    WS_SERVICE_STUB_CALLBACK stubCallback;
    WS_OPERATION_STYLE style;
}

struct WS_CONTRACT_DESCRIPTION
{
    uint operationCount;
    WS_OPERATION_DESCRIPTION** operations;
}

struct WS_SERVICE_CONTRACT
{
    const(WS_CONTRACT_DESCRIPTION)* contractDescription;
    WS_SERVICE_MESSAGE_RECEIVE_CALLBACK defaultMessageHandlerCallback;
    const(void)* methodTable;
}

struct WS_SERVICE_PROPERTY
{
    WS_SERVICE_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_SERVICE_ENDPOINT_PROPERTY
{
    WS_SERVICE_ENDPOINT_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_SERVICE_PROPERTY_ACCEPT_CALLBACK
{
    WS_SERVICE_ACCEPT_CHANNEL_CALLBACK callback;
}

struct WS_SERVICE_METADATA_DOCUMENT
{
    WS_XML_STRING* content;
    WS_STRING* name;
}

struct WS_SERVICE_METADATA
{
    uint documentCount;
    WS_SERVICE_METADATA_DOCUMENT** documents;
    WS_XML_STRING* serviceName;
    WS_XML_STRING* serviceNs;
}

struct WS_SERVICE_PROPERTY_CLOSE_CALLBACK
{
    WS_SERVICE_CLOSE_CHANNEL_CALLBACK callback;
}

struct WS_SERVICE_ENDPOINT_METADATA
{
    WS_XML_STRING* portName;
    WS_XML_STRING* bindingName;
    WS_XML_STRING* bindingNs;
}

struct WS_SERVICE_ENDPOINT
{
    WS_ENDPOINT_ADDRESS address;
    WS_CHANNEL_BINDING channelBinding;
    WS_CHANNEL_TYPE channelType;
    const(WS_SECURITY_DESCRIPTION)* securityDescription;
    const(WS_SERVICE_CONTRACT)* contract;
    WS_SERVICE_SECURITY_CALLBACK authorizationCallback;
    const(WS_SERVICE_ENDPOINT_PROPERTY)* properties;
    uint propertyCount;
    WS_CHANNEL_PROPERTIES channelProperties;
}

struct WS_PROXY_PROPERTY
{
    WS_PROXY_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_PROXY_MESSAGE_CALLBACK_CONTEXT
{
    WS_PROXY_MESSAGE_CALLBACK callback;
    void* state;
}

struct WS_CALL_PROPERTY
{
    WS_CALL_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_URL
{
    WS_URL_SCHEME_TYPE scheme;
}

struct WS_HTTP_URL
{
    WS_URL url;
    WS_STRING host;
    ushort port;
    WS_STRING portAsString;
    WS_STRING path;
    WS_STRING query;
    WS_STRING fragment;
}

struct WS_HTTPS_URL
{
    WS_URL url;
    WS_STRING host;
    ushort port;
    WS_STRING portAsString;
    WS_STRING path;
    WS_STRING query;
    WS_STRING fragment;
}

struct WS_NETTCP_URL
{
    WS_URL url;
    WS_STRING host;
    ushort port;
    WS_STRING portAsString;
    WS_STRING path;
    WS_STRING query;
    WS_STRING fragment;
}

struct WS_SOAPUDP_URL
{
    WS_URL url;
    WS_STRING host;
    ushort port;
    WS_STRING portAsString;
    WS_STRING path;
    WS_STRING query;
    WS_STRING fragment;
}

struct WS_NETPIPE_URL
{
    WS_URL url;
    WS_STRING host;
    ushort port;
    WS_STRING portAsString;
    WS_STRING path;
    WS_STRING query;
    WS_STRING fragment;
}

struct WS_UNIQUE_ID
{
    WS_STRING uri;
    Guid guid;
}

struct WS_BUFFERS
{
    uint bufferCount;
    WS_BYTES* buffers;
}

struct WS_METADATA_ENDPOINT
{
    WS_ENDPOINT_ADDRESS endpointAddress;
    WS_POLICY* endpointPolicy;
    WS_XML_STRING* portName;
    WS_XML_STRING* serviceName;
    WS_XML_STRING* serviceNs;
    WS_XML_STRING* bindingName;
    WS_XML_STRING* bindingNs;
    WS_XML_STRING* portTypeName;
    WS_XML_STRING* portTypeNs;
}

struct WS_METADATA_ENDPOINTS
{
    WS_METADATA_ENDPOINT* endpoints;
    uint endpointCount;
}

struct WS_METADATA_PROPERTY
{
    WS_METADATA_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_POLICY_PROPERTY
{
    WS_POLICY_PROPERTY_ID id;
    void* value;
    uint valueSize;
}

struct WS_POLICY_PROPERTIES
{
    WS_POLICY_PROPERTY* properties;
    uint propertyCount;
}

struct WS_SECURITY_BINDING_PROPERTY_CONSTRAINT
{
    WS_SECURITY_BINDING_PROPERTY_ID id;
    void* allowedValues;
    uint allowedValuesSize;
    _out_e__Struct out;
}

struct WS_SECURITY_BINDING_CONSTRAINT
{
    WS_SECURITY_BINDING_CONSTRAINT_TYPE type;
    WS_SECURITY_BINDING_PROPERTY_CONSTRAINT* propertyConstraints;
    uint propertyConstraintCount;
}

struct WS_SSL_TRANSPORT_SECURITY_BINDING_CONSTRAINT
{
    WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
    _out_e__Struct out;
}

struct WS_USERNAME_MESSAGE_SECURITY_BINDING_CONSTRAINT
{
    WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
}

struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING_CONSTRAINT
{
    WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
}

struct WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_CONSTRAINT
{
    WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
}

struct WS_CERT_MESSAGE_SECURITY_BINDING_CONSTRAINT
{
    WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
}

struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_CONSTRAINT
{
    WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
}

struct WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT
{
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_ID id;
    void* allowedValues;
    uint allowedValuesSize;
    _out_e__Struct out;
}

struct WS_ISSUED_TOKEN_MESSAGE_SECURITY_BINDING_CONSTRAINT
{
    WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
    WS_XML_STRING* claimConstraints;
    uint claimConstraintCount;
    WS_REQUEST_SECURITY_TOKEN_PROPERTY_CONSTRAINT* requestSecurityTokenPropertyConstraints;
    uint requestSecurityTokenPropertyConstraintCount;
    _out_e__Struct out;
}

struct WS_SECURITY_PROPERTY_CONSTRAINT
{
    WS_SECURITY_PROPERTY_ID id;
    void* allowedValues;
    uint allowedValuesSize;
    _out_e__Struct out;
}

struct WS_SECURITY_CONSTRAINTS
{
    WS_SECURITY_PROPERTY_CONSTRAINT* securityPropertyConstraints;
    uint securityPropertyConstraintCount;
    WS_SECURITY_BINDING_CONSTRAINT** securityBindingConstraints;
    uint securityBindingConstraintCount;
}

struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_CONSTRAINT
{
    WS_SECURITY_BINDING_CONSTRAINT bindingConstraint;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
    WS_SECURITY_CONSTRAINTS* bootstrapSecurityConstraint;
}

struct WS_CHANNEL_PROPERTY_CONSTRAINT
{
    WS_CHANNEL_PROPERTY_ID id;
    void* allowedValues;
    uint allowedValuesSize;
    _out_e__Struct out;
}

struct WS_POLICY_EXTENSION
{
    WS_POLICY_EXTENSION_TYPE type;
}

struct WS_ENDPOINT_POLICY_EXTENSION
{
    WS_POLICY_EXTENSION policyExtension;
    WS_XML_STRING* assertionName;
    WS_XML_STRING* assertionNs;
    _out_e__Struct out;
}

struct WS_POLICY_CONSTRAINTS
{
    WS_CHANNEL_BINDING channelBinding;
    WS_CHANNEL_PROPERTY_CONSTRAINT* channelPropertyConstraints;
    uint channelPropertyConstraintCount;
    WS_SECURITY_CONSTRAINTS* securityConstraints;
    WS_POLICY_EXTENSION** policyExtensions;
    uint policyExtensionCount;
}

struct WS_HTTP_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
}

struct WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
}

struct WS_HTTP_SSL_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
}

struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
}

struct WS_HTTP_HEADER_AUTH_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION httpHeaderAuthSecurityBinding;
}

struct WS_HTTP_SSL_HEADER_AUTH_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_POLICY_DESCRIPTION httpHeaderAuthSecurityBinding;
}

struct WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
}

struct WS_HTTP_SSL_USERNAME_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
    WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION usernameMessageSecurityBinding;
}

struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
}

struct WS_HTTP_SSL_KERBEROS_APREQ_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION kerberosApreqMessageSecurityBinding;
}

struct WS_TCP_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
}

struct WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
}

struct WS_TCP_SSPI_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
}

struct WS_TCP_SSPI_USERNAME_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
    WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION usernameMessageSecurityBinding;
}

struct WS_TCP_SSPI_KERBEROS_APREQ_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION kerberosApreqMessageSecurityBinding;
}

struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    WS_MESSAGE_SECURITY_USAGE bindingUsage;
}

struct WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION
{
    WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION securityContextMessageSecurityBinding;
    WS_SECURITY_PROPERTIES securityProperties;
}

struct WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION kerberosApreqMessageSecurityBinding;
    WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION securityContextSecurityBinding;
}

struct WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSPI_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sspiTransportSecurityBinding;
    WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION usernameMessageSecurityBinding;
    WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION securityContextSecurityBinding;
}

struct WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
    WS_USERNAME_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION usernameMessageSecurityBinding;
    WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION securityContextSecurityBinding;
}

struct WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_POLICY_DESCRIPTION
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_POLICY_DESCRIPTION sslTransportSecurityBinding;
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_POLICY_DESCRIPTION kerberosApreqMessageSecurityBinding;
    WS_SECURITY_CONTEXT_SECURITY_BINDING_POLICY_DESCRIPTION securityContextSecurityBinding;
}

struct WS_HTTP_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
}

struct WS_TCP_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
}

struct WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    WS_CERT_CREDENTIAL* localCertCredential;
}

struct WS_HTTP_SSL_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
}

struct WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
}

struct WS_HTTP_HEADER_AUTH_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE httpHeaderAuthSecurityBinding;
}

struct WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
}

struct WS_TCP_SSPI_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
}

struct WS_HTTP_SSL_HEADER_AUTH_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
    WS_HTTP_HEADER_AUTH_SECURITY_BINDING_TEMPLATE httpHeaderAuthSecurityBinding;
}

struct WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    WS_USERNAME_CREDENTIAL* clientCredential;
    WS_VALIDATE_PASSWORD_CALLBACK passwordValidator;
    void* passwordValidatorCallbackState;
}

struct WS_HTTP_SSL_USERNAME_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
    WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE usernameMessageSecurityBinding;
}

struct WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
    WS_WINDOWS_INTEGRATED_AUTH_CREDENTIAL* clientCredential;
}

struct WS_HTTP_SSL_KERBEROS_APREQ_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE kerberosApreqMessageSecurityBinding;
}

struct WS_TCP_SSPI_USERNAME_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
    WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE usernameMessageSecurityBinding;
}

struct WS_TCP_SSPI_KERBEROS_APREQ_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE kerberosApreqMessageSecurityBinding;
}

struct WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE
{
    WS_SECURITY_BINDING_PROPERTIES securityBindingProperties;
}

struct WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE
{
    WS_SECURITY_CONTEXT_MESSAGE_SECURITY_BINDING_TEMPLATE securityContextMessageSecurityBinding;
    WS_SECURITY_PROPERTIES securityProperties;
}

struct WS_HTTP_SSL_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
    WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE usernameMessageSecurityBinding;
    WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE securityContextSecurityBinding;
}

struct WS_HTTP_SSL_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_SSL_TRANSPORT_SECURITY_BINDING_TEMPLATE sslTransportSecurityBinding;
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE kerberosApreqMessageSecurityBinding;
    WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE securityContextSecurityBinding;
}

struct WS_TCP_SSPI_USERNAME_SECURITY_CONTEXT_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
    WS_USERNAME_MESSAGE_SECURITY_BINDING_TEMPLATE usernameMessageSecurityBinding;
    WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE securityContextSecurityBinding;
}

struct WS_TCP_SSPI_KERBEROS_APREQ_SECURITY_CONTEXT_BINDING_TEMPLATE
{
    WS_CHANNEL_PROPERTIES channelProperties;
    WS_SECURITY_PROPERTIES securityProperties;
    WS_TCP_SSPI_TRANSPORT_SECURITY_BINDING_TEMPLATE sspiTransportSecurityBinding;
    WS_KERBEROS_APREQ_MESSAGE_SECURITY_BINDING_TEMPLATE kerberosApreqMessageSecurityBinding;
    WS_SECURITY_CONTEXT_SECURITY_BINDING_TEMPLATE securityContextSecurityBinding;
}

const GUID IID_IContentPrefetcherTaskTrigger = {0x1B35A14A, 0x6094, 0x4799, [0xA6, 0x0E, 0xE4, 0x74, 0xE1, 0x5D, 0x4D, 0xC9]};
@GUID(0x1B35A14A, 0x6094, 0x4799, [0xA6, 0x0E, 0xE4, 0x74, 0xE1, 0x5D, 0x4D, 0xC9]);
interface IContentPrefetcherTaskTrigger : IInspectable
{
    HRESULT TriggerContentPrefetcherTask(const(wchar)* packageFullName);
    HRESULT IsRegisteredForContentPrefetch(const(wchar)* packageFullName, ubyte* isRegistered);
}

struct WEBAUTHN_RP_ENTITY_INFORMATION
{
    uint dwVersion;
    const(wchar)* pwszId;
    const(wchar)* pwszName;
    const(wchar)* pwszIcon;
}

struct WEBAUTHN_USER_ENTITY_INFORMATION
{
    uint dwVersion;
    uint cbId;
    ubyte* pbId;
    const(wchar)* pwszName;
    const(wchar)* pwszIcon;
    const(wchar)* pwszDisplayName;
}

struct WEBAUTHN_CLIENT_DATA
{
    uint dwVersion;
    uint cbClientDataJSON;
    ubyte* pbClientDataJSON;
    const(wchar)* pwszHashAlgId;
}

struct WEBAUTHN_COSE_CREDENTIAL_PARAMETER
{
    uint dwVersion;
    const(wchar)* pwszCredentialType;
    int lAlg;
}

struct WEBAUTHN_COSE_CREDENTIAL_PARAMETERS
{
    uint cCredentialParameters;
    WEBAUTHN_COSE_CREDENTIAL_PARAMETER* pCredentialParameters;
}

struct WEBAUTHN_CREDENTIAL
{
    uint dwVersion;
    uint cbId;
    ubyte* pbId;
    const(wchar)* pwszCredentialType;
}

struct WEBAUTHN_CREDENTIALS
{
    uint cCredentials;
    WEBAUTHN_CREDENTIAL* pCredentials;
}

struct WEBAUTHN_CREDENTIAL_EX
{
    uint dwVersion;
    uint cbId;
    ubyte* pbId;
    const(wchar)* pwszCredentialType;
    uint dwTransports;
}

struct WEBAUTHN_CREDENTIAL_LIST
{
    uint cCredentials;
    WEBAUTHN_CREDENTIAL_EX** ppCredentials;
}

struct WEBAUTHN_CRED_PROTECT_EXTENSION_IN
{
    uint dwCredProtect;
    BOOL bRequireCredProtect;
}

struct WEBAUTHN_EXTENSION
{
    const(wchar)* pwszExtensionIdentifier;
    uint cbExtension;
    void* pvExtension;
}

struct WEBAUTHN_EXTENSIONS
{
    uint cExtensions;
    WEBAUTHN_EXTENSION* pExtensions;
}

struct WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS
{
    uint dwVersion;
    uint dwTimeoutMilliseconds;
    WEBAUTHN_CREDENTIALS CredentialList;
    WEBAUTHN_EXTENSIONS Extensions;
    uint dwAuthenticatorAttachment;
    BOOL bRequireResidentKey;
    uint dwUserVerificationRequirement;
    uint dwAttestationConveyancePreference;
    uint dwFlags;
    Guid* pCancellationId;
    WEBAUTHN_CREDENTIAL_LIST* pExcludeCredentialList;
}

struct WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS
{
    uint dwVersion;
    uint dwTimeoutMilliseconds;
    WEBAUTHN_CREDENTIALS CredentialList;
    WEBAUTHN_EXTENSIONS Extensions;
    uint dwAuthenticatorAttachment;
    uint dwUserVerificationRequirement;
    uint dwFlags;
    const(wchar)* pwszU2fAppId;
    int* pbU2fAppId;
    Guid* pCancellationId;
    WEBAUTHN_CREDENTIAL_LIST* pAllowCredentialList;
}

struct WEBAUTHN_X5C
{
    uint cbData;
    ubyte* pbData;
}

struct WEBAUTHN_COMMON_ATTESTATION
{
    uint dwVersion;
    const(wchar)* pwszAlg;
    int lAlg;
    uint cbSignature;
    ubyte* pbSignature;
    uint cX5c;
    WEBAUTHN_X5C* pX5c;
    const(wchar)* pwszVer;
    uint cbCertInfo;
    ubyte* pbCertInfo;
    uint cbPubArea;
    ubyte* pbPubArea;
}

struct WEBAUTHN_CREDENTIAL_ATTESTATION
{
    uint dwVersion;
    const(wchar)* pwszFormatType;
    uint cbAuthenticatorData;
    ubyte* pbAuthenticatorData;
    uint cbAttestation;
    ubyte* pbAttestation;
    uint dwAttestationDecodeType;
    void* pvAttestationDecode;
    uint cbAttestationObject;
    ubyte* pbAttestationObject;
    uint cbCredentialId;
    ubyte* pbCredentialId;
    WEBAUTHN_EXTENSIONS Extensions;
    uint dwUsedTransport;
}

struct WEBAUTHN_ASSERTION
{
    uint dwVersion;
    uint cbAuthenticatorData;
    ubyte* pbAuthenticatorData;
    uint cbSignature;
    ubyte* pbSignature;
    WEBAUTHN_CREDENTIAL Credential;
    uint cbUserId;
    ubyte* pbUserId;
}

@DllImport("webservices.dll")
HRESULT WsStartReaderCanonicalization(WS_XML_READER* reader, WS_WRITE_CALLBACK writeCallback, void* writeCallbackState, char* properties, uint propertyCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsEndReaderCanonicalization(WS_XML_READER* reader, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsStartWriterCanonicalization(WS_XML_WRITER* writer, WS_WRITE_CALLBACK writeCallback, void* writeCallbackState, char* properties, uint propertyCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsEndWriterCanonicalization(WS_XML_WRITER* writer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateXmlBuffer(WS_HEAP* heap, char* properties, uint propertyCount, WS_XML_BUFFER** buffer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsRemoveNode(const(WS_XML_NODE_POSITION)* nodePosition, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateReader(char* properties, uint propertyCount, WS_XML_READER** reader, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSetInput(WS_XML_READER* reader, const(WS_XML_READER_ENCODING)* encoding, const(WS_XML_READER_INPUT)* input, char* properties, uint propertyCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSetInputToBuffer(WS_XML_READER* reader, WS_XML_BUFFER* buffer, char* properties, uint propertyCount, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeReader(WS_XML_READER* reader);

@DllImport("webservices.dll")
HRESULT WsGetReaderProperty(WS_XML_READER* reader, WS_XML_READER_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetReaderNode(WS_XML_READER* xmlReader, const(WS_XML_NODE)** node, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsFillReader(WS_XML_READER* reader, uint minSize, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadStartElement(WS_XML_READER* reader, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadToStartElement(WS_XML_READER* reader, const(WS_XML_STRING)* localName, const(WS_XML_STRING)* ns, int* found, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadStartAttribute(WS_XML_READER* reader, uint attributeIndex, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadEndAttribute(WS_XML_READER* reader, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadNode(WS_XML_READER* reader, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSkipNode(WS_XML_READER* reader, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadEndElement(WS_XML_READER* reader, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsFindAttribute(WS_XML_READER* reader, const(WS_XML_STRING)* localName, const(WS_XML_STRING)* ns, BOOL required, uint* attributeIndex, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadValue(WS_XML_READER* reader, WS_VALUE_TYPE valueType, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadChars(WS_XML_READER* reader, char* chars, uint maxCharCount, uint* actualCharCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadCharsUtf8(WS_XML_READER* reader, char* bytes, uint maxByteCount, uint* actualByteCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadBytes(WS_XML_READER* reader, char* bytes, uint maxByteCount, uint* actualByteCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadArray(WS_XML_READER* reader, const(WS_XML_STRING)* localName, const(WS_XML_STRING)* ns, WS_VALUE_TYPE valueType, char* array, uint arraySize, uint itemOffset, uint itemCount, uint* actualItemCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetReaderPosition(WS_XML_READER* reader, WS_XML_NODE_POSITION* nodePosition, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSetReaderPosition(WS_XML_READER* reader, const(WS_XML_NODE_POSITION)* nodePosition, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsMoveReader(WS_XML_READER* reader, WS_MOVE_TO moveTo, int* found, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateWriter(char* properties, uint propertyCount, WS_XML_WRITER** writer, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeWriter(WS_XML_WRITER* writer);

@DllImport("webservices.dll")
HRESULT WsSetOutput(WS_XML_WRITER* writer, const(WS_XML_WRITER_ENCODING)* encoding, const(WS_XML_WRITER_OUTPUT)* output, char* properties, uint propertyCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSetOutputToBuffer(WS_XML_WRITER* writer, WS_XML_BUFFER* buffer, char* properties, uint propertyCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetWriterProperty(WS_XML_WRITER* writer, WS_XML_WRITER_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsFlushWriter(WS_XML_WRITER* writer, uint minSize, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteStartElement(WS_XML_WRITER* writer, const(WS_XML_STRING)* prefix, const(WS_XML_STRING)* localName, const(WS_XML_STRING)* ns, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteEndStartElement(WS_XML_WRITER* writer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteXmlnsAttribute(WS_XML_WRITER* writer, const(WS_XML_STRING)* prefix, const(WS_XML_STRING)* ns, BOOL singleQuote, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteStartAttribute(WS_XML_WRITER* writer, const(WS_XML_STRING)* prefix, const(WS_XML_STRING)* localName, const(WS_XML_STRING)* ns, BOOL singleQuote, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteEndAttribute(WS_XML_WRITER* writer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteValue(WS_XML_WRITER* writer, WS_VALUE_TYPE valueType, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteXmlBuffer(WS_XML_WRITER* writer, WS_XML_BUFFER* xmlBuffer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadXmlBuffer(WS_XML_READER* reader, WS_HEAP* heap, WS_XML_BUFFER** xmlBuffer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteXmlBufferToBytes(WS_XML_WRITER* writer, WS_XML_BUFFER* xmlBuffer, const(WS_XML_WRITER_ENCODING)* encoding, char* properties, uint propertyCount, WS_HEAP* heap, void** bytes, uint* byteCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadXmlBufferFromBytes(WS_XML_READER* reader, const(WS_XML_READER_ENCODING)* encoding, char* properties, uint propertyCount, char* bytes, uint byteCount, WS_HEAP* heap, WS_XML_BUFFER** xmlBuffer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteArray(WS_XML_WRITER* writer, const(WS_XML_STRING)* localName, const(WS_XML_STRING)* ns, WS_VALUE_TYPE valueType, char* array, uint arraySize, uint itemOffset, uint itemCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteQualifiedName(WS_XML_WRITER* writer, const(WS_XML_STRING)* prefix, const(WS_XML_STRING)* localName, const(WS_XML_STRING)* ns, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteChars(WS_XML_WRITER* writer, const(wchar)* chars, uint charCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteCharsUtf8(WS_XML_WRITER* writer, char* bytes, uint byteCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteBytes(WS_XML_WRITER* writer, char* bytes, uint byteCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsPushBytes(WS_XML_WRITER* writer, WS_PUSH_BYTES_CALLBACK callback, void* callbackState, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsPullBytes(WS_XML_WRITER* writer, WS_PULL_BYTES_CALLBACK callback, void* callbackState, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteEndElement(WS_XML_WRITER* writer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteText(WS_XML_WRITER* writer, const(WS_XML_TEXT)* text, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteStartCData(WS_XML_WRITER* writer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteEndCData(WS_XML_WRITER* writer, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteNode(WS_XML_WRITER* writer, const(WS_XML_NODE)* node, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetPrefixFromNamespace(WS_XML_WRITER* writer, const(WS_XML_STRING)* ns, BOOL required, const(WS_XML_STRING)** prefix, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetWriterPosition(WS_XML_WRITER* writer, WS_XML_NODE_POSITION* nodePosition, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSetWriterPosition(WS_XML_WRITER* writer, const(WS_XML_NODE_POSITION)* nodePosition, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsMoveWriter(WS_XML_WRITER* writer, WS_MOVE_TO moveTo, int* found, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsTrimXmlWhitespace(char* chars, uint charCount, ushort** trimmedChars, uint* trimmedCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsVerifyXmlNCName(const(wchar)* ncNameChars, uint ncNameCharCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsXmlStringEquals(const(WS_XML_STRING)* string1, const(WS_XML_STRING)* string2, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetNamespaceFromPrefix(WS_XML_READER* reader, const(WS_XML_STRING)* prefix, BOOL required, const(WS_XML_STRING)** ns, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadQualifiedName(WS_XML_READER* reader, WS_HEAP* heap, WS_XML_STRING* prefix, WS_XML_STRING* localName, WS_XML_STRING* ns, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetXmlAttribute(WS_XML_READER* reader, const(WS_XML_STRING)* localName, WS_HEAP* heap, ushort** valueChars, uint* valueCharCount, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCopyNode(WS_XML_WRITER* writer, WS_XML_READER* reader, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAsyncExecute(WS_ASYNC_STATE* asyncState, WS_ASYNC_FUNCTION operation, WS_CALLBACK_MODEL callbackModel, void* callbackState, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateChannel(WS_CHANNEL_TYPE channelType, WS_CHANNEL_BINDING channelBinding, char* properties, uint propertyCount, const(WS_SECURITY_DESCRIPTION)* securityDescription, WS_CHANNEL** channel, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsOpenChannel(WS_CHANNEL* channel, const(WS_ENDPOINT_ADDRESS)* endpointAddress, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSendMessage(WS_CHANNEL* channel, WS_MESSAGE* message, const(WS_MESSAGE_DESCRIPTION)* messageDescription, WS_WRITE_OPTION writeOption, char* bodyValue, uint bodyValueSize, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReceiveMessage(WS_CHANNEL* channel, WS_MESSAGE* message, char* messageDescriptions, uint messageDescriptionCount, WS_RECEIVE_OPTION receiveOption, WS_READ_OPTION readBodyOption, WS_HEAP* heap, char* value, uint valueSize, uint* index, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsRequestReply(WS_CHANNEL* channel, WS_MESSAGE* requestMessage, const(WS_MESSAGE_DESCRIPTION)* requestMessageDescription, WS_WRITE_OPTION writeOption, char* requestBodyValue, uint requestBodyValueSize, WS_MESSAGE* replyMessage, const(WS_MESSAGE_DESCRIPTION)* replyMessageDescription, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSendReplyMessage(WS_CHANNEL* channel, WS_MESSAGE* replyMessage, const(WS_MESSAGE_DESCRIPTION)* replyMessageDescription, WS_WRITE_OPTION writeOption, char* replyBodyValue, uint replyBodyValueSize, WS_MESSAGE* requestMessage, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSendFaultMessageForError(WS_CHANNEL* channel, WS_MESSAGE* replyMessage, WS_ERROR* faultError, HRESULT faultErrorCode, WS_FAULT_DISCLOSURE faultDisclosure, WS_MESSAGE* requestMessage, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetChannelProperty(WS_CHANNEL* channel, WS_CHANNEL_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSetChannelProperty(WS_CHANNEL* channel, WS_CHANNEL_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteMessageStart(WS_CHANNEL* channel, WS_MESSAGE* message, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteMessageEnd(WS_CHANNEL* channel, WS_MESSAGE* message, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadMessageStart(WS_CHANNEL* channel, WS_MESSAGE* message, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadMessageEnd(WS_CHANNEL* channel, WS_MESSAGE* message, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCloseChannel(WS_CHANNEL* channel, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAbortChannel(WS_CHANNEL* channel, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeChannel(WS_CHANNEL* channel);

@DllImport("webservices.dll")
HRESULT WsResetChannel(WS_CHANNEL* channel, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAbandonMessage(WS_CHANNEL* channel, WS_MESSAGE* message, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsShutdownSessionChannel(WS_CHANNEL* channel, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetOperationContextProperty(const(WS_OPERATION_CONTEXT)* context, const(WS_OPERATION_CONTEXT_PROPERTY_ID) id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetDictionary(WS_ENCODING encoding, WS_XML_DICTIONARY** dictionary, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadEndpointAddressExtension(WS_XML_READER* reader, WS_ENDPOINT_ADDRESS* endpointAddress, WS_ENDPOINT_ADDRESS_EXTENSION_TYPE extensionType, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateError(char* properties, uint propertyCount, WS_ERROR** error);

@DllImport("webservices.dll")
HRESULT WsAddErrorString(WS_ERROR* error, const(WS_STRING)* string);

@DllImport("webservices.dll")
HRESULT WsGetErrorString(WS_ERROR* error, uint index, WS_STRING* string);

@DllImport("webservices.dll")
HRESULT WsCopyError(WS_ERROR* source, WS_ERROR* destination);

@DllImport("webservices.dll")
HRESULT WsGetErrorProperty(WS_ERROR* error, WS_ERROR_PROPERTY_ID id, char* buffer, uint bufferSize);

@DllImport("webservices.dll")
HRESULT WsSetErrorProperty(WS_ERROR* error, WS_ERROR_PROPERTY_ID id, char* value, uint valueSize);

@DllImport("webservices.dll")
HRESULT WsResetError(WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeError(WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetFaultErrorProperty(WS_ERROR* error, WS_FAULT_ERROR_PROPERTY_ID id, char* buffer, uint bufferSize);

@DllImport("webservices.dll")
HRESULT WsSetFaultErrorProperty(WS_ERROR* error, WS_FAULT_ERROR_PROPERTY_ID id, char* value, uint valueSize);

@DllImport("webservices.dll")
HRESULT WsCreateFaultFromError(WS_ERROR* error, HRESULT faultErrorCode, WS_FAULT_DISCLOSURE faultDisclosure, WS_HEAP* heap, WS_FAULT* fault);

@DllImport("webservices.dll")
HRESULT WsSetFaultErrorDetail(WS_ERROR* error, const(WS_FAULT_DETAIL_DESCRIPTION)* faultDetailDescription, WS_WRITE_OPTION writeOption, char* value, uint valueSize);

@DllImport("webservices.dll")
HRESULT WsGetFaultErrorDetail(WS_ERROR* error, const(WS_FAULT_DETAIL_DESCRIPTION)* faultDetailDescription, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize);

@DllImport("webservices.dll")
HRESULT WsCreateHeap(uint maxSize, uint trimSize, const(WS_HEAP_PROPERTY)* properties, uint propertyCount, WS_HEAP** heap, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAlloc(WS_HEAP* heap, uint size, void** ptr, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetHeapProperty(WS_HEAP* heap, WS_HEAP_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsResetHeap(WS_HEAP* heap, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeHeap(WS_HEAP* heap);

@DllImport("webservices.dll")
HRESULT WsCreateListener(WS_CHANNEL_TYPE channelType, WS_CHANNEL_BINDING channelBinding, char* properties, uint propertyCount, const(WS_SECURITY_DESCRIPTION)* securityDescription, WS_LISTENER** listener, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsOpenListener(WS_LISTENER* listener, const(WS_STRING)* url, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAcceptChannel(WS_LISTENER* listener, WS_CHANNEL* channel, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCloseListener(WS_LISTENER* listener, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAbortListener(WS_LISTENER* listener, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsResetListener(WS_LISTENER* listener, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeListener(WS_LISTENER* listener);

@DllImport("webservices.dll")
HRESULT WsGetListenerProperty(WS_LISTENER* listener, WS_LISTENER_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSetListenerProperty(WS_LISTENER* listener, WS_LISTENER_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateChannelForListener(WS_LISTENER* listener, char* properties, uint propertyCount, WS_CHANNEL** channel, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateMessage(WS_ENVELOPE_VERSION envelopeVersion, WS_ADDRESSING_VERSION addressingVersion, char* properties, uint propertyCount, WS_MESSAGE** message, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateMessageForChannel(WS_CHANNEL* channel, char* properties, uint propertyCount, WS_MESSAGE** message, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsInitializeMessage(WS_MESSAGE* message, WS_MESSAGE_INITIALIZATION initialization, WS_MESSAGE* sourceMessage, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsResetMessage(WS_MESSAGE* message, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeMessage(WS_MESSAGE* message);

@DllImport("webservices.dll")
HRESULT WsGetHeaderAttributes(WS_MESSAGE* message, WS_XML_READER* reader, uint* headerAttributes, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetHeader(WS_MESSAGE* message, WS_HEADER_TYPE headerType, WS_TYPE valueType, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetCustomHeader(WS_MESSAGE* message, const(WS_ELEMENT_DESCRIPTION)* customHeaderDescription, WS_REPEATING_HEADER_OPTION repeatingOption, uint headerIndex, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize, uint* headerAttributes, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsRemoveHeader(WS_MESSAGE* message, WS_HEADER_TYPE headerType, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSetHeader(WS_MESSAGE* message, WS_HEADER_TYPE headerType, WS_TYPE valueType, WS_WRITE_OPTION writeOption, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsRemoveCustomHeader(WS_MESSAGE* message, const(WS_XML_STRING)* headerName, const(WS_XML_STRING)* headerNs, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAddCustomHeader(WS_MESSAGE* message, const(WS_ELEMENT_DESCRIPTION)* headerDescription, WS_WRITE_OPTION writeOption, char* value, uint valueSize, uint headerAttributes, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAddMappedHeader(WS_MESSAGE* message, const(WS_XML_STRING)* headerName, WS_TYPE valueType, WS_WRITE_OPTION writeOption, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsRemoveMappedHeader(WS_MESSAGE* message, const(WS_XML_STRING)* headerName, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetMappedHeader(WS_MESSAGE* message, const(WS_XML_STRING)* headerName, WS_REPEATING_HEADER_OPTION repeatingOption, uint headerIndex, WS_TYPE valueType, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteBody(WS_MESSAGE* message, const(WS_ELEMENT_DESCRIPTION)* bodyDescription, WS_WRITE_OPTION writeOption, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadBody(WS_MESSAGE* message, const(WS_ELEMENT_DESCRIPTION)* bodyDescription, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteEnvelopeStart(WS_MESSAGE* message, WS_XML_WRITER* writer, WS_MESSAGE_DONE_CALLBACK doneCallback, void* doneCallbackState, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteEnvelopeEnd(WS_MESSAGE* message, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadEnvelopeStart(WS_MESSAGE* message, WS_XML_READER* reader, WS_MESSAGE_DONE_CALLBACK doneCallback, void* doneCallbackState, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadEnvelopeEnd(WS_MESSAGE* message, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetMessageProperty(WS_MESSAGE* message, WS_MESSAGE_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsSetMessageProperty(WS_MESSAGE* message, WS_MESSAGE_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAddressMessage(WS_MESSAGE* message, const(WS_ENDPOINT_ADDRESS)* address, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCheckMustUnderstandHeaders(WS_MESSAGE* message, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsMarkHeaderAsUnderstood(WS_MESSAGE* message, const(WS_XML_NODE_POSITION)* headerPosition, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsFillBody(WS_MESSAGE* message, uint minSize, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsFlushBody(WS_MESSAGE* message, uint minSize, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsRequestSecurityToken(WS_CHANNEL* channel, char* properties, uint propertyCount, WS_SECURITY_TOKEN** token, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetSecurityTokenProperty(WS_SECURITY_TOKEN* securityToken, WS_SECURITY_TOKEN_PROPERTY_ID id, char* value, uint valueSize, WS_HEAP* heap, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateXmlSecurityToken(WS_XML_BUFFER* tokenXml, WS_SECURITY_KEY_HANDLE* tokenKey, char* properties, uint propertyCount, WS_SECURITY_TOKEN** token, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeSecurityToken(WS_SECURITY_TOKEN* token);

@DllImport("webservices.dll")
HRESULT WsRevokeSecurityContext(WS_SECURITY_CONTEXT* securityContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetSecurityContextProperty(WS_SECURITY_CONTEXT* securityContext, WS_SECURITY_CONTEXT_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadElement(WS_XML_READER* reader, const(WS_ELEMENT_DESCRIPTION)* elementDescription, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadAttribute(WS_XML_READER* reader, const(WS_ATTRIBUTE_DESCRIPTION)* attributeDescription, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadType(WS_XML_READER* reader, WS_TYPE_MAPPING typeMapping, WS_TYPE type, const(void)* typeDescription, WS_READ_OPTION readOption, WS_HEAP* heap, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteElement(WS_XML_WRITER* writer, const(WS_ELEMENT_DESCRIPTION)* elementDescription, WS_WRITE_OPTION writeOption, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteAttribute(WS_XML_WRITER* writer, const(WS_ATTRIBUTE_DESCRIPTION)* attributeDescription, WS_WRITE_OPTION writeOption, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsWriteType(WS_XML_WRITER* writer, WS_TYPE_MAPPING typeMapping, WS_TYPE type, const(void)* typeDescription, WS_WRITE_OPTION writeOption, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsRegisterOperationForCancel(const(WS_OPERATION_CONTEXT)* context, WS_OPERATION_CANCEL_CALLBACK cancelCallback, WS_OPERATION_FREE_STATE_CALLBACK freestateCallback, void* userState, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetServiceHostProperty(WS_SERVICE_HOST* serviceHost, const(WS_SERVICE_PROPERTY_ID) id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateServiceHost(char* endpoints, const(ushort) endpointCount, char* serviceProperties, uint servicePropertyCount, WS_SERVICE_HOST** serviceHost, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsOpenServiceHost(WS_SERVICE_HOST* serviceHost, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCloseServiceHost(WS_SERVICE_HOST* serviceHost, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAbortServiceHost(WS_SERVICE_HOST* serviceHost, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeServiceHost(WS_SERVICE_HOST* serviceHost);

@DllImport("webservices.dll")
HRESULT WsResetServiceHost(WS_SERVICE_HOST* serviceHost, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetServiceProxyProperty(WS_SERVICE_PROXY* serviceProxy, const(WS_PROXY_PROPERTY_ID) id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateServiceProxy(const(WS_CHANNEL_TYPE) channelType, const(WS_CHANNEL_BINDING) channelBinding, const(WS_SECURITY_DESCRIPTION)* securityDescription, char* properties, const(uint) propertyCount, char* channelProperties, const(uint) channelPropertyCount, WS_SERVICE_PROXY** serviceProxy, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsOpenServiceProxy(WS_SERVICE_PROXY* serviceProxy, const(WS_ENDPOINT_ADDRESS)* address, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCloseServiceProxy(WS_SERVICE_PROXY* serviceProxy, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAbortServiceProxy(WS_SERVICE_PROXY* serviceProxy, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeServiceProxy(WS_SERVICE_PROXY* serviceProxy);

@DllImport("webservices.dll")
HRESULT WsResetServiceProxy(WS_SERVICE_PROXY* serviceProxy, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsAbandonCall(WS_SERVICE_PROXY* serviceProxy, uint callId, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCall(WS_SERVICE_PROXY* serviceProxy, const(WS_OPERATION_DESCRIPTION)* operation, const(void)** arguments, WS_HEAP* heap, char* callProperties, const(uint) callPropertyCount, const(WS_ASYNC_CONTEXT)* asyncContext, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsDecodeUrl(const(WS_STRING)* url, uint flags, WS_HEAP* heap, WS_URL** outUrl, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsEncodeUrl(const(WS_URL)* url, uint flags, WS_HEAP* heap, WS_STRING* outUrl, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCombineUrl(const(WS_STRING)* baseUrl, const(WS_STRING)* referenceUrl, uint flags, WS_HEAP* heap, WS_STRING* resultUrl, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsDateTimeToFileTime(const(WS_DATETIME)* dateTime, FILETIME* fileTime, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsFileTimeToDateTime(const(FILETIME)* fileTime, WS_DATETIME* dateTime, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateMetadata(char* properties, uint propertyCount, WS_METADATA** metadata, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsReadMetadata(WS_METADATA* metadata, WS_XML_READER* reader, const(WS_STRING)* url, WS_ERROR* error);

@DllImport("webservices.dll")
void WsFreeMetadata(WS_METADATA* metadata);

@DllImport("webservices.dll")
HRESULT WsResetMetadata(WS_METADATA* metadata, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetMetadataProperty(WS_METADATA* metadata, WS_METADATA_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetMissingMetadataDocumentAddress(WS_METADATA* metadata, WS_ENDPOINT_ADDRESS** address, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetMetadataEndpoints(WS_METADATA* metadata, WS_METADATA_ENDPOINTS* endpoints, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsMatchPolicyAlternative(WS_POLICY* policy, uint alternativeIndex, WS_POLICY_CONSTRAINTS* policyConstraints, BOOL matchRequired, WS_HEAP* heap, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetPolicyProperty(WS_POLICY* policy, WS_POLICY_PROPERTY_ID id, char* value, uint valueSize, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsGetPolicyAlternativeCount(WS_POLICY* policy, uint* count, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateServiceProxyFromTemplate(WS_CHANNEL_TYPE channelType, char* properties, const(uint) propertyCount, WS_BINDING_TEMPLATE_TYPE templateType, char* templateValue, uint templateSize, const(void)* templateDescription, uint templateDescriptionSize, WS_SERVICE_PROXY** serviceProxy, WS_ERROR* error);

@DllImport("webservices.dll")
HRESULT WsCreateServiceEndpointFromTemplate(WS_CHANNEL_TYPE channelType, char* properties, uint propertyCount, const(WS_STRING)* addressUrl, const(WS_SERVICE_CONTRACT)* contract, WS_SERVICE_SECURITY_CALLBACK authorizationCallback, WS_HEAP* heap, WS_BINDING_TEMPLATE_TYPE templateType, char* templateValue, uint templateSize, const(void)* templateDescription, uint templateDescriptionSize, WS_SERVICE_ENDPOINT** serviceEndpoint, WS_ERROR* error);

@DllImport("webauthn.dll")
uint WebAuthNGetApiVersionNumber();

@DllImport("webauthn.dll")
HRESULT WebAuthNIsUserVerifyingPlatformAuthenticatorAvailable(int* pbIsUserVerifyingPlatformAuthenticatorAvailable);

@DllImport("webauthn.dll")
HRESULT WebAuthNAuthenticatorMakeCredential(HWND hWnd, WEBAUTHN_RP_ENTITY_INFORMATION* pRpInformation, WEBAUTHN_USER_ENTITY_INFORMATION* pUserInformation, WEBAUTHN_COSE_CREDENTIAL_PARAMETERS* pPubKeyCredParams, WEBAUTHN_CLIENT_DATA* pWebAuthNClientData, WEBAUTHN_AUTHENTICATOR_MAKE_CREDENTIAL_OPTIONS* pWebAuthNMakeCredentialOptions, WEBAUTHN_CREDENTIAL_ATTESTATION** ppWebAuthNCredentialAttestation);

@DllImport("webauthn.dll")
HRESULT WebAuthNAuthenticatorGetAssertion(HWND hWnd, const(wchar)* pwszRpId, WEBAUTHN_CLIENT_DATA* pWebAuthNClientData, WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS* pWebAuthNGetAssertionOptions, WEBAUTHN_ASSERTION** ppWebAuthNAssertion);

@DllImport("webauthn.dll")
void WebAuthNFreeCredentialAttestation(WEBAUTHN_CREDENTIAL_ATTESTATION* pWebAuthNCredentialAttestation);

@DllImport("webauthn.dll")
void WebAuthNFreeAssertion(WEBAUTHN_ASSERTION* pWebAuthNAssertion);

@DllImport("webauthn.dll")
HRESULT WebAuthNGetCancellationId(Guid* pCancellationId);

@DllImport("webauthn.dll")
HRESULT WebAuthNCancelCurrentOperation(const(Guid)* pCancellationId);

@DllImport("webauthn.dll")
ushort* WebAuthNGetErrorName(HRESULT hr);

@DllImport("webauthn.dll")
HRESULT WebAuthNGetW3CExceptionDOMError(HRESULT hr);

