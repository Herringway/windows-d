module windows.directwrite;

public import windows.core;
public import windows.com : HRESULT, IUnknown;
public import windows.direct2d : D2D_POINT_2F, D2D_SIZE_U, ID2D1SimplifiedGeometrySink;
public import windows.displaydevices : POINT, RECT, SIZE;
public import windows.dxgi : DXGI_RGBA;
public import windows.gdi : HDC;
public import windows.intl : FONTSIGNATURE;
public import windows.shell : LOGFONTA, LOGFONTW;
public import windows.systemservices : BOOL, HANDLE;
public import windows.windowsprogramming : FILETIME;

extern(Windows):


// Enums


enum : uint
{
    DWRITE_FONT_AXIS_TAG_WEIGHT       = 0x74686777,
    DWRITE_FONT_AXIS_TAG_WIDTH        = 0x68746477,
    DWRITE_FONT_AXIS_TAG_SLANT        = 0x746e6c73,
    DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = 0x7a73706f,
    DWRITE_FONT_AXIS_TAG_ITALIC       = 0x6c617469,
}
alias DWRITE_FONT_AXIS_TAG = uint;

enum : int
{
    DWRITE_FONT_FILE_TYPE_UNKNOWN             = 0x00000000,
    DWRITE_FONT_FILE_TYPE_CFF                 = 0x00000001,
    DWRITE_FONT_FILE_TYPE_TRUETYPE            = 0x00000002,
    DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION = 0x00000003,
    DWRITE_FONT_FILE_TYPE_TYPE1_PFM           = 0x00000004,
    DWRITE_FONT_FILE_TYPE_TYPE1_PFB           = 0x00000005,
    DWRITE_FONT_FILE_TYPE_VECTOR              = 0x00000006,
    DWRITE_FONT_FILE_TYPE_BITMAP              = 0x00000007,
    DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = 0x00000003,
}
alias DWRITE_FONT_FILE_TYPE = int;

enum : int
{
    DWRITE_FONT_FACE_TYPE_CFF                 = 0x00000000,
    DWRITE_FONT_FACE_TYPE_TRUETYPE            = 0x00000001,
    DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION = 0x00000002,
    DWRITE_FONT_FACE_TYPE_TYPE1               = 0x00000003,
    DWRITE_FONT_FACE_TYPE_VECTOR              = 0x00000004,
    DWRITE_FONT_FACE_TYPE_BITMAP              = 0x00000005,
    DWRITE_FONT_FACE_TYPE_UNKNOWN             = 0x00000006,
    DWRITE_FONT_FACE_TYPE_RAW_CFF             = 0x00000007,
    DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = 0x00000002,
}
alias DWRITE_FONT_FACE_TYPE = int;

enum : int
{
    DWRITE_FONT_SIMULATIONS_NONE    = 0x00000000,
    DWRITE_FONT_SIMULATIONS_BOLD    = 0x00000001,
    DWRITE_FONT_SIMULATIONS_OBLIQUE = 0x00000002,
}
alias DWRITE_FONT_SIMULATIONS = int;

enum : int
{
    DWRITE_FONT_WEIGHT_THIN        = 0x00000064,
    DWRITE_FONT_WEIGHT_EXTRA_LIGHT = 0x000000c8,
    DWRITE_FONT_WEIGHT_ULTRA_LIGHT = 0x000000c8,
    DWRITE_FONT_WEIGHT_LIGHT       = 0x0000012c,
    DWRITE_FONT_WEIGHT_SEMI_LIGHT  = 0x0000015e,
    DWRITE_FONT_WEIGHT_NORMAL      = 0x00000190,
    DWRITE_FONT_WEIGHT_REGULAR     = 0x00000190,
    DWRITE_FONT_WEIGHT_MEDIUM      = 0x000001f4,
    DWRITE_FONT_WEIGHT_DEMI_BOLD   = 0x00000258,
    DWRITE_FONT_WEIGHT_SEMI_BOLD   = 0x00000258,
    DWRITE_FONT_WEIGHT_BOLD        = 0x000002bc,
    DWRITE_FONT_WEIGHT_EXTRA_BOLD  = 0x00000320,
    DWRITE_FONT_WEIGHT_ULTRA_BOLD  = 0x00000320,
    DWRITE_FONT_WEIGHT_BLACK       = 0x00000384,
    DWRITE_FONT_WEIGHT_HEAVY       = 0x00000384,
    DWRITE_FONT_WEIGHT_EXTRA_BLACK = 0x000003b6,
    DWRITE_FONT_WEIGHT_ULTRA_BLACK = 0x000003b6,
}
alias DWRITE_FONT_WEIGHT = int;

enum : int
{
    DWRITE_FONT_STRETCH_UNDEFINED       = 0x00000000,
    DWRITE_FONT_STRETCH_ULTRA_CONDENSED = 0x00000001,
    DWRITE_FONT_STRETCH_EXTRA_CONDENSED = 0x00000002,
    DWRITE_FONT_STRETCH_CONDENSED       = 0x00000003,
    DWRITE_FONT_STRETCH_SEMI_CONDENSED  = 0x00000004,
    DWRITE_FONT_STRETCH_NORMAL          = 0x00000005,
    DWRITE_FONT_STRETCH_MEDIUM          = 0x00000005,
    DWRITE_FONT_STRETCH_SEMI_EXPANDED   = 0x00000006,
    DWRITE_FONT_STRETCH_EXPANDED        = 0x00000007,
    DWRITE_FONT_STRETCH_EXTRA_EXPANDED  = 0x00000008,
    DWRITE_FONT_STRETCH_ULTRA_EXPANDED  = 0x00000009,
}
alias DWRITE_FONT_STRETCH = int;

enum : int
{
    DWRITE_FONT_STYLE_NORMAL  = 0x00000000,
    DWRITE_FONT_STYLE_OBLIQUE = 0x00000001,
    DWRITE_FONT_STYLE_ITALIC  = 0x00000002,
}
alias DWRITE_FONT_STYLE = int;

enum : int
{
    DWRITE_INFORMATIONAL_STRING_NONE                             = 0x00000000,
    DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE                 = 0x00000001,
    DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS                  = 0x00000002,
    DWRITE_INFORMATIONAL_STRING_TRADEMARK                        = 0x00000003,
    DWRITE_INFORMATIONAL_STRING_MANUFACTURER                     = 0x00000004,
    DWRITE_INFORMATIONAL_STRING_DESIGNER                         = 0x00000005,
    DWRITE_INFORMATIONAL_STRING_DESIGNER_URL                     = 0x00000006,
    DWRITE_INFORMATIONAL_STRING_DESCRIPTION                      = 0x00000007,
    DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL                  = 0x00000008,
    DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION              = 0x00000009,
    DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL                 = 0x0000000a,
    DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES               = 0x0000000b,
    DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES            = 0x0000000c,
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES         = 0x0000000d,
    DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES      = 0x0000000e,
    DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT                      = 0x0000000f,
    DWRITE_INFORMATIONAL_STRING_FULL_NAME                        = 0x00000010,
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME                  = 0x00000011,
    DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME              = 0x00000012,
    DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 0x00000013,
    DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG       = 0x00000014,
    DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG    = 0x00000015,
    DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES           = 0x0000000d,
    DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES        = 0x0000000e,
    DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME                  = 0x00000013,
}
alias DWRITE_INFORMATIONAL_STRING_ID = int;

enum : int
{
    DWRITE_FACTORY_TYPE_SHARED   = 0x00000000,
    DWRITE_FACTORY_TYPE_ISOLATED = 0x00000001,
}
alias DWRITE_FACTORY_TYPE = int;

enum : int
{
    DWRITE_PIXEL_GEOMETRY_FLAT = 0x00000000,
    DWRITE_PIXEL_GEOMETRY_RGB  = 0x00000001,
    DWRITE_PIXEL_GEOMETRY_BGR  = 0x00000002,
}
alias DWRITE_PIXEL_GEOMETRY = int;

enum : int
{
    DWRITE_RENDERING_MODE_DEFAULT                     = 0x00000000,
    DWRITE_RENDERING_MODE_ALIASED                     = 0x00000001,
    DWRITE_RENDERING_MODE_GDI_CLASSIC                 = 0x00000002,
    DWRITE_RENDERING_MODE_GDI_NATURAL                 = 0x00000003,
    DWRITE_RENDERING_MODE_NATURAL                     = 0x00000004,
    DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC           = 0x00000005,
    DWRITE_RENDERING_MODE_OUTLINE                     = 0x00000006,
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC       = 0x00000002,
    DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL       = 0x00000003,
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL           = 0x00000004,
    DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = 0x00000005,
}
alias DWRITE_RENDERING_MODE = int;

enum : int
{
    DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = 0x00000000,
    DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = 0x00000001,
    DWRITE_READING_DIRECTION_TOP_TO_BOTTOM = 0x00000002,
    DWRITE_READING_DIRECTION_BOTTOM_TO_TOP = 0x00000003,
}
alias DWRITE_READING_DIRECTION = int;

enum : int
{
    DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = 0x00000000,
    DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP = 0x00000001,
    DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT = 0x00000002,
    DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT = 0x00000003,
}
alias DWRITE_FLOW_DIRECTION = int;

enum : int
{
    DWRITE_TEXT_ALIGNMENT_LEADING   = 0x00000000,
    DWRITE_TEXT_ALIGNMENT_TRAILING  = 0x00000001,
    DWRITE_TEXT_ALIGNMENT_CENTER    = 0x00000002,
    DWRITE_TEXT_ALIGNMENT_JUSTIFIED = 0x00000003,
}
alias DWRITE_TEXT_ALIGNMENT = int;

enum : int
{
    DWRITE_PARAGRAPH_ALIGNMENT_NEAR   = 0x00000000,
    DWRITE_PARAGRAPH_ALIGNMENT_FAR    = 0x00000001,
    DWRITE_PARAGRAPH_ALIGNMENT_CENTER = 0x00000002,
}
alias DWRITE_PARAGRAPH_ALIGNMENT = int;

enum : int
{
    DWRITE_WORD_WRAPPING_WRAP            = 0x00000000,
    DWRITE_WORD_WRAPPING_NO_WRAP         = 0x00000001,
    DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = 0x00000002,
    DWRITE_WORD_WRAPPING_WHOLE_WORD      = 0x00000003,
    DWRITE_WORD_WRAPPING_CHARACTER       = 0x00000004,
}
alias DWRITE_WORD_WRAPPING = int;

enum : int
{
    DWRITE_LINE_SPACING_METHOD_DEFAULT      = 0x00000000,
    DWRITE_LINE_SPACING_METHOD_UNIFORM      = 0x00000001,
    DWRITE_LINE_SPACING_METHOD_PROPORTIONAL = 0x00000002,
}
alias DWRITE_LINE_SPACING_METHOD = int;

enum : int
{
    DWRITE_TRIMMING_GRANULARITY_NONE      = 0x00000000,
    DWRITE_TRIMMING_GRANULARITY_CHARACTER = 0x00000001,
    DWRITE_TRIMMING_GRANULARITY_WORD      = 0x00000002,
}
alias DWRITE_TRIMMING_GRANULARITY = int;

enum : uint
{
    DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS            = 0x63726661,
    DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS    = 0x63703263,
    DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS     = 0x63733263,
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES            = 0x746c6163,
    DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS             = 0x65736163,
    DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION  = 0x706d6363,
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES             = 0x67696c63,
    DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING                  = 0x70737063,
    DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH                 = 0x68777363,
    DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING              = 0x73727563,
    DWRITE_FONT_FEATURE_TAG_DEFAULT                          = 0x746c6664,
    DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES          = 0x67696c64,
    DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS                     = 0x74707865,
    DWRITE_FONT_FEATURE_TAG_FRACTIONS                        = 0x63617266,
    DWRITE_FONT_FEATURE_TAG_FULL_WIDTH                       = 0x64697766,
    DWRITE_FONT_FEATURE_TAG_HALF_FORMS                       = 0x666c6168,
    DWRITE_FONT_FEATURE_TAG_HALANT_FORMS                     = 0x6e6c6168,
    DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH             = 0x746c6168,
    DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS                 = 0x74736968,
    DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES       = 0x616e6b68,
    DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES             = 0x67696c68,
    DWRITE_FONT_FEATURE_TAG_HALF_WIDTH                       = 0x64697768,
    DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS                 = 0x6f6a6f68,
    DWRITE_FONT_FEATURE_TAG_JIS04_FORMS                      = 0x3430706a,
    DWRITE_FONT_FEATURE_TAG_JIS78_FORMS                      = 0x3837706a,
    DWRITE_FONT_FEATURE_TAG_JIS83_FORMS                      = 0x3338706a,
    DWRITE_FONT_FEATURE_TAG_JIS90_FORMS                      = 0x3039706a,
    DWRITE_FONT_FEATURE_TAG_KERNING                          = 0x6e72656b,
    DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES               = 0x6167696c,
    DWRITE_FONT_FEATURE_TAG_LINING_FIGURES                   = 0x6d756e6c,
    DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS                  = 0x6c636f6c,
    DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING                 = 0x6b72616d,
    DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK               = 0x6b72676d,
    DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING         = 0x6b6d6b6d,
    DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS       = 0x746c616e,
    DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS                  = 0x6b636c6e,
    DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES                = 0x6d756e6f,
    DWRITE_FONT_FEATURE_TAG_ORDINALS                         = 0x6e64726f,
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH     = 0x746c6170,
    DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS                  = 0x70616370,
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES             = 0x6d756e70,
    DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS              = 0x64697770,
    DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS                   = 0x64697771,
    DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES               = 0x67696c72,
    DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS              = 0x79627572,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES             = 0x746c6173,
    DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS             = 0x666e6973,
    DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS                   = 0x70636d73,
    DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS                 = 0x6c706d73,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1                  = 0x31307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2                  = 0x32307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3                  = 0x33307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4                  = 0x34307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5                  = 0x35307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6                  = 0x36307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7                  = 0x37307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8                  = 0x38307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9                  = 0x39307373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10                 = 0x30317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11                 = 0x31317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12                 = 0x32317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13                 = 0x33317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14                 = 0x34317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15                 = 0x35317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16                 = 0x36317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17                 = 0x37317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18                 = 0x38317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19                 = 0x39317373,
    DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20                 = 0x30327373,
    DWRITE_FONT_FEATURE_TAG_SUBSCRIPT                        = 0x73627573,
    DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT                      = 0x73707573,
    DWRITE_FONT_FEATURE_TAG_SWASH                            = 0x68737773,
    DWRITE_FONT_FEATURE_TAG_TITLING                          = 0x6c746974,
    DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS           = 0x6d616e74,
    DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES                  = 0x6d756e74,
    DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS                = 0x64617274,
    DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS                     = 0x64697774,
    DWRITE_FONT_FEATURE_TAG_UNICASE                          = 0x63696e75,
    DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING                 = 0x74726576,
    DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION = 0x32747276,
    DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO                     = 0x6f72657a,
}
alias DWRITE_FONT_FEATURE_TAG = uint;

enum : int
{
    DWRITE_SCRIPT_SHAPES_DEFAULT   = 0x00000000,
    DWRITE_SCRIPT_SHAPES_NO_VISUAL = 0x00000001,
}
alias DWRITE_SCRIPT_SHAPES = int;

enum : int
{
    DWRITE_BREAK_CONDITION_NEUTRAL       = 0x00000000,
    DWRITE_BREAK_CONDITION_CAN_BREAK     = 0x00000001,
    DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = 0x00000002,
    DWRITE_BREAK_CONDITION_MUST_BREAK    = 0x00000003,
}
alias DWRITE_BREAK_CONDITION = int;

enum : int
{
    DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE = 0x00000000,
    DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL   = 0x00000001,
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE         = 0x00000002,
    DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL     = 0x00000003,
    DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL  = 0x00000004,
}
alias DWRITE_NUMBER_SUBSTITUTION_METHOD = int;

enum : int
{
    DWRITE_TEXTURE_ALIASED_1x1   = 0x00000000,
    DWRITE_TEXTURE_CLEARTYPE_3x1 = 0x00000001,
}
alias DWRITE_TEXTURE_TYPE = int;

enum : int
{
    DWRITE_PANOSE_FAMILY_ANY          = 0x00000000,
    DWRITE_PANOSE_FAMILY_NO_FIT       = 0x00000001,
    DWRITE_PANOSE_FAMILY_TEXT_DISPLAY = 0x00000002,
    DWRITE_PANOSE_FAMILY_SCRIPT       = 0x00000003,
    DWRITE_PANOSE_FAMILY_DECORATIVE   = 0x00000004,
    DWRITE_PANOSE_FAMILY_SYMBOL       = 0x00000005,
    DWRITE_PANOSE_FAMILY_PICTORIAL    = 0x00000005,
}
alias DWRITE_PANOSE_FAMILY = int;

enum : int
{
    DWRITE_PANOSE_SERIF_STYLE_ANY                = 0x00000000,
    DWRITE_PANOSE_SERIF_STYLE_NO_FIT             = 0x00000001,
    DWRITE_PANOSE_SERIF_STYLE_COVE               = 0x00000002,
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE        = 0x00000003,
    DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE        = 0x00000004,
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE = 0x00000005,
    DWRITE_PANOSE_SERIF_STYLE_SQUARE             = 0x00000006,
    DWRITE_PANOSE_SERIF_STYLE_THIN               = 0x00000007,
    DWRITE_PANOSE_SERIF_STYLE_OVAL               = 0x00000008,
    DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED        = 0x00000009,
    DWRITE_PANOSE_SERIF_STYLE_TRIANGLE           = 0x0000000a,
    DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS        = 0x0000000b,
    DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS        = 0x0000000c,
    DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS = 0x0000000d,
    DWRITE_PANOSE_SERIF_STYLE_FLARED             = 0x0000000e,
    DWRITE_PANOSE_SERIF_STYLE_ROUNDED            = 0x0000000f,
    DWRITE_PANOSE_SERIF_STYLE_SCRIPT             = 0x00000010,
    DWRITE_PANOSE_SERIF_STYLE_PERP_SANS          = 0x0000000d,
    DWRITE_PANOSE_SERIF_STYLE_BONE               = 0x00000008,
}
alias DWRITE_PANOSE_SERIF_STYLE = int;

enum : int
{
    DWRITE_PANOSE_WEIGHT_ANY         = 0x00000000,
    DWRITE_PANOSE_WEIGHT_NO_FIT      = 0x00000001,
    DWRITE_PANOSE_WEIGHT_VERY_LIGHT  = 0x00000002,
    DWRITE_PANOSE_WEIGHT_LIGHT       = 0x00000003,
    DWRITE_PANOSE_WEIGHT_THIN        = 0x00000004,
    DWRITE_PANOSE_WEIGHT_BOOK        = 0x00000005,
    DWRITE_PANOSE_WEIGHT_MEDIUM      = 0x00000006,
    DWRITE_PANOSE_WEIGHT_DEMI        = 0x00000007,
    DWRITE_PANOSE_WEIGHT_BOLD        = 0x00000008,
    DWRITE_PANOSE_WEIGHT_HEAVY       = 0x00000009,
    DWRITE_PANOSE_WEIGHT_BLACK       = 0x0000000a,
    DWRITE_PANOSE_WEIGHT_EXTRA_BLACK = 0x0000000b,
    DWRITE_PANOSE_WEIGHT_NORD        = 0x0000000b,
}
alias DWRITE_PANOSE_WEIGHT = int;

enum : int
{
    DWRITE_PANOSE_PROPORTION_ANY            = 0x00000000,
    DWRITE_PANOSE_PROPORTION_NO_FIT         = 0x00000001,
    DWRITE_PANOSE_PROPORTION_OLD_STYLE      = 0x00000002,
    DWRITE_PANOSE_PROPORTION_MODERN         = 0x00000003,
    DWRITE_PANOSE_PROPORTION_EVEN_WIDTH     = 0x00000004,
    DWRITE_PANOSE_PROPORTION_EXPANDED       = 0x00000005,
    DWRITE_PANOSE_PROPORTION_CONDENSED      = 0x00000006,
    DWRITE_PANOSE_PROPORTION_VERY_EXPANDED  = 0x00000007,
    DWRITE_PANOSE_PROPORTION_VERY_CONDENSED = 0x00000008,
    DWRITE_PANOSE_PROPORTION_MONOSPACED     = 0x00000009,
}
alias DWRITE_PANOSE_PROPORTION = int;

enum : int
{
    DWRITE_PANOSE_CONTRAST_ANY               = 0x00000000,
    DWRITE_PANOSE_CONTRAST_NO_FIT            = 0x00000001,
    DWRITE_PANOSE_CONTRAST_NONE              = 0x00000002,
    DWRITE_PANOSE_CONTRAST_VERY_LOW          = 0x00000003,
    DWRITE_PANOSE_CONTRAST_LOW               = 0x00000004,
    DWRITE_PANOSE_CONTRAST_MEDIUM_LOW        = 0x00000005,
    DWRITE_PANOSE_CONTRAST_MEDIUM            = 0x00000006,
    DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH       = 0x00000007,
    DWRITE_PANOSE_CONTRAST_HIGH              = 0x00000008,
    DWRITE_PANOSE_CONTRAST_VERY_HIGH         = 0x00000009,
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW    = 0x0000000a,
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM = 0x0000000b,
    DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH   = 0x0000000c,
    DWRITE_PANOSE_CONTRAST_BROKEN            = 0x0000000d,
}
alias DWRITE_PANOSE_CONTRAST = int;

enum : int
{
    DWRITE_PANOSE_STROKE_VARIATION_ANY                  = 0x00000000,
    DWRITE_PANOSE_STROKE_VARIATION_NO_FIT               = 0x00000001,
    DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION         = 0x00000002,
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL     = 0x00000003,
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL = 0x00000004,
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL     = 0x00000005,
    DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL   = 0x00000006,
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL       = 0x00000007,
    DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL     = 0x00000008,
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL     = 0x00000009,
    DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL   = 0x0000000a,
}
alias DWRITE_PANOSE_STROKE_VARIATION = int;

enum : int
{
    DWRITE_PANOSE_ARM_STYLE_ANY                           = 0x00000000,
    DWRITE_PANOSE_ARM_STYLE_NO_FIT                        = 0x00000001,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL      = 0x00000002,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE           = 0x00000003,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL        = 0x00000004,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF    = 0x00000005,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF    = 0x00000006,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL   = 0x00000007,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE        = 0x00000008,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL     = 0x00000009,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF = 0x0000000a,
    DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF = 0x0000000b,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ            = 0x00000002,
    DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT            = 0x00000004,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ                = 0x00000007,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE               = 0x00000008,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT                = 0x00000009,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF        = 0x0000000a,
    DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF        = 0x0000000b,
}
alias DWRITE_PANOSE_ARM_STYLE = int;

enum : int
{
    DWRITE_PANOSE_LETTERFORM_ANY                = 0x00000000,
    DWRITE_PANOSE_LETTERFORM_NO_FIT             = 0x00000001,
    DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT     = 0x00000002,
    DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED    = 0x00000003,
    DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED       = 0x00000004,
    DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED   = 0x00000005,
    DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED     = 0x00000006,
    DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER  = 0x00000007,
    DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE      = 0x00000008,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT    = 0x00000009,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED   = 0x0000000a,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED      = 0x0000000b,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED  = 0x0000000c,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED    = 0x0000000d,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER = 0x0000000e,
    DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE     = 0x0000000f,
}
alias DWRITE_PANOSE_LETTERFORM = int;

enum : int
{
    DWRITE_PANOSE_MIDLINE_ANY              = 0x00000000,
    DWRITE_PANOSE_MIDLINE_NO_FIT           = 0x00000001,
    DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED = 0x00000002,
    DWRITE_PANOSE_MIDLINE_STANDARD_POINTED = 0x00000003,
    DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED = 0x00000004,
    DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED     = 0x00000005,
    DWRITE_PANOSE_MIDLINE_HIGH_POINTED     = 0x00000006,
    DWRITE_PANOSE_MIDLINE_HIGH_SERIFED     = 0x00000007,
    DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED = 0x00000008,
    DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED = 0x00000009,
    DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED = 0x0000000a,
    DWRITE_PANOSE_MIDLINE_LOW_TRIMMED      = 0x0000000b,
    DWRITE_PANOSE_MIDLINE_LOW_POINTED      = 0x0000000c,
    DWRITE_PANOSE_MIDLINE_LOW_SERIFED      = 0x0000000d,
}
alias DWRITE_PANOSE_MIDLINE = int;

enum : int
{
    DWRITE_PANOSE_XHEIGHT_ANY               = 0x00000000,
    DWRITE_PANOSE_XHEIGHT_NO_FIT            = 0x00000001,
    DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL    = 0x00000002,
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD = 0x00000003,
    DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE    = 0x00000004,
    DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL     = 0x00000005,
    DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD  = 0x00000006,
    DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE     = 0x00000007,
    DWRITE_PANOSE_XHEIGHT_CONSTANT_STD      = 0x00000003,
    DWRITE_PANOSE_XHEIGHT_DUCKING_STD       = 0x00000006,
}
alias DWRITE_PANOSE_XHEIGHT = int;

enum : int
{
    DWRITE_PANOSE_TOOL_KIND_ANY                = 0x00000000,
    DWRITE_PANOSE_TOOL_KIND_NO_FIT             = 0x00000001,
    DWRITE_PANOSE_TOOL_KIND_FLAT_NIB           = 0x00000002,
    DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT     = 0x00000003,
    DWRITE_PANOSE_TOOL_KIND_ENGRAVED           = 0x00000004,
    DWRITE_PANOSE_TOOL_KIND_BALL               = 0x00000005,
    DWRITE_PANOSE_TOOL_KIND_BRUSH              = 0x00000006,
    DWRITE_PANOSE_TOOL_KIND_ROUGH              = 0x00000007,
    DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP = 0x00000008,
    DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH         = 0x00000009,
}
alias DWRITE_PANOSE_TOOL_KIND = int;

enum : int
{
    DWRITE_PANOSE_SPACING_ANY                 = 0x00000000,
    DWRITE_PANOSE_SPACING_NO_FIT              = 0x00000001,
    DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED = 0x00000002,
    DWRITE_PANOSE_SPACING_MONOSPACED          = 0x00000003,
}
alias DWRITE_PANOSE_SPACING = int;

enum : int
{
    DWRITE_PANOSE_ASPECT_RATIO_ANY            = 0x00000000,
    DWRITE_PANOSE_ASPECT_RATIO_NO_FIT         = 0x00000001,
    DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED = 0x00000002,
    DWRITE_PANOSE_ASPECT_RATIO_CONDENSED      = 0x00000003,
    DWRITE_PANOSE_ASPECT_RATIO_NORMAL         = 0x00000004,
    DWRITE_PANOSE_ASPECT_RATIO_EXPANDED       = 0x00000005,
    DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED  = 0x00000006,
}
alias DWRITE_PANOSE_ASPECT_RATIO = int;

enum : int
{
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY                      = 0x00000000,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT                   = 0x00000001,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED       = 0x00000002,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING           = 0x00000003,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED          = 0x00000004,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED     = 0x00000005,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING         = 0x00000006,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED        = 0x00000007,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED = 0x00000008,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING     = 0x00000009,
    DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED    = 0x0000000a,
}
alias DWRITE_PANOSE_SCRIPT_TOPOLOGY = int;

enum : int
{
    DWRITE_PANOSE_SCRIPT_FORM_ANY                          = 0x00000000,
    DWRITE_PANOSE_SCRIPT_FORM_NO_FIT                       = 0x00000001,
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING          = 0x00000002,
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING        = 0x00000003,
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING        = 0x00000004,
    DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING     = 0x00000005,
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING          = 0x00000006,
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING        = 0x00000007,
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING        = 0x00000008,
    DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING     = 0x00000009,
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING      = 0x0000000a,
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING    = 0x0000000b,
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING    = 0x0000000c,
    DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING = 0x0000000d,
}
alias DWRITE_PANOSE_SCRIPT_FORM = int;

enum : int
{
    DWRITE_PANOSE_FINIALS_ANY                  = 0x00000000,
    DWRITE_PANOSE_FINIALS_NO_FIT               = 0x00000001,
    DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS        = 0x00000002,
    DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS    = 0x00000003,
    DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS      = 0x00000004,
    DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS       = 0x00000005,
    DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS   = 0x00000006,
    DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS     = 0x00000007,
    DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS     = 0x00000008,
    DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS = 0x00000009,
    DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS   = 0x0000000a,
    DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS       = 0x0000000b,
    DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS   = 0x0000000c,
    DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS     = 0x0000000d,
}
alias DWRITE_PANOSE_FINIALS = int;

enum : int
{
    DWRITE_PANOSE_XASCENT_ANY       = 0x00000000,
    DWRITE_PANOSE_XASCENT_NO_FIT    = 0x00000001,
    DWRITE_PANOSE_XASCENT_VERY_LOW  = 0x00000002,
    DWRITE_PANOSE_XASCENT_LOW       = 0x00000003,
    DWRITE_PANOSE_XASCENT_MEDIUM    = 0x00000004,
    DWRITE_PANOSE_XASCENT_HIGH      = 0x00000005,
    DWRITE_PANOSE_XASCENT_VERY_HIGH = 0x00000006,
}
alias DWRITE_PANOSE_XASCENT = int;

enum : int
{
    DWRITE_PANOSE_DECORATIVE_CLASS_ANY                  = 0x00000000,
    DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT               = 0x00000001,
    DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE           = 0x00000002,
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY = 0x00000003,
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS = 0x00000004,
    DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT   = 0x00000005,
    DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS             = 0x00000006,
    DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON              = 0x00000007,
    DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS        = 0x00000008,
    DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED           = 0x00000009,
    DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND  = 0x0000000a,
    DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE              = 0x0000000b,
    DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE              = 0x0000000c,
}
alias DWRITE_PANOSE_DECORATIVE_CLASS = int;

enum : int
{
    DWRITE_PANOSE_ASPECT_ANY             = 0x00000000,
    DWRITE_PANOSE_ASPECT_NO_FIT          = 0x00000001,
    DWRITE_PANOSE_ASPECT_SUPER_CONDENSED = 0x00000002,
    DWRITE_PANOSE_ASPECT_VERY_CONDENSED  = 0x00000003,
    DWRITE_PANOSE_ASPECT_CONDENSED       = 0x00000004,
    DWRITE_PANOSE_ASPECT_NORMAL          = 0x00000005,
    DWRITE_PANOSE_ASPECT_EXTENDED        = 0x00000006,
    DWRITE_PANOSE_ASPECT_VERY_EXTENDED   = 0x00000007,
    DWRITE_PANOSE_ASPECT_SUPER_EXTENDED  = 0x00000008,
    DWRITE_PANOSE_ASPECT_MONOSPACED      = 0x00000009,
}
alias DWRITE_PANOSE_ASPECT = int;

enum : int
{
    DWRITE_PANOSE_FILL_ANY                 = 0x00000000,
    DWRITE_PANOSE_FILL_NO_FIT              = 0x00000001,
    DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL = 0x00000002,
    DWRITE_PANOSE_FILL_NO_FILL             = 0x00000003,
    DWRITE_PANOSE_FILL_PATTERNED_FILL      = 0x00000004,
    DWRITE_PANOSE_FILL_COMPLEX_FILL        = 0x00000005,
    DWRITE_PANOSE_FILL_SHAPED_FILL         = 0x00000006,
    DWRITE_PANOSE_FILL_DRAWN_DISTRESSED    = 0x00000007,
}
alias DWRITE_PANOSE_FILL = int;

enum : int
{
    DWRITE_PANOSE_LINING_ANY      = 0x00000000,
    DWRITE_PANOSE_LINING_NO_FIT   = 0x00000001,
    DWRITE_PANOSE_LINING_NONE     = 0x00000002,
    DWRITE_PANOSE_LINING_INLINE   = 0x00000003,
    DWRITE_PANOSE_LINING_OUTLINE  = 0x00000004,
    DWRITE_PANOSE_LINING_ENGRAVED = 0x00000005,
    DWRITE_PANOSE_LINING_SHADOW   = 0x00000006,
    DWRITE_PANOSE_LINING_RELIEF   = 0x00000007,
    DWRITE_PANOSE_LINING_BACKDROP = 0x00000008,
}
alias DWRITE_PANOSE_LINING = int;

enum : int
{
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY                      = 0x00000000,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT                   = 0x00000001,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD                 = 0x00000002,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE                   = 0x00000003,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT         = 0x00000004,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO                 = 0x00000005,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING         = 0x00000006,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS             = 0x00000007,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS            = 0x00000008,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS          = 0x00000009,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE = 0x0000000a,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY         = 0x0000000b,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A        = 0x0000000c,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE                  = 0x0000000d,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER              = 0x0000000e,
    DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE           = 0x0000000f,
}
alias DWRITE_PANOSE_DECORATIVE_TOPOLOGY = int;

enum : int
{
    DWRITE_PANOSE_CHARACTER_RANGES_ANY                 = 0x00000000,
    DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT              = 0x00000001,
    DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION = 0x00000002,
    DWRITE_PANOSE_CHARACTER_RANGES_LITERALS            = 0x00000003,
    DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE       = 0x00000004,
    DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS          = 0x00000005,
}
alias DWRITE_PANOSE_CHARACTER_RANGES = int;

enum : int
{
    DWRITE_PANOSE_SYMBOL_KIND_ANY               = 0x00000000,
    DWRITE_PANOSE_SYMBOL_KIND_NO_FIT            = 0x00000001,
    DWRITE_PANOSE_SYMBOL_KIND_MONTAGES          = 0x00000002,
    DWRITE_PANOSE_SYMBOL_KIND_PICTURES          = 0x00000003,
    DWRITE_PANOSE_SYMBOL_KIND_SHAPES            = 0x00000004,
    DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC        = 0x00000005,
    DWRITE_PANOSE_SYMBOL_KIND_MUSIC             = 0x00000006,
    DWRITE_PANOSE_SYMBOL_KIND_EXPERT            = 0x00000007,
    DWRITE_PANOSE_SYMBOL_KIND_PATTERNS          = 0x00000008,
    DWRITE_PANOSE_SYMBOL_KIND_BOARDERS          = 0x00000009,
    DWRITE_PANOSE_SYMBOL_KIND_ICONS             = 0x0000000a,
    DWRITE_PANOSE_SYMBOL_KIND_LOGOS             = 0x0000000b,
    DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC = 0x0000000c,
}
alias DWRITE_PANOSE_SYMBOL_KIND = int;

enum : int
{
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY                = 0x00000000,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT             = 0x00000001,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH           = 0x00000002,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE = 0x00000003,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE         = 0x00000004,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE          = 0x00000005,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE               = 0x00000006,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL             = 0x00000007,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW             = 0x00000008,
    DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW        = 0x00000009,
}
alias DWRITE_PANOSE_SYMBOL_ASPECT_RATIO = int;

enum : int
{
    DWRITE_OUTLINE_THRESHOLD_ANTIALIASED = 0x00000000,
    DWRITE_OUTLINE_THRESHOLD_ALIASED     = 0x00000001,
}
alias DWRITE_OUTLINE_THRESHOLD = int;

enum : int
{
    DWRITE_BASELINE_DEFAULT            = 0x00000000,
    DWRITE_BASELINE_ROMAN              = 0x00000001,
    DWRITE_BASELINE_CENTRAL            = 0x00000002,
    DWRITE_BASELINE_MATH               = 0x00000003,
    DWRITE_BASELINE_HANGING            = 0x00000004,
    DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM = 0x00000005,
    DWRITE_BASELINE_IDEOGRAPHIC_TOP    = 0x00000006,
    DWRITE_BASELINE_MINIMUM            = 0x00000007,
    DWRITE_BASELINE_MAXIMUM            = 0x00000008,
}
alias DWRITE_BASELINE = int;

enum : int
{
    DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT = 0x00000000,
    DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED = 0x00000001,
}
alias DWRITE_VERTICAL_GLYPH_ORIENTATION = int;

enum : int
{
    DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES   = 0x00000000,
    DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES  = 0x00000001,
    DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES = 0x00000002,
    DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES = 0x00000003,
}
alias DWRITE_GLYPH_ORIENTATION_ANGLE = int;

enum : int
{
    DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE = 0x00000000,
    DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE = 0x00000001,
}
alias DWRITE_TEXT_ANTIALIAS_MODE = int;

enum : int
{
    DWRITE_OPTICAL_ALIGNMENT_NONE             = 0x00000000,
    DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS = 0x00000001,
}
alias DWRITE_OPTICAL_ALIGNMENT = int;

enum : int
{
    DWRITE_GRID_FIT_MODE_DEFAULT  = 0x00000000,
    DWRITE_GRID_FIT_MODE_DISABLED = 0x00000001,
    DWRITE_GRID_FIT_MODE_ENABLED  = 0x00000002,
}
alias DWRITE_GRID_FIT_MODE = int;

enum : int
{
    DWRITE_FONT_PROPERTY_ID_NONE                             = 0x00000000,
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME = 0x00000001,
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME          = 0x00000002,
    DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME   = 0x00000003,
    DWRITE_FONT_PROPERTY_ID_FULL_NAME                        = 0x00000004,
    DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME                = 0x00000005,
    DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME                  = 0x00000006,
    DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG       = 0x00000007,
    DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG    = 0x00000008,
    DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG                     = 0x00000009,
    DWRITE_FONT_PROPERTY_ID_WEIGHT                           = 0x0000000a,
    DWRITE_FONT_PROPERTY_ID_STRETCH                          = 0x0000000b,
    DWRITE_FONT_PROPERTY_ID_STYLE                            = 0x0000000c,
    DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME            = 0x0000000d,
    DWRITE_FONT_PROPERTY_ID_TOTAL                            = 0x0000000d,
    DWRITE_FONT_PROPERTY_ID_TOTAL_RS3                        = 0x0000000e,
    DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME            = 0x00000002,
    DWRITE_FONT_PROPERTY_ID_FAMILY_NAME                      = 0x00000001,
    DWRITE_FONT_PROPERTY_ID_FACE_NAME                        = 0x00000003,
}
alias DWRITE_FONT_PROPERTY_ID = int;

enum : int
{
    DWRITE_LOCALITY_REMOTE  = 0x00000000,
    DWRITE_LOCALITY_PARTIAL = 0x00000001,
    DWRITE_LOCALITY_LOCAL   = 0x00000002,
}
alias DWRITE_LOCALITY = int;

enum : int
{
    DWRITE_RENDERING_MODE1_DEFAULT                       = 0x00000000,
    DWRITE_RENDERING_MODE1_ALIASED                       = 0x00000001,
    DWRITE_RENDERING_MODE1_GDI_CLASSIC                   = 0x00000002,
    DWRITE_RENDERING_MODE1_GDI_NATURAL                   = 0x00000003,
    DWRITE_RENDERING_MODE1_NATURAL                       = 0x00000004,
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC             = 0x00000005,
    DWRITE_RENDERING_MODE1_OUTLINE                       = 0x00000006,
    DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED = 0x00000007,
}
alias DWRITE_RENDERING_MODE1 = int;

enum : int
{
    DWRITE_FONT_LINE_GAP_USAGE_DEFAULT  = 0x00000000,
    DWRITE_FONT_LINE_GAP_USAGE_DISABLED = 0x00000001,
    DWRITE_FONT_LINE_GAP_USAGE_ENABLED  = 0x00000002,
}
alias DWRITE_FONT_LINE_GAP_USAGE = int;

enum : int
{
    DWRITE_CONTAINER_TYPE_UNKNOWN = 0x00000000,
    DWRITE_CONTAINER_TYPE_WOFF    = 0x00000001,
    DWRITE_CONTAINER_TYPE_WOFF2   = 0x00000002,
}
alias DWRITE_CONTAINER_TYPE = int;

enum : int
{
    DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC          = 0x00000000,
    DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE = 0x00000001,
}
alias DWRITE_FONT_FAMILY_MODEL = int;

enum : int
{
    DWRITE_AUTOMATIC_FONT_AXES_NONE         = 0x00000000,
    DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE = 0x00000001,
}
alias DWRITE_AUTOMATIC_FONT_AXES = int;

enum : int
{
    DWRITE_FONT_AXIS_ATTRIBUTES_NONE     = 0x00000000,
    DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE = 0x00000001,
    DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN   = 0x00000002,
}
alias DWRITE_FONT_AXIS_ATTRIBUTES = int;

enum : int
{
    DWRITE_FONT_SOURCE_TYPE_UNKNOWN              = 0x00000000,
    DWRITE_FONT_SOURCE_TYPE_PER_MACHINE          = 0x00000001,
    DWRITE_FONT_SOURCE_TYPE_PER_USER             = 0x00000002,
    DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE         = 0x00000003,
    DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER = 0x00000004,
}
alias DWRITE_FONT_SOURCE_TYPE = int;

enum : int
{
    DWRITE_MEASURING_MODE_NATURAL     = 0x00000000,
    DWRITE_MEASURING_MODE_GDI_CLASSIC = 0x00000001,
    DWRITE_MEASURING_MODE_GDI_NATURAL = 0x00000002,
}
alias DWRITE_MEASURING_MODE = int;

enum : int
{
    DWRITE_GLYPH_IMAGE_FORMATS_NONE                   = 0x00000000,
    DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE               = 0x00000001,
    DWRITE_GLYPH_IMAGE_FORMATS_CFF                    = 0x00000002,
    DWRITE_GLYPH_IMAGE_FORMATS_COLR                   = 0x00000004,
    DWRITE_GLYPH_IMAGE_FORMATS_SVG                    = 0x00000008,
    DWRITE_GLYPH_IMAGE_FORMATS_PNG                    = 0x00000010,
    DWRITE_GLYPH_IMAGE_FORMATS_JPEG                   = 0x00000020,
    DWRITE_GLYPH_IMAGE_FORMATS_TIFF                   = 0x00000040,
    DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8 = 0x00000080,
}
alias DWRITE_GLYPH_IMAGE_FORMATS = int;

// Structs


struct DWRITE_FONT_METRICS
{
    ushort designUnitsPerEm;
    ushort ascent;
    ushort descent;
    short  lineGap;
    ushort capHeight;
    ushort xHeight;
    short  underlinePosition;
    ushort underlineThickness;
    short  strikethroughPosition;
    ushort strikethroughThickness;
}

struct DWRITE_GLYPH_METRICS
{
    int  leftSideBearing;
    uint advanceWidth;
    int  rightSideBearing;
    int  topSideBearing;
    uint advanceHeight;
    int  bottomSideBearing;
    int  verticalOriginY;
}

struct DWRITE_GLYPH_OFFSET
{
    float advanceOffset;
    float ascenderOffset;
}

struct DWRITE_MATRIX
{
    float m11;
    float m12;
    float m21;
    float m22;
    float dx;
    float dy;
}

struct DWRITE_TEXT_RANGE
{
    uint startPosition;
    uint length;
}

struct DWRITE_FONT_FEATURE
{
    DWRITE_FONT_FEATURE_TAG nameTag;
    uint parameter;
}

struct DWRITE_TYPOGRAPHIC_FEATURES
{
    DWRITE_FONT_FEATURE* features;
    uint                 featureCount;
}

struct DWRITE_TRIMMING
{
    DWRITE_TRIMMING_GRANULARITY granularity;
    uint delimiter;
    uint delimiterCount;
}

struct DWRITE_SCRIPT_ANALYSIS
{
    ushort               script;
    DWRITE_SCRIPT_SHAPES shapes;
}

struct DWRITE_LINE_BREAKPOINT
{
    ubyte _bitfield22;
}

struct DWRITE_SHAPING_TEXT_PROPERTIES
{
    ushort _bitfield23;
}

struct DWRITE_SHAPING_GLYPH_PROPERTIES
{
    ushort _bitfield24;
}

struct DWRITE_GLYPH_RUN
{
    IDWriteFontFace fontFace;
    float           fontEmSize;
    uint            glyphCount;
    const(ushort)*  glyphIndices;
    const(float)*   glyphAdvances;
    const(DWRITE_GLYPH_OFFSET)* glyphOffsets;
    BOOL            isSideways;
    uint            bidiLevel;
}

struct DWRITE_GLYPH_RUN_DESCRIPTION
{
    const(wchar)*  localeName;
    const(wchar)*  string;
    uint           stringLength;
    const(ushort)* clusterMap;
    uint           textPosition;
}

struct DWRITE_UNDERLINE
{
    float         width;
    float         thickness;
    float         offset;
    float         runHeight;
    DWRITE_READING_DIRECTION readingDirection;
    DWRITE_FLOW_DIRECTION flowDirection;
    const(wchar)* localeName;
    DWRITE_MEASURING_MODE measuringMode;
}

struct DWRITE_STRIKETHROUGH
{
    float         width;
    float         thickness;
    float         offset;
    DWRITE_READING_DIRECTION readingDirection;
    DWRITE_FLOW_DIRECTION flowDirection;
    const(wchar)* localeName;
    DWRITE_MEASURING_MODE measuringMode;
}

struct DWRITE_LINE_METRICS
{
    uint  length;
    uint  trailingWhitespaceLength;
    uint  newlineLength;
    float height;
    float baseline;
    BOOL  isTrimmed;
}

struct DWRITE_CLUSTER_METRICS
{
    float  width;
    ushort length;
    ushort _bitfield25;
}

struct DWRITE_TEXT_METRICS
{
    float left;
    float top;
    float width;
    float widthIncludingTrailingWhitespace;
    float height;
    float layoutWidth;
    float layoutHeight;
    uint  maxBidiReorderingDepth;
    uint  lineCount;
}

struct DWRITE_INLINE_OBJECT_METRICS
{
    float width;
    float height;
    float baseline;
    BOOL  supportsSideways;
}

struct DWRITE_OVERHANG_METRICS
{
    float left;
    float top;
    float right;
    float bottom;
}

struct DWRITE_HIT_TEST_METRICS
{
    uint  textPosition;
    uint  length;
    float left;
    float top;
    float width;
    float height;
    uint  bidiLevel;
    BOOL  isText;
    BOOL  isTrimmed;
}

struct DWRITE_FONT_METRICS1
{
    DWRITE_FONT_METRICS __AnonymousBase_DWrite_1_L627_C38;
    short               glyphBoxLeft;
    short               glyphBoxTop;
    short               glyphBoxRight;
    short               glyphBoxBottom;
    short               subscriptPositionX;
    short               subscriptPositionY;
    short               subscriptSizeX;
    short               subscriptSizeY;
    short               superscriptPositionX;
    short               superscriptPositionY;
    short               superscriptSizeX;
    short               superscriptSizeY;
    BOOL                hasTypographicMetrics;
}

struct DWRITE_CARET_METRICS
{
    short slopeRise;
    short slopeRun;
    short offset;
}

union DWRITE_PANOSE
{
    ubyte[10] values;
    ubyte     familyKind;
    struct text
    {
        ubyte familyKind;
        ubyte serifStyle;
        ubyte weight;
        ubyte proportion;
        ubyte contrast;
        ubyte strokeVariation;
        ubyte armStyle;
        ubyte letterform;
        ubyte midline;
        ubyte xHeight;
    }
    struct script
    {
        ubyte familyKind;
        ubyte toolKind;
        ubyte weight;
        ubyte spacing;
        ubyte aspectRatio;
        ubyte contrast;
        ubyte scriptTopology;
        ubyte scriptForm;
        ubyte finials;
        ubyte xAscent;
    }
    struct decorative
    {
        ubyte familyKind;
        ubyte decorativeClass;
        ubyte weight;
        ubyte aspect;
        ubyte contrast;
        ubyte serifVariant;
        ubyte fill;
        ubyte lining;
        ubyte decorativeTopology;
        ubyte characterRange;
    }
    struct symbol
    {
        ubyte familyKind;
        ubyte symbolKind;
        ubyte weight;
        ubyte spacing;
        ubyte aspectRatioAndContrast;
        ubyte aspectRatio94;
        ubyte aspectRatio119;
        ubyte aspectRatio157;
        ubyte aspectRatio163;
        ubyte aspectRatio211;
    }
}

struct DWRITE_UNICODE_RANGE
{
    uint first;
    uint last;
}

struct DWRITE_SCRIPT_PROPERTIES
{
    uint isoScriptCode;
    uint isoScriptNumber;
    uint clusterLookahead;
    uint justificationCharacter;
    uint _bitfield26;
}

struct DWRITE_JUSTIFICATION_OPPORTUNITY
{
    float expansionMinimum;
    float expansionMaximum;
    float compressionMaximum;
    uint  _bitfield27;
}

struct DWRITE_TEXT_METRICS1
{
    DWRITE_TEXT_METRICS Base;
    float               heightIncludingTrailingWhitespace;
}

struct DWRITE_COLOR_GLYPH_RUN
{
    DWRITE_GLYPH_RUN glyphRun;
    DWRITE_GLYPH_RUN_DESCRIPTION* glyphRunDescription;
    float            baselineOriginX;
    float            baselineOriginY;
    DXGI_RGBA        runColor;
    ushort           paletteIndex;
}

struct DWRITE_FONT_PROPERTY
{
    DWRITE_FONT_PROPERTY_ID propertyId;
    const(wchar)* propertyValue;
    const(wchar)* localeName;
}

struct DWRITE_LINE_METRICS1
{
    DWRITE_LINE_METRICS Base;
    float               leadingBefore;
    float               leadingAfter;
}

struct DWRITE_LINE_SPACING
{
    DWRITE_LINE_SPACING_METHOD method;
    float height;
    float baseline;
    float leadingBefore;
    DWRITE_FONT_LINE_GAP_USAGE fontLineGapUsage;
}

struct DWRITE_COLOR_GLYPH_RUN1
{
    DWRITE_COLOR_GLYPH_RUN Base;
    DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat;
    DWRITE_MEASURING_MODE measuringMode;
}

struct DWRITE_GLYPH_IMAGE_DATA
{
    const(void)* imageData;
    uint         imageDataSize;
    uint         uniqueDataId;
    uint         pixelsPerEm;
    D2D_SIZE_U   pixelSize;
    POINT        horizontalLeftOrigin;
    POINT        horizontalRightOrigin;
    POINT        verticalTopOrigin;
    POINT        verticalBottomOrigin;
}

struct DWRITE_FILE_FRAGMENT
{
    ulong fileOffset;
    ulong fragmentSize;
}

struct DWRITE_FONT_AXIS_VALUE
{
    DWRITE_FONT_AXIS_TAG axisTag;
    float                value;
}

struct DWRITE_FONT_AXIS_RANGE
{
    DWRITE_FONT_AXIS_TAG axisTag;
    float                minValue;
    float                maxValue;
}

// Functions

@DllImport("DWrite")
HRESULT DWriteCreateFactory(DWRITE_FACTORY_TYPE factoryType, const(GUID)* iid, IUnknown* factory);


// Interfaces

@GUID("727CAD4E-D6AF-4C9E-8A08-D695B11CAA49")
interface IDWriteFontFileLoader : IUnknown
{
    HRESULT CreateStreamFromKey(char* fontFileReferenceKey, uint fontFileReferenceKeySize, 
                                IDWriteFontFileStream* fontFileStream);
}

@GUID("B2D9F3EC-C9FE-4A11-A2EC-D86208F7C0A2")
interface IDWriteLocalFontFileLoader : IDWriteFontFileLoader
{
    HRESULT GetFilePathLengthFromKey(char* fontFileReferenceKey, uint fontFileReferenceKeySize, 
                                     uint* filePathLength);
    HRESULT GetFilePathFromKey(char* fontFileReferenceKey, uint fontFileReferenceKeySize, char* filePath, 
                               uint filePathSize);
    HRESULT GetLastWriteTimeFromKey(char* fontFileReferenceKey, uint fontFileReferenceKeySize, 
                                    FILETIME* lastWriteTime);
}

@GUID("6D4865FE-0AB8-4D91-8F62-5DD6BE34A3E0")
interface IDWriteFontFileStream : IUnknown
{
    HRESULT ReadFileFragment(const(void)** fragmentStart, ulong fileOffset, ulong fragmentSize, 
                             void** fragmentContext);
    void    ReleaseFileFragment(void* fragmentContext);
    HRESULT GetFileSize(ulong* fileSize);
    HRESULT GetLastWriteTime(ulong* lastWriteTime);
}

@GUID("739D886A-CEF5-47DC-8769-1A8B41BEBBB0")
interface IDWriteFontFile : IUnknown
{
    HRESULT GetReferenceKey(const(void)** fontFileReferenceKey, uint* fontFileReferenceKeySize);
    HRESULT GetLoader(IDWriteFontFileLoader* fontFileLoader);
    HRESULT Analyze(int* isSupportedFontType, DWRITE_FONT_FILE_TYPE* fontFileType, 
                    DWRITE_FONT_FACE_TYPE* fontFaceType, uint* numberOfFaces);
}

@GUID("2F0DA53A-2ADD-47CD-82EE-D9EC34688E75")
interface IDWriteRenderingParams : IUnknown
{
    float GetGamma();
    float GetEnhancedContrast();
    float GetClearTypeLevel();
    DWRITE_PIXEL_GEOMETRY GetPixelGeometry();
    DWRITE_RENDERING_MODE GetRenderingMode();
}

@GUID("5F49804D-7024-4D43-BFA9-D25984F53849")
interface IDWriteFontFace : IUnknown
{
    DWRITE_FONT_FACE_TYPE GetType();
    HRESULT GetFiles(uint* numberOfFiles, char* fontFiles);
    uint    GetIndex();
    DWRITE_FONT_SIMULATIONS GetSimulations();
    BOOL    IsSymbolFont();
    void    GetMetrics(DWRITE_FONT_METRICS* fontFaceMetrics);
    ushort  GetGlyphCount();
    HRESULT GetDesignGlyphMetrics(char* glyphIndices, uint glyphCount, char* glyphMetrics, BOOL isSideways);
    HRESULT GetGlyphIndicesA(char* codePoints, uint codePointCount, char* glyphIndices);
    HRESULT TryGetFontTable(uint openTypeTableTag, const(void)** tableData, uint* tableSize, void** tableContext, 
                            int* exists);
    void    ReleaseFontTable(void* tableContext);
    HRESULT GetGlyphRunOutline(float emSize, char* glyphIndices, char* glyphAdvances, char* glyphOffsets, 
                               uint glyphCount, BOOL isSideways, BOOL isRightToLeft, 
                               ID2D1SimplifiedGeometrySink geometrySink);
    HRESULT GetRecommendedRenderingMode(float emSize, float pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, 
                                        IDWriteRenderingParams renderingParams, DWRITE_RENDERING_MODE* renderingMode);
    HRESULT GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, const(DWRITE_MATRIX)* transform, 
                                    DWRITE_FONT_METRICS* fontFaceMetrics);
    HRESULT GetGdiCompatibleGlyphMetrics(float emSize, float pixelsPerDip, const(DWRITE_MATRIX)* transform, 
                                         BOOL useGdiNatural, char* glyphIndices, uint glyphCount, char* glyphMetrics, 
                                         BOOL isSideways);
}

@GUID("CCA920E4-52F0-492B-BFA8-29C72EE0A468")
interface IDWriteFontCollectionLoader : IUnknown
{
    HRESULT CreateEnumeratorFromKey(IDWriteFactory factory, char* collectionKey, uint collectionKeySize, 
                                    IDWriteFontFileEnumerator* fontFileEnumerator);
}

@GUID("72755049-5FF7-435D-8348-4BE97CFA6C7C")
interface IDWriteFontFileEnumerator : IUnknown
{
    HRESULT MoveNext(int* hasCurrentFile);
    HRESULT GetCurrentFontFile(IDWriteFontFile* fontFile);
}

@GUID("08256209-099A-4B34-B86D-C22B110E7771")
interface IDWriteLocalizedStrings : IUnknown
{
    uint    GetCount();
    HRESULT FindLocaleName(const(wchar)* localeName, uint* index, int* exists);
    HRESULT GetLocaleNameLength(uint index, uint* length);
    HRESULT GetLocaleName(uint index, char* localeName, uint size);
    HRESULT GetStringLength(uint index, uint* length);
    HRESULT GetString(uint index, char* stringBuffer, uint size);
}

@GUID("A84CEE02-3EEA-4EEE-A827-87C1A02A0FCC")
interface IDWriteFontCollection : IUnknown
{
    uint    GetFontFamilyCount();
    HRESULT GetFontFamily(uint index, IDWriteFontFamily* fontFamily);
    HRESULT FindFamilyName(const(wchar)* familyName, uint* index, int* exists);
    HRESULT GetFontFromFontFace(IDWriteFontFace fontFace, IDWriteFont* font);
}

@GUID("1A0D8438-1D97-4EC1-AEF9-A2FB86ED6ACB")
interface IDWriteFontList : IUnknown
{
    HRESULT GetFontCollection(IDWriteFontCollection* fontCollection);
    uint    GetFontCount();
    HRESULT GetFont(uint index, IDWriteFont* font);
}

@GUID("DA20D8EF-812A-4C43-9802-62EC4ABD7ADD")
interface IDWriteFontFamily : IDWriteFontList
{
    HRESULT GetFamilyNames(IDWriteLocalizedStrings* names);
    HRESULT GetFirstMatchingFont(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, 
                                 IDWriteFont* matchingFont);
    HRESULT GetMatchingFonts(DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, 
                             IDWriteFontList* matchingFonts);
}

@GUID("ACD16696-8C14-4F5D-877E-FE3FC1D32737")
interface IDWriteFont : IUnknown
{
    HRESULT GetFontFamily(IDWriteFontFamily* fontFamily);
    DWRITE_FONT_WEIGHT GetWeight();
    DWRITE_FONT_STRETCH GetStretch();
    DWRITE_FONT_STYLE GetStyle();
    BOOL    IsSymbolFont();
    HRESULT GetFaceNames(IDWriteLocalizedStrings* names);
    HRESULT GetInformationalStrings(DWRITE_INFORMATIONAL_STRING_ID informationalStringID, 
                                    IDWriteLocalizedStrings* informationalStrings, int* exists);
    DWRITE_FONT_SIMULATIONS GetSimulations();
    void    GetMetrics(DWRITE_FONT_METRICS* fontMetrics);
    HRESULT HasCharacter(uint unicodeValue, int* exists);
    HRESULT CreateFontFace(IDWriteFontFace* fontFace);
}

@GUID("9C906818-31D7-4FD3-A151-7C5E225DB55A")
interface IDWriteTextFormat : IUnknown
{
    HRESULT SetTextAlignment(DWRITE_TEXT_ALIGNMENT textAlignment);
    HRESULT SetParagraphAlignment(DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment);
    HRESULT SetWordWrapping(DWRITE_WORD_WRAPPING wordWrapping);
    HRESULT SetReadingDirection(DWRITE_READING_DIRECTION readingDirection);
    HRESULT SetFlowDirection(DWRITE_FLOW_DIRECTION flowDirection);
    HRESULT SetIncrementalTabStop(float incrementalTabStop);
    HRESULT SetTrimming(const(DWRITE_TRIMMING)* trimmingOptions, IDWriteInlineObject trimmingSign);
    HRESULT SetLineSpacing(DWRITE_LINE_SPACING_METHOD lineSpacingMethod, float lineSpacing, float baseline);
    DWRITE_TEXT_ALIGNMENT GetTextAlignment();
    DWRITE_PARAGRAPH_ALIGNMENT GetParagraphAlignment();
    DWRITE_WORD_WRAPPING GetWordWrapping();
    DWRITE_READING_DIRECTION GetReadingDirection();
    DWRITE_FLOW_DIRECTION GetFlowDirection();
    float   GetIncrementalTabStop();
    HRESULT GetTrimming(DWRITE_TRIMMING* trimmingOptions, IDWriteInlineObject* trimmingSign);
    HRESULT GetLineSpacing(DWRITE_LINE_SPACING_METHOD* lineSpacingMethod, float* lineSpacing, float* baseline);
    HRESULT GetFontCollection(IDWriteFontCollection* fontCollection);
    uint    GetFontFamilyNameLength();
    HRESULT GetFontFamilyName(char* fontFamilyName, uint nameSize);
    DWRITE_FONT_WEIGHT GetFontWeight();
    DWRITE_FONT_STYLE GetFontStyle();
    DWRITE_FONT_STRETCH GetFontStretch();
    float   GetFontSize();
    uint    GetLocaleNameLength();
    HRESULT GetLocaleName(char* localeName, uint nameSize);
}

@GUID("55F1112B-1DC2-4B3C-9541-F46894ED85B6")
interface IDWriteTypography : IUnknown
{
    HRESULT AddFontFeature(DWRITE_FONT_FEATURE fontFeature);
    uint    GetFontFeatureCount();
    HRESULT GetFontFeature(uint fontFeatureIndex, DWRITE_FONT_FEATURE* fontFeature);
}

@GUID("14885CC9-BAB0-4F90-B6ED-5C366A2CD03D")
interface IDWriteNumberSubstitution : IUnknown
{
}

@GUID("688E1A58-5094-47C8-ADC8-FBCEA60AE92B")
interface IDWriteTextAnalysisSource : IUnknown
{
    HRESULT GetTextAtPosition(uint textPosition, const(ushort)** textString, uint* textLength);
    HRESULT GetTextBeforePosition(uint textPosition, const(ushort)** textString, uint* textLength);
    DWRITE_READING_DIRECTION GetParagraphReadingDirection();
    HRESULT GetLocaleName(uint textPosition, uint* textLength, const(ushort)** localeName);
    HRESULT GetNumberSubstitution(uint textPosition, uint* textLength, 
                                  IDWriteNumberSubstitution* numberSubstitution);
}

@GUID("5810CD44-0CA0-4701-B3FA-BEC5182AE4F6")
interface IDWriteTextAnalysisSink : IUnknown
{
    HRESULT SetScriptAnalysis(uint textPosition, uint textLength, const(DWRITE_SCRIPT_ANALYSIS)* scriptAnalysis);
    HRESULT SetLineBreakpoints(uint textPosition, uint textLength, char* lineBreakpoints);
    HRESULT SetBidiLevel(uint textPosition, uint textLength, ubyte explicitLevel, ubyte resolvedLevel);
    HRESULT SetNumberSubstitution(uint textPosition, uint textLength, IDWriteNumberSubstitution numberSubstitution);
}

@GUID("B7E6163E-7F46-43B4-84B3-E4E6249C365D")
interface IDWriteTextAnalyzer : IUnknown
{
    HRESULT AnalyzeScript(IDWriteTextAnalysisSource analysisSource, uint textPosition, uint textLength, 
                          IDWriteTextAnalysisSink analysisSink);
    HRESULT AnalyzeBidi(IDWriteTextAnalysisSource analysisSource, uint textPosition, uint textLength, 
                        IDWriteTextAnalysisSink analysisSink);
    HRESULT AnalyzeNumberSubstitution(IDWriteTextAnalysisSource analysisSource, uint textPosition, uint textLength, 
                                      IDWriteTextAnalysisSink analysisSink);
    HRESULT AnalyzeLineBreakpoints(IDWriteTextAnalysisSource analysisSource, uint textPosition, uint textLength, 
                                   IDWriteTextAnalysisSink analysisSink);
    HRESULT GetGlyphs(const(wchar)* textString, uint textLength, IDWriteFontFace fontFace, BOOL isSideways, 
                      BOOL isRightToLeft, const(DWRITE_SCRIPT_ANALYSIS)* scriptAnalysis, const(wchar)* localeName, 
                      IDWriteNumberSubstitution numberSubstitution, char* features, char* featureRangeLengths, 
                      uint featureRanges, uint maxGlyphCount, char* clusterMap, char* textProps, char* glyphIndices, 
                      char* glyphProps, uint* actualGlyphCount);
    HRESULT GetGlyphPlacements(const(wchar)* textString, char* clusterMap, char* textProps, uint textLength, 
                               char* glyphIndices, char* glyphProps, uint glyphCount, IDWriteFontFace fontFace, 
                               float fontEmSize, BOOL isSideways, BOOL isRightToLeft, 
                               const(DWRITE_SCRIPT_ANALYSIS)* scriptAnalysis, const(wchar)* localeName, 
                               char* features, char* featureRangeLengths, uint featureRanges, char* glyphAdvances, 
                               char* glyphOffsets);
    HRESULT GetGdiCompatibleGlyphPlacements(const(wchar)* textString, char* clusterMap, char* textProps, 
                                            uint textLength, char* glyphIndices, char* glyphProps, uint glyphCount, 
                                            IDWriteFontFace fontFace, float fontEmSize, float pixelsPerDip, 
                                            const(DWRITE_MATRIX)* transform, BOOL useGdiNatural, BOOL isSideways, 
                                            BOOL isRightToLeft, const(DWRITE_SCRIPT_ANALYSIS)* scriptAnalysis, 
                                            const(wchar)* localeName, char* features, char* featureRangeLengths, 
                                            uint featureRanges, char* glyphAdvances, char* glyphOffsets);
}

@GUID("8339FDE3-106F-47AB-8373-1C6295EB10B3")
interface IDWriteInlineObject : IUnknown
{
    HRESULT Draw(void* clientDrawingContext, IDWriteTextRenderer renderer, float originX, float originY, 
                 BOOL isSideways, BOOL isRightToLeft, IUnknown clientDrawingEffect);
    HRESULT GetMetrics(DWRITE_INLINE_OBJECT_METRICS* metrics);
    HRESULT GetOverhangMetrics(DWRITE_OVERHANG_METRICS* overhangs);
    HRESULT GetBreakConditions(DWRITE_BREAK_CONDITION* breakConditionBefore, 
                               DWRITE_BREAK_CONDITION* breakConditionAfter);
}

@GUID("EAF3A2DA-ECF4-4D24-B644-B34F6842024B")
interface IDWritePixelSnapping : IUnknown
{
    HRESULT IsPixelSnappingDisabled(void* clientDrawingContext, int* isDisabled);
    HRESULT GetCurrentTransform(void* clientDrawingContext, DWRITE_MATRIX* transform);
    HRESULT GetPixelsPerDip(void* clientDrawingContext, float* pixelsPerDip);
}

@GUID("EF8A8135-5CC6-45FE-8825-C5A0724EB819")
interface IDWriteTextRenderer : IDWritePixelSnapping
{
    HRESULT DrawGlyphRun(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, 
                         DWRITE_MEASURING_MODE measuringMode, const(DWRITE_GLYPH_RUN)* glyphRun, 
                         const(DWRITE_GLYPH_RUN_DESCRIPTION)* glyphRunDescription, IUnknown clientDrawingEffect);
    HRESULT DrawUnderline(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, 
                          const(DWRITE_UNDERLINE)* underline, IUnknown clientDrawingEffect);
    HRESULT DrawStrikethrough(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, 
                              const(DWRITE_STRIKETHROUGH)* strikethrough, IUnknown clientDrawingEffect);
    HRESULT DrawInlineObject(void* clientDrawingContext, float originX, float originY, 
                             IDWriteInlineObject inlineObject, BOOL isSideways, BOOL isRightToLeft, 
                             IUnknown clientDrawingEffect);
}

@GUID("53737037-6D14-410B-9BFE-0B182BB70961")
interface IDWriteTextLayout : IDWriteTextFormat
{
    HRESULT SetMaxWidth(float maxWidth);
    HRESULT SetMaxHeight(float maxHeight);
    HRESULT SetFontCollection(IDWriteFontCollection fontCollection, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontFamilyName(const(wchar)* fontFamilyName, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontWeight(DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontStyle(DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontStretch(DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange);
    HRESULT SetFontSize(float fontSize, DWRITE_TEXT_RANGE textRange);
    HRESULT SetUnderline(BOOL hasUnderline, DWRITE_TEXT_RANGE textRange);
    HRESULT SetStrikethrough(BOOL hasStrikethrough, DWRITE_TEXT_RANGE textRange);
    HRESULT SetDrawingEffect(IUnknown drawingEffect, DWRITE_TEXT_RANGE textRange);
    HRESULT SetInlineObject(IDWriteInlineObject inlineObject, DWRITE_TEXT_RANGE textRange);
    HRESULT SetTypography(IDWriteTypography typography, DWRITE_TEXT_RANGE textRange);
    HRESULT SetLocaleName(const(wchar)* localeName, DWRITE_TEXT_RANGE textRange);
    float   GetMaxWidth();
    float   GetMaxHeight();
    HRESULT GetFontCollection(uint currentPosition, IDWriteFontCollection* fontCollection, 
                              DWRITE_TEXT_RANGE* textRange);
    HRESULT GetFontFamilyNameLength(uint currentPosition, uint* nameLength, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetFontFamilyName(uint currentPosition, char* fontFamilyName, uint nameSize, 
                              DWRITE_TEXT_RANGE* textRange);
    HRESULT GetFontWeight(uint currentPosition, DWRITE_FONT_WEIGHT* fontWeight, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetFontStyle(uint currentPosition, DWRITE_FONT_STYLE* fontStyle, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetFontStretch(uint currentPosition, DWRITE_FONT_STRETCH* fontStretch, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetFontSize(uint currentPosition, float* fontSize, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetUnderline(uint currentPosition, int* hasUnderline, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetStrikethrough(uint currentPosition, int* hasStrikethrough, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetDrawingEffect(uint currentPosition, IUnknown* drawingEffect, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetInlineObject(uint currentPosition, IDWriteInlineObject* inlineObject, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetTypography(uint currentPosition, IDWriteTypography* typography, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetLocaleNameLength(uint currentPosition, uint* nameLength, DWRITE_TEXT_RANGE* textRange);
    HRESULT GetLocaleName(uint currentPosition, char* localeName, uint nameSize, DWRITE_TEXT_RANGE* textRange);
    HRESULT Draw(void* clientDrawingContext, IDWriteTextRenderer renderer, float originX, float originY);
    HRESULT GetLineMetrics(char* lineMetrics, uint maxLineCount, uint* actualLineCount);
    HRESULT GetMetrics(DWRITE_TEXT_METRICS* textMetrics);
    HRESULT GetOverhangMetrics(DWRITE_OVERHANG_METRICS* overhangs);
    HRESULT GetClusterMetrics(char* clusterMetrics, uint maxClusterCount, uint* actualClusterCount);
    HRESULT DetermineMinWidth(float* minWidth);
    HRESULT HitTestPoint(float pointX, float pointY, int* isTrailingHit, int* isInside, 
                         DWRITE_HIT_TEST_METRICS* hitTestMetrics);
    HRESULT HitTestTextPosition(uint textPosition, BOOL isTrailingHit, float* pointX, float* pointY, 
                                DWRITE_HIT_TEST_METRICS* hitTestMetrics);
    HRESULT HitTestTextRange(uint textPosition, uint textLength, float originX, float originY, 
                             char* hitTestMetrics, uint maxHitTestMetricsCount, uint* actualHitTestMetricsCount);
}

@GUID("5E5A32A3-8DFF-4773-9FF6-0696EAB77267")
interface IDWriteBitmapRenderTarget : IUnknown
{
    HRESULT DrawGlyphRun(float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, 
                         const(DWRITE_GLYPH_RUN)* glyphRun, IDWriteRenderingParams renderingParams, uint textColor, 
                         RECT* blackBoxRect);
    HDC     GetMemoryDC();
    float   GetPixelsPerDip();
    HRESULT SetPixelsPerDip(float pixelsPerDip);
    HRESULT GetCurrentTransform(DWRITE_MATRIX* transform);
    HRESULT SetCurrentTransform(const(DWRITE_MATRIX)* transform);
    HRESULT GetSize(SIZE* size);
    HRESULT Resize(uint width, uint height);
}

@GUID("1EDD9491-9853-4299-898F-6432983B6F3A")
interface IDWriteGdiInterop : IUnknown
{
    HRESULT CreateFontFromLOGFONT(const(LOGFONTW)* logFont, IDWriteFont* font);
    HRESULT ConvertFontToLOGFONT(IDWriteFont font, LOGFONTW* logFont, int* isSystemFont);
    HRESULT ConvertFontFaceToLOGFONT(IDWriteFontFace font, LOGFONTW* logFont);
    HRESULT CreateFontFaceFromHdc(HDC hdc, IDWriteFontFace* fontFace);
    HRESULT CreateBitmapRenderTarget(HDC hdc, uint width, uint height, IDWriteBitmapRenderTarget* renderTarget);
}

@GUID("7D97DBF7-E085-42D4-81E3-6A883BDED118")
interface IDWriteGlyphRunAnalysis : IUnknown
{
    HRESULT GetAlphaTextureBounds(DWRITE_TEXTURE_TYPE textureType, RECT* textureBounds);
    HRESULT CreateAlphaTexture(DWRITE_TEXTURE_TYPE textureType, const(RECT)* textureBounds, char* alphaValues, 
                               uint bufferSize);
    HRESULT GetAlphaBlendParams(IDWriteRenderingParams renderingParams, float* blendGamma, 
                                float* blendEnhancedContrast, float* blendClearTypeLevel);
}

@GUID("B859EE5A-D838-4B5B-A2E8-1ADC7D93DB48")
interface IDWriteFactory : IUnknown
{
    HRESULT GetSystemFontCollection(IDWriteFontCollection* fontCollection, BOOL checkForUpdates);
    HRESULT CreateCustomFontCollection(IDWriteFontCollectionLoader collectionLoader, char* collectionKey, 
                                       uint collectionKeySize, IDWriteFontCollection* fontCollection);
    HRESULT RegisterFontCollectionLoader(IDWriteFontCollectionLoader fontCollectionLoader);
    HRESULT UnregisterFontCollectionLoader(IDWriteFontCollectionLoader fontCollectionLoader);
    HRESULT CreateFontFileReference(const(wchar)* filePath, const(FILETIME)* lastWriteTime, 
                                    IDWriteFontFile* fontFile);
    HRESULT CreateCustomFontFileReference(char* fontFileReferenceKey, uint fontFileReferenceKeySize, 
                                          IDWriteFontFileLoader fontFileLoader, IDWriteFontFile* fontFile);
    HRESULT CreateFontFace(DWRITE_FONT_FACE_TYPE fontFaceType, uint numberOfFiles, char* fontFiles, uint faceIndex, 
                           DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, IDWriteFontFace* fontFace);
    HRESULT CreateRenderingParams(IDWriteRenderingParams* renderingParams);
    HRESULT CreateMonitorRenderingParams(ptrdiff_t monitor, IDWriteRenderingParams* renderingParams);
    HRESULT CreateCustomRenderingParams(float gamma, float enhancedContrast, float clearTypeLevel, 
                                        DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, 
                                        IDWriteRenderingParams* renderingParams);
    HRESULT RegisterFontFileLoader(IDWriteFontFileLoader fontFileLoader);
    HRESULT UnregisterFontFileLoader(IDWriteFontFileLoader fontFileLoader);
    HRESULT CreateTextFormat(const(wchar)* fontFamilyName, IDWriteFontCollection fontCollection, 
                             DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, 
                             DWRITE_FONT_STRETCH fontStretch, float fontSize, const(wchar)* localeName, 
                             IDWriteTextFormat* textFormat);
    HRESULT CreateTypography(IDWriteTypography* typography);
    HRESULT GetGdiInterop(IDWriteGdiInterop* gdiInterop);
    HRESULT CreateTextLayout(const(wchar)* string, uint stringLength, IDWriteTextFormat textFormat, float maxWidth, 
                             float maxHeight, IDWriteTextLayout* textLayout);
    HRESULT CreateGdiCompatibleTextLayout(const(wchar)* string, uint stringLength, IDWriteTextFormat textFormat, 
                                          float layoutWidth, float layoutHeight, float pixelsPerDip, 
                                          const(DWRITE_MATRIX)* transform, BOOL useGdiNatural, 
                                          IDWriteTextLayout* textLayout);
    HRESULT CreateEllipsisTrimmingSign(IDWriteTextFormat textFormat, IDWriteInlineObject* trimmingSign);
    HRESULT CreateTextAnalyzer(IDWriteTextAnalyzer* textAnalyzer);
    HRESULT CreateNumberSubstitution(DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, 
                                     const(wchar)* localeName, BOOL ignoreUserOverride, 
                                     IDWriteNumberSubstitution* numberSubstitution);
    HRESULT CreateGlyphRunAnalysis(const(DWRITE_GLYPH_RUN)* glyphRun, float pixelsPerDip, 
                                   const(DWRITE_MATRIX)* transform, DWRITE_RENDERING_MODE renderingMode, 
                                   DWRITE_MEASURING_MODE measuringMode, float baselineOriginX, float baselineOriginY, 
                                   IDWriteGlyphRunAnalysis* glyphRunAnalysis);
}

@GUID("30572F99-DAC6-41DB-A16E-0486307E606A")
interface IDWriteFactory1 : IDWriteFactory
{
    HRESULT GetEudcFontCollection(IDWriteFontCollection* fontCollection, BOOL checkForUpdates);
    HRESULT CreateCustomRenderingParams(float gamma, float enhancedContrast, float enhancedContrastGrayscale, 
                                        float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, 
                                        DWRITE_RENDERING_MODE renderingMode, 
                                        IDWriteRenderingParams1* renderingParams);
}

@GUID("A71EFDB4-9FDB-4838-AD90-CFC3BE8C3DAF")
interface IDWriteFontFace1 : IDWriteFontFace
{
    void    GetMetrics(DWRITE_FONT_METRICS1* fontMetrics);
    HRESULT GetGdiCompatibleMetrics(float emSize, float pixelsPerDip, const(DWRITE_MATRIX)* transform, 
                                    DWRITE_FONT_METRICS1* fontMetrics);
    void    GetCaretMetrics(DWRITE_CARET_METRICS* caretMetrics);
    HRESULT GetUnicodeRanges(uint maxRangeCount, char* unicodeRanges, uint* actualRangeCount);
    BOOL    IsMonospacedFont();
    HRESULT GetDesignGlyphAdvances(uint glyphCount, char* glyphIndices, char* glyphAdvances, BOOL isSideways);
    HRESULT GetGdiCompatibleGlyphAdvances(float emSize, float pixelsPerDip, const(DWRITE_MATRIX)* transform, 
                                          BOOL useGdiNatural, BOOL isSideways, uint glyphCount, char* glyphIndices, 
                                          char* glyphAdvances);
    HRESULT GetKerningPairAdjustments(uint glyphCount, char* glyphIndices, char* glyphAdvanceAdjustments);
    BOOL    HasKerningPairs();
    HRESULT GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, const(DWRITE_MATRIX)* transform, 
                                        BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, 
                                        DWRITE_MEASURING_MODE measuringMode, DWRITE_RENDERING_MODE* renderingMode);
    HRESULT GetVerticalGlyphVariants(uint glyphCount, char* nominalGlyphIndices, char* verticalGlyphIndices);
    BOOL    HasVerticalGlyphVariants();
}

@GUID("ACD16696-8C14-4F5D-877E-FE3FC1D32738")
interface IDWriteFont1 : IDWriteFont
{
    void    GetMetrics(DWRITE_FONT_METRICS1* fontMetrics);
    void    GetPanose(DWRITE_PANOSE* panose);
    HRESULT GetUnicodeRanges(uint maxRangeCount, char* unicodeRanges, uint* actualRangeCount);
    BOOL    IsMonospacedFont();
}

@GUID("94413CF4-A6FC-4248-8B50-6674348FCAD3")
interface IDWriteRenderingParams1 : IDWriteRenderingParams
{
    float GetGrayscaleEnhancedContrast();
}

@GUID("80DAD800-E21F-4E83-96CE-BFCCE500DB7C")
interface IDWriteTextAnalyzer1 : IDWriteTextAnalyzer
{
    HRESULT ApplyCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, 
                                  uint textLength, uint glyphCount, char* clusterMap, char* glyphAdvances, 
                                  char* glyphOffsets, char* glyphProperties, char* modifiedGlyphAdvances, 
                                  char* modifiedGlyphOffsets);
    HRESULT GetBaseline(IDWriteFontFace fontFace, DWRITE_BASELINE baseline, BOOL isVertical, 
                        BOOL isSimulationAllowed, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, const(wchar)* localeName, 
                        int* baselineCoordinate, int* exists);
    HRESULT AnalyzeVerticalGlyphOrientation(IDWriteTextAnalysisSource1 analysisSource, uint textPosition, 
                                            uint textLength, IDWriteTextAnalysisSink1 analysisSink);
    HRESULT GetGlyphOrientationTransform(DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, BOOL isSideways, 
                                         DWRITE_MATRIX* transform);
    HRESULT GetScriptProperties(DWRITE_SCRIPT_ANALYSIS scriptAnalysis, DWRITE_SCRIPT_PROPERTIES* scriptProperties);
    HRESULT GetTextComplexity(const(wchar)* textString, uint textLength, IDWriteFontFace fontFace, 
                              int* isTextSimple, uint* textLengthRead, char* glyphIndices);
    HRESULT GetJustificationOpportunities(IDWriteFontFace fontFace, float fontEmSize, 
                                          DWRITE_SCRIPT_ANALYSIS scriptAnalysis, uint textLength, uint glyphCount, 
                                          const(wchar)* textString, char* clusterMap, char* glyphProperties, 
                                          char* justificationOpportunities);
    HRESULT JustifyGlyphAdvances(float lineWidth, uint glyphCount, char* justificationOpportunities, 
                                 char* glyphAdvances, char* glyphOffsets, char* justifiedGlyphAdvances, 
                                 char* justifiedGlyphOffsets);
    HRESULT GetJustifiedGlyphs(IDWriteFontFace fontFace, float fontEmSize, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, 
                               uint textLength, uint glyphCount, uint maxGlyphCount, char* clusterMap, 
                               char* glyphIndices, char* glyphAdvances, char* justifiedGlyphAdvances, 
                               char* justifiedGlyphOffsets, char* glyphProperties, uint* actualGlyphCount, 
                               char* modifiedClusterMap, char* modifiedGlyphIndices, char* modifiedGlyphAdvances, 
                               char* modifiedGlyphOffsets);
}

@GUID("639CFAD8-0FB4-4B21-A58A-067920120009")
interface IDWriteTextAnalysisSource1 : IDWriteTextAnalysisSource
{
    HRESULT GetVerticalGlyphOrientation(uint textPosition, uint* textLength, 
                                        DWRITE_VERTICAL_GLYPH_ORIENTATION* glyphOrientation, ubyte* bidiLevel);
}

@GUID("B0D941A0-85E7-4D8B-9FD3-5CED9934482A")
interface IDWriteTextAnalysisSink1 : IDWriteTextAnalysisSink
{
    HRESULT SetGlyphOrientation(uint textPosition, uint textLength, 
                                DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, ubyte adjustedBidiLevel, 
                                BOOL isSideways, BOOL isRightToLeft);
}

@GUID("9064D822-80A7-465C-A986-DF65F78B8FEB")
interface IDWriteTextLayout1 : IDWriteTextLayout
{
    HRESULT SetPairKerning(BOOL isPairKerningEnabled, DWRITE_TEXT_RANGE textRange);
    HRESULT GetPairKerning(uint currentPosition, int* isPairKerningEnabled, DWRITE_TEXT_RANGE* textRange);
    HRESULT SetCharacterSpacing(float leadingSpacing, float trailingSpacing, float minimumAdvanceWidth, 
                                DWRITE_TEXT_RANGE textRange);
    HRESULT GetCharacterSpacing(uint currentPosition, float* leadingSpacing, float* trailingSpacing, 
                                float* minimumAdvanceWidth, DWRITE_TEXT_RANGE* textRange);
}

@GUID("791E8298-3EF3-4230-9880-C9BDECC42064")
interface IDWriteBitmapRenderTarget1 : IDWriteBitmapRenderTarget
{
    DWRITE_TEXT_ANTIALIAS_MODE GetTextAntialiasMode();
    HRESULT SetTextAntialiasMode(DWRITE_TEXT_ANTIALIAS_MODE antialiasMode);
}

@GUID("D3E0E934-22A0-427E-AAE4-7D9574B59DB1")
interface IDWriteTextRenderer1 : IDWriteTextRenderer
{
    HRESULT DrawGlyphRun(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, 
                         DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, DWRITE_MEASURING_MODE measuringMode, 
                         const(DWRITE_GLYPH_RUN)* glyphRun, const(DWRITE_GLYPH_RUN_DESCRIPTION)* glyphRunDescription, 
                         IUnknown clientDrawingEffect);
    HRESULT DrawUnderline(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, 
                          DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, const(DWRITE_UNDERLINE)* underline, 
                          IUnknown clientDrawingEffect);
    HRESULT DrawStrikethrough(void* clientDrawingContext, float baselineOriginX, float baselineOriginY, 
                              DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, 
                              const(DWRITE_STRIKETHROUGH)* strikethrough, IUnknown clientDrawingEffect);
    HRESULT DrawInlineObject(void* clientDrawingContext, float originX, float originY, 
                             DWRITE_GLYPH_ORIENTATION_ANGLE orientationAngle, IDWriteInlineObject inlineObject, 
                             BOOL isSideways, BOOL isRightToLeft, IUnknown clientDrawingEffect);
}

@GUID("5F174B49-0D8B-4CFB-8BCA-F1CCE9D06C67")
interface IDWriteTextFormat1 : IDWriteTextFormat
{
    HRESULT SetVerticalGlyphOrientation(DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation);
    DWRITE_VERTICAL_GLYPH_ORIENTATION GetVerticalGlyphOrientation();
    HRESULT SetLastLineWrapping(BOOL isLastLineWrappingEnabled);
    BOOL    GetLastLineWrapping();
    HRESULT SetOpticalAlignment(DWRITE_OPTICAL_ALIGNMENT opticalAlignment);
    DWRITE_OPTICAL_ALIGNMENT GetOpticalAlignment();
    HRESULT SetFontFallback(IDWriteFontFallback fontFallback);
    HRESULT GetFontFallback(IDWriteFontFallback* fontFallback);
}

@GUID("1093C18F-8D5E-43F0-B064-0917311B525E")
interface IDWriteTextLayout2 : IDWriteTextLayout1
{
    HRESULT GetMetrics(DWRITE_TEXT_METRICS1* textMetrics);
    HRESULT SetVerticalGlyphOrientation(DWRITE_VERTICAL_GLYPH_ORIENTATION glyphOrientation);
    DWRITE_VERTICAL_GLYPH_ORIENTATION GetVerticalGlyphOrientation();
    HRESULT SetLastLineWrapping(BOOL isLastLineWrappingEnabled);
    BOOL    GetLastLineWrapping();
    HRESULT SetOpticalAlignment(DWRITE_OPTICAL_ALIGNMENT opticalAlignment);
    DWRITE_OPTICAL_ALIGNMENT GetOpticalAlignment();
    HRESULT SetFontFallback(IDWriteFontFallback fontFallback);
    HRESULT GetFontFallback(IDWriteFontFallback* fontFallback);
}

@GUID("553A9FF3-5693-4DF7-B52B-74806F7F2EB9")
interface IDWriteTextAnalyzer2 : IDWriteTextAnalyzer1
{
    HRESULT GetGlyphOrientationTransform(DWRITE_GLYPH_ORIENTATION_ANGLE glyphOrientationAngle, BOOL isSideways, 
                                         float originX, float originY, DWRITE_MATRIX* transform);
    HRESULT GetTypographicFeatures(IDWriteFontFace fontFace, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, 
                                   const(wchar)* localeName, uint maxTagCount, uint* actualTagCount, char* tags);
    HRESULT CheckTypographicFeature(IDWriteFontFace fontFace, DWRITE_SCRIPT_ANALYSIS scriptAnalysis, 
                                    const(wchar)* localeName, DWRITE_FONT_FEATURE_TAG featureTag, uint glyphCount, 
                                    char* glyphIndices, char* featureApplies);
}

@GUID("EFA008F9-F7A1-48BF-B05C-F224713CC0FF")
interface IDWriteFontFallback : IUnknown
{
    HRESULT MapCharacters(IDWriteTextAnalysisSource analysisSource, uint textPosition, uint textLength, 
                          IDWriteFontCollection baseFontCollection, const(ushort)* baseFamilyName, 
                          DWRITE_FONT_WEIGHT baseWeight, DWRITE_FONT_STYLE baseStyle, 
                          DWRITE_FONT_STRETCH baseStretch, uint* mappedLength, IDWriteFont* mappedFont, float* scale);
}

@GUID("FD882D06-8ABA-4FB8-B849-8BE8B73E14DE")
interface IDWriteFontFallbackBuilder : IUnknown
{
    HRESULT AddMapping(char* ranges, uint rangesCount, char* targetFamilyNames, uint targetFamilyNamesCount, 
                       IDWriteFontCollection fontCollection, const(wchar)* localeName, const(wchar)* baseFamilyName, 
                       float scale);
    HRESULT AddMappings(IDWriteFontFallback fontFallback);
    HRESULT CreateFontFallback(IDWriteFontFallback* fontFallback);
}

@GUID("29748ED6-8C9C-4A6A-BE0B-D912E8538944")
interface IDWriteFont2 : IDWriteFont1
{
    BOOL IsColorFont();
}

@GUID("D8B768FF-64BC-4E66-982B-EC8E87F693F7")
interface IDWriteFontFace2 : IDWriteFontFace1
{
    BOOL    IsColorFont();
    uint    GetColorPaletteCount();
    uint    GetPaletteEntryCount();
    HRESULT GetPaletteEntries(uint colorPaletteIndex, uint firstEntryIndex, uint entryCount, char* paletteEntries);
    HRESULT GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, const(DWRITE_MATRIX)* transform, 
                                        BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, 
                                        DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams renderingParams, 
                                        DWRITE_RENDERING_MODE* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode);
}

@GUID("D31FBE17-F157-41A2-8D24-CB779E0560E8")
interface IDWriteColorGlyphRunEnumerator : IUnknown
{
    HRESULT MoveNext(int* hasRun);
    HRESULT GetCurrentRun(const(DWRITE_COLOR_GLYPH_RUN)** colorGlyphRun);
}

@GUID("F9D711C3-9777-40AE-87E8-3E5AF9BF0948")
interface IDWriteRenderingParams2 : IDWriteRenderingParams1
{
    DWRITE_GRID_FIT_MODE GetGridFitMode();
}

@GUID("0439FC60-CA44-4994-8DEE-3A9AF7B732EC")
interface IDWriteFactory2 : IDWriteFactory1
{
    HRESULT GetSystemFontFallback(IDWriteFontFallback* fontFallback);
    HRESULT CreateFontFallbackBuilder(IDWriteFontFallbackBuilder* fontFallbackBuilder);
    HRESULT TranslateColorGlyphRun(float baselineOriginX, float baselineOriginY, const(DWRITE_GLYPH_RUN)* glyphRun, 
                                   const(DWRITE_GLYPH_RUN_DESCRIPTION)* glyphRunDescription, 
                                   DWRITE_MEASURING_MODE measuringMode, const(DWRITE_MATRIX)* worldToDeviceTransform, 
                                   uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator* colorLayers);
    HRESULT CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, 
                                        float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, 
                                        DWRITE_RENDERING_MODE renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, 
                                        IDWriteRenderingParams2* renderingParams);
    HRESULT CreateGlyphRunAnalysis(const(DWRITE_GLYPH_RUN)* glyphRun, const(DWRITE_MATRIX)* transform, 
                                   DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, 
                                   DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, 
                                   float baselineOriginX, float baselineOriginY, 
                                   IDWriteGlyphRunAnalysis* glyphRunAnalysis);
}

@GUID("B7924BAA-391B-412A-8C5C-E44CC2D867DC")
interface IDWriteRenderingParams3 : IDWriteRenderingParams2
{
    DWRITE_RENDERING_MODE1 GetRenderingMode1();
}

@GUID("9A1B41C3-D3BB-466A-87FC-FE67556A3B65")
interface IDWriteFactory3 : IDWriteFactory2
{
    HRESULT CreateGlyphRunAnalysis(const(DWRITE_GLYPH_RUN)* glyphRun, const(DWRITE_MATRIX)* transform, 
                                   DWRITE_RENDERING_MODE1 renderingMode, DWRITE_MEASURING_MODE measuringMode, 
                                   DWRITE_GRID_FIT_MODE gridFitMode, DWRITE_TEXT_ANTIALIAS_MODE antialiasMode, 
                                   float baselineOriginX, float baselineOriginY, 
                                   IDWriteGlyphRunAnalysis* glyphRunAnalysis);
    HRESULT CreateCustomRenderingParams(float gamma, float enhancedContrast, float grayscaleEnhancedContrast, 
                                        float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, 
                                        DWRITE_RENDERING_MODE1 renderingMode, DWRITE_GRID_FIT_MODE gridFitMode, 
                                        IDWriteRenderingParams3* renderingParams);
    HRESULT CreateFontFaceReference(const(wchar)* filePath, const(FILETIME)* lastWriteTime, uint faceIndex, 
                                    DWRITE_FONT_SIMULATIONS fontSimulations, 
                                    IDWriteFontFaceReference* fontFaceReference);
    HRESULT CreateFontFaceReference(IDWriteFontFile fontFile, uint faceIndex, 
                                    DWRITE_FONT_SIMULATIONS fontSimulations, 
                                    IDWriteFontFaceReference* fontFaceReference);
    HRESULT GetSystemFontSet(IDWriteFontSet* fontSet);
    HRESULT CreateFontSetBuilder(IDWriteFontSetBuilder* fontSetBuilder);
    HRESULT CreateFontCollectionFromFontSet(IDWriteFontSet fontSet, IDWriteFontCollection1* fontCollection);
    HRESULT GetSystemFontCollection(BOOL includeDownloadableFonts, IDWriteFontCollection1* fontCollection, 
                                    BOOL checkForUpdates);
    HRESULT GetFontDownloadQueue(IDWriteFontDownloadQueue* fontDownloadQueue);
}

@GUID("53585141-D9F8-4095-8321-D73CF6BD116B")
interface IDWriteFontSet : IUnknown
{
    uint    GetFontCount();
    HRESULT GetFontFaceReference(uint listIndex, IDWriteFontFaceReference* fontFaceReference);
    HRESULT FindFontFaceReference(IDWriteFontFaceReference fontFaceReference, uint* listIndex, int* exists);
    HRESULT FindFontFace(IDWriteFontFace fontFace, uint* listIndex, int* exists);
    HRESULT GetPropertyValues(uint listIndex, DWRITE_FONT_PROPERTY_ID propertyId, int* exists, 
                              IDWriteLocalizedStrings* values);
    HRESULT GetPropertyValues(DWRITE_FONT_PROPERTY_ID propertyID, const(wchar)* preferredLocaleNames, 
                              IDWriteStringList* values);
    HRESULT GetPropertyValues(DWRITE_FONT_PROPERTY_ID propertyID, IDWriteStringList* values);
    HRESULT GetPropertyOccurrenceCount(const(DWRITE_FONT_PROPERTY)* property, uint* propertyOccurrenceCount);
    HRESULT GetMatchingFonts(char* properties, uint propertyCount, IDWriteFontSet* filteredSet);
    HRESULT GetMatchingFonts(const(wchar)* familyName, DWRITE_FONT_WEIGHT fontWeight, 
                             DWRITE_FONT_STRETCH fontStretch, DWRITE_FONT_STYLE fontStyle, 
                             IDWriteFontSet* filteredSet);
}

@GUID("2F642AFE-9C68-4F40-B8BE-457401AFCB3D")
interface IDWriteFontSetBuilder : IUnknown
{
    HRESULT AddFontFaceReference(IDWriteFontFaceReference fontFaceReference);
    HRESULT AddFontFaceReference(IDWriteFontFaceReference fontFaceReference, char* properties, uint propertyCount);
    HRESULT AddFontSet(IDWriteFontSet fontSet);
    HRESULT CreateFontSet(IDWriteFontSet* fontSet);
}

@GUID("53585141-D9F8-4095-8321-D73CF6BD116C")
interface IDWriteFontCollection1 : IDWriteFontCollection
{
    HRESULT GetFontSet(IDWriteFontSet* fontSet);
    HRESULT GetFontFamily(uint index, IDWriteFontFamily1* fontFamily);
}

@GUID("DA20D8EF-812A-4C43-9802-62EC4ABD7ADF")
interface IDWriteFontFamily1 : IDWriteFontFamily
{
    DWRITE_LOCALITY GetFontLocality(uint listIndex);
    HRESULT GetFont(uint listIndex, IDWriteFont3* font);
    HRESULT GetFontFaceReference(uint listIndex, IDWriteFontFaceReference* fontFaceReference);
}

@GUID("DA20D8EF-812A-4C43-9802-62EC4ABD7ADE")
interface IDWriteFontList1 : IDWriteFontList
{
    DWRITE_LOCALITY GetFontLocality(uint listIndex);
    HRESULT GetFont(uint listIndex, IDWriteFont3* font);
    HRESULT GetFontFaceReference(uint listIndex, IDWriteFontFaceReference* fontFaceReference);
}

@GUID("5E7FA7CA-DDE3-424C-89F0-9FCD6FED58CD")
interface IDWriteFontFaceReference : IUnknown
{
    HRESULT CreateFontFace(IDWriteFontFace3* fontFace);
    HRESULT CreateFontFaceWithSimulations(DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, 
                                          IDWriteFontFace3* fontFace);
    BOOL    Equals(IDWriteFontFaceReference fontFaceReference);
    uint    GetFontFaceIndex();
    DWRITE_FONT_SIMULATIONS GetSimulations();
    HRESULT GetFontFile(IDWriteFontFile* fontFile);
    ulong   GetLocalFileSize();
    ulong   GetFileSize();
    HRESULT GetFileTime(FILETIME* lastWriteTime);
    DWRITE_LOCALITY GetLocality();
    HRESULT EnqueueFontDownloadRequest();
    HRESULT EnqueueCharacterDownloadRequest(const(wchar)* characters, uint characterCount);
    HRESULT EnqueueGlyphDownloadRequest(char* glyphIndices, uint glyphCount);
    HRESULT EnqueueFileFragmentDownloadRequest(ulong fileOffset, ulong fragmentSize);
}

@GUID("29748ED6-8C9C-4A6A-BE0B-D912E8538944")
interface IDWriteFont3 : IDWriteFont2
{
    HRESULT CreateFontFace(IDWriteFontFace3* fontFace);
    BOOL    Equals(IDWriteFont font);
    HRESULT GetFontFaceReference(IDWriteFontFaceReference* fontFaceReference);
    BOOL    HasCharacter(uint unicodeValue);
    DWRITE_LOCALITY GetLocality();
}

@GUID("D37D7598-09BE-4222-A236-2081341CC1F2")
interface IDWriteFontFace3 : IDWriteFontFace2
{
    HRESULT GetFontFaceReference(IDWriteFontFaceReference* fontFaceReference);
    void    GetPanose(DWRITE_PANOSE* panose);
    DWRITE_FONT_WEIGHT GetWeight();
    DWRITE_FONT_STRETCH GetStretch();
    DWRITE_FONT_STYLE GetStyle();
    HRESULT GetFamilyNames(IDWriteLocalizedStrings* names);
    HRESULT GetFaceNames(IDWriteLocalizedStrings* names);
    HRESULT GetInformationalStrings(DWRITE_INFORMATIONAL_STRING_ID informationalStringID, 
                                    IDWriteLocalizedStrings* informationalStrings, int* exists);
    BOOL    HasCharacter(uint unicodeValue);
    HRESULT GetRecommendedRenderingMode(float fontEmSize, float dpiX, float dpiY, const(DWRITE_MATRIX)* transform, 
                                        BOOL isSideways, DWRITE_OUTLINE_THRESHOLD outlineThreshold, 
                                        DWRITE_MEASURING_MODE measuringMode, IDWriteRenderingParams renderingParams, 
                                        DWRITE_RENDERING_MODE1* renderingMode, DWRITE_GRID_FIT_MODE* gridFitMode);
    BOOL    IsCharacterLocal(uint unicodeValue);
    BOOL    IsGlyphLocal(ushort glyphId);
    HRESULT AreCharactersLocal(const(wchar)* characters, uint characterCount, BOOL enqueueIfNotLocal, int* isLocal);
    HRESULT AreGlyphsLocal(char* glyphIndices, uint glyphCount, BOOL enqueueIfNotLocal, int* isLocal);
}

@GUID("CFEE3140-1157-47CA-8B85-31BFCF3F2D0E")
interface IDWriteStringList : IUnknown
{
    uint    GetCount();
    HRESULT GetLocaleNameLength(uint listIndex, uint* length);
    HRESULT GetLocaleName(uint listIndex, char* localeName, uint size);
    HRESULT GetStringLength(uint listIndex, uint* length);
    HRESULT GetString(uint listIndex, char* stringBuffer, uint stringBufferSize);
}

@GUID("B06FE5B9-43EC-4393-881B-DBE4DC72FDA7")
interface IDWriteFontDownloadListener : IUnknown
{
    void DownloadCompleted(IDWriteFontDownloadQueue downloadQueue, IUnknown context, HRESULT downloadResult);
}

@GUID("B71E6052-5AEA-4FA3-832E-F60D431F7E91")
interface IDWriteFontDownloadQueue : IUnknown
{
    HRESULT AddListener(IDWriteFontDownloadListener listener, uint* token);
    HRESULT RemoveListener(uint token);
    BOOL    IsEmpty();
    HRESULT BeginDownload(IUnknown context);
    HRESULT CancelDownload();
    ulong   GetGenerationCount();
}

@GUID("4556BE70-3ABD-4F70-90BE-421780A6F515")
interface IDWriteGdiInterop1 : IDWriteGdiInterop
{
    HRESULT CreateFontFromLOGFONT(const(LOGFONTW)* logFont, IDWriteFontCollection fontCollection, 
                                  IDWriteFont* font);
    HRESULT GetFontSignature(IDWriteFont font, FONTSIGNATURE* fontSignature);
    HRESULT GetFontSignature(IDWriteFontFace fontFace, FONTSIGNATURE* fontSignature);
    HRESULT GetMatchingFontsByLOGFONT(const(LOGFONTA)* logFont, IDWriteFontSet fontSet, 
                                      IDWriteFontSet* filteredSet);
}

@GUID("F67E0EDD-9E3D-4ECC-8C32-4183253DFE70")
interface IDWriteTextFormat2 : IDWriteTextFormat1
{
    HRESULT SetLineSpacing(const(DWRITE_LINE_SPACING)* lineSpacingOptions);
    HRESULT GetLineSpacing(DWRITE_LINE_SPACING* lineSpacingOptions);
}

@GUID("07DDCD52-020E-4DE8-AC33-6C953D83F92D")
interface IDWriteTextLayout3 : IDWriteTextLayout2
{
    HRESULT InvalidateLayout();
    HRESULT SetLineSpacing(const(DWRITE_LINE_SPACING)* lineSpacingOptions);
    HRESULT GetLineSpacing(DWRITE_LINE_SPACING* lineSpacingOptions);
    HRESULT GetLineMetrics(char* lineMetrics, uint maxLineCount, uint* actualLineCount);
}

@GUID("7C5F86DA-C7A1-4F05-B8E1-55A179FE5A35")
interface IDWriteColorGlyphRunEnumerator1 : IDWriteColorGlyphRunEnumerator
{
    HRESULT GetCurrentRun(const(DWRITE_COLOR_GLYPH_RUN1)** colorGlyphRun);
}

@GUID("27F2A904-4EB8-441D-9678-0563F53E3E2F")
interface IDWriteFontFace4 : IDWriteFontFace3
{
    DWRITE_GLYPH_IMAGE_FORMATS GetGlyphImageFormats();
    HRESULT GetGlyphImageFormats(ushort glyphId, uint pixelsPerEmFirst, uint pixelsPerEmLast, 
                                 DWRITE_GLYPH_IMAGE_FORMATS* glyphImageFormats);
    HRESULT GetGlyphImageData(ushort glyphId, uint pixelsPerEm, DWRITE_GLYPH_IMAGE_FORMATS glyphImageFormat, 
                              DWRITE_GLYPH_IMAGE_DATA* glyphData, void** glyphDataContext);
    void    ReleaseGlyphImageData(void* glyphDataContext);
}

@GUID("4B0B5BD3-0797-4549-8AC5-FE915CC53856")
interface IDWriteFactory4 : IDWriteFactory3
{
    HRESULT TranslateColorGlyphRun(D2D_POINT_2F baselineOrigin, const(DWRITE_GLYPH_RUN)* glyphRun, 
                                   const(DWRITE_GLYPH_RUN_DESCRIPTION)* glyphRunDescription, 
                                   DWRITE_GLYPH_IMAGE_FORMATS desiredGlyphImageFormats, 
                                   DWRITE_MEASURING_MODE measuringMode, const(DWRITE_MATRIX)* worldAndDpiTransform, 
                                   uint colorPaletteIndex, IDWriteColorGlyphRunEnumerator1* colorLayers);
    HRESULT ComputeGlyphOrigins(const(DWRITE_GLYPH_RUN)* glyphRun, DWRITE_MEASURING_MODE measuringMode, 
                                D2D_POINT_2F baselineOrigin, const(DWRITE_MATRIX)* worldAndDpiTransform, 
                                char* glyphOrigins);
    HRESULT ComputeGlyphOrigins(const(DWRITE_GLYPH_RUN)* glyphRun, D2D_POINT_2F baselineOrigin, char* glyphOrigins);
}

@GUID("3FF7715F-3CDC-4DC6-9B72-EC5621DCCAFD")
interface IDWriteFontSetBuilder1 : IDWriteFontSetBuilder
{
    HRESULT AddFontFile(IDWriteFontFile fontFile);
}

@GUID("CE25F8FD-863B-4D13-9651-C1F88DC73FE2")
interface IDWriteAsyncResult : IUnknown
{
    HANDLE  GetWaitHandle();
    HRESULT GetResult();
}

@GUID("4DB3757A-2C72-4ED9-B2B6-1ABABE1AFF9C")
interface IDWriteRemoteFontFileStream : IDWriteFontFileStream
{
    HRESULT GetLocalFileSize(ulong* localFileSize);
    HRESULT GetFileFragmentLocality(ulong fileOffset, ulong fragmentSize, int* isLocal, ulong* partialSize);
    DWRITE_LOCALITY GetLocality();
    HRESULT BeginDownload(const(GUID)* downloadOperationID, char* fileFragments, uint fragmentCount, 
                          IDWriteAsyncResult* asyncResult);
}

@GUID("68648C83-6EDE-46C0-AB46-20083A887FDE")
interface IDWriteRemoteFontFileLoader : IDWriteFontFileLoader
{
    HRESULT CreateRemoteStreamFromKey(char* fontFileReferenceKey, uint fontFileReferenceKeySize, 
                                      IDWriteRemoteFontFileStream* fontFileStream);
    HRESULT GetLocalityFromKey(char* fontFileReferenceKey, uint fontFileReferenceKeySize, 
                               DWRITE_LOCALITY* locality);
    HRESULT CreateFontFileReferenceFromUrl(IDWriteFactory factory, const(wchar)* baseUrl, 
                                           const(wchar)* fontFileUrl, IDWriteFontFile* fontFile);
}

@GUID("DC102F47-A12D-4B1C-822D-9E117E33043F")
interface IDWriteInMemoryFontFileLoader : IDWriteFontFileLoader
{
    HRESULT CreateInMemoryFontFileReference(IDWriteFactory factory, char* fontData, uint fontDataSize, 
                                            IUnknown ownerObject, IDWriteFontFile* fontFile);
    uint    GetFileCount();
}

@GUID("958DB99A-BE2A-4F09-AF7D-65189803D1D3")
interface IDWriteFactory5 : IDWriteFactory4
{
    HRESULT CreateFontSetBuilder(IDWriteFontSetBuilder1* fontSetBuilder);
    HRESULT CreateInMemoryFontFileLoader(IDWriteInMemoryFontFileLoader* newLoader);
    HRESULT CreateHttpFontFileLoader(const(ushort)* referrerUrl, const(ushort)* extraHeaders, 
                                     IDWriteRemoteFontFileLoader* newLoader);
    DWRITE_CONTAINER_TYPE AnalyzeContainerType(char* fileData, uint fileDataSize);
    HRESULT UnpackFontFile(DWRITE_CONTAINER_TYPE containerType, char* fileData, uint fileDataSize, 
                           IDWriteFontFileStream* unpackedFontStream);
}

@GUID("F3744D80-21F7-42EB-B35D-995BC72FC223")
interface IDWriteFactory6 : IDWriteFactory5
{
    HRESULT CreateFontFaceReference(IDWriteFontFile fontFile, uint faceIndex, 
                                    DWRITE_FONT_SIMULATIONS fontSimulations, char* fontAxisValues, 
                                    uint fontAxisValueCount, IDWriteFontFaceReference1* fontFaceReference);
    HRESULT CreateFontResource(IDWriteFontFile fontFile, uint faceIndex, IDWriteFontResource* fontResource);
    HRESULT GetSystemFontSet(BOOL includeDownloadableFonts, IDWriteFontSet1* fontSet);
    HRESULT GetSystemFontCollection(BOOL includeDownloadableFonts, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, 
                                    IDWriteFontCollection2* fontCollection);
    HRESULT CreateFontCollectionFromFontSet(IDWriteFontSet fontSet, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, 
                                            IDWriteFontCollection2* fontCollection);
    HRESULT CreateFontSetBuilder(IDWriteFontSetBuilder2* fontSetBuilder);
    HRESULT CreateTextFormat(const(wchar)* fontFamilyName, IDWriteFontCollection fontCollection, 
                             char* fontAxisValues, uint fontAxisValueCount, float fontSize, const(wchar)* localeName, 
                             IDWriteTextFormat3* textFormat);
}

@GUID("98EFF3A5-B667-479A-B145-E2FA5B9FDC29")
interface IDWriteFontFace5 : IDWriteFontFace4
{
    uint    GetFontAxisValueCount();
    HRESULT GetFontAxisValues(char* fontAxisValues, uint fontAxisValueCount);
    BOOL    HasVariations();
    HRESULT GetFontResource(IDWriteFontResource* fontResource);
    BOOL    Equals(IDWriteFontFace fontFace);
}

@GUID("1F803A76-6871-48E8-987F-B975551C50F2")
interface IDWriteFontResource : IUnknown
{
    HRESULT GetFontFile(IDWriteFontFile* fontFile);
    uint    GetFontFaceIndex();
    uint    GetFontAxisCount();
    HRESULT GetDefaultFontAxisValues(char* fontAxisValues, uint fontAxisValueCount);
    HRESULT GetFontAxisRanges(char* fontAxisRanges, uint fontAxisRangeCount);
    DWRITE_FONT_AXIS_ATTRIBUTES GetFontAxisAttributes(uint axisIndex);
    HRESULT GetAxisNames(uint axisIndex, IDWriteLocalizedStrings* names);
    uint    GetAxisValueNameCount(uint axisIndex);
    HRESULT GetAxisValueNames(uint axisIndex, uint axisValueIndex, DWRITE_FONT_AXIS_RANGE* fontAxisRange, 
                              IDWriteLocalizedStrings* names);
    BOOL    HasVariations();
    HRESULT CreateFontFace(DWRITE_FONT_SIMULATIONS fontSimulations, char* fontAxisValues, uint fontAxisValueCount, 
                           IDWriteFontFace5* fontFace);
    HRESULT CreateFontFaceReference(DWRITE_FONT_SIMULATIONS fontSimulations, char* fontAxisValues, 
                                    uint fontAxisValueCount, IDWriteFontFaceReference1* fontFaceReference);
}

@GUID("C081FE77-2FD1-41AC-A5A3-34983C4BA61A")
interface IDWriteFontFaceReference1 : IDWriteFontFaceReference
{
    HRESULT CreateFontFace(IDWriteFontFace5* fontFace);
    uint    GetFontAxisValueCount();
    HRESULT GetFontAxisValues(char* fontAxisValues, uint fontAxisValueCount);
}

@GUID("EE5BA612-B131-463C-8F4F-3189B9401E45")
interface IDWriteFontSetBuilder2 : IDWriteFontSetBuilder1
{
    HRESULT AddFont(IDWriteFontFile fontFile, uint fontFaceIndex, DWRITE_FONT_SIMULATIONS fontSimulations, 
                    char* fontAxisValues, uint fontAxisValueCount, char* fontAxisRanges, uint fontAxisRangeCount, 
                    char* properties, uint propertyCount);
    HRESULT AddFontFile(const(wchar)* filePath);
}

@GUID("7E9FDA85-6C92-4053-BC47-7AE3530DB4D3")
interface IDWriteFontSet1 : IDWriteFontSet
{
    HRESULT GetMatchingFonts(const(DWRITE_FONT_PROPERTY)* fontProperty, char* fontAxisValues, 
                             uint fontAxisValueCount, IDWriteFontSet1* matchingFonts);
    HRESULT GetFirstFontResources(IDWriteFontSet1* filteredFontSet);
    HRESULT GetFilteredFonts(char* properties, uint propertyCount, BOOL selectAnyProperty, 
                             IDWriteFontSet1* filteredFontSet);
    HRESULT GetFilteredFonts(char* fontAxisRanges, uint fontAxisRangeCount, BOOL selectAnyRange, 
                             IDWriteFontSet1* filteredFontSet);
    HRESULT GetFilteredFonts(char* indices, uint indexCount, IDWriteFontSet1* filteredFontSet);
    HRESULT GetFilteredFontIndices(char* properties, uint propertyCount, BOOL selectAnyProperty, char* indices, 
                                   uint maxIndexCount, uint* actualIndexCount);
    HRESULT GetFilteredFontIndices(char* fontAxisRanges, uint fontAxisRangeCount, BOOL selectAnyRange, 
                                   char* indices, uint maxIndexCount, uint* actualIndexCount);
    HRESULT GetFontAxisRanges(char* fontAxisRanges, uint maxFontAxisRangeCount, uint* actualFontAxisRangeCount);
    HRESULT GetFontAxisRanges(uint listIndex, char* fontAxisRanges, uint maxFontAxisRangeCount, 
                              uint* actualFontAxisRangeCount);
    HRESULT GetFontFaceReference(uint listIndex, IDWriteFontFaceReference1* fontFaceReference);
    HRESULT CreateFontResource(uint listIndex, IDWriteFontResource* fontResource);
    HRESULT CreateFontFace(uint listIndex, IDWriteFontFace5* fontFace);
    DWRITE_LOCALITY GetFontLocality(uint listIndex);
}

@GUID("C0763A34-77AF-445A-B735-08C37B0A5BF5")
interface IDWriteFontList2 : IDWriteFontList1
{
    HRESULT GetFontSet(IDWriteFontSet1* fontSet);
}

@GUID("3ED49E77-A398-4261-B9CF-C126C2131EF3")
interface IDWriteFontFamily2 : IDWriteFontFamily1
{
    HRESULT GetMatchingFonts(char* fontAxisValues, uint fontAxisValueCount, IDWriteFontList2* matchingFonts);
    HRESULT GetFontSet(IDWriteFontSet1* fontSet);
}

@GUID("514039C6-4617-4064-BF8B-92EA83E506E0")
interface IDWriteFontCollection2 : IDWriteFontCollection1
{
    HRESULT GetFontFamily(uint index, IDWriteFontFamily2* fontFamily);
    HRESULT GetMatchingFonts(const(wchar)* familyName, char* fontAxisValues, uint fontAxisValueCount, 
                             IDWriteFontList2* fontList);
    DWRITE_FONT_FAMILY_MODEL GetFontFamilyModel();
    HRESULT GetFontSet(IDWriteFontSet1* fontSet);
}

@GUID("05A9BF42-223F-4441-B5FB-8263685F55E9")
interface IDWriteTextLayout4 : IDWriteTextLayout3
{
    HRESULT SetFontAxisValues(char* fontAxisValues, uint fontAxisValueCount, DWRITE_TEXT_RANGE textRange);
    uint    GetFontAxisValueCount(uint currentPosition);
    HRESULT GetFontAxisValues(uint currentPosition, char* fontAxisValues, uint fontAxisValueCount, 
                              DWRITE_TEXT_RANGE* textRange);
    DWRITE_AUTOMATIC_FONT_AXES GetAutomaticFontAxes();
    HRESULT SetAutomaticFontAxes(DWRITE_AUTOMATIC_FONT_AXES automaticFontAxes);
}

@GUID("6D3B5641-E550-430D-A85B-B7BF48A93427")
interface IDWriteTextFormat3 : IDWriteTextFormat2
{
    HRESULT SetFontAxisValues(char* fontAxisValues, uint fontAxisValueCount);
    uint    GetFontAxisValueCount();
    HRESULT GetFontAxisValues(char* fontAxisValues, uint fontAxisValueCount);
    DWRITE_AUTOMATIC_FONT_AXES GetAutomaticFontAxes();
    HRESULT SetAutomaticFontAxes(DWRITE_AUTOMATIC_FONT_AXES automaticFontAxes);
}

@GUID("2397599D-DD0D-4681-BD6A-F4F31EAADE77")
interface IDWriteFontFallback1 : IDWriteFontFallback
{
    HRESULT MapCharacters(IDWriteTextAnalysisSource analysisSource, uint textPosition, uint textLength, 
                          IDWriteFontCollection baseFontCollection, const(wchar)* baseFamilyName, 
                          char* fontAxisValues, uint fontAxisValueCount, uint* mappedLength, float* scale, 
                          IDWriteFontFace5* mappedFontFace);
}

@GUID("DC7EAD19-E54C-43AF-B2DA-4E2B79BA3F7F")
interface IDWriteFontSet2 : IDWriteFontSet1
{
    HANDLE GetExpirationEvent();
}

@GUID("A4D055A6-F9E3-4E25-93B7-9E309F3AF8E9")
interface IDWriteFontCollection3 : IDWriteFontCollection2
{
    HANDLE GetExpirationEvent();
}

@GUID("35D0E0B3-9076-4D2E-A016-A91B568A06B4")
interface IDWriteFactory7 : IDWriteFactory6
{
    HRESULT GetSystemFontSet(BOOL includeDownloadableFonts, IDWriteFontSet2* fontSet);
    HRESULT GetSystemFontCollection(BOOL includeDownloadableFonts, DWRITE_FONT_FAMILY_MODEL fontFamilyModel, 
                                    IDWriteFontCollection3* fontCollection);
}

@GUID("7C073EF2-A7F4-4045-8C32-8AB8AE640F90")
interface IDWriteFontSet3 : IDWriteFontSet2
{
    DWRITE_FONT_SOURCE_TYPE GetFontSourceType(uint fontIndex);
    uint    GetFontSourceNameLength(uint listIndex);
    HRESULT GetFontSourceName(uint listIndex, char* stringBuffer, uint stringBufferSize);
}


// GUIDs


const GUID IID_IDWriteAsyncResult              = GUIDOF!IDWriteAsyncResult;
const GUID IID_IDWriteBitmapRenderTarget       = GUIDOF!IDWriteBitmapRenderTarget;
const GUID IID_IDWriteBitmapRenderTarget1      = GUIDOF!IDWriteBitmapRenderTarget1;
const GUID IID_IDWriteColorGlyphRunEnumerator  = GUIDOF!IDWriteColorGlyphRunEnumerator;
const GUID IID_IDWriteColorGlyphRunEnumerator1 = GUIDOF!IDWriteColorGlyphRunEnumerator1;
const GUID IID_IDWriteFactory                  = GUIDOF!IDWriteFactory;
const GUID IID_IDWriteFactory1                 = GUIDOF!IDWriteFactory1;
const GUID IID_IDWriteFactory2                 = GUIDOF!IDWriteFactory2;
const GUID IID_IDWriteFactory3                 = GUIDOF!IDWriteFactory3;
const GUID IID_IDWriteFactory4                 = GUIDOF!IDWriteFactory4;
const GUID IID_IDWriteFactory5                 = GUIDOF!IDWriteFactory5;
const GUID IID_IDWriteFactory6                 = GUIDOF!IDWriteFactory6;
const GUID IID_IDWriteFactory7                 = GUIDOF!IDWriteFactory7;
const GUID IID_IDWriteFont                     = GUIDOF!IDWriteFont;
const GUID IID_IDWriteFont1                    = GUIDOF!IDWriteFont1;
const GUID IID_IDWriteFont2                    = GUIDOF!IDWriteFont2;
const GUID IID_IDWriteFont3                    = GUIDOF!IDWriteFont3;
const GUID IID_IDWriteFontCollection           = GUIDOF!IDWriteFontCollection;
const GUID IID_IDWriteFontCollection1          = GUIDOF!IDWriteFontCollection1;
const GUID IID_IDWriteFontCollection2          = GUIDOF!IDWriteFontCollection2;
const GUID IID_IDWriteFontCollection3          = GUIDOF!IDWriteFontCollection3;
const GUID IID_IDWriteFontCollectionLoader     = GUIDOF!IDWriteFontCollectionLoader;
const GUID IID_IDWriteFontDownloadListener     = GUIDOF!IDWriteFontDownloadListener;
const GUID IID_IDWriteFontDownloadQueue        = GUIDOF!IDWriteFontDownloadQueue;
const GUID IID_IDWriteFontFace                 = GUIDOF!IDWriteFontFace;
const GUID IID_IDWriteFontFace1                = GUIDOF!IDWriteFontFace1;
const GUID IID_IDWriteFontFace2                = GUIDOF!IDWriteFontFace2;
const GUID IID_IDWriteFontFace3                = GUIDOF!IDWriteFontFace3;
const GUID IID_IDWriteFontFace4                = GUIDOF!IDWriteFontFace4;
const GUID IID_IDWriteFontFace5                = GUIDOF!IDWriteFontFace5;
const GUID IID_IDWriteFontFaceReference        = GUIDOF!IDWriteFontFaceReference;
const GUID IID_IDWriteFontFaceReference1       = GUIDOF!IDWriteFontFaceReference1;
const GUID IID_IDWriteFontFallback             = GUIDOF!IDWriteFontFallback;
const GUID IID_IDWriteFontFallback1            = GUIDOF!IDWriteFontFallback1;
const GUID IID_IDWriteFontFallbackBuilder      = GUIDOF!IDWriteFontFallbackBuilder;
const GUID IID_IDWriteFontFamily               = GUIDOF!IDWriteFontFamily;
const GUID IID_IDWriteFontFamily1              = GUIDOF!IDWriteFontFamily1;
const GUID IID_IDWriteFontFamily2              = GUIDOF!IDWriteFontFamily2;
const GUID IID_IDWriteFontFile                 = GUIDOF!IDWriteFontFile;
const GUID IID_IDWriteFontFileEnumerator       = GUIDOF!IDWriteFontFileEnumerator;
const GUID IID_IDWriteFontFileLoader           = GUIDOF!IDWriteFontFileLoader;
const GUID IID_IDWriteFontFileStream           = GUIDOF!IDWriteFontFileStream;
const GUID IID_IDWriteFontList                 = GUIDOF!IDWriteFontList;
const GUID IID_IDWriteFontList1                = GUIDOF!IDWriteFontList1;
const GUID IID_IDWriteFontList2                = GUIDOF!IDWriteFontList2;
const GUID IID_IDWriteFontResource             = GUIDOF!IDWriteFontResource;
const GUID IID_IDWriteFontSet                  = GUIDOF!IDWriteFontSet;
const GUID IID_IDWriteFontSet1                 = GUIDOF!IDWriteFontSet1;
const GUID IID_IDWriteFontSet2                 = GUIDOF!IDWriteFontSet2;
const GUID IID_IDWriteFontSet3                 = GUIDOF!IDWriteFontSet3;
const GUID IID_IDWriteFontSetBuilder           = GUIDOF!IDWriteFontSetBuilder;
const GUID IID_IDWriteFontSetBuilder1          = GUIDOF!IDWriteFontSetBuilder1;
const GUID IID_IDWriteFontSetBuilder2          = GUIDOF!IDWriteFontSetBuilder2;
const GUID IID_IDWriteGdiInterop               = GUIDOF!IDWriteGdiInterop;
const GUID IID_IDWriteGdiInterop1              = GUIDOF!IDWriteGdiInterop1;
const GUID IID_IDWriteGlyphRunAnalysis         = GUIDOF!IDWriteGlyphRunAnalysis;
const GUID IID_IDWriteInMemoryFontFileLoader   = GUIDOF!IDWriteInMemoryFontFileLoader;
const GUID IID_IDWriteInlineObject             = GUIDOF!IDWriteInlineObject;
const GUID IID_IDWriteLocalFontFileLoader      = GUIDOF!IDWriteLocalFontFileLoader;
const GUID IID_IDWriteLocalizedStrings         = GUIDOF!IDWriteLocalizedStrings;
const GUID IID_IDWriteNumberSubstitution       = GUIDOF!IDWriteNumberSubstitution;
const GUID IID_IDWritePixelSnapping            = GUIDOF!IDWritePixelSnapping;
const GUID IID_IDWriteRemoteFontFileLoader     = GUIDOF!IDWriteRemoteFontFileLoader;
const GUID IID_IDWriteRemoteFontFileStream     = GUIDOF!IDWriteRemoteFontFileStream;
const GUID IID_IDWriteRenderingParams          = GUIDOF!IDWriteRenderingParams;
const GUID IID_IDWriteRenderingParams1         = GUIDOF!IDWriteRenderingParams1;
const GUID IID_IDWriteRenderingParams2         = GUIDOF!IDWriteRenderingParams2;
const GUID IID_IDWriteRenderingParams3         = GUIDOF!IDWriteRenderingParams3;
const GUID IID_IDWriteStringList               = GUIDOF!IDWriteStringList;
const GUID IID_IDWriteTextAnalysisSink         = GUIDOF!IDWriteTextAnalysisSink;
const GUID IID_IDWriteTextAnalysisSink1        = GUIDOF!IDWriteTextAnalysisSink1;
const GUID IID_IDWriteTextAnalysisSource       = GUIDOF!IDWriteTextAnalysisSource;
const GUID IID_IDWriteTextAnalysisSource1      = GUIDOF!IDWriteTextAnalysisSource1;
const GUID IID_IDWriteTextAnalyzer             = GUIDOF!IDWriteTextAnalyzer;
const GUID IID_IDWriteTextAnalyzer1            = GUIDOF!IDWriteTextAnalyzer1;
const GUID IID_IDWriteTextAnalyzer2            = GUIDOF!IDWriteTextAnalyzer2;
const GUID IID_IDWriteTextFormat               = GUIDOF!IDWriteTextFormat;
const GUID IID_IDWriteTextFormat1              = GUIDOF!IDWriteTextFormat1;
const GUID IID_IDWriteTextFormat2              = GUIDOF!IDWriteTextFormat2;
const GUID IID_IDWriteTextFormat3              = GUIDOF!IDWriteTextFormat3;
const GUID IID_IDWriteTextLayout               = GUIDOF!IDWriteTextLayout;
const GUID IID_IDWriteTextLayout1              = GUIDOF!IDWriteTextLayout1;
const GUID IID_IDWriteTextLayout2              = GUIDOF!IDWriteTextLayout2;
const GUID IID_IDWriteTextLayout3              = GUIDOF!IDWriteTextLayout3;
const GUID IID_IDWriteTextLayout4              = GUIDOF!IDWriteTextLayout4;
const GUID IID_IDWriteTextRenderer             = GUIDOF!IDWriteTextRenderer;
const GUID IID_IDWriteTextRenderer1            = GUIDOF!IDWriteTextRenderer1;
const GUID IID_IDWriteTypography               = GUIDOF!IDWriteTypography;
