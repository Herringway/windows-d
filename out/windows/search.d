module windows.search;

public import windows.core;
public import windows.automation : BSTR, DISPPARAMS, IDispatch, IErrorInfo, ITypeInfo, VARIANT;
public import windows.com : HRESULT, IAuthenticate, IEnumString, IEnumUnknown, IPersistStream, IUnknown;
public import windows.componentservices : ITransaction, ITransactionOptions;
public import windows.indexserver : DBID, IFilter, IPhraseSink, WORDREP_BREAK_TYPE;
public import windows.security : EXPLICIT_ACCESS_W, TRUSTEE_W;
public import windows.shell : IObjectArray;
public import windows.structuredstorage : ISequentialStream, IStorage, IStream, PROPSPEC, PROPVARIANT;
public import windows.systemservices : BOOL, HANDLE;
public import windows.winsock : BLOB;
public import windows.windowsandmessaging : HWND;
public import windows.windowsprogramming : FILETIME, SYSTEMTIME;
public import windows.windowspropertiessystem : PROPERTYKEY;

extern(Windows):


// Enums


enum : int
{
    CT_AND_CONDITION  = 0x00000000,
    CT_OR_CONDITION   = 0x00000001,
    CT_NOT_CONDITION  = 0x00000002,
    CT_LEAF_CONDITION = 0x00000003,
}
alias CONDITION_TYPE = int;

enum : int
{
    COP_IMPLICIT             = 0x00000000,
    COP_EQUAL                = 0x00000001,
    COP_NOTEQUAL             = 0x00000002,
    COP_LESSTHAN             = 0x00000003,
    COP_GREATERTHAN          = 0x00000004,
    COP_LESSTHANOREQUAL      = 0x00000005,
    COP_GREATERTHANOREQUAL   = 0x00000006,
    COP_VALUE_STARTSWITH     = 0x00000007,
    COP_VALUE_ENDSWITH       = 0x00000008,
    COP_VALUE_CONTAINS       = 0x00000009,
    COP_VALUE_NOTCONTAINS    = 0x0000000a,
    COP_DOSWILDCARDS         = 0x0000000b,
    COP_WORD_EQUAL           = 0x0000000c,
    COP_WORD_STARTSWITH      = 0x0000000d,
    COP_APPLICATION_SPECIFIC = 0x0000000e,
}
alias CONDITION_OPERATION = int;

enum : int
{
    DBTYPE_EMPTY       = 0x00000000,
    DBTYPE_NULL        = 0x00000001,
    DBTYPE_I2          = 0x00000002,
    DBTYPE_I4          = 0x00000003,
    DBTYPE_R4          = 0x00000004,
    DBTYPE_R8          = 0x00000005,
    DBTYPE_CY          = 0x00000006,
    DBTYPE_DATE        = 0x00000007,
    DBTYPE_BSTR        = 0x00000008,
    DBTYPE_IDISPATCH   = 0x00000009,
    DBTYPE_ERROR       = 0x0000000a,
    DBTYPE_BOOL        = 0x0000000b,
    DBTYPE_VARIANT     = 0x0000000c,
    DBTYPE_IUNKNOWN    = 0x0000000d,
    DBTYPE_DECIMAL     = 0x0000000e,
    DBTYPE_UI1         = 0x00000011,
    DBTYPE_ARRAY       = 0x00002000,
    DBTYPE_BYREF       = 0x00004000,
    DBTYPE_I1          = 0x00000010,
    DBTYPE_UI2         = 0x00000012,
    DBTYPE_UI4         = 0x00000013,
    DBTYPE_I8          = 0x00000014,
    DBTYPE_UI8         = 0x00000015,
    DBTYPE_GUID        = 0x00000048,
    DBTYPE_VECTOR      = 0x00001000,
    DBTYPE_RESERVED    = 0x00008000,
    DBTYPE_BYTES       = 0x00000080,
    DBTYPE_STR         = 0x00000081,
    DBTYPE_WSTR        = 0x00000082,
    DBTYPE_NUMERIC     = 0x00000083,
    DBTYPE_UDT         = 0x00000084,
    DBTYPE_DBDATE      = 0x00000085,
    DBTYPE_DBTIME      = 0x00000086,
    DBTYPE_DBTIMESTAMP = 0x00000087,
}
alias DBTYPEENUM = int;

enum : int
{
    DBTYPE_HCHAPTER = 0x00000088,
}
alias DBTYPEENUM15 = int;

enum : int
{
    DBTYPE_FILETIME    = 0x00000040,
    DBTYPE_PROPVARIANT = 0x0000008a,
    DBTYPE_VARNUMERIC  = 0x0000008b,
}
alias DBTYPEENUM20 = int;

enum : int
{
    DBPART_INVALID = 0x00000000,
    DBPART_VALUE   = 0x00000001,
    DBPART_LENGTH  = 0x00000002,
    DBPART_STATUS  = 0x00000004,
}
alias DBPARTENUM = int;

enum : int
{
    DBPARAMIO_NOTPARAM = 0x00000000,
    DBPARAMIO_INPUT    = 0x00000001,
    DBPARAMIO_OUTPUT   = 0x00000002,
}
alias DBPARAMIOENUM = int;

enum : int
{
    DBBINDFLAG_HTML = 0x00000001,
}
alias DBBINDFLAGENUM = int;

enum : int
{
    DBMEMOWNER_CLIENTOWNED   = 0x00000000,
    DBMEMOWNER_PROVIDEROWNED = 0x00000001,
}
alias DBMEMOWNERENUM = int;

enum : int
{
    DBSTATUS_S_OK                 = 0x00000000,
    DBSTATUS_E_BADACCESSOR        = 0x00000001,
    DBSTATUS_E_CANTCONVERTVALUE   = 0x00000002,
    DBSTATUS_S_ISNULL             = 0x00000003,
    DBSTATUS_S_TRUNCATED          = 0x00000004,
    DBSTATUS_E_SIGNMISMATCH       = 0x00000005,
    DBSTATUS_E_DATAOVERFLOW       = 0x00000006,
    DBSTATUS_E_CANTCREATE         = 0x00000007,
    DBSTATUS_E_UNAVAILABLE        = 0x00000008,
    DBSTATUS_E_PERMISSIONDENIED   = 0x00000009,
    DBSTATUS_E_INTEGRITYVIOLATION = 0x0000000a,
    DBSTATUS_E_SCHEMAVIOLATION    = 0x0000000b,
    DBSTATUS_E_BADSTATUS          = 0x0000000c,
    DBSTATUS_S_DEFAULT            = 0x0000000d,
}
alias DBSTATUSENUM = int;

enum : int
{
    MDSTATUS_S_CELLEMPTY = 0x0000000e,
    DBSTATUS_S_IGNORE    = 0x0000000f,
}
alias DBSTATUSENUM20 = int;

enum : int
{
    DBSTATUS_E_DOESNOTEXIST       = 0x00000010,
    DBSTATUS_E_INVALIDURL         = 0x00000011,
    DBSTATUS_E_RESOURCELOCKED     = 0x00000012,
    DBSTATUS_E_RESOURCEEXISTS     = 0x00000013,
    DBSTATUS_E_CANNOTCOMPLETE     = 0x00000014,
    DBSTATUS_E_VOLUMENOTFOUND     = 0x00000015,
    DBSTATUS_E_OUTOFSPACE         = 0x00000016,
    DBSTATUS_S_CANNOTDELETESOURCE = 0x00000017,
    DBSTATUS_E_READONLY           = 0x00000018,
    DBSTATUS_E_RESOURCEOUTOFSCOPE = 0x00000019,
    DBSTATUS_S_ALREADYEXISTS      = 0x0000001a,
}
alias DBSTATUSENUM21 = int;

enum : int
{
    DBBINDURLFLAG_READ                 = 0x00000001,
    DBBINDURLFLAG_WRITE                = 0x00000002,
    DBBINDURLFLAG_READWRITE            = 0x00000003,
    DBBINDURLFLAG_SHARE_DENY_READ      = 0x00000004,
    DBBINDURLFLAG_SHARE_DENY_WRITE     = 0x00000008,
    DBBINDURLFLAG_SHARE_EXCLUSIVE      = 0x0000000c,
    DBBINDURLFLAG_SHARE_DENY_NONE      = 0x00000010,
    DBBINDURLFLAG_ASYNCHRONOUS         = 0x00001000,
    DBBINDURLFLAG_COLLECTION           = 0x00002000,
    DBBINDURLFLAG_DELAYFETCHSTREAM     = 0x00004000,
    DBBINDURLFLAG_DELAYFETCHCOLUMNS    = 0x00008000,
    DBBINDURLFLAG_RECURSIVE            = 0x00400000,
    DBBINDURLFLAG_OUTPUT               = 0x00800000,
    DBBINDURLFLAG_WAITFORINIT          = 0x01000000,
    DBBINDURLFLAG_OPENIFEXISTS         = 0x02000000,
    DBBINDURLFLAG_OVERWRITE            = 0x04000000,
    DBBINDURLFLAG_ISSTRUCTUREDDOCUMENT = 0x08000000,
}
alias DBBINDURLFLAGENUM = int;

enum : int
{
    DBBINDURLSTATUS_S_OK                   = 0x00000000,
    DBBINDURLSTATUS_S_DENYNOTSUPPORTED     = 0x00000001,
    DBBINDURLSTATUS_S_DENYTYPENOTSUPPORTED = 0x00000004,
    DBBINDURLSTATUS_S_REDIRECTED           = 0x00000008,
}
alias DBBINDURLSTATUSENUM = int;

enum : int
{
    DBSTATUS_E_CANCELED      = 0x0000001b,
    DBSTATUS_E_NOTCOLLECTION = 0x0000001c,
}
alias DBSTATUSENUM25 = int;

enum : int
{
    DBROWSTATUS_S_OK                     = 0x00000000,
    DBROWSTATUS_S_MULTIPLECHANGES        = 0x00000002,
    DBROWSTATUS_S_PENDINGCHANGES         = 0x00000003,
    DBROWSTATUS_E_CANCELED               = 0x00000004,
    DBROWSTATUS_E_CANTRELEASE            = 0x00000006,
    DBROWSTATUS_E_CONCURRENCYVIOLATION   = 0x00000007,
    DBROWSTATUS_E_DELETED                = 0x00000008,
    DBROWSTATUS_E_PENDINGINSERT          = 0x00000009,
    DBROWSTATUS_E_NEWLYINSERTED          = 0x0000000a,
    DBROWSTATUS_E_INTEGRITYVIOLATION     = 0x0000000b,
    DBROWSTATUS_E_INVALID                = 0x0000000c,
    DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED = 0x0000000d,
    DBROWSTATUS_E_OBJECTOPEN             = 0x0000000e,
    DBROWSTATUS_E_OUTOFMEMORY            = 0x0000000f,
    DBROWSTATUS_E_PERMISSIONDENIED       = 0x00000010,
    DBROWSTATUS_E_LIMITREACHED           = 0x00000011,
    DBROWSTATUS_E_SCHEMAVIOLATION        = 0x00000012,
    DBROWSTATUS_E_FAIL                   = 0x00000013,
}
alias DBROWSTATUSENUM = int;

enum : int
{
    DBROWSTATUS_S_NOCHANGE = 0x00000014,
}
alias DBROWSTATUSENUM20 = int;

enum : int
{
    DBSTATUS_S_ROWSETCOLUMN = 0x0000001d,
}
alias DBSTATUSENUM26 = int;

enum : int
{
    DBCOLUMNFLAGS_ISBOOKMARK    = 0x00000001,
    DBCOLUMNFLAGS_MAYDEFER      = 0x00000002,
    DBCOLUMNFLAGS_WRITE         = 0x00000004,
    DBCOLUMNFLAGS_WRITEUNKNOWN  = 0x00000008,
    DBCOLUMNFLAGS_ISFIXEDLENGTH = 0x00000010,
    DBCOLUMNFLAGS_ISNULLABLE    = 0x00000020,
    DBCOLUMNFLAGS_MAYBENULL     = 0x00000040,
    DBCOLUMNFLAGS_ISLONG        = 0x00000080,
    DBCOLUMNFLAGS_ISROWID       = 0x00000100,
    DBCOLUMNFLAGS_ISROWVER      = 0x00000200,
    DBCOLUMNFLAGS_CACHEDEFERRED = 0x00001000,
}
alias DBCOLUMNFLAGSENUM = int;

enum : int
{
    DBCOLUMNFLAGS_SCALEISNEGATIVE = 0x00004000,
    DBCOLUMNFLAGS_RESERVED        = 0x00008000,
}
alias DBCOLUMNFLAGSENUM20 = int;

enum : int
{
    DBCOLUMNFLAGS_ISCHAPTER = 0x00002000,
}
alias DBCOLUMNFLAGS15ENUM = int;

enum : int
{
    DBCOLUMNFLAGS_ISROWURL        = 0x00010000,
    DBCOLUMNFLAGS_ISDEFAULTSTREAM = 0x00020000,
    DBCOLUMNFLAGS_ISCOLLECTION    = 0x00040000,
}
alias DBCOLUMNFLAGSENUM21 = int;

enum : int
{
    DBCOLUMNFLAGS_ISSTREAM          = 0x00080000,
    DBCOLUMNFLAGS_ISROWSET          = 0x00100000,
    DBCOLUMNFLAGS_ISROW             = 0x00200000,
    DBCOLUMNFLAGS_ROWSPECIFICCOLUMN = 0x00400000,
}
alias DBCOLUMNFLAGSENUM26 = int;

enum : int
{
    DBSTAT_HISTOGRAM          = 0x00000001,
    DBSTAT_COLUMN_CARDINALITY = 0x00000002,
    DBSTAT_TUPLE_CARDINALITY  = 0x00000004,
}
alias DBTABLESTATISTICSTYPE26 = int;

enum : int
{
    DBBMK_INVALID = 0x00000000,
    DBBMK_FIRST   = 0x00000001,
    DBBMK_LAST    = 0x00000002,
}
alias DBBOOKMARK = int;

enum : int
{
    DBPROP_ABORTPRESERVE                   = 0x00000002,
    DBPROP_ACTIVESESSIONS                  = 0x00000003,
    DBPROP_APPENDONLY                      = 0x000000bb,
    DBPROP_ASYNCTXNABORT                   = 0x000000a8,
    DBPROP_ASYNCTXNCOMMIT                  = 0x00000004,
    DBPROP_AUTH_CACHE_AUTHINFO             = 0x00000005,
    DBPROP_AUTH_ENCRYPT_PASSWORD           = 0x00000006,
    DBPROP_AUTH_INTEGRATED                 = 0x00000007,
    DBPROP_AUTH_MASK_PASSWORD              = 0x00000008,
    DBPROP_AUTH_PASSWORD                   = 0x00000009,
    DBPROP_AUTH_PERSIST_ENCRYPTED          = 0x0000000a,
    DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO = 0x0000000b,
    DBPROP_AUTH_USERID                     = 0x0000000c,
    DBPROP_BLOCKINGSTORAGEOBJECTS          = 0x0000000d,
    DBPROP_BOOKMARKS                       = 0x0000000e,
    DBPROP_BOOKMARKSKIPPED                 = 0x0000000f,
    DBPROP_BOOKMARKTYPE                    = 0x00000010,
    DBPROP_BYREFACCESSORS                  = 0x00000078,
    DBPROP_CACHEDEFERRED                   = 0x00000011,
    DBPROP_CANFETCHBACKWARDS               = 0x00000012,
    DBPROP_CANHOLDROWS                     = 0x00000013,
    DBPROP_CANSCROLLBACKWARDS              = 0x00000015,
    DBPROP_CATALOGLOCATION                 = 0x00000016,
    DBPROP_CATALOGTERM                     = 0x00000017,
    DBPROP_CATALOGUSAGE                    = 0x00000018,
    DBPROP_CHANGEINSERTEDROWS              = 0x000000bc,
    DBPROP_COL_AUTOINCREMENT               = 0x0000001a,
    DBPROP_COL_DEFAULT                     = 0x0000001b,
    DBPROP_COL_DESCRIPTION                 = 0x0000001c,
    DBPROP_COL_FIXEDLENGTH                 = 0x000000a7,
    DBPROP_COL_NULLABLE                    = 0x0000001d,
    DBPROP_COL_PRIMARYKEY                  = 0x0000001e,
    DBPROP_COL_UNIQUE                      = 0x0000001f,
    DBPROP_COLUMNDEFINITION                = 0x00000020,
    DBPROP_COLUMNRESTRICT                  = 0x00000021,
    DBPROP_COMMANDTIMEOUT                  = 0x00000022,
    DBPROP_COMMITPRESERVE                  = 0x00000023,
    DBPROP_CONCATNULLBEHAVIOR              = 0x00000024,
    DBPROP_CURRENTCATALOG                  = 0x00000025,
    DBPROP_DATASOURCENAME                  = 0x00000026,
    DBPROP_DATASOURCEREADONLY              = 0x00000027,
    DBPROP_DBMSNAME                        = 0x00000028,
    DBPROP_DBMSVER                         = 0x00000029,
    DBPROP_DEFERRED                        = 0x0000002a,
    DBPROP_DELAYSTORAGEOBJECTS             = 0x0000002b,
    DBPROP_DSOTHREADMODEL                  = 0x000000a9,
    DBPROP_GROUPBY                         = 0x0000002c,
    DBPROP_HETEROGENEOUSTABLES             = 0x0000002d,
    DBPROP_IAccessor                       = 0x00000079,
    DBPROP_IColumnsInfo                    = 0x0000007a,
    DBPROP_IColumnsRowset                  = 0x0000007b,
    DBPROP_IConnectionPointContainer       = 0x0000007c,
    DBPROP_IConvertType                    = 0x000000c2,
    DBPROP_IRowset                         = 0x0000007e,
    DBPROP_IRowsetChange                   = 0x0000007f,
    DBPROP_IRowsetIdentity                 = 0x00000080,
    DBPROP_IRowsetIndex                    = 0x0000009f,
    DBPROP_IRowsetInfo                     = 0x00000081,
    DBPROP_IRowsetLocate                   = 0x00000082,
    DBPROP_IRowsetResynch                  = 0x00000084,
    DBPROP_IRowsetScroll                   = 0x00000085,
    DBPROP_IRowsetUpdate                   = 0x00000086,
    DBPROP_ISupportErrorInfo               = 0x00000087,
    DBPROP_ILockBytes                      = 0x00000088,
    DBPROP_ISequentialStream               = 0x00000089,
    DBPROP_IStorage                        = 0x0000008a,
    DBPROP_IStream                         = 0x0000008b,
    DBPROP_IDENTIFIERCASE                  = 0x0000002e,
    DBPROP_IMMOBILEROWS                    = 0x0000002f,
    DBPROP_INDEX_AUTOUPDATE                = 0x00000030,
    DBPROP_INDEX_CLUSTERED                 = 0x00000031,
    DBPROP_INDEX_FILLFACTOR                = 0x00000032,
    DBPROP_INDEX_INITIALSIZE               = 0x00000033,
    DBPROP_INDEX_NULLCOLLATION             = 0x00000034,
    DBPROP_INDEX_NULLS                     = 0x00000035,
    DBPROP_INDEX_PRIMARYKEY                = 0x00000036,
    DBPROP_INDEX_SORTBOOKMARKS             = 0x00000037,
    DBPROP_INDEX_TEMPINDEX                 = 0x000000a3,
    DBPROP_INDEX_TYPE                      = 0x00000038,
    DBPROP_INDEX_UNIQUE                    = 0x00000039,
    DBPROP_INIT_DATASOURCE                 = 0x0000003b,
    DBPROP_INIT_HWND                       = 0x0000003c,
    DBPROP_INIT_IMPERSONATION_LEVEL        = 0x0000003d,
    DBPROP_INIT_LCID                       = 0x000000ba,
    DBPROP_INIT_LOCATION                   = 0x0000003e,
    DBPROP_INIT_MODE                       = 0x0000003f,
    DBPROP_INIT_PROMPT                     = 0x00000040,
    DBPROP_INIT_PROTECTION_LEVEL           = 0x00000041,
    DBPROP_INIT_PROVIDERSTRING             = 0x000000a0,
    DBPROP_INIT_TIMEOUT                    = 0x00000042,
    DBPROP_LITERALBOOKMARKS                = 0x00000043,
    DBPROP_LITERALIDENTITY                 = 0x00000044,
    DBPROP_MAXINDEXSIZE                    = 0x00000046,
    DBPROP_MAXOPENROWS                     = 0x00000047,
    DBPROP_MAXPENDINGROWS                  = 0x00000048,
    DBPROP_MAXROWS                         = 0x00000049,
    DBPROP_MAXROWSIZE                      = 0x0000004a,
    DBPROP_MAXROWSIZEINCLUDESBLOB          = 0x0000004b,
    DBPROP_MAXTABLESINSELECT               = 0x0000004c,
    DBPROP_MAYWRITECOLUMN                  = 0x0000004d,
    DBPROP_MEMORYUSAGE                     = 0x0000004e,
    DBPROP_MULTIPLEPARAMSETS               = 0x000000bf,
    DBPROP_MULTIPLERESULTS                 = 0x000000c4,
    DBPROP_MULTIPLESTORAGEOBJECTS          = 0x00000050,
    DBPROP_MULTITABLEUPDATE                = 0x00000051,
    DBPROP_NOTIFICATIONGRANULARITY         = 0x000000c6,
    DBPROP_NOTIFICATIONPHASES              = 0x00000052,
    DBPROP_NOTIFYCOLUMNSET                 = 0x000000ab,
    DBPROP_NOTIFYROWDELETE                 = 0x000000ad,
    DBPROP_NOTIFYROWFIRSTCHANGE            = 0x000000ae,
    DBPROP_NOTIFYROWINSERT                 = 0x000000af,
    DBPROP_NOTIFYROWRESYNCH                = 0x000000b1,
    DBPROP_NOTIFYROWSETCHANGED             = 0x000000d3,
    DBPROP_NOTIFYROWSETRELEASE             = 0x000000b2,
    DBPROP_NOTIFYROWSETFETCHPOSITIONCHANGE = 0x000000b3,
    DBPROP_NOTIFYROWUNDOCHANGE             = 0x000000b4,
    DBPROP_NOTIFYROWUNDODELETE             = 0x000000b5,
    DBPROP_NOTIFYROWUNDOINSERT             = 0x000000b6,
    DBPROP_NOTIFYROWUPDATE                 = 0x000000b7,
    DBPROP_NULLCOLLATION                   = 0x00000053,
    DBPROP_OLEOBJECTS                      = 0x00000054,
    DBPROP_ORDERBYCOLUMNSINSELECT          = 0x00000055,
    DBPROP_ORDEREDBOOKMARKS                = 0x00000056,
    DBPROP_OTHERINSERT                     = 0x00000057,
    DBPROP_OTHERUPDATEDELETE               = 0x00000058,
    DBPROP_OUTPUTPARAMETERAVAILABILITY     = 0x000000b8,
    DBPROP_OWNINSERT                       = 0x00000059,
    DBPROP_OWNUPDATEDELETE                 = 0x0000005a,
    DBPROP_PERSISTENTIDTYPE                = 0x000000b9,
    DBPROP_PREPAREABORTBEHAVIOR            = 0x0000005b,
    DBPROP_PREPARECOMMITBEHAVIOR           = 0x0000005c,
    DBPROP_PROCEDURETERM                   = 0x0000005d,
    DBPROP_PROVIDERNAME                    = 0x00000060,
    DBPROP_PROVIDEROLEDBVER                = 0x00000061,
    DBPROP_PROVIDERVER                     = 0x00000062,
    DBPROP_QUICKRESTART                    = 0x00000063,
    DBPROP_QUOTEDIDENTIFIERCASE            = 0x00000064,
    DBPROP_REENTRANTEVENTS                 = 0x00000065,
    DBPROP_REMOVEDELETED                   = 0x00000066,
    DBPROP_REPORTMULTIPLECHANGES           = 0x00000067,
    DBPROP_RETURNPENDINGINSERTS            = 0x000000bd,
    DBPROP_ROWRESTRICT                     = 0x00000068,
    DBPROP_ROWSETCONVERSIONSONCOMMAND      = 0x000000c0,
    DBPROP_ROWTHREADMODEL                  = 0x00000069,
    DBPROP_SCHEMATERM                      = 0x0000006a,
    DBPROP_SCHEMAUSAGE                     = 0x0000006b,
    DBPROP_SERVERCURSOR                    = 0x0000006c,
    DBPROP_SESS_AUTOCOMMITISOLEVELS        = 0x000000be,
    DBPROP_SQLSUPPORT                      = 0x0000006d,
    DBPROP_STRONGIDENTITY                  = 0x00000077,
    DBPROP_STRUCTUREDSTORAGE               = 0x0000006f,
    DBPROP_SUBQUERIES                      = 0x00000070,
    DBPROP_SUPPORTEDTXNDDL                 = 0x000000a1,
    DBPROP_SUPPORTEDTXNISOLEVELS           = 0x00000071,
    DBPROP_SUPPORTEDTXNISORETAIN           = 0x00000072,
    DBPROP_TABLETERM                       = 0x00000073,
    DBPROP_TBL_TEMPTABLE                   = 0x0000008c,
    DBPROP_TRANSACTEDOBJECT                = 0x00000074,
    DBPROP_UPDATABILITY                    = 0x00000075,
    DBPROP_USERNAME                        = 0x00000076,
}
alias DBPROPENUM = int;

enum : int
{
    DBPROP_FILTERCOMPAREOPS = 0x000000d1,
    DBPROP_FINDCOMPAREOPS   = 0x000000d2,
    DBPROP_IChapteredRowset = 0x000000ca,
    DBPROP_IDBAsynchStatus  = 0x000000cb,
    DBPROP_IRowsetFind      = 0x000000cc,
    DBPROP_IRowsetView      = 0x000000d4,
    DBPROP_IViewChapter     = 0x000000d5,
    DBPROP_IViewFilter      = 0x000000d6,
    DBPROP_IViewRowset      = 0x000000d7,
    DBPROP_IViewSort        = 0x000000d8,
    DBPROP_INIT_ASYNCH      = 0x000000c8,
    DBPROP_MAXOPENCHAPTERS  = 0x000000c7,
    DBPROP_MAXORSINFILTER   = 0x000000cd,
    DBPROP_MAXSORTCOLUMNS   = 0x000000ce,
    DBPROP_ROWSET_ASYNCH    = 0x000000c9,
    DBPROP_SORTONINDEX      = 0x000000cf,
}
alias DBPROPENUM15 = int;

enum : int
{
    DBPROP_IMultipleResults           = 0x000000d9,
    DBPROP_DATASOURCE_TYPE            = 0x000000fb,
    MDPROP_AXES                       = 0x000000fc,
    MDPROP_FLATTENING_SUPPORT         = 0x000000fd,
    MDPROP_MDX_JOINCUBES              = 0x000000fe,
    MDPROP_NAMED_LEVELS               = 0x000000ff,
    MDPROP_RANGEROWSET                = 0x00000100,
    MDPROP_MDX_SLICER                 = 0x000000da,
    MDPROP_MDX_CUBEQUALIFICATION      = 0x000000db,
    MDPROP_MDX_OUTERREFERENCE         = 0x000000dc,
    MDPROP_MDX_QUERYBYPROPERTY        = 0x000000dd,
    MDPROP_MDX_CASESUPPORT            = 0x000000de,
    MDPROP_MDX_STRING_COMPOP          = 0x000000e0,
    MDPROP_MDX_DESCFLAGS              = 0x000000e1,
    MDPROP_MDX_SET_FUNCTIONS          = 0x000000e2,
    MDPROP_MDX_MEMBER_FUNCTIONS       = 0x000000e3,
    MDPROP_MDX_NUMERIC_FUNCTIONS      = 0x000000e4,
    MDPROP_MDX_FORMULAS               = 0x000000e5,
    MDPROP_AGGREGATECELL_UPDATE       = 0x000000e6,
    MDPROP_MDX_AGGREGATECELL_UPDATE   = 0x000000e6,
    MDPROP_MDX_OBJQUALIFICATION       = 0x00000105,
    MDPROP_MDX_NONMEASURE_EXPRESSIONS = 0x00000106,
    DBPROP_ACCESSORDER                = 0x000000e7,
    DBPROP_BOOKMARKINFO               = 0x000000e8,
    DBPROP_INIT_CATALOG               = 0x000000e9,
    DBPROP_ROW_BULKOPS                = 0x000000ea,
    DBPROP_PROVIDERFRIENDLYNAME       = 0x000000eb,
    DBPROP_LOCKMODE                   = 0x000000ec,
    DBPROP_MULTIPLECONNECTIONS        = 0x000000ed,
    DBPROP_UNIQUEROWS                 = 0x000000ee,
    DBPROP_SERVERDATAONINSERT         = 0x000000ef,
    DBPROP_STORAGEFLAGS               = 0x000000f0,
    DBPROP_CONNECTIONSTATUS           = 0x000000f4,
    DBPROP_ALTERCOLUMN                = 0x000000f5,
    DBPROP_COLUMNLCID                 = 0x000000f6,
    DBPROP_RESETDATASOURCE            = 0x000000f7,
    DBPROP_INIT_OLEDBSERVICES         = 0x000000f8,
    DBPROP_IRowsetRefresh             = 0x000000f9,
    DBPROP_SERVERNAME                 = 0x000000fa,
    DBPROP_IParentRowset              = 0x00000101,
    DBPROP_HIDDENCOLUMNS              = 0x00000102,
    DBPROP_PROVIDERMEMORY             = 0x00000103,
    DBPROP_CLIENTCURSOR               = 0x00000104,
}
alias DBPROPENUM20 = int;

enum : int
{
    DBPROP_TRUSTEE_USERNAME          = 0x000000f1,
    DBPROP_TRUSTEE_AUTHENTICATION    = 0x000000f2,
    DBPROP_TRUSTEE_NEWAUTHENTICATION = 0x000000f3,
    DBPROP_IRow                      = 0x00000107,
    DBPROP_IRowChange                = 0x00000108,
    DBPROP_IRowSchemaChange          = 0x00000109,
    DBPROP_IGetRow                   = 0x0000010a,
    DBPROP_IScopedOperations         = 0x0000010b,
    DBPROP_IBindResource             = 0x0000010c,
    DBPROP_ICreateRow                = 0x0000010d,
    DBPROP_INIT_BINDFLAGS            = 0x0000010e,
    DBPROP_INIT_LOCKOWNER            = 0x0000010f,
    DBPROP_GENERATEURL               = 0x00000111,
    DBPROP_IDBBinderProperties       = 0x00000112,
    DBPROP_IColumnsInfo2             = 0x00000113,
    DBPROP_IRegisterProvider         = 0x00000114,
    DBPROP_IGetSession               = 0x00000115,
    DBPROP_IGetSourceRow             = 0x00000116,
    DBPROP_IRowsetCurrentIndex       = 0x00000117,
    DBPROP_OPENROWSETSUPPORT         = 0x00000118,
    DBPROP_COL_ISLONG                = 0x00000119,
}
alias DBPROPENUM21 = int;

enum : int
{
    DBPROP_COL_SEED            = 0x0000011a,
    DBPROP_COL_INCREMENT       = 0x0000011b,
    DBPROP_INIT_GENERALTIMEOUT = 0x0000011c,
    DBPROP_COMSERVICES         = 0x0000011d,
}
alias DBPROPENUM25 = int;

enum : int
{
    DBPROP_OUTPUTSTREAM        = 0x0000011e,
    DBPROP_OUTPUTENCODING      = 0x0000011f,
    DBPROP_TABLESTATISTICS     = 0x00000120,
    DBPROP_SKIPROWCOUNTRESULTS = 0x00000123,
    DBPROP_IRowsetBookmark     = 0x00000124,
    MDPROP_VISUALMODE          = 0x00000125,
}
alias DBPROPENUM26 = int;

enum : int
{
    DBPARAMFLAGS_ISINPUT    = 0x00000001,
    DBPARAMFLAGS_ISOUTPUT   = 0x00000002,
    DBPARAMFLAGS_ISSIGNED   = 0x00000010,
    DBPARAMFLAGS_ISNULLABLE = 0x00000040,
    DBPARAMFLAGS_ISLONG     = 0x00000080,
}
alias DBPARAMFLAGSENUM = int;

enum : int
{
    DBPARAMFLAGS_SCALEISNEGATIVE = 0x00000100,
}
alias DBPARAMFLAGSENUM20 = int;

enum : int
{
    DBPROPFLAGS_NOTSUPPORTED     = 0x00000000,
    DBPROPFLAGS_COLUMN           = 0x00000001,
    DBPROPFLAGS_DATASOURCE       = 0x00000002,
    DBPROPFLAGS_DATASOURCECREATE = 0x00000004,
    DBPROPFLAGS_DATASOURCEINFO   = 0x00000008,
    DBPROPFLAGS_DBINIT           = 0x00000010,
    DBPROPFLAGS_INDEX            = 0x00000020,
    DBPROPFLAGS_ROWSET           = 0x00000040,
    DBPROPFLAGS_TABLE            = 0x00000080,
    DBPROPFLAGS_COLUMNOK         = 0x00000100,
    DBPROPFLAGS_READ             = 0x00000200,
    DBPROPFLAGS_WRITE            = 0x00000400,
    DBPROPFLAGS_REQUIRED         = 0x00000800,
    DBPROPFLAGS_SESSION          = 0x00001000,
}
alias DBPROPFLAGSENUM = int;

enum : int
{
    DBPROPFLAGS_TRUSTEE = 0x00002000,
}
alias DBPROPFLAGSENUM21 = int;

enum : int
{
    DBPROPFLAGS_VIEW = 0x00004000,
}
alias DBPROPFLAGSENUM25 = int;

enum : int
{
    DBPROPFLAGS_STREAM = 0x00008000,
}
alias DBPROPFLAGSENUM26 = int;

enum : int
{
    DBPROPOPTIONS_REQUIRED   = 0x00000000,
    DBPROPOPTIONS_SETIFCHEAP = 0x00000001,
    DBPROPOPTIONS_OPTIONAL   = 0x00000001,
}
alias DBPROPOPTIONSENUM = int;

enum : int
{
    DBPROPSTATUS_OK             = 0x00000000,
    DBPROPSTATUS_NOTSUPPORTED   = 0x00000001,
    DBPROPSTATUS_BADVALUE       = 0x00000002,
    DBPROPSTATUS_BADOPTION      = 0x00000003,
    DBPROPSTATUS_BADCOLUMN      = 0x00000004,
    DBPROPSTATUS_NOTALLSETTABLE = 0x00000005,
    DBPROPSTATUS_NOTSETTABLE    = 0x00000006,
    DBPROPSTATUS_NOTSET         = 0x00000007,
    DBPROPSTATUS_CONFLICTING    = 0x00000008,
}
alias DBPROPSTATUSENUM = int;

enum : int
{
    DBPROPSTATUS_NOTAVAILABLE = 0x00000009,
}
alias DBPROPSTATUSENUM21 = int;

enum : int
{
    DBINDEX_COL_ORDER_ASC  = 0x00000000,
    DBINDEX_COL_ORDER_DESC = 0x00000001,
}
alias DBINDEX_COL_ORDERENUM = int;

enum : int
{
    DBCOLUMNDESCFLAGS_TYPENAME   = 0x00000001,
    DBCOLUMNDESCFLAGS_ITYPEINFO  = 0x00000002,
    DBCOLUMNDESCFLAGS_PROPERTIES = 0x00000004,
    DBCOLUMNDESCFLAGS_CLSID      = 0x00000008,
    DBCOLUMNDESCFLAGS_COLSIZE    = 0x00000010,
    DBCOLUMNDESCFLAGS_DBCID      = 0x00000020,
    DBCOLUMNDESCFLAGS_WTYPE      = 0x00000040,
    DBCOLUMNDESCFLAGS_PRECISION  = 0x00000080,
    DBCOLUMNDESCFLAGS_SCALE      = 0x00000100,
}
alias DBCOLUMNDESCFLAGSENUM = int;

enum : int
{
    DBEVENTPHASE_OKTODO     = 0x00000000,
    DBEVENTPHASE_ABOUTTODO  = 0x00000001,
    DBEVENTPHASE_SYNCHAFTER = 0x00000002,
    DBEVENTPHASE_FAILEDTODO = 0x00000003,
    DBEVENTPHASE_DIDEVENT   = 0x00000004,
}
alias DBEVENTPHASEENUM = int;

enum : int
{
    DBREASON_ROWSET_FETCHPOSITIONCHANGE = 0x00000000,
    DBREASON_ROWSET_RELEASE             = 0x00000001,
    DBREASON_COLUMN_SET                 = 0x00000002,
    DBREASON_COLUMN_RECALCULATED        = 0x00000003,
    DBREASON_ROW_ACTIVATE               = 0x00000004,
    DBREASON_ROW_RELEASE                = 0x00000005,
    DBREASON_ROW_DELETE                 = 0x00000006,
    DBREASON_ROW_FIRSTCHANGE            = 0x00000007,
    DBREASON_ROW_INSERT                 = 0x00000008,
    DBREASON_ROW_RESYNCH                = 0x00000009,
    DBREASON_ROW_UNDOCHANGE             = 0x0000000a,
    DBREASON_ROW_UNDOINSERT             = 0x0000000b,
    DBREASON_ROW_UNDODELETE             = 0x0000000c,
    DBREASON_ROW_UPDATE                 = 0x0000000d,
    DBREASON_ROWSET_CHANGED             = 0x0000000e,
}
alias DBREASONENUM = int;

enum : int
{
    DBREASON_ROWPOSITION_CHANGED        = 0x0000000f,
    DBREASON_ROWPOSITION_CHAPTERCHANGED = 0x00000010,
    DBREASON_ROWPOSITION_CLEARED        = 0x00000011,
    DBREASON_ROW_ASYNCHINSERT           = 0x00000012,
}
alias DBREASONENUM15 = int;

enum : int
{
    DBCOMPAREOPS_LT              = 0x00000000,
    DBCOMPAREOPS_LE              = 0x00000001,
    DBCOMPAREOPS_EQ              = 0x00000002,
    DBCOMPAREOPS_GE              = 0x00000003,
    DBCOMPAREOPS_GT              = 0x00000004,
    DBCOMPAREOPS_BEGINSWITH      = 0x00000005,
    DBCOMPAREOPS_CONTAINS        = 0x00000006,
    DBCOMPAREOPS_NE              = 0x00000007,
    DBCOMPAREOPS_IGNORE          = 0x00000008,
    DBCOMPAREOPS_CASESENSITIVE   = 0x00001000,
    DBCOMPAREOPS_CASEINSENSITIVE = 0x00002000,
}
alias DBCOMPAREOPSENUM = int;

enum : int
{
    DBCOMPAREOPS_NOTBEGINSWITH = 0x00000009,
    DBCOMPAREOPS_NOTCONTAINS   = 0x0000000a,
}
alias DBCOMPAREOPSENUM20 = int;

enum : int
{
    DBASYNCHOP_OPEN = 0x00000000,
}
alias DBASYNCHOPENUM = int;

enum : int
{
    DBASYNCHPHASE_INITIALIZATION = 0x00000000,
    DBASYNCHPHASE_POPULATION     = 0x00000001,
    DBASYNCHPHASE_COMPLETE       = 0x00000002,
    DBASYNCHPHASE_CANCELED       = 0x00000003,
}
alias DBASYNCHPHASEENUM = int;

enum : int
{
    DBSORT_ASCENDING  = 0x00000000,
    DBSORT_DESCENDING = 0x00000001,
}
alias DBSORTENUM = int;

enum : int
{
    DBCOMMANDPERSISTFLAG_NOSAVE = 0x00000001,
}
alias DBCOMMANDPERSISTFLAGENUM = int;

enum : int
{
    DBCOMMANDPERSISTFLAG_DEFAULT          = 0x00000000,
    DBCOMMANDPERSISTFLAG_PERSISTVIEW      = 0x00000002,
    DBCOMMANDPERSISTFLAG_PERSISTPROCEDURE = 0x00000004,
}
alias DBCOMMANDPERSISTFLAGENUM21 = int;

enum : int
{
    DBCONSTRAINTTYPE_UNIQUE     = 0x00000000,
    DBCONSTRAINTTYPE_FOREIGNKEY = 0x00000001,
    DBCONSTRAINTTYPE_PRIMARYKEY = 0x00000002,
    DBCONSTRAINTTYPE_CHECK      = 0x00000003,
}
alias DBCONSTRAINTTYPEENUM = int;

enum : int
{
    DBUPDELRULE_NOACTION   = 0x00000000,
    DBUPDELRULE_CASCADE    = 0x00000001,
    DBUPDELRULE_SETNULL    = 0x00000002,
    DBUPDELRULE_SETDEFAULT = 0x00000003,
}
alias DBUPDELRULEENUM = int;

enum : int
{
    DBMATCHTYPE_FULL    = 0x00000000,
    DBMATCHTYPE_NONE    = 0x00000001,
    DBMATCHTYPE_PARTIAL = 0x00000002,
}
alias DBMATCHTYPEENUM = int;

enum : int
{
    DBDEFERRABILITY_DEFERRED   = 0x00000001,
    DBDEFERRABILITY_DEFERRABLE = 0x00000002,
}
alias DBDEFERRABILITYENUM = int;

enum : int
{
    DBACCESSOR_INVALID       = 0x00000000,
    DBACCESSOR_PASSBYREF     = 0x00000001,
    DBACCESSOR_ROWDATA       = 0x00000002,
    DBACCESSOR_PARAMETERDATA = 0x00000004,
    DBACCESSOR_OPTIMIZED     = 0x00000008,
    DBACCESSOR_INHERITED     = 0x00000010,
}
alias DBACCESSORFLAGSENUM = int;

enum : int
{
    DBBINDSTATUS_OK                    = 0x00000000,
    DBBINDSTATUS_BADORDINAL            = 0x00000001,
    DBBINDSTATUS_UNSUPPORTEDCONVERSION = 0x00000002,
    DBBINDSTATUS_BADBINDINFO           = 0x00000003,
    DBBINDSTATUS_BADSTORAGEFLAGS       = 0x00000004,
    DBBINDSTATUS_NOINTERFACE           = 0x00000005,
    DBBINDSTATUS_MULTIPLESTORAGE       = 0x00000006,
}
alias DBBINDSTATUSENUM = int;

enum : int
{
    DBCOMPARE_LT            = 0x00000000,
    DBCOMPARE_EQ            = 0x00000001,
    DBCOMPARE_GT            = 0x00000002,
    DBCOMPARE_NE            = 0x00000003,
    DBCOMPARE_NOTCOMPARABLE = 0x00000004,
}
alias DBCOMPAREENUM = int;

enum : int
{
    DBPOSITION_OK    = 0x00000000,
    DBPOSITION_NOROW = 0x00000001,
    DBPOSITION_BOF   = 0x00000002,
    DBPOSITION_EOF   = 0x00000003,
}
alias DBPOSITIONFLAGSENUM = int;

enum : int
{
    DBPENDINGSTATUS_NEW        = 0x00000001,
    DBPENDINGSTATUS_CHANGED    = 0x00000002,
    DBPENDINGSTATUS_DELETED    = 0x00000004,
    DBPENDINGSTATUS_UNCHANGED  = 0x00000008,
    DBPENDINGSTATUS_INVALIDROW = 0x00000010,
}
alias DBPENDINGSTATUSENUM = int;

enum : int
{
    DBSEEK_INVALID  = 0x00000000,
    DBSEEK_FIRSTEQ  = 0x00000001,
    DBSEEK_LASTEQ   = 0x00000002,
    DBSEEK_AFTEREQ  = 0x00000004,
    DBSEEK_AFTER    = 0x00000008,
    DBSEEK_BEFOREEQ = 0x00000010,
    DBSEEK_BEFORE   = 0x00000020,
}
alias DBSEEKENUM = int;

enum : int
{
    DBRANGE_INCLUSIVESTART = 0x00000000,
    DBRANGE_INCLUSIVEEND   = 0x00000000,
    DBRANGE_EXCLUSIVESTART = 0x00000001,
    DBRANGE_EXCLUSIVEEND   = 0x00000002,
    DBRANGE_EXCLUDENULLS   = 0x00000004,
    DBRANGE_PREFIX         = 0x00000008,
    DBRANGE_MATCH          = 0x00000010,
}
alias DBRANGEENUM = int;

enum : int
{
    DBRANGE_MATCH_N_SHIFT = 0x00000018,
    DBRANGE_MATCH_N_MASK  = 0x000000ff,
}
alias DBRANGEENUM20 = int;

enum : int
{
    DBRESULTFLAG_DEFAULT = 0x00000000,
    DBRESULTFLAG_ROWSET  = 0x00000001,
    DBRESULTFLAG_ROW     = 0x00000002,
}
alias DBRESULTFLAGENUM = int;

enum : int
{
    DBCONVERTFLAGS_COLUMN    = 0x00000000,
    DBCONVERTFLAGS_PARAMETER = 0x00000001,
}
alias DBCONVERTFLAGSENUM = int;

enum : int
{
    DBCONVERTFLAGS_ISLONG        = 0x00000002,
    DBCONVERTFLAGS_ISFIXEDLENGTH = 0x00000004,
    DBCONVERTFLAGS_FROMVARIANT   = 0x00000008,
}
alias DBCONVERTFLAGSENUM20 = int;

enum : int
{
    DBSOURCETYPE_DATASOURCE = 0x00000001,
    DBSOURCETYPE_ENUMERATOR = 0x00000002,
}
alias DBSOURCETYPEENUM = int;

enum : int
{
    DBSOURCETYPE_DATASOURCE_TDP = 0x00000001,
    DBSOURCETYPE_DATASOURCE_MDP = 0x00000003,
}
alias DBSOURCETYPEENUM20 = int;

enum : int
{
    DBSOURCETYPE_BINDER = 0x00000004,
}
alias DBSOURCETYPEENUM25 = int;

enum : int
{
    DBLITERAL_INVALID           = 0x00000000,
    DBLITERAL_BINARY_LITERAL    = 0x00000001,
    DBLITERAL_CATALOG_NAME      = 0x00000002,
    DBLITERAL_CATALOG_SEPARATOR = 0x00000003,
    DBLITERAL_CHAR_LITERAL      = 0x00000004,
    DBLITERAL_COLUMN_ALIAS      = 0x00000005,
    DBLITERAL_COLUMN_NAME       = 0x00000006,
    DBLITERAL_CORRELATION_NAME  = 0x00000007,
    DBLITERAL_CURSOR_NAME       = 0x00000008,
    DBLITERAL_ESCAPE_PERCENT    = 0x00000009,
    DBLITERAL_ESCAPE_UNDERSCORE = 0x0000000a,
    DBLITERAL_INDEX_NAME        = 0x0000000b,
    DBLITERAL_LIKE_PERCENT      = 0x0000000c,
    DBLITERAL_LIKE_UNDERSCORE   = 0x0000000d,
    DBLITERAL_PROCEDURE_NAME    = 0x0000000e,
    DBLITERAL_QUOTE             = 0x0000000f,
    DBLITERAL_SCHEMA_NAME       = 0x00000010,
    DBLITERAL_TABLE_NAME        = 0x00000011,
    DBLITERAL_TEXT_COMMAND      = 0x00000012,
    DBLITERAL_USER_NAME         = 0x00000013,
    DBLITERAL_VIEW_NAME         = 0x00000014,
}
alias DBLITERALENUM = int;

enum : int
{
    DBLITERAL_CUBE_NAME        = 0x00000015,
    DBLITERAL_DIMENSION_NAME   = 0x00000016,
    DBLITERAL_HIERARCHY_NAME   = 0x00000017,
    DBLITERAL_LEVEL_NAME       = 0x00000018,
    DBLITERAL_MEMBER_NAME      = 0x00000019,
    DBLITERAL_PROPERTY_NAME    = 0x0000001a,
    DBLITERAL_SCHEMA_SEPARATOR = 0x0000001b,
    DBLITERAL_QUOTE_SUFFIX     = 0x0000001c,
}
alias DBLITERALENUM20 = int;

enum : int
{
    DBLITERAL_ESCAPE_PERCENT_SUFFIX    = 0x0000001d,
    DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX = 0x0000001e,
}
alias DBLITERALENUM21 = int;

enum : int
{
    PERM_EXCLUSIVE        = 0x00000200,
    PERM_READDESIGN       = 0x00000400,
    PERM_WRITEDESIGN      = 0x00000800,
    PERM_WITHGRANT        = 0x00001000,
    PERM_REFERENCE        = 0x00002000,
    PERM_CREATE           = 0x00004000,
    PERM_INSERT           = 0x00008000,
    PERM_DELETE           = 0x00010000,
    PERM_READCONTROL      = 0x00020000,
    PERM_WRITEPERMISSIONS = 0x00040000,
    PERM_WRITEOWNER       = 0x00080000,
    PERM_MAXIMUM_ALLOWED  = 0x02000000,
    PERM_ALL              = 0x10000000,
    PERM_EXECUTE          = 0x20000000,
    PERM_READ             = 0x80000000,
    PERM_UPDATE           = 0x40000000,
    PERM_DROP             = 0x00000100,
}
alias ACCESS_MASKENUM = int;

enum : int
{
    DBCOPY_ASYNC            = 0x00000100,
    DBCOPY_REPLACE_EXISTING = 0x00000200,
    DBCOPY_ALLOW_EMULATION  = 0x00000400,
    DBCOPY_NON_RECURSIVE    = 0x00000800,
    DBCOPY_ATOMIC           = 0x00001000,
}
alias DBCOPYFLAGSENUM = int;

enum : int
{
    DBMOVE_REPLACE_EXISTING  = 0x00000001,
    DBMOVE_ASYNC             = 0x00000100,
    DBMOVE_DONT_UPDATE_LINKS = 0x00000200,
    DBMOVE_ALLOW_EMULATION   = 0x00000400,
    DBMOVE_ATOMIC            = 0x00001000,
}
alias DBMOVEFLAGSENUM = int;

enum : int
{
    DBDELETE_ASYNC  = 0x00000100,
    DBDELETE_ATOMIC = 0x00001000,
}
alias DBDELETEFLAGSENUM = int;

enum : int
{
    SQS_NO_SYNTAX             = 0x00000000,
    SQS_ADVANCED_QUERY_SYNTAX = 0x00000001,
    SQS_NATURAL_QUERY_SYNTAX  = 0x00000002,
}
alias STRUCTURED_QUERY_SYNTAX = int;

enum : int
{
    SQSO_SCHEMA               = 0x00000000,
    SQSO_LOCALE_WORD_BREAKING = 0x00000001,
    SQSO_WORD_BREAKER         = 0x00000002,
    SQSO_NATURAL_SYNTAX       = 0x00000003,
    SQSO_AUTOMATIC_WILDCARD   = 0x00000004,
    SQSO_TRACE_LEVEL          = 0x00000005,
    SQSO_LANGUAGE_KEYWORDS    = 0x00000006,
    SQSO_SYNTAX               = 0x00000007,
    SQSO_TIME_ZONE            = 0x00000008,
    SQSO_IMPLICIT_CONNECTOR   = 0x00000009,
    SQSO_CONNECTOR_CASE       = 0x0000000a,
}
alias STRUCTURED_QUERY_SINGLE_OPTION = int;

enum : int
{
    SQMO_VIRTUAL_PROPERTY   = 0x00000000,
    SQMO_DEFAULT_PROPERTY   = 0x00000001,
    SQMO_GENERATOR_FOR_TYPE = 0x00000002,
    SQMO_MAP_PROPERTY       = 0x00000003,
}
alias STRUCTURED_QUERY_MULTIOPTION = int;

enum : int
{
    SQPE_NONE                      = 0x00000000,
    SQPE_EXTRA_OPENING_PARENTHESIS = 0x00000001,
    SQPE_EXTRA_CLOSING_PARENTHESIS = 0x00000002,
    SQPE_IGNORED_MODIFIER          = 0x00000003,
    SQPE_IGNORED_CONNECTOR         = 0x00000004,
    SQPE_IGNORED_KEYWORD           = 0x00000005,
    SQPE_UNHANDLED                 = 0x00000006,
}
alias STRUCTURED_QUERY_PARSE_ERROR = int;

enum : int
{
    SQRO_DEFAULT                           = 0x00000000,
    SQRO_DONT_RESOLVE_DATETIME             = 0x00000001,
    SQRO_ALWAYS_ONE_INTERVAL               = 0x00000002,
    SQRO_DONT_SIMPLIFY_CONDITION_TREES     = 0x00000004,
    SQRO_DONT_MAP_RELATIONS                = 0x00000008,
    SQRO_DONT_RESOLVE_RANGES               = 0x00000010,
    SQRO_DONT_REMOVE_UNRESTRICTED_KEYWORDS = 0x00000020,
    SQRO_DONT_SPLIT_WORDS                  = 0x00000040,
    SQRO_IGNORE_PHRASE_ORDER               = 0x00000080,
    SQRO_ADD_VALUE_TYPE_FOR_PLAIN_VALUES   = 0x00000100,
    SQRO_ADD_ROBUST_ITEM_NAME              = 0x00000200,
}
alias STRUCTURED_QUERY_RESOLVE_OPTION = int;

enum : int
{
    CASE_REQUIREMENT_ANY          = 0x00000000,
    CASE_REQUIREMENT_UPPER_IF_AQS = 0x00000001,
}
alias CASE_REQUIREMENT = int;

enum : int
{
    ILK_EXPLICIT_INCLUDED = 0x00000000,
    ILK_EXPLICIT_EXCLUDED = 0x00000001,
    ILK_NEGATIVE_INFINITY = 0x00000002,
    ILK_POSITIVE_INFINITY = 0x00000003,
}
alias INTERVAL_LIMIT_KIND = int;

enum : int
{
    QPMO_SCHEMA_BINARY_NAME              = 0x00000000,
    QPMO_PRELOCALIZED_SCHEMA_BINARY_PATH = 0x00000001,
    QPMO_UNLOCALIZED_SCHEMA_BINARY_PATH  = 0x00000002,
    QPMO_LOCALIZED_SCHEMA_BINARY_PATH    = 0x00000003,
    QPMO_APPEND_LCID_TO_LOCALIZED_PATH   = 0x00000004,
    QPMO_LOCALIZER_SUPPORT               = 0x00000005,
}
alias QUERY_PARSER_MANAGER_OPTION = int;

enum : int
{
    CONDITION_CREATION_DEFAULT            = 0x00000000,
    CONDITION_CREATION_NONE               = 0x00000000,
    CONDITION_CREATION_SIMPLIFY           = 0x00000001,
    CONDITION_CREATION_VECTOR_AND         = 0x00000002,
    CONDITION_CREATION_VECTOR_OR          = 0x00000004,
    CONDITION_CREATION_VECTOR_LEAF        = 0x00000008,
    CONDITION_CREATION_USE_CONTENT_LOCALE = 0x00000010,
}
alias CONDITION_CREATION_OPTIONS = int;

enum : int
{
    NEC_LOW    = 0x00000000,
    NEC_MEDIUM = 0x00000001,
    NEC_HIGH   = 0x00000002,
}
alias NAMED_ENTITY_CERTAINTY = int;

enum : int
{
    PROXY_ACCESS_PRECONFIG = 0x00000000,
    PROXY_ACCESS_DIRECT    = 0x00000001,
    PROXY_ACCESS_PROXY     = 0x00000002,
}
alias PROXY_ACCESS = int;

enum : int
{
    eAUTH_TYPE_ANONYMOUS = 0x00000000,
    eAUTH_TYPE_NTLM      = 0x00000001,
    eAUTH_TYPE_BASIC     = 0x00000002,
}
alias AUTH_TYPE = int;

enum : int
{
    FF_INDEXCOMPLEXURLS = 0x00000001,
    FF_SUPPRESSINDEXING = 0x00000002,
}
alias FOLLOW_FLAGS = int;

enum : int
{
    CLUSIONREASON_UNKNOWNSCOPE = 0x00000000,
    CLUSIONREASON_DEFAULT      = 0x00000001,
    CLUSIONREASON_USER         = 0x00000002,
    CLUSIONREASON_GROUPPOLICY  = 0x00000003,
}
alias CLUSION_REASON = int;

enum : int
{
    SEARCH_CHANGE_ADD                       = 0x00000000,
    SEARCH_CHANGE_DELETE                    = 0x00000001,
    SEARCH_CHANGE_MODIFY                    = 0x00000002,
    SEARCH_CHANGE_MOVE_RENAME               = 0x00000003,
    SEARCH_CHANGE_SEMANTICS_DIRECTORY       = 0x00040000,
    SEARCH_CHANGE_SEMANTICS_SHALLOW         = 0x00080000,
    SEARCH_CHANGE_SEMANTICS_UPDATE_SECURITY = 0x00400000,
}
alias SEARCH_KIND_OF_CHANGE = int;

enum : int
{
    SEARCH_NORMAL_PRIORITY = 0x00000000,
    SEARCH_HIGH_PRIORITY   = 0x00000001,
}
alias SEARCH_NOTIFICATION_PRIORITY = int;

enum : int
{
    SEARCH_INDEXING_PHASE_GATHERER  = 0x00000000,
    SEARCH_INDEXING_PHASE_QUERYABLE = 0x00000001,
    SEARCH_INDEXING_PHASE_PERSISTED = 0x00000002,
}
alias SEARCH_INDEXING_PHASE = int;

enum CatalogStatus : int
{
    CATALOG_STATUS_IDLE                     = 0x00000000,
    CATALOG_STATUS_PAUSED                   = 0x00000001,
    CATALOG_STATUS_RECOVERING               = 0x00000002,
    CATALOG_STATUS_FULL_CRAWL               = 0x00000003,
    CATALOG_STATUS_INCREMENTAL_CRAWL        = 0x00000004,
    CATALOG_STATUS_PROCESSING_NOTIFICATIONS = 0x00000005,
    CATALOG_STATUS_SHUTTING_DOWN            = 0x00000006,
}

enum CatalogPausedReason : int
{
    CATALOG_PAUSED_REASON_NONE             = 0x00000000,
    CATALOG_PAUSED_REASON_HIGH_IO          = 0x00000001,
    CATALOG_PAUSED_REASON_HIGH_CPU         = 0x00000002,
    CATALOG_PAUSED_REASON_HIGH_NTF_RATE    = 0x00000003,
    CATALOG_PAUSED_REASON_LOW_BATTERY      = 0x00000004,
    CATALOG_PAUSED_REASON_LOW_MEMORY       = 0x00000005,
    CATALOG_PAUSED_REASON_LOW_DISK         = 0x00000006,
    CATALOG_PAUSED_REASON_DELAYED_RECOVERY = 0x00000007,
    CATALOG_PAUSED_REASON_USER_ACTIVE      = 0x00000008,
    CATALOG_PAUSED_REASON_EXTERNAL         = 0x00000009,
    CATALOG_PAUSED_REASON_UPGRADING        = 0x0000000a,
}

enum : int
{
    PRIORITIZE_FLAG_RETRYFAILEDITEMS   = 0x00000001,
    PRIORITIZE_FLAG_IGNOREFAILURECOUNT = 0x00000002,
}
alias tagPRIORITIZE_FLAGS = int;

enum : int
{
    SEARCH_TERM_NO_EXPANSION = 0x00000000,
    SEARCH_TERM_PREFIX_ALL   = 0x00000001,
    SEARCH_TERM_STEM_ALL     = 0x00000002,
}
alias SEARCH_TERM_EXPANSION = int;

enum : int
{
    SEARCH_NO_QUERY_SYNTAX       = 0x00000000,
    SEARCH_ADVANCED_QUERY_SYNTAX = 0x00000001,
    SEARCH_NATURAL_QUERY_SYNTAX  = 0x00000002,
}
alias SEARCH_QUERY_SYNTAX = int;

enum : int
{
    PRIORITY_LEVEL_FOREGROUND = 0x00000000,
    PRIORITY_LEVEL_HIGH       = 0x00000001,
    PRIORITY_LEVEL_LOW        = 0x00000002,
    PRIORITY_LEVEL_DEFAULT    = 0x00000003,
}
alias PRIORITY_LEVEL = int;

enum : int
{
    ROWSETEVENT_ITEMSTATE_NOTINROWSET = 0x00000000,
    ROWSETEVENT_ITEMSTATE_INROWSET    = 0x00000001,
    ROWSETEVENT_ITEMSTATE_UNKNOWN     = 0x00000002,
}
alias ROWSETEVENT_ITEMSTATE = int;

enum : int
{
    ROWSETEVENT_TYPE_DATAEXPIRED     = 0x00000000,
    ROWSETEVENT_TYPE_FOREGROUNDLOST  = 0x00000001,
    ROWSETEVENT_TYPE_SCOPESTATISTICS = 0x00000002,
}
alias ROWSETEVENT_TYPE = int;

enum : int
{
    SUBSTYPE_URL            = 0x00000000,
    SUBSTYPE_CHANNEL        = 0x00000001,
    SUBSTYPE_DESKTOPURL     = 0x00000002,
    SUBSTYPE_EXTERNAL       = 0x00000003,
    SUBSTYPE_DESKTOPCHANNEL = 0x00000004,
}
alias SUBSCRIPTIONTYPE = int;

enum : int
{
    SUBSINFO_SCHEDULE     = 0x00000001,
    SUBSINFO_RECURSE      = 0x00000002,
    SUBSINFO_WEBCRAWL     = 0x00000004,
    SUBSINFO_MAILNOT      = 0x00000008,
    SUBSINFO_MAXSIZEKB    = 0x00000010,
    SUBSINFO_USER         = 0x00000020,
    SUBSINFO_PASSWORD     = 0x00000040,
    SUBSINFO_TASKFLAGS    = 0x00000100,
    SUBSINFO_GLEAM        = 0x00000200,
    SUBSINFO_CHANGESONLY  = 0x00000400,
    SUBSINFO_CHANNELFLAGS = 0x00000800,
    SUBSINFO_FRIENDLYNAME = 0x00002000,
    SUBSINFO_NEEDPASSWORD = 0x00004000,
    SUBSINFO_TYPE         = 0x00008000,
}
alias SUBSCRIPTIONINFOFLAGS = int;

enum : int
{
    CREATESUBS_ADDTOFAVORITES = 0x00000001,
    CREATESUBS_FROMFAVORITES  = 0x00000002,
    CREATESUBS_NOUI           = 0x00000004,
    CREATESUBS_NOSAVE         = 0x00000008,
    CREATESUBS_SOFTWAREUPDATE = 0x00000010,
}
alias CREATESUBSCRIPTIONFLAGS = int;

enum : int
{
    SUBSSCHED_AUTO   = 0x00000000,
    SUBSSCHED_DAILY  = 0x00000001,
    SUBSSCHED_WEEKLY = 0x00000002,
    SUBSSCHED_CUSTOM = 0x00000003,
    SUBSSCHED_MANUAL = 0x00000004,
}
alias SUBSCRIPTIONSCHEDULE = int;

enum : int
{
    DELIVERY_AGENT_FLAG_NO_BROADCAST    = 0x00000004,
    DELIVERY_AGENT_FLAG_NO_RESTRICTIONS = 0x00000008,
    DELIVERY_AGENT_FLAG_SILENT_DIAL     = 0x00000010,
}
alias DELIVERY_AGENT_FLAGS = int;

enum : int
{
    WEBCRAWL_DONT_MAKE_STICKY   = 0x00000001,
    WEBCRAWL_GET_IMAGES         = 0x00000002,
    WEBCRAWL_GET_VIDEOS         = 0x00000004,
    WEBCRAWL_GET_BGSOUNDS       = 0x00000008,
    WEBCRAWL_GET_CONTROLS       = 0x00000010,
    WEBCRAWL_LINKS_ELSEWHERE    = 0x00000020,
    WEBCRAWL_IGNORE_ROBOTSTXT   = 0x00000080,
    WEBCRAWL_ONLY_LINKS_TO_HTML = 0x00000100,
}
alias WEBCRAWL_RECURSEFLAGS = int;

enum : int
{
    CHANNEL_AGENT_DYNAMIC_SCHEDULE   = 0x00000001,
    CHANNEL_AGENT_PRECACHE_SOME      = 0x00000002,
    CHANNEL_AGENT_PRECACHE_ALL       = 0x00000004,
    CHANNEL_AGENT_PRECACHE_SCRNSAVER = 0x00000008,
}
alias CHANNEL_AGENT_FLAGS = int;

// Callbacks

alias PFNFILLTEXTBUFFER = HRESULT function(TEXT_SOURCE* pTextSource);

// Structs


struct TEXT_SOURCE
{
    PFNFILLTEXTBUFFER pfnFillTextBuffer;
    const(wchar)*     awcBuffer;
    uint              iEnd;
    uint              iCur;
}

struct FILTERED_DATA_SOURCES
{
    const(wchar)* pwcsExtension;
    const(wchar)* pwcsMime;
    const(GUID)*  pClsid;
    const(wchar)* pwcsOverride;
}

struct IRowsetExactScroll
{
}

struct DB_NUMERIC
{
    ubyte     precision;
    ubyte     scale;
    ubyte     sign;
    ubyte[16] val;
}

struct DBVECTOR
{
align (2):
    uint  size;
    void* ptr;
}

struct DBDATE
{
    short  year;
    ushort month;
    ushort day;
}

struct DBTIME
{
    ushort hour;
    ushort minute;
    ushort second;
}

struct DBTIMESTAMP
{
align (2):
    short  year;
    ushort month;
    ushort day;
    ushort hour;
    ushort minute;
    ushort second;
    uint   fraction;
}

struct DB_VARNUMERIC
{
    ubyte    precision;
    byte     scale;
    ubyte    sign;
    ubyte[1] val;
}

struct SEC_OBJECT_ELEMENT
{
align (2):
    GUID guidObjectType;
    DBID ObjectID;
}

struct SEC_OBJECT
{
align (2):
    uint                cObjects;
    SEC_OBJECT_ELEMENT* prgObjects;
}

struct DBIMPLICITSESSION
{
align (2):
    IUnknown pUnkOuter;
    GUID*    piid;
    IUnknown pSession;
}

struct DBOBJECT
{
align (2):
    uint dwFlags;
    GUID iid;
}

struct DBBINDEXT
{
align (2):
    ubyte* pExtension;
    uint   ulExtension;
}

struct DBBINDING
{
align (2):
    uint       iOrdinal;
    uint       obValue;
    uint       obLength;
    uint       obStatus;
    ITypeInfo  pTypeInfo;
    DBOBJECT*  pObject;
    DBBINDEXT* pBindExt;
    uint       dwPart;
    uint       dwMemOwner;
    uint       eParamIO;
    uint       cbMaxLen;
    uint       dwFlags;
    ushort     wType;
    ubyte      bPrecision;
    ubyte      bScale;
}

struct DBFAILUREINFO
{
align (2):
    size_t  hRow;
    uint    iColumn;
    HRESULT failure;
}

struct DBCOLUMNINFO
{
align (2):
    ushort*   pwszName;
    ITypeInfo pTypeInfo;
    uint      iOrdinal;
    uint      dwFlags;
    uint      ulColumnSize;
    ushort    wType;
    ubyte     bPrecision;
    ubyte     bScale;
    DBID      columnid;
}

struct DBPARAMS
{
align (2):
    void*  pData;
    uint   cParamSets;
    size_t hAccessor;
}

struct DBPARAMINFO
{
align (2):
    uint      dwFlags;
    uint      iOrdinal;
    ushort*   pwszName;
    ITypeInfo pTypeInfo;
    uint      ulParamSize;
    ushort    wType;
    ubyte     bPrecision;
    ubyte     bScale;
}

struct DBPROPIDSET
{
align (2):
    uint* rgPropertyIDs;
    uint  cPropertyIDs;
    GUID  guidPropertySet;
}

struct DBPROPINFO
{
align (2):
    ushort* pwszDescription;
    uint    dwPropertyID;
    uint    dwFlags;
    ushort  vtType;
    VARIANT vValues;
}

struct DBPROPINFOSET
{
align (2):
    DBPROPINFO* rgPropertyInfos;
    uint        cPropertyInfos;
    GUID        guidPropertySet;
}

struct DBPROP
{
align (2):
    uint    dwPropertyID;
    uint    dwOptions;
    uint    dwStatus;
    DBID    colid;
    VARIANT vValue;
}

struct DBPROPSET
{
align (2):
    DBPROP* rgProperties;
    uint    cProperties;
    GUID    guidPropertySet;
}

struct DBINDEXCOLUMNDESC
{
align (2):
    DBID* pColumnID;
    uint  eIndexColOrder;
}

struct DBCOLUMNDESC
{
align (2):
    ushort*    pwszTypeName;
    ITypeInfo  pTypeInfo;
    DBPROPSET* rgPropertySets;
    GUID*      pclsid;
    uint       cPropertySets;
    uint       ulColumnSize;
    DBID       dbcid;
    ushort     wType;
    ubyte      bPrecision;
    ubyte      bScale;
}

struct DBCOLUMNACCESS
{
align (2):
    void*  pData;
    DBID   columnid;
    uint   cbDataLen;
    uint   dwStatus;
    uint   cbMaxLen;
    uint   dwReserved;
    ushort wType;
    ubyte  bPrecision;
    ubyte  bScale;
}

struct DBCONSTRAINTDESC
{
align (2):
    DBID*      pConstraintID;
    uint       ConstraintType;
    uint       cColumns;
    DBID*      rgColumnList;
    DBID*      pReferencedTableID;
    uint       cForeignKeyColumns;
    DBID*      rgForeignKeyColumnList;
    ushort*    pwszConstraintText;
    uint       UpdateRule;
    uint       DeleteRule;
    uint       MatchType;
    uint       Deferrability;
    uint       cReserved;
    DBPROPSET* rgReserved;
}

struct MDAXISINFO
{
align (2):
    uint     cbSize;
    uint     iAxis;
    uint     cDimensions;
    uint     cCoordinates;
    uint*    rgcColumns;
    ushort** rgpwszDimensionNames;
}

struct RMTPACK
{
align (2):
    ISequentialStream pISeqStream;
    uint              cbData;
    uint              cBSTR;
    BSTR*             rgBSTR;
    uint              cVARIANT;
    VARIANT*          rgVARIANT;
    uint              cIDISPATCH;
    IDispatch*        rgIDISPATCH;
    uint              cIUNKNOWN;
    IUnknown*         rgIUNKNOWN;
    uint              cPROPVARIANT;
    PROPVARIANT*      rgPROPVARIANT;
    uint              cArray;
    VARIANT*          rgArray;
}

struct DBPARAMBINDINFO
{
align (2):
    ushort* pwszDataSourceType;
    ushort* pwszName;
    uint    ulParamSize;
    uint    dwFlags;
    ubyte   bPrecision;
    ubyte   bScale;
}

struct DBLITERALINFO
{
align (2):
    ushort* pwszLiteralValue;
    ushort* pwszInvalidChars;
    ushort* pwszInvalidStartingChars;
    uint    lt;
    BOOL    fSupported;
    uint    cchMaxLen;
}

struct ERRORINFO
{
align (2):
    HRESULT hrError;
    uint    dwMinor;
    GUID    clsid;
    GUID    iid;
    int     dispid;
}

struct HITRANGE
{
    uint iPosition;
    uint cLength;
}

struct TIMEOUT_INFO
{
    uint dwSize;
    uint dwConnectTimeout;
    uint dwDataTimeout;
}

struct PROXY_INFO
{
    uint          dwSize;
    const(wchar)* pcwszUserAgent;
    PROXY_ACCESS  paUseProxy;
    BOOL          fLocalBypass;
    uint          dwPortNumber;
    const(wchar)* pcwszProxyName;
    const(wchar)* pcwszBypassList;
}

struct AUTHENTICATION_INFO
{
    uint          dwSize;
    AUTH_TYPE     atAuthenticationType;
    const(wchar)* pcwszUser;
    const(wchar)* pcwszPassword;
}

struct INCREMENTAL_ACCESS_INFO
{
    uint     dwSize;
    FILETIME ftLastModifiedTime;
}

struct ITEM_INFO
{
    uint          dwSize;
    const(wchar)* pcwszFromEMail;
    const(wchar)* pcwszApplicationName;
    const(wchar)* pcwszCatalogName;
    const(wchar)* pcwszContentClass;
}

struct SEARCH_ITEM_CHANGE
{
    SEARCH_KIND_OF_CHANGE Change;
    SEARCH_NOTIFICATION_PRIORITY Priority;
    BLOB*         pUserData;
    const(wchar)* lpwszURL;
    const(wchar)* lpwszOldURL;
}

struct SEARCH_ITEM_PERSISTENT_CHANGE
{
    SEARCH_KIND_OF_CHANGE Change;
    const(wchar)* URL;
    const(wchar)* OldURL;
    SEARCH_NOTIFICATION_PRIORITY Priority;
}

struct SEARCH_ITEM_INDEXING_STATUS
{
    uint    dwDocID;
    HRESULT hrIndexingStatus;
}

struct SEARCH_COLUMN_PROPERTIES
{
    PROPVARIANT Value;
    uint        lcid;
}

struct ITEMPROP
{
    VARIANT       variantValue;
    const(wchar)* pwszName;
}

struct SUBSCRIPTIONITEMINFO
{
    uint cbSize;
    uint dwFlags;
    uint dwPriority;
    GUID ScheduleGroup;
    GUID clsidAgent;
}

struct _tagSubscriptionInfo
{
    uint                 cbSize;
    uint                 fUpdateFlags;
    SUBSCRIPTIONSCHEDULE schedule;
    GUID                 customGroupCookie;
    void*                pTrigger;
    uint                 dwRecurseLevels;
    uint                 fWebcrawlerFlags;
    BOOL                 bMailNotification;
    BOOL                 bGleam;
    BOOL                 bChangesOnly;
    BOOL                 bNeedPassword;
    uint                 fChannelFlags;
    BSTR                 bstrUserName;
    BSTR                 bstrPassword;
    BSTR                 bstrFriendlyName;
    uint                 dwMaxSizeKB;
    SUBSCRIPTIONTYPE     subType;
    uint                 fTaskFlags;
    uint                 dwReserved;
}

// Interfaces

@GUID("7D096C5F-AC08-4F1F-BEB7-5C22C517CE39")
struct CSearchManager;

@GUID("30766BD2-EA1C-4F28-BF27-0B44E2F68DB7")
struct CSearchRoot;

@GUID("E63DE750-3BD7-4BE5-9C84-6B4281988C44")
struct CSearchScopeRule;

@GUID("9E175B8D-F52A-11D8-B9A5-505054503030")
struct FilterRegistration;

@GUID("B72F8FD8-0FAB-4DD9-BDBF-245A6CE1485B")
struct QueryParser;

@GUID("8DE9C74C-605A-4ACD-BEE3-2B222AA2D23D")
struct NegationCondition;

@GUID("116F8D13-101E-4FA5-84D4-FF8279381935")
struct CompoundCondition;

@GUID("52F15C89-5A17-48E1-BBCD-46A3F89C7CC2")
struct LeafCondition;

@GUID("E03E85B0-7BE3-4000-BA98-6C13DE9FA486")
struct ConditionFactory;

@GUID("D957171F-4BF9-4DE2-BCD5-C70A7CA55836")
struct Interval;

@GUID("5088B39A-29B4-4D9D-8245-4EE289222F66")
struct QueryParserManager;

@GUID("6A68CC80-4337-4DBC-BD27-FBFB1053820B")
struct CSearchLanguageSupport;

@GUID("ABBE31D0-6DAE-11D0-BECA-00C04FD940BE")
struct SubscriptionMgr;

@GUID("CC907054-C058-101A-B554-08002B33B0E6")
interface IWordSink : IUnknown
{
    HRESULT PutWord(uint cwc, const(wchar)* pwcInBuf, uint cwcSrcLen, uint cwcSrcPos);
    HRESULT PutAltWord(uint cwc, const(wchar)* pwcInBuf, uint cwcSrcLen, uint cwcSrcPos);
    HRESULT StartAltPhrase();
    HRESULT EndAltPhrase();
    HRESULT PutBreak(WORDREP_BREAK_TYPE breakType);
}

@GUID("D53552C8-77E3-101A-B552-08002B33B0E6")
interface IWordBreaker : IUnknown
{
    HRESULT Init(BOOL fQuery, uint ulMaxTokenSize, int* pfLicense);
    HRESULT BreakText(TEXT_SOURCE* pTextSource, IWordSink pWordSink, IPhraseSink pPhraseSink);
    HRESULT ComposePhrase(const(wchar)* pwcNoun, uint cwcNoun, const(wchar)* pwcModifier, uint cwcModifier, 
                          uint ulAttachmentType, ushort* pwcPhrase, uint* pcwcPhrase);
    HRESULT GetLicenseToUse(const(ushort)** ppwcsLicense);
}

@GUID("FE77C330-7F42-11CE-BE57-00AA0051FE20")
interface IWordFormSink : IUnknown
{
    HRESULT PutAltWord(const(wchar)* pwcInBuf, uint cwc);
    HRESULT PutWord(const(wchar)* pwcInBuf, uint cwc);
}

@GUID("EFBAF140-7F42-11CE-BE57-00AA0051FE20")
interface IStemmer : IUnknown
{
    HRESULT Init(uint ulMaxTokenSize, int* pfLicense);
    HRESULT GenerateWordForms(const(wchar)* pwcInBuf, uint cwc, IWordFormSink pStemSink);
    HRESULT GetLicenseToUse(const(ushort)** ppwcsLicense);
}

@GUID("5E341AB7-02D0-11D1-900C-00A0C9063796")
interface ISimpleCommandCreator : IUnknown
{
    HRESULT CreateICommand(IUnknown* ppIUnknown, IUnknown pOuterUnk);
    HRESULT VerifyCatalog(const(wchar)* pwszMachine, const(wchar)* pwszCatalogName);
    HRESULT GetDefaultCatalog(ushort* pwszCatalogName, uint cwcIn, uint* pcwcOut);
}

@GUID("0B63E37A-9CCC-11D0-BCDB-00805FCCCE04")
interface IColumnMapper : IUnknown
{
    HRESULT GetPropInfoFromName(const(wchar)* wcsPropName, DBID** ppPropId, ushort* pPropType, uint* puiWidth);
    HRESULT GetPropInfoFromId(const(DBID)* pPropId, ushort** pwcsName, ushort* pPropType, uint* puiWidth);
    HRESULT EnumPropInfo(uint iEntry, const(ushort)** pwcsName, DBID** ppPropId, ushort* pPropType, uint* puiWidth);
    HRESULT IsMapUpToDate();
}

@GUID("0B63E37B-9CCC-11D0-BCDB-00805FCCCE04")
interface IColumnMapperCreator : IUnknown
{
    HRESULT GetColumnMapper(const(wchar)* wcsMachineName, const(wchar)* wcsCatalogName, 
                            IColumnMapper* ppColumnMapper);
}

@GUID("C7310722-AC80-11D1-8DF3-00C04FB6EF4F")
interface ILoadFilter : IUnknown
{
    HRESULT LoadIFilter(const(wchar)* pwcsPath, FILTERED_DATA_SOURCES* pFilteredSources, IUnknown pUnkOuter, 
                        BOOL fUseDefault, GUID* pFilterClsid, int* SearchDecSize, char* pwcsSearchDesc, 
                        IFilter* ppIFilt);
    HRESULT LoadIFilterFromStorage(IStorage pStg, IUnknown pUnkOuter, const(wchar)* pwcsOverride, BOOL fUseDefault, 
                                   GUID* pFilterClsid, int* SearchDecSize, char* pwcsSearchDesc, IFilter* ppIFilt);
    HRESULT LoadIFilterFromStream(IStream pStm, FILTERED_DATA_SOURCES* pFilteredSources, IUnknown pUnkOuter, 
                                  BOOL fUseDefault, GUID* pFilterClsid, int* SearchDecSize, char* pwcsSearchDesc, 
                                  IFilter* ppIFilt);
}

@GUID("40BDBD34-780B-48D3-9BB6-12EBD4AD2E75")
interface ILoadFilterWithPrivateComActivation : ILoadFilter
{
    HRESULT LoadIFilterWithPrivateComActivation(FILTERED_DATA_SOURCES* filteredSources, BOOL useDefault, 
                                                GUID* filterClsid, int* isFilterPrivateComActivated, 
                                                IFilter* filterObj);
}

@GUID("4FDEF69C-DBC9-454E-9910-B34F3C64B510")
interface IRichChunk : IUnknown
{
    HRESULT GetData(uint* pFirstPos, uint* pLength, ushort** ppsz, PROPVARIANT* pValue);
}

@GUID("0FC988D4-C935-4B97-A973-46282EA175C8")
interface ICondition : IPersistStream
{
    HRESULT GetConditionType(CONDITION_TYPE* pNodeType);
    HRESULT GetSubConditions(const(GUID)* riid, void** ppv);
    HRESULT GetComparisonInfo(ushort** ppszPropertyName, CONDITION_OPERATION* pcop, PROPVARIANT* ppropvar);
    HRESULT GetValueType(ushort** ppszValueTypeName);
    HRESULT GetValueNormalization(ushort** ppszNormalization);
    HRESULT GetInputTerms(IRichChunk* ppPropertyTerm, IRichChunk* ppOperationTerm, IRichChunk* ppValueTerm);
    HRESULT Clone(ICondition* ppc);
}

@GUID("0DB8851D-2E5B-47EB-9208-D28C325A01D7")
interface ICondition2 : ICondition
{
    HRESULT GetLocale(ushort** ppszLocaleName);
    HRESULT GetLeafConditionInfo(PROPERTYKEY* ppropkey, CONDITION_OPERATION* pcop, PROPVARIANT* ppropvar);
}

@GUID("0C733A8C-2A1C-11CE-ADE5-00AA0044773D")
interface IAccessor : IUnknown
{
    HRESULT AddRefAccessor(size_t hAccessor, uint* pcRefCount);
    HRESULT CreateAccessor(uint dwAccessorFlags, uint cBindings, char* rgBindings, uint cbRowSize, 
                           size_t* phAccessor, char* rgStatus);
    HRESULT GetBindings(size_t hAccessor, uint* pdwAccessorFlags, uint* pcBindings, DBBINDING** prgBindings);
    HRESULT ReleaseAccessor(size_t hAccessor, uint* pcRefCount);
}

@GUID("0C733A7C-2A1C-11CE-ADE5-00AA0044773D")
interface IRowset : IUnknown
{
    HRESULT AddRefRows(uint cRows, const(size_t)* rghRows, uint* rgRefCounts, uint* rgRowStatus);
    HRESULT GetData(size_t hRow, size_t hAccessor, void* pData);
    HRESULT GetNextRows(size_t hReserved, int lRowsOffset, int cRows, uint* pcRowsObtained, size_t** prghRows);
    HRESULT ReleaseRows(uint cRows, const(size_t)* rghRows, uint* rgRowOptions, uint* rgRefCounts, 
                        uint* rgRowStatus);
    HRESULT RestartPosition(size_t hReserved);
}

@GUID("0C733A55-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetInfo : IUnknown
{
    HRESULT GetProperties(const(uint) cPropertyIDSets, char* rgPropertyIDSets, uint* pcPropertySets, 
                          DBPROPSET** prgPropertySets);
    HRESULT GetReferencedRowset(uint iOrdinal, const(GUID)* riid, IUnknown* ppReferencedRowset);
    HRESULT GetSpecification(const(GUID)* riid, IUnknown* ppSpecification);
}

@GUID("0C733A7D-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetLocate : IRowset
{
    HRESULT Compare(size_t hReserved, uint cbBookmark1, const(ubyte)* pBookmark1, uint cbBookmark2, 
                    const(ubyte)* pBookmark2, uint* pComparison);
    HRESULT GetRowsAt(size_t hReserved1, size_t hReserved2, uint cbBookmark, const(ubyte)* pBookmark, 
                      int lRowsOffset, int cRows, uint* pcRowsObtained, size_t** prghRows);
    HRESULT GetRowsByBookmark(size_t hReserved, uint cRows, const(uint)* rgcbBookmarks, 
                              const(ubyte)** rgpBookmarks, size_t* rghRows, uint* rgRowStatus);
    HRESULT Hash(size_t hReserved, uint cBookmarks, const(uint)* rgcbBookmarks, const(ubyte)** rgpBookmarks, 
                 uint* rgHashedValues, uint* rgBookmarkStatus);
}

@GUID("0C733A84-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetResynch : IUnknown
{
    HRESULT GetVisibleData(size_t hRow, size_t hAccessor, void* pData);
    HRESULT ResynchRows(uint cRows, const(size_t)* rghRows, uint* pcRowsResynched, size_t** prghRowsResynched, 
                        uint** prgRowStatus);
}

@GUID("0C733A7E-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetScroll : IRowsetLocate
{
    HRESULT GetApproximatePosition(size_t hReserved, uint cbBookmark, const(ubyte)* pBookmark, uint* pulPosition, 
                                   uint* pcRows);
    HRESULT GetRowsAtRatio(size_t hReserved1, size_t hReserved2, uint ulNumerator, uint ulDenominator, int cRows, 
                           uint* pcRowsObtained, size_t** prghRows);
}

@GUID("0C733A93-2A1C-11CE-ADE5-00AA0044773D")
interface IChapteredRowset : IUnknown
{
    HRESULT AddRefChapter(size_t hChapter, uint* pcRefCount);
    HRESULT ReleaseChapter(size_t hChapter, uint* pcRefCount);
}

@GUID("0C733A9D-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetFind : IUnknown
{
    HRESULT FindNextRow(size_t hChapter, size_t hAccessor, void* pFindValue, uint CompareOp, uint cbBookmark, 
                        const(ubyte)* pBookmark, int lRowsOffset, int cRows, uint* pcRowsObtained, size_t** prghRows);
}

@GUID("0C733A94-2A1C-11CE-ADE5-00AA0044773D")
interface IRowPosition : IUnknown
{
    HRESULT ClearRowPosition();
    HRESULT GetRowPosition(size_t* phChapter, size_t* phRow, uint* pdwPositionFlags);
    HRESULT GetRowset(const(GUID)* riid, IUnknown* ppRowset);
    HRESULT Initialize(IUnknown pRowset);
    HRESULT SetRowPosition(size_t hChapter, size_t hRow, uint dwPositionFlags);
}

@GUID("0997A571-126E-11D0-9F8A-00A0C9A0631E")
interface IRowPositionChange : IUnknown
{
    HRESULT OnRowPositionChange(uint eReason, uint ePhase, BOOL fCantDeny);
}

@GUID("0C733A97-2A1C-11CE-ADE5-00AA0044773D")
interface IViewRowset : IUnknown
{
    HRESULT GetSpecification(const(GUID)* riid, IUnknown* ppObject);
    HRESULT OpenViewRowset(IUnknown pUnkOuter, const(GUID)* riid, IUnknown* ppRowset);
}

@GUID("0C733A98-2A1C-11CE-ADE5-00AA0044773D")
interface IViewChapter : IUnknown
{
    HRESULT GetSpecification(const(GUID)* riid, IUnknown* ppRowset);
    HRESULT OpenViewChapter(size_t hSource, size_t* phViewChapter);
}

@GUID("0C733A9A-2A1C-11CE-ADE5-00AA0044773D")
interface IViewSort : IUnknown
{
    HRESULT GetSortOrder(uint* pcValues, uint** prgColumns, uint** prgOrders);
    HRESULT SetSortOrder(uint cValues, char* rgColumns, char* rgOrders);
}

@GUID("0C733A9B-2A1C-11CE-ADE5-00AA0044773D")
interface IViewFilter : IUnknown
{
    HRESULT GetFilter(size_t hAccessor, uint* pcRows, char* pCompareOps, void* pCriteriaData);
    HRESULT GetFilterBindings(uint* pcBindings, DBBINDING** prgBindings);
    HRESULT SetFilter(size_t hAccessor, uint cRows, char* CompareOps, void* pCriteriaData);
}

@GUID("0C733A99-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetView : IUnknown
{
    HRESULT CreateView(IUnknown pUnkOuter, const(GUID)* riid, IUnknown* ppView);
    HRESULT GetView(size_t hChapter, const(GUID)* riid, size_t* phChapterSource, IUnknown* ppView);
}

@GUID("0C733A05-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetChange : IUnknown
{
    HRESULT DeleteRows(size_t hReserved, uint cRows, const(size_t)* rghRows, uint* rgRowStatus);
    HRESULT SetData(size_t hRow, size_t hAccessor, void* pData);
    HRESULT InsertRow(size_t hReserved, size_t hAccessor, void* pData, size_t* phRow);
}

@GUID("0C733A6D-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetUpdate : IRowsetChange
{
    HRESULT GetOriginalData(size_t hRow, size_t hAccessor, void* pData);
    HRESULT GetPendingRows(size_t hReserved, uint dwRowStatus, uint* pcPendingRows, size_t** prgPendingRows, 
                           uint** prgPendingStatus);
    HRESULT GetRowStatus(size_t hReserved, uint cRows, const(size_t)* rghRows, uint* rgPendingStatus);
    HRESULT Undo(size_t hReserved, uint cRows, const(size_t)* rghRows, uint* pcRowsUndone, size_t** prgRowsUndone, 
                 uint** prgRowStatus);
    HRESULT Update(size_t hReserved, uint cRows, const(size_t)* rghRows, uint* pcRows, size_t** prgRows, 
                   uint** prgRowStatus);
}

@GUID("0C733A09-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetIdentity : IUnknown
{
    HRESULT IsSameRow(size_t hThisRow, size_t hThatRow);
}

@GUID("0C733A83-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetNotify : IUnknown
{
    HRESULT OnFieldChange(IRowset pRowset, size_t hRow, uint cColumns, char* rgColumns, uint eReason, uint ePhase, 
                          BOOL fCantDeny);
    HRESULT OnRowChange(IRowset pRowset, uint cRows, char* rghRows, uint eReason, uint ePhase, BOOL fCantDeny);
    HRESULT OnRowsetChange(IRowset pRowset, uint eReason, uint ePhase, BOOL fCantDeny);
}

@GUID("0C733A82-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetIndex : IUnknown
{
    HRESULT GetIndexInfo(uint* pcKeyColumns, DBINDEXCOLUMNDESC** prgIndexColumnDesc, uint* pcIndexPropertySets, 
                         DBPROPSET** prgIndexPropertySets);
    HRESULT Seek(size_t hAccessor, uint cKeyValues, void* pData, uint dwSeekOptions);
    HRESULT SetRange(size_t hAccessor, uint cStartKeyColumns, void* pStartData, uint cEndKeyColumns, 
                     void* pEndData, uint dwRangeOptions);
}

@GUID("0C733A63-2A1C-11CE-ADE5-00AA0044773D")
interface ICommand : IUnknown
{
    HRESULT Cancel();
    HRESULT Execute(IUnknown pUnkOuter, const(GUID)* riid, DBPARAMS* pParams, int* pcRowsAffected, 
                    IUnknown* ppRowset);
    HRESULT GetDBSession(const(GUID)* riid, IUnknown* ppSession);
}

@GUID("0C733A90-2A1C-11CE-ADE5-00AA0044773D")
interface IMultipleResults : IUnknown
{
    HRESULT GetResult(IUnknown pUnkOuter, int lResultFlag, const(GUID)* riid, int* pcRowsAffected, 
                      IUnknown* ppRowset);
}

@GUID("0C733A88-2A1C-11CE-ADE5-00AA0044773D")
interface IConvertType : IUnknown
{
    HRESULT CanConvert(ushort wFromType, ushort wToType, uint dwConvertFlags);
}

@GUID("0C733A26-2A1C-11CE-ADE5-00AA0044773D")
interface ICommandPrepare : IUnknown
{
    HRESULT Prepare(uint cExpectedRuns);
    HRESULT Unprepare();
}

@GUID("0C733A79-2A1C-11CE-ADE5-00AA0044773D")
interface ICommandProperties : IUnknown
{
    HRESULT GetProperties(const(uint) cPropertyIDSets, char* rgPropertyIDSets, uint* pcPropertySets, 
                          DBPROPSET** prgPropertySets);
    HRESULT SetProperties(uint cPropertySets, char* rgPropertySets);
}

@GUID("0C733A27-2A1C-11CE-ADE5-00AA0044773D")
interface ICommandText : ICommand
{
    HRESULT GetCommandText(GUID* pguidDialect, ushort** ppwszCommand);
    HRESULT SetCommandText(const(GUID)* rguidDialect, ushort* pwszCommand);
}

@GUID("0C733A64-2A1C-11CE-ADE5-00AA0044773D")
interface ICommandWithParameters : IUnknown
{
    HRESULT GetParameterInfo(uint* pcParams, DBPARAMINFO** prgParamInfo, ushort** ppNamesBuffer);
    HRESULT MapParameterNames(uint cParamNames, char* rgParamNames, char* rgParamOrdinals);
    HRESULT SetParameterInfo(uint cParams, char* rgParamOrdinals, char* rgParamBindInfo);
}

@GUID("0C733A10-2A1C-11CE-ADE5-00AA0044773D")
interface IColumnsRowset : IUnknown
{
    HRESULT GetAvailableColumns(uint* pcOptColumns, DBID** prgOptColumns);
    HRESULT GetColumnsRowset(IUnknown pUnkOuter, uint cOptColumns, char* rgOptColumns, const(GUID)* riid, 
                             uint cPropertySets, char* rgPropertySets, IUnknown* ppColRowset);
}

@GUID("0C733A11-2A1C-11CE-ADE5-00AA0044773D")
interface IColumnsInfo : IUnknown
{
    HRESULT GetColumnInfo(uint* pcColumns, DBCOLUMNINFO** prgInfo, ushort** ppStringsBuffer);
    HRESULT MapColumnIDs(uint cColumnIDs, char* rgColumnIDs, char* rgColumns);
}

@GUID("0C733A1D-2A1C-11CE-ADE5-00AA0044773D")
interface IDBCreateCommand : IUnknown
{
    HRESULT CreateCommand(IUnknown pUnkOuter, const(GUID)* riid, IUnknown* ppCommand);
}

@GUID("0C733A5D-2A1C-11CE-ADE5-00AA0044773D")
interface IDBCreateSession : IUnknown
{
    HRESULT CreateSession(IUnknown pUnkOuter, const(GUID)* riid, IUnknown* ppDBSession);
}

@GUID("0C733A1E-2A1C-11CE-ADE5-00AA0044773D")
interface ISourcesRowset : IUnknown
{
    HRESULT GetSourcesRowset(IUnknown pUnkOuter, const(GUID)* riid, uint cPropertySets, char* rgProperties, 
                             IUnknown* ppSourcesRowset);
}

@GUID("0C733A8A-2A1C-11CE-ADE5-00AA0044773D")
interface IDBProperties : IUnknown
{
    HRESULT GetProperties(uint cPropertyIDSets, char* rgPropertyIDSets, uint* pcPropertySets, 
                          DBPROPSET** prgPropertySets);
    HRESULT GetPropertyInfo(uint cPropertyIDSets, char* rgPropertyIDSets, uint* pcPropertyInfoSets, 
                            DBPROPINFOSET** prgPropertyInfoSets, ushort** ppDescBuffer);
    HRESULT SetProperties(uint cPropertySets, char* rgPropertySets);
}

@GUID("0C733A8B-2A1C-11CE-ADE5-00AA0044773D")
interface IDBInitialize : IUnknown
{
    HRESULT Initialize();
    HRESULT Uninitialize();
}

@GUID("0C733A89-2A1C-11CE-ADE5-00AA0044773D")
interface IDBInfo : IUnknown
{
    HRESULT GetKeywords(ushort** ppwszKeywords);
    HRESULT GetLiteralInfo(uint cLiterals, char* rgLiterals, uint* pcLiteralInfo, DBLITERALINFO** prgLiteralInfo, 
                           ushort** ppCharBuffer);
}

@GUID("0C733A7A-2A1C-11CE-ADE5-00AA0044773D")
interface IDBDataSourceAdmin : IUnknown
{
    HRESULT CreateDataSource(uint cPropertySets, char* rgPropertySets, IUnknown pUnkOuter, const(GUID)* riid, 
                             IUnknown* ppDBSession);
    HRESULT DestroyDataSource();
    HRESULT GetCreationProperties(uint cPropertyIDSets, char* rgPropertyIDSets, uint* pcPropertyInfoSets, 
                                  DBPROPINFOSET** prgPropertyInfoSets, ushort** ppDescBuffer);
    HRESULT ModifyDataSource(uint cPropertySets, char* rgPropertySets);
}

@GUID("0C733A96-2A1C-11CE-ADE5-00AA0044773D")
interface IDBAsynchNotify : IUnknown
{
    HRESULT OnLowResource(uint dwReserved);
    HRESULT OnProgress(size_t hChapter, uint eOperation, uint ulProgress, uint ulProgressMax, uint eAsynchPhase, 
                       ushort* pwszStatusText);
    HRESULT OnStop(size_t hChapter, uint eOperation, HRESULT hrStatus, ushort* pwszStatusText);
}

@GUID("0C733A95-2A1C-11CE-ADE5-00AA0044773D")
interface IDBAsynchStatus : IUnknown
{
    HRESULT Abort(size_t hChapter, uint eOperation);
    HRESULT GetStatus(size_t hChapter, uint eOperation, uint* pulProgress, uint* pulProgressMax, 
                      uint* peAsynchPhase, ushort** ppwszStatusText);
}

@GUID("0C733A85-2A1C-11CE-ADE5-00AA0044773D")
interface ISessionProperties : IUnknown
{
    HRESULT GetProperties(uint cPropertyIDSets, char* rgPropertyIDSets, uint* pcPropertySets, 
                          DBPROPSET** prgPropertySets);
    HRESULT SetProperties(uint cPropertySets, char* rgPropertySets);
}

@GUID("0C733A68-2A1C-11CE-ADE5-00AA0044773D")
interface IIndexDefinition : IUnknown
{
    HRESULT CreateIndex(DBID* pTableID, DBID* pIndexID, uint cIndexColumnDescs, char* rgIndexColumnDescs, 
                        uint cPropertySets, char* rgPropertySets, DBID** ppIndexID);
    HRESULT DropIndex(DBID* pTableID, DBID* pIndexID);
}

@GUID("0C733A86-2A1C-11CE-ADE5-00AA0044773D")
interface ITableDefinition : IUnknown
{
    HRESULT CreateTable(IUnknown pUnkOuter, DBID* pTableID, uint cColumnDescs, char* rgColumnDescs, 
                        const(GUID)* riid, uint cPropertySets, char* rgPropertySets, DBID** ppTableID, 
                        IUnknown* ppRowset);
    HRESULT DropTable(DBID* pTableID);
    HRESULT AddColumn(DBID* pTableID, DBCOLUMNDESC* pColumnDesc, DBID** ppColumnID);
    HRESULT DropColumn(DBID* pTableID, DBID* pColumnID);
}

@GUID("0C733A69-2A1C-11CE-ADE5-00AA0044773D")
interface IOpenRowset : IUnknown
{
    HRESULT OpenRowset(IUnknown pUnkOuter, DBID* pTableID, DBID* pIndexID, const(GUID)* riid, uint cPropertySets, 
                       char* rgPropertySets, IUnknown* ppRowset);
}

@GUID("0C733A7B-2A1C-11CE-ADE5-00AA0044773D")
interface IDBSchemaRowset : IUnknown
{
    HRESULT GetRowset(IUnknown pUnkOuter, const(GUID)* rguidSchema, uint cRestrictions, char* rgRestrictions, 
                      const(GUID)* riid, uint cPropertySets, char* rgPropertySets, IUnknown* ppRowset);
    HRESULT GetSchemas(uint* pcSchemas, GUID** prgSchemas, uint** prgRestrictionSupport);
}

@GUID("A07CCCD1-8148-11D0-87BB-00C04FC33942")
interface IMDDataset : IUnknown
{
    HRESULT FreeAxisInfo(uint cAxes, MDAXISINFO* rgAxisInfo);
    HRESULT GetAxisInfo(uint* pcAxes, MDAXISINFO** prgAxisInfo);
    HRESULT GetAxisRowset(IUnknown pUnkOuter, uint iAxis, const(GUID)* riid, uint cPropertySets, 
                          DBPROPSET* rgPropertySets, IUnknown* ppRowset);
    HRESULT GetCellData(size_t hAccessor, uint ulStartCell, uint ulEndCell, void* pData);
    HRESULT GetSpecification(const(GUID)* riid, IUnknown* ppSpecification);
}

@GUID("A07CCCD2-8148-11D0-87BB-00C04FC33942")
interface IMDFind : IUnknown
{
    HRESULT FindCell(uint ulStartingOrdinal, uint cMembers, ushort** rgpwszMember, uint* pulCellOrdinal);
    HRESULT FindTuple(uint ulAxisIdentifier, uint ulStartingOrdinal, uint cMembers, ushort** rgpwszMember, 
                      uint* pulTupleOrdinal);
}

@GUID("0C733AA0-2A1C-11CE-ADE5-00AA0044773D")
interface IMDRangeRowset : IUnknown
{
    HRESULT GetRangeRowset(IUnknown pUnkOuter, uint ulStartCell, uint ulEndCell, const(GUID)* riid, 
                           uint cPropertySets, DBPROPSET* rgPropertySets, IUnknown* ppRowset);
}

@GUID("0C733AA5-2A1C-11CE-ADE5-00AA0044773D")
interface IAlterTable : IUnknown
{
    HRESULT AlterColumn(DBID* pTableId, DBID* pColumnId, uint dwColumnDescFlags, DBCOLUMNDESC* pColumnDesc);
    HRESULT AlterTable(DBID* pTableId, DBID* pNewTableId, uint cPropertySets, DBPROPSET* rgPropertySets);
}

@GUID("0C733AA6-2A1C-11CE-ADE5-00AA0044773D")
interface IAlterIndex : IUnknown
{
    HRESULT AlterIndex(DBID* pTableId, DBID* pIndexId, DBID* pNewIndexId, uint cPropertySets, 
                       DBPROPSET* rgPropertySets);
}

@GUID("0C733AA8-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetChapterMember : IUnknown
{
    HRESULT IsRowInChapter(size_t hChapter, size_t hRow);
}

@GUID("0C733AA7-2A1C-11CE-ADE5-00AA0044773D")
interface ICommandPersist : IUnknown
{
    HRESULT DeleteCommand(DBID* pCommandID);
    HRESULT GetCurrentCommand(DBID** ppCommandID);
    HRESULT LoadCommand(DBID* pCommandID, uint dwFlags);
    HRESULT SaveCommand(DBID* pCommandID, uint dwFlags);
}

@GUID("0C733AA9-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetRefresh : IUnknown
{
    HRESULT RefreshVisibleData(size_t hChapter, uint cRows, const(size_t)* rghRows, BOOL fOverWrite, 
                               uint* pcRowsRefreshed, size_t** prghRowsRefreshed, uint** prgRowStatus);
    HRESULT GetLastVisibleData(size_t hRow, size_t hAccessor, void* pData);
}

@GUID("0C733AAA-2A1C-11CE-ADE5-00AA0044773D")
interface IParentRowset : IUnknown
{
    HRESULT GetChildRowset(IUnknown pUnkOuter, uint iOrdinal, const(GUID)* riid, IUnknown* ppRowset);
}

@GUID("0C733A67-2A1C-11CE-ADE5-00AA0044773D")
interface IErrorRecords : IUnknown
{
    HRESULT AddErrorRecord(ERRORINFO* pErrorInfo, uint dwLookupID, DISPPARAMS* pdispparams, 
                           IUnknown punkCustomError, uint dwDynamicErrorID);
    HRESULT GetBasicErrorInfo(uint ulRecordNum, ERRORINFO* pErrorInfo);
    HRESULT GetCustomErrorObject(uint ulRecordNum, const(GUID)* riid, IUnknown* ppObject);
    HRESULT GetErrorInfo(uint ulRecordNum, uint lcid, IErrorInfo* ppErrorInfo);
    HRESULT GetErrorParameters(uint ulRecordNum, DISPPARAMS* pdispparams);
    HRESULT GetRecordCount(uint* pcRecords);
}

@GUID("0C733A66-2A1C-11CE-ADE5-00AA0044773D")
interface IErrorLookup : IUnknown
{
    HRESULT GetErrorDescription(HRESULT hrError, uint dwLookupID, DISPPARAMS* pdispparams, uint lcid, 
                                BSTR* pbstrSource, BSTR* pbstrDescription);
    HRESULT GetHelpInfo(HRESULT hrError, uint dwLookupID, uint lcid, BSTR* pbstrHelpFile, uint* pdwHelpContext);
    HRESULT ReleaseErrors(const(uint) dwDynamicErrorID);
}

@GUID("0C733A74-2A1C-11CE-ADE5-00AA0044773D")
interface ISQLErrorInfo : IUnknown
{
    HRESULT GetSQLInfo(BSTR* pbstrSQLState, int* plNativeError);
}

@GUID("0C733A75-2A1C-11CE-ADE5-00AA0044773D")
interface IGetDataSource : IUnknown
{
    HRESULT GetDataSource(const(GUID)* riid, IUnknown* ppDataSource);
}

@GUID("0C733A5F-2A1C-11CE-ADE5-00AA0044773D")
interface ITransactionLocal : ITransaction
{
    HRESULT GetOptionsObject(ITransactionOptions* ppOptions);
    HRESULT StartTransaction(int isoLevel, uint isoFlags, ITransactionOptions pOtherOptions, 
                             uint* pulTransactionLevel);
}

@GUID("0C733A5E-2A1C-11CE-ADE5-00AA0044773D")
interface ITransactionJoin : IUnknown
{
    HRESULT GetOptionsObject(ITransactionOptions* ppOptions);
    HRESULT JoinTransaction(IUnknown punkTransactionCoord, int isoLevel, uint isoFlags, 
                            ITransactionOptions pOtherOptions);
}

@GUID("0C733A60-2A1C-11CE-ADE5-00AA0044773D")
interface ITransactionObject : IUnknown
{
    HRESULT GetTransactionObject(uint ulTransactionLevel, ITransaction* ppTransactionObject);
}

@GUID("0C733AA1-2A1C-11CE-ADE5-00AA0044773D")
interface ITrusteeAdmin : IUnknown
{
    HRESULT CompareTrustees(TRUSTEE_W* pTrustee1, TRUSTEE_W* pTrustee2);
    HRESULT CreateTrustee(TRUSTEE_W* pTrustee, uint cPropertySets, DBPROPSET* rgPropertySets);
    HRESULT DeleteTrustee(TRUSTEE_W* pTrustee);
    HRESULT SetTrusteeProperties(TRUSTEE_W* pTrustee, uint cPropertySets, DBPROPSET* rgPropertySets);
    HRESULT GetTrusteeProperties(TRUSTEE_W* pTrustee, const(uint) cPropertyIDSets, 
                                 const(DBPROPIDSET)* rgPropertyIDSets, uint* pcPropertySets, 
                                 DBPROPSET** prgPropertySets);
}

@GUID("0C733AA2-2A1C-11CE-ADE5-00AA0044773D")
interface ITrusteeGroupAdmin : IUnknown
{
    HRESULT AddMember(TRUSTEE_W* pMembershipTrustee, TRUSTEE_W* pMemberTrustee);
    HRESULT DeleteMember(TRUSTEE_W* pMembershipTrustee, TRUSTEE_W* pMemberTrustee);
    HRESULT IsMember(TRUSTEE_W* pMembershipTrustee, TRUSTEE_W* pMemberTrustee, int* pfStatus);
    HRESULT GetMembers(TRUSTEE_W* pMembershipTrustee, uint* pcMembers, TRUSTEE_W** prgMembers);
    HRESULT GetMemberships(TRUSTEE_W* pTrustee, uint* pcMemberships, TRUSTEE_W** prgMemberships);
}

@GUID("0C733AA3-2A1C-11CE-ADE5-00AA0044773D")
interface IObjectAccessControl : IUnknown
{
    HRESULT GetObjectAccessRights(SEC_OBJECT* pObject, uint* pcAccessEntries, EXPLICIT_ACCESS_W** prgAccessEntries);
    HRESULT GetObjectOwner(SEC_OBJECT* pObject, TRUSTEE_W** ppOwner);
    HRESULT IsObjectAccessAllowed(SEC_OBJECT* pObject, EXPLICIT_ACCESS_W* pAccessEntry, int* pfResult);
    HRESULT SetObjectAccessRights(SEC_OBJECT* pObject, uint cAccessEntries, EXPLICIT_ACCESS_W* prgAccessEntries);
    HRESULT SetObjectOwner(SEC_OBJECT* pObject, TRUSTEE_W* pOwner);
}

@GUID("0C733AA4-2A1C-11CE-ADE5-00AA0044773D")
interface ISecurityInfo : IUnknown
{
    HRESULT GetCurrentTrustee(TRUSTEE_W** ppTrustee);
    HRESULT GetObjectTypes(uint* cObjectTypes, GUID** rgObjectTypes);
    HRESULT GetPermissions(GUID ObjectType, uint* pPermissions);
}

@GUID("0C733ABC-2A1C-11CE-ADE5-00AA0044773D")
interface ITableCreation : ITableDefinition
{
    HRESULT GetTableDefinition(DBID* pTableID, uint* pcColumnDescs, char* prgColumnDescs, uint* pcPropertySets, 
                               char* prgPropertySets, uint* pcConstraintDescs, char* prgConstraintDescs, 
                               ushort** ppwszStringBuffer);
}

@GUID("0C733AAB-2A1C-11CE-ADE5-00AA0044773D")
interface ITableDefinitionWithConstraints : ITableCreation
{
    HRESULT AddConstraint(DBID* pTableID, DBCONSTRAINTDESC* pConstraintDesc);
    HRESULT CreateTableWithConstraints(IUnknown pUnkOuter, DBID* pTableID, uint cColumnDescs, 
                                       DBCOLUMNDESC* rgColumnDescs, uint cConstraintDescs, 
                                       DBCONSTRAINTDESC* rgConstraintDescs, const(GUID)* riid, uint cPropertySets, 
                                       DBPROPSET* rgPropertySets, DBID** ppTableID, IUnknown* ppRowset);
    HRESULT DropConstraint(DBID* pTableID, DBID* pConstraintID);
}

@GUID("0C733AB4-2A1C-11CE-ADE5-00AA0044773D")
interface IRow : IUnknown
{
    HRESULT GetColumns(uint cColumns, char* rgColumns);
    HRESULT GetSourceRowset(const(GUID)* riid, IUnknown* ppRowset, size_t* phRow);
    HRESULT Open(IUnknown pUnkOuter, DBID* pColumnID, const(GUID)* rguidColumnType, uint dwBindFlags, 
                 const(GUID)* riid, IUnknown* ppUnk);
}

@GUID("0C733AB5-2A1C-11CE-ADE5-00AA0044773D")
interface IRowChange : IUnknown
{
    HRESULT SetColumns(uint cColumns, char* rgColumns);
}

@GUID("0C733AAE-2A1C-11CE-ADE5-00AA0044773D")
interface IRowSchemaChange : IRowChange
{
    HRESULT DeleteColumns(uint cColumns, const(DBID)* rgColumnIDs, uint* rgdwStatus);
    HRESULT AddColumns(uint cColumns, const(DBCOLUMNINFO)* rgNewColumnInfo, DBCOLUMNACCESS* rgColumns);
}

@GUID("0C733AAF-2A1C-11CE-ADE5-00AA0044773D")
interface IGetRow : IUnknown
{
    HRESULT GetRowFromHROW(IUnknown pUnkOuter, size_t hRow, const(GUID)* riid, IUnknown* ppUnk);
    HRESULT GetURLFromHROW(size_t hRow, ushort** ppwszURL);
}

@GUID("0C733AB1-2A1C-11CE-ADE5-00AA0044773D")
interface IBindResource : IUnknown
{
    HRESULT Bind(IUnknown pUnkOuter, ushort* pwszURL, uint dwBindURLFlags, const(GUID)* rguid, const(GUID)* riid, 
                 IAuthenticate pAuthenticate, DBIMPLICITSESSION* pImplSession, uint* pdwBindStatus, IUnknown* ppUnk);
}

@GUID("0C733AB0-2A1C-11CE-ADE5-00AA0044773D")
interface IScopedOperations : IBindResource
{
    HRESULT Copy(uint cRows, char* rgpwszSourceURLs, char* rgpwszDestURLs, uint dwCopyFlags, 
                 IAuthenticate pAuthenticate, char* rgdwStatus, char* rgpwszNewURLs, ushort** ppStringsBuffer);
    HRESULT Move(uint cRows, char* rgpwszSourceURLs, char* rgpwszDestURLs, uint dwMoveFlags, 
                 IAuthenticate pAuthenticate, char* rgdwStatus, char* rgpwszNewURLs, ushort** ppStringsBuffer);
    HRESULT Delete(uint cRows, char* rgpwszURLs, uint dwDeleteFlags, char* rgdwStatus);
    HRESULT OpenRowset(IUnknown pUnkOuter, DBID* pTableID, DBID* pIndexID, const(GUID)* riid, uint cPropertySets, 
                       char* rgPropertySets, IUnknown* ppRowset);
}

@GUID("0C733AB2-2A1C-11CE-ADE5-00AA0044773D")
interface ICreateRow : IUnknown
{
    HRESULT CreateRow(IUnknown pUnkOuter, ushort* pwszURL, uint dwBindURLFlags, const(GUID)* rguid, 
                      const(GUID)* riid, IAuthenticate pAuthenticate, DBIMPLICITSESSION* pImplSession, 
                      uint* pdwBindStatus, ushort** ppwszNewURL, IUnknown* ppUnk);
}

@GUID("0C733AB3-2A1C-11CE-ADE5-00AA0044773D")
interface IDBBinderProperties : IDBProperties
{
    HRESULT Reset();
}

@GUID("0C733AB8-2A1C-11CE-ADE5-00AA0044773D")
interface IColumnsInfo2 : IColumnsInfo
{
    HRESULT GetRestrictedColumnInfo(uint cColumnIDMasks, char* rgColumnIDMasks, uint dwFlags, uint* pcColumns, 
                                    DBID** prgColumnIDs, DBCOLUMNINFO** prgColumnInfo, ushort** ppStringsBuffer);
}

@GUID("0C733AB9-2A1C-11CE-ADE5-00AA0044773D")
interface IRegisterProvider : IUnknown
{
    HRESULT GetURLMapping(ushort* pwszURL, uint dwReserved, GUID* pclsidProvider);
    HRESULT SetURLMapping(ushort* pwszURL, uint dwReserved, const(GUID)* rclsidProvider);
    HRESULT UnregisterProvider(ushort* pwszURL, uint dwReserved, const(GUID)* rclsidProvider);
}

@GUID("0C733ABA-2A1C-11CE-ADE5-00AA0044773D")
interface IGetSession : IUnknown
{
    HRESULT GetSession(const(GUID)* riid, IUnknown* ppSession);
}

@GUID("0C733ABB-2A1C-11CE-ADE5-00AA0044773D")
interface IGetSourceRow : IUnknown
{
    HRESULT GetSourceRow(const(GUID)* riid, IUnknown* ppRow);
}

@GUID("0C733ABD-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetCurrentIndex : IRowsetIndex
{
    HRESULT GetIndex(DBID** ppIndexID);
    HRESULT SetIndex(DBID* pIndexID);
}

@GUID("0C733ABF-2A1C-11CE-ADE5-00AA0044773D")
interface ICommandStream : IUnknown
{
    HRESULT GetCommandStream(GUID* piid, GUID* pguidDialect, IUnknown* ppCommandStream);
    HRESULT SetCommandStream(const(GUID)* riid, const(GUID)* rguidDialect, IUnknown pCommandStream);
}

@GUID("0C733AC2-2A1C-11CE-ADE5-00AA0044773D")
interface IRowsetBookmark : IUnknown
{
    HRESULT PositionOnBookmark(size_t hChapter, uint cbBookmark, char* pBookmark);
}

@GUID("2EBDEE67-3505-43F8-9946-EA44ABC8E5B0")
interface IQueryParser : IUnknown
{
    HRESULT Parse(const(wchar)* pszInputString, IEnumUnknown pCustomProperties, IQuerySolution* ppSolution);
    HRESULT SetOption(STRUCTURED_QUERY_SINGLE_OPTION option, const(PROPVARIANT)* pOptionValue);
    HRESULT GetOption(STRUCTURED_QUERY_SINGLE_OPTION option, PROPVARIANT* pOptionValue);
    HRESULT SetMultiOption(STRUCTURED_QUERY_MULTIOPTION option, const(wchar)* pszOptionKey, 
                           const(PROPVARIANT)* pOptionValue);
    HRESULT GetSchemaProvider(ISchemaProvider* ppSchemaProvider);
    HRESULT RestateToString(ICondition pCondition, BOOL fUseEnglish, ushort** ppszQueryString);
    HRESULT ParsePropertyValue(const(wchar)* pszPropertyName, const(wchar)* pszInputString, 
                               IQuerySolution* ppSolution);
    HRESULT RestatePropertyValueToString(ICondition pCondition, BOOL fUseEnglish, ushort** ppszPropertyName, 
                                         ushort** ppszQueryString);
}

@GUID("A5EFE073-B16F-474F-9F3E-9F8B497A3E08")
interface IConditionFactory : IUnknown
{
    HRESULT MakeNot(ICondition pcSub, BOOL fSimplify, ICondition* ppcResult);
    HRESULT MakeAndOr(CONDITION_TYPE ct, IEnumUnknown peuSubs, BOOL fSimplify, ICondition* ppcResult);
    HRESULT MakeLeaf(const(wchar)* pszPropertyName, CONDITION_OPERATION cop, const(wchar)* pszValueType, 
                     const(PROPVARIANT)* ppropvar, IRichChunk pPropertyNameTerm, IRichChunk pOperationTerm, 
                     IRichChunk pValueTerm, BOOL fExpand, ICondition* ppcResult);
    HRESULT Resolve(ICondition pc, STRUCTURED_QUERY_RESOLVE_OPTION sqro, const(SYSTEMTIME)* pstReferenceTime, 
                    ICondition* ppcResolved);
}

@GUID("D6EBC66B-8921-4193-AFDD-A1789FB7FF57")
interface IQuerySolution : IConditionFactory
{
    HRESULT GetQuery(ICondition* ppQueryNode, IEntity* ppMainType);
    HRESULT GetErrors(const(GUID)* riid, void** ppParseErrors);
    HRESULT GetLexicalData(ushort** ppszInputString, ITokenCollection* ppTokens, uint* plcid, 
                           IUnknown* ppWordBreaker);
}

@GUID("71D222E1-432F-429E-8C13-B6DAFDE5077A")
interface IConditionFactory2 : IConditionFactory
{
    HRESULT CreateTrueFalse(BOOL fVal, CONDITION_CREATION_OPTIONS cco, const(GUID)* riid, void** ppv);
    HRESULT CreateNegation(ICondition pcSub, CONDITION_CREATION_OPTIONS cco, const(GUID)* riid, void** ppv);
    HRESULT CreateCompoundFromObjectArray(CONDITION_TYPE ct, IObjectArray poaSubs, CONDITION_CREATION_OPTIONS cco, 
                                          const(GUID)* riid, void** ppv);
    HRESULT CreateCompoundFromArray(CONDITION_TYPE ct, ICondition* ppcondSubs, uint cSubs, 
                                    CONDITION_CREATION_OPTIONS cco, const(GUID)* riid, void** ppv);
    HRESULT CreateStringLeaf(const(PROPERTYKEY)* propkey, CONDITION_OPERATION cop, const(wchar)* pszValue, 
                             const(wchar)* pszLocaleName, CONDITION_CREATION_OPTIONS cco, const(GUID)* riid, 
                             void** ppv);
    HRESULT CreateIntegerLeaf(const(PROPERTYKEY)* propkey, CONDITION_OPERATION cop, int lValue, 
                              CONDITION_CREATION_OPTIONS cco, const(GUID)* riid, void** ppv);
    HRESULT CreateBooleanLeaf(const(PROPERTYKEY)* propkey, CONDITION_OPERATION cop, BOOL fValue, 
                              CONDITION_CREATION_OPTIONS cco, const(GUID)* riid, void** ppv);
    HRESULT CreateLeaf(const(PROPERTYKEY)* propkey, CONDITION_OPERATION cop, const(PROPVARIANT)* propvar, 
                       const(wchar)* pszSemanticType, const(wchar)* pszLocaleName, IRichChunk pPropertyNameTerm, 
                       IRichChunk pOperationTerm, IRichChunk pValueTerm, CONDITION_CREATION_OPTIONS cco, 
                       const(GUID)* riid, void** ppv);
    HRESULT ResolveCondition(ICondition pc, STRUCTURED_QUERY_RESOLVE_OPTION sqro, 
                             const(SYSTEMTIME)* pstReferenceTime, const(GUID)* riid, void** ppv);
}

@GUID("92D2CC58-4386-45A3-B98C-7E0CE64A4117")
interface IConditionGenerator : IUnknown
{
    HRESULT Initialize(ISchemaProvider pSchemaProvider);
    HRESULT RecognizeNamedEntities(const(wchar)* pszInputString, uint lcidUserLocale, 
                                   ITokenCollection pTokenCollection, INamedEntityCollector pNamedEntities);
    HRESULT GenerateForLeaf(IConditionFactory pConditionFactory, const(wchar)* pszPropertyName, 
                            CONDITION_OPERATION cop, const(wchar)* pszValueType, const(wchar)* pszValue, 
                            const(wchar)* pszValue2, IRichChunk pPropertyNameTerm, IRichChunk pOperationTerm, 
                            IRichChunk pValueTerm, BOOL automaticWildcard, int* pNoStringQuery, 
                            ICondition* ppQueryExpression);
    HRESULT DefaultPhrase(const(wchar)* pszValueType, const(PROPVARIANT)* ppropvar, BOOL fUseEnglish, 
                          ushort** ppszPhrase);
}

@GUID("6BF0A714-3C18-430B-8B5D-83B1C234D3DB")
interface IInterval : IUnknown
{
    HRESULT GetLimits(INTERVAL_LIMIT_KIND* pilkLower, PROPVARIANT* ppropvarLower, INTERVAL_LIMIT_KIND* pilkUpper, 
                      PROPVARIANT* ppropvarUpper);
}

@GUID("780102B0-C43B-4876-BC7B-5E9BA5C88794")
interface IMetaData : IUnknown
{
    HRESULT GetData(ushort** ppszKey, ushort** ppszValue);
}

@GUID("24264891-E80B-4FD3-B7CE-4FF2FAE8931F")
interface IEntity : IUnknown
{
    HRESULT Name(ushort** ppszName);
    HRESULT Base(IEntity* pBaseEntity);
    HRESULT Relationships(const(GUID)* riid, void** pRelationships);
    HRESULT GetRelationship(const(wchar)* pszRelationName, IRelationship* pRelationship);
    HRESULT MetaData(const(GUID)* riid, void** pMetaData);
    HRESULT NamedEntities(const(GUID)* riid, void** pNamedEntities);
    HRESULT GetNamedEntity(const(wchar)* pszValue, INamedEntity* ppNamedEntity);
    HRESULT DefaultPhrase(ushort** ppszPhrase);
}

@GUID("2769280B-5108-498C-9C7F-A51239B63147")
interface IRelationship : IUnknown
{
    HRESULT Name(ushort** ppszName);
    HRESULT IsReal(int* pIsReal);
    HRESULT Destination(IEntity* pDestinationEntity);
    HRESULT MetaData(const(GUID)* riid, void** pMetaData);
    HRESULT DefaultPhrase(ushort** ppszPhrase);
}

@GUID("ABDBD0B1-7D54-49FB-AB5C-BFF4130004CD")
interface INamedEntity : IUnknown
{
    HRESULT GetValue(ushort** ppszValue);
    HRESULT DefaultPhrase(ushort** ppszPhrase);
}

@GUID("8CF89BCB-394C-49B2-AE28-A59DD4ED7F68")
interface ISchemaProvider : IUnknown
{
    HRESULT Entities(const(GUID)* riid, void** pEntities);
    HRESULT RootEntity(IEntity* pRootEntity);
    HRESULT GetEntity(const(wchar)* pszEntityName, IEntity* pEntity);
    HRESULT MetaData(const(GUID)* riid, void** pMetaData);
    HRESULT Localize(uint lcid, ISchemaLocalizerSupport pSchemaLocalizerSupport);
    HRESULT SaveBinary(const(wchar)* pszSchemaBinaryPath);
    HRESULT LookupAuthoredNamedEntity(IEntity pEntity, const(wchar)* pszInputString, 
                                      ITokenCollection pTokenCollection, uint cTokensBegin, uint* pcTokensLength, 
                                      ushort** ppszValue);
}

@GUID("22D8B4F2-F577-4ADB-A335-C2AE88416FAB")
interface ITokenCollection : IUnknown
{
    HRESULT NumberOfTokens(uint* pCount);
    HRESULT GetToken(uint i, uint* pBegin, uint* pLength, ushort** ppsz);
}

@GUID("AF2440F6-8AFC-47D0-9A7F-396A0ACFB43D")
interface INamedEntityCollector : IUnknown
{
    HRESULT Add(uint beginSpan, uint endSpan, uint beginActual, uint endActual, IEntity pType, 
                const(wchar)* pszValue, NAMED_ENTITY_CERTAINTY certainty);
}

@GUID("CA3FDCA2-BFBE-4EED-90D7-0CAEF0A1BDA1")
interface ISchemaLocalizerSupport : IUnknown
{
    HRESULT Localize(const(wchar)* pszGlobalString, ushort** ppszLocalString);
}

@GUID("A879E3C4-AF77-44FB-8F37-EBD1487CF920")
interface IQueryParserManager : IUnknown
{
    HRESULT CreateLoadedParser(const(wchar)* pszCatalog, ushort langidForKeywords, const(GUID)* riid, 
                               void** ppQueryParser);
    HRESULT InitializeOptions(BOOL fUnderstandNQS, BOOL fAutoWildCard, IQueryParser pQueryParser);
    HRESULT SetOption(QUERY_PARSER_MANAGER_OPTION option, const(PROPVARIANT)* pOptionValue);
}

@GUID("0B63E318-9CCC-11D0-BCDB-00805FCCCE04")
interface IUrlAccessor : IUnknown
{
    HRESULT AddRequestParameter(PROPSPEC* pSpec, PROPVARIANT* pVar);
    HRESULT GetDocFormat(char* wszDocFormat, uint dwSize, uint* pdwLength);
    HRESULT GetCLSID(GUID* pClsid);
    HRESULT GetHost(char* wszHost, uint dwSize, uint* pdwLength);
    HRESULT IsDirectory();
    HRESULT GetSize(ulong* pllSize);
    HRESULT GetLastModified(FILETIME* pftLastModified);
    HRESULT GetFileName(char* wszFileName, uint dwSize, uint* pdwLength);
    HRESULT GetSecurityDescriptor(char* pSD, uint dwSize, uint* pdwLength);
    HRESULT GetRedirectedURL(char* wszRedirectedURL, uint dwSize, uint* pdwLength);
    HRESULT GetSecurityProvider(GUID* pSPClsid);
    HRESULT BindToStream(IStream* ppStream);
    HRESULT BindToFilter(IFilter* ppFilter);
}

@GUID("C7310734-AC80-11D1-8DF3-00C04FB6EF4F")
interface IUrlAccessor2 : IUrlAccessor
{
    HRESULT GetDisplayUrl(char* wszDocUrl, uint dwSize, uint* pdwLength);
    HRESULT IsDocument();
    HRESULT GetCodePage(char* wszCodePage, uint dwSize, uint* pdwLength);
}

@GUID("6FBC7005-0455-4874-B8FF-7439450241A3")
interface IUrlAccessor3 : IUrlAccessor2
{
    HRESULT GetImpersonationSidBlobs(const(wchar)* pcwszURL, uint* pcSidCount, BLOB** ppSidBlobs);
}

@GUID("5CC51041-C8D2-41D7-BCA3-9E9E286297DC")
interface IUrlAccessor4 : IUrlAccessor3
{
    HRESULT ShouldIndexItemContent(int* pfIndexContent);
    HRESULT ShouldIndexProperty(const(PROPERTYKEY)* key, int* pfIndexProperty);
}

@GUID("C731065D-AC80-11D1-8DF3-00C04FB6EF4F")
interface IOpLockStatus : IUnknown
{
    HRESULT IsOplockValid(int* pfIsOplockValid);
    HRESULT IsOplockBroken(int* pfIsOplockBroken);
    HRESULT GetOplockEventHandle(HANDLE* phOplockEv);
}

@GUID("C73106E1-AC80-11D1-8DF3-00C04FB6EF4F")
interface ISearchProtocolThreadContext : IUnknown
{
    HRESULT ThreadInit();
    HRESULT ThreadShutdown();
    HRESULT ThreadIdle(uint dwTimeElaspedSinceLastCallInMS);
}

@GUID("C73106BA-AC80-11D1-8DF3-00C04FB6EF4F")
interface ISearchProtocol : IUnknown
{
    HRESULT Init(TIMEOUT_INFO* pTimeoutInfo, IProtocolHandlerSite pProtocolHandlerSite, PROXY_INFO* pProxyInfo);
    HRESULT CreateAccessor(const(wchar)* pcwszURL, AUTHENTICATION_INFO* pAuthenticationInfo, 
                           INCREMENTAL_ACCESS_INFO* pIncrementalAccessInfo, ITEM_INFO* pItemInfo, 
                           IUrlAccessor* ppAccessor);
    HRESULT CloseAccessor(IUrlAccessor pAccessor);
    HRESULT ShutDown();
}

@GUID("7789F0B2-B5B2-4722-8B65-5DBD150697A9")
interface ISearchProtocol2 : ISearchProtocol
{
    HRESULT CreateAccessorEx(const(wchar)* pcwszURL, AUTHENTICATION_INFO* pAuthenticationInfo, 
                             INCREMENTAL_ACCESS_INFO* pIncrementalAccessInfo, ITEM_INFO* pItemInfo, 
                             const(BLOB)* pUserData, IUrlAccessor* ppAccessor);
}

@GUID("0B63E385-9CCC-11D0-BCDB-00805FCCCE04")
interface IProtocolHandlerSite : IUnknown
{
    HRESULT GetFilter(GUID* pclsidObj, const(wchar)* pcwszContentType, const(wchar)* pcwszExtension, 
                      IFilter* ppFilter);
}

@GUID("04C18CCF-1F57-4CBD-88CC-3900F5195CE3")
interface ISearchRoot : IUnknown
{
    HRESULT put_Schedule(const(wchar)* pszTaskArg);
    HRESULT get_Schedule(ushort** ppszTaskArg);
    HRESULT put_RootURL(const(wchar)* pszURL);
    HRESULT get_RootURL(ushort** ppszURL);
    HRESULT put_IsHierarchical(BOOL fIsHierarchical);
    HRESULT get_IsHierarchical(int* pfIsHierarchical);
    HRESULT put_ProvidesNotifications(BOOL fProvidesNotifications);
    HRESULT get_ProvidesNotifications(int* pfProvidesNotifications);
    HRESULT put_UseNotificationsOnly(BOOL fUseNotificationsOnly);
    HRESULT get_UseNotificationsOnly(int* pfUseNotificationsOnly);
    HRESULT put_EnumerationDepth(uint dwDepth);
    HRESULT get_EnumerationDepth(uint* pdwDepth);
    HRESULT put_HostDepth(uint dwDepth);
    HRESULT get_HostDepth(uint* pdwDepth);
    HRESULT put_FollowDirectories(BOOL fFollowDirectories);
    HRESULT get_FollowDirectories(int* pfFollowDirectories);
    HRESULT put_AuthenticationType(AUTH_TYPE authType);
    HRESULT get_AuthenticationType(AUTH_TYPE* pAuthType);
    HRESULT put_User(const(wchar)* pszUser);
    HRESULT get_User(ushort** ppszUser);
    HRESULT put_Password(const(wchar)* pszPassword);
    HRESULT get_Password(ushort** ppszPassword);
}

@GUID("AB310581-AC80-11D1-8DF3-00C04FB6EF52")
interface IEnumSearchRoots : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumSearchRoots* ppenum);
}

@GUID("AB310581-AC80-11D1-8DF3-00C04FB6EF53")
interface ISearchScopeRule : IUnknown
{
    HRESULT get_PatternOrURL(ushort** ppszPatternOrURL);
    HRESULT get_IsIncluded(int* pfIsIncluded);
    HRESULT get_IsDefault(int* pfIsDefault);
    HRESULT get_FollowFlags(uint* pFollowFlags);
}

@GUID("AB310581-AC80-11D1-8DF3-00C04FB6EF54")
interface IEnumSearchScopeRules : IUnknown
{
    HRESULT Next(uint celt, char* pprgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumSearchScopeRules* ppenum);
}

@GUID("AB310581-AC80-11D1-8DF3-00C04FB6EF55")
interface ISearchCrawlScopeManager : IUnknown
{
    HRESULT AddDefaultScopeRule(const(wchar)* pszURL, BOOL fInclude, uint fFollowFlags);
    HRESULT AddRoot(ISearchRoot pSearchRoot);
    HRESULT RemoveRoot(const(wchar)* pszURL);
    HRESULT EnumerateRoots(IEnumSearchRoots* ppSearchRoots);
    HRESULT AddHierarchicalScope(const(wchar)* pszURL, BOOL fInclude, BOOL fDefault, BOOL fOverrideChildren);
    HRESULT AddUserScopeRule(const(wchar)* pszURL, BOOL fInclude, BOOL fOverrideChildren, uint fFollowFlags);
    HRESULT RemoveScopeRule(const(wchar)* pszRule);
    HRESULT EnumerateScopeRules(IEnumSearchScopeRules* ppSearchScopeRules);
    HRESULT HasParentScopeRule(const(wchar)* pszURL, int* pfHasParentRule);
    HRESULT HasChildScopeRule(const(wchar)* pszURL, int* pfHasChildRule);
    HRESULT IncludedInCrawlScope(const(wchar)* pszURL, int* pfIsIncluded);
    HRESULT IncludedInCrawlScopeEx(const(wchar)* pszURL, int* pfIsIncluded, CLUSION_REASON* pReason);
    HRESULT RevertToDefaultScopes();
    HRESULT SaveAll();
    HRESULT GetParentScopeVersionId(const(wchar)* pszURL, int* plScopeId);
    HRESULT RemoveDefaultScopeRule(const(wchar)* pszURL);
}

@GUID("6292F7AD-4E19-4717-A534-8FC22BCD5CCD")
interface ISearchCrawlScopeManager2 : ISearchCrawlScopeManager
{
    HRESULT GetVersion(int** plVersion, HANDLE* phFileMapping);
}

@GUID("AB310581-AC80-11D1-8DF3-00C04FB6EF58")
interface ISearchItemsChangedSink : IUnknown
{
    HRESULT StartedMonitoringScope(const(wchar)* pszURL);
    HRESULT StoppedMonitoringScope(const(wchar)* pszURL);
    HRESULT OnItemsChanged(uint dwNumberOfChanges, char* rgDataChangeEntries, char* rgdwDocIds, 
                           char* rghrCompletionCodes);
}

@GUID("A2FFDF9B-4758-4F84-B729-DF81A1A0612F")
interface ISearchPersistentItemsChangedSink : IUnknown
{
    HRESULT StartedMonitoringScope(const(wchar)* pszURL);
    HRESULT StoppedMonitoringScope(const(wchar)* pszURL);
    HRESULT OnItemsChanged(uint dwNumberOfChanges, char* DataChangeEntries, char* hrCompletionCodes);
}

@GUID("AB310581-AC80-11D1-8DF3-00C04FB6EF65")
interface ISearchViewChangedSink : IUnknown
{
    HRESULT OnChange(int* pdwDocID, SEARCH_ITEM_CHANGE* pChange, int* pfInView);
}

@GUID("B5702E61-E75C-4B64-82A1-6CB4F832FCCF")
interface ISearchNotifyInlineSite : IUnknown
{
    HRESULT OnItemIndexedStatusChange(SEARCH_INDEXING_PHASE sipStatus, uint dwNumEntries, 
                                      char* rgItemStatusEntries);
    HRESULT OnCatalogStatusChange(const(GUID)* guidCatalogResetSignature, const(GUID)* guidCheckPointSignature, 
                                  uint dwLastCheckPointNumber);
}

@GUID("AB310581-AC80-11D1-8DF3-00C04FB6EF50")
interface ISearchCatalogManager : IUnknown
{
    HRESULT get_Name(ushort** pszName);
    HRESULT GetParameter(const(wchar)* pszName, PROPVARIANT** ppValue);
    HRESULT SetParameter(const(wchar)* pszName, PROPVARIANT* pValue);
    HRESULT GetCatalogStatus(CatalogStatus* pStatus, CatalogPausedReason* pPausedReason);
    HRESULT Reset();
    HRESULT Reindex();
    HRESULT ReindexMatchingURLs(const(wchar)* pszPattern);
    HRESULT ReindexSearchRoot(const(wchar)* pszRootURL);
    HRESULT put_ConnectTimeout(uint dwConnectTimeout);
    HRESULT get_ConnectTimeout(uint* pdwConnectTimeout);
    HRESULT put_DataTimeout(uint dwDataTimeout);
    HRESULT get_DataTimeout(uint* pdwDataTimeout);
    HRESULT NumberOfItems(int* plCount);
    HRESULT NumberOfItemsToIndex(int* plIncrementalCount, int* plNotificationQueue, int* plHighPriorityQueue);
    HRESULT URLBeingIndexed(ushort** pszUrl);
    HRESULT GetURLIndexingState(const(wchar)* pszURL, uint* pdwState);
    HRESULT GetPersistentItemsChangedSink(ISearchPersistentItemsChangedSink* ppISearchPersistentItemsChangedSink);
    HRESULT RegisterViewForNotification(const(wchar)* pszView, ISearchViewChangedSink pViewChangedSink, 
                                        uint* pdwCookie);
    HRESULT GetItemsChangedSink(ISearchNotifyInlineSite pISearchNotifyInlineSite, const(GUID)* riid, void** ppv, 
                                GUID* pGUIDCatalogResetSignature, GUID* pGUIDCheckPointSignature, 
                                uint* pdwLastCheckPointNumber);
    HRESULT UnregisterViewForNotification(uint dwCookie);
    HRESULT SetExtensionClusion(const(wchar)* pszExtension, BOOL fExclude);
    HRESULT EnumerateExcludedExtensions(IEnumString* ppExtensions);
    HRESULT GetQueryHelper(ISearchQueryHelper* ppSearchQueryHelper);
    HRESULT put_DiacriticSensitivity(BOOL fDiacriticSensitive);
    HRESULT get_DiacriticSensitivity(int* pfDiacriticSensitive);
    HRESULT GetCrawlScopeManager(ISearchCrawlScopeManager* ppCrawlScopeManager);
}

@GUID("7AC3286D-4D1D-4817-84FC-C1C85E3AF0D9")
interface ISearchCatalogManager2 : ISearchCatalogManager
{
    HRESULT PrioritizeMatchingURLs(const(wchar)* pszPattern, int dwPrioritizeFlags);
}

@GUID("AB310581-AC80-11D1-8DF3-00C04FB6EF63")
interface ISearchQueryHelper : IUnknown
{
    HRESULT get_ConnectionString(ushort** pszConnectionString);
    HRESULT put_QueryContentLocale(uint lcid);
    HRESULT get_QueryContentLocale(uint* plcid);
    HRESULT put_QueryKeywordLocale(uint lcid);
    HRESULT get_QueryKeywordLocale(uint* plcid);
    HRESULT put_QueryTermExpansion(SEARCH_TERM_EXPANSION expandTerms);
    HRESULT get_QueryTermExpansion(SEARCH_TERM_EXPANSION* pExpandTerms);
    HRESULT put_QuerySyntax(SEARCH_QUERY_SYNTAX querySyntax);
    HRESULT get_QuerySyntax(SEARCH_QUERY_SYNTAX* pQuerySyntax);
    HRESULT put_QueryContentProperties(const(wchar)* pszContentProperties);
    HRESULT get_QueryContentProperties(ushort** ppszContentProperties);
    HRESULT put_QuerySelectColumns(const(wchar)* pszSelectColumns);
    HRESULT get_QuerySelectColumns(ushort** ppszSelectColumns);
    HRESULT put_QueryWhereRestrictions(const(wchar)* pszRestrictions);
    HRESULT get_QueryWhereRestrictions(ushort** ppszRestrictions);
    HRESULT put_QuerySorting(const(wchar)* pszSorting);
    HRESULT get_QuerySorting(ushort** ppszSorting);
    HRESULT GenerateSQLFromUserQuery(const(wchar)* pszQuery, ushort** ppszSQL);
    HRESULT WriteProperties(int itemID, uint dwNumberOfColumns, char* pColumns, char* pValues, 
                            FILETIME* pftGatherModifiedTime);
    HRESULT put_QueryMaxResults(int cMaxResults);
    HRESULT get_QueryMaxResults(int* pcMaxResults);
}

@GUID("42811652-079D-481B-87A2-09A69ECC5F44")
interface IRowsetPrioritization : IUnknown
{
    HRESULT SetScopePriority(PRIORITY_LEVEL priority, uint scopeStatisticsEventFrequency);
    HRESULT GetScopePriority(PRIORITY_LEVEL* priority, uint* scopeStatisticsEventFrequency);
    HRESULT GetScopeStatistics(uint* indexedDocumentCount, uint* oustandingAddCount, uint* oustandingModifyCount);
}

@GUID("1551AEA5-5D66-4B11-86F5-D5634CB211B9")
interface IRowsetEvents : IUnknown
{
    HRESULT OnNewItem(const(PROPVARIANT)* itemID, ROWSETEVENT_ITEMSTATE newItemState);
    HRESULT OnChangedItem(const(PROPVARIANT)* itemID, ROWSETEVENT_ITEMSTATE rowsetItemState, 
                          ROWSETEVENT_ITEMSTATE changedItemState);
    HRESULT OnDeletedItem(const(PROPVARIANT)* itemID, ROWSETEVENT_ITEMSTATE deletedItemState);
    HRESULT OnRowsetEvent(ROWSETEVENT_TYPE eventType, const(PROPVARIANT)* eventData);
}

@GUID("AB310581-AC80-11D1-8DF3-00C04FB6EF69")
interface ISearchManager : IUnknown
{
    HRESULT GetIndexerVersionStr(ushort** ppszVersionString);
    HRESULT GetIndexerVersion(uint* pdwMajor, uint* pdwMinor);
    HRESULT GetParameter(const(wchar)* pszName, PROPVARIANT** ppValue);
    HRESULT SetParameter(const(wchar)* pszName, const(PROPVARIANT)* pValue);
    HRESULT get_ProxyName(ushort** ppszProxyName);
    HRESULT get_BypassList(ushort** ppszBypassList);
    HRESULT SetProxy(PROXY_ACCESS sUseProxy, BOOL fLocalByPassProxy, uint dwPortNumber, const(wchar)* pszProxyName, 
                     const(wchar)* pszByPassList);
    HRESULT GetCatalog(const(wchar)* pszCatalog, ISearchCatalogManager* ppCatalogManager);
    HRESULT get_UserAgent(ushort** ppszUserAgent);
    HRESULT put_UserAgent(const(wchar)* pszUserAgent);
    HRESULT get_UseProxy(PROXY_ACCESS* pUseProxy);
    HRESULT get_LocalBypass(int* pfLocalBypass);
    HRESULT get_PortNumber(uint* pdwPortNumber);
}

@GUID("DBAB3F73-DB19-4A79-BFC0-A61A93886DDF")
interface ISearchManager2 : ISearchManager
{
    HRESULT CreateCatalog(const(wchar)* pszCatalog, ISearchCatalogManager* ppCatalogManager);
    HRESULT DeleteCatalog(const(wchar)* pszCatalog);
}

@GUID("24C3CBAA-EBC1-491A-9EF1-9F6D8DEB1B8F")
interface ISearchLanguageSupport : IUnknown
{
    HRESULT SetDiacriticSensitivity(BOOL fDiacriticSensitive);
    HRESULT GetDiacriticSensitivity(int* pfDiacriticSensitive);
    HRESULT LoadWordBreaker(uint lcid, const(GUID)* riid, void** ppWordBreaker, uint* pLcidUsed);
    HRESULT LoadStemmer(uint lcid, const(GUID)* riid, void** ppStemmer, uint* pLcidUsed);
    HRESULT IsPrefixNormalized(const(wchar)* pwcsQueryToken, uint cwcQueryToken, const(wchar)* pwcsDocumentToken, 
                               uint cwcDocumentToken, uint* pulPrefixLength);
}

@GUID("F72C8D96-6DBD-11D1-A1E8-00C04FC2FBE1")
interface IEnumItemProperties : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumItemProperties* ppenum);
    HRESULT GetCount(uint* pnCount);
}

@GUID("A97559F8-6C4A-11D1-A1E8-00C04FC2FBE1")
interface ISubscriptionItem : IUnknown
{
    HRESULT GetCookie(GUID* pCookie);
    HRESULT GetSubscriptionItemInfo(SUBSCRIPTIONITEMINFO* pSubscriptionItemInfo);
    HRESULT SetSubscriptionItemInfo(const(SUBSCRIPTIONITEMINFO)* pSubscriptionItemInfo);
    HRESULT ReadProperties(uint nCount, char* rgwszName, char* rgValue);
    HRESULT WriteProperties(uint nCount, char* rgwszName, char* rgValue);
    HRESULT EnumProperties(IEnumItemProperties* ppEnumItemProperties);
    HRESULT NotifyChanged();
}

@GUID("F72C8D97-6DBD-11D1-A1E8-00C04FC2FBE1")
interface IEnumSubscription : IUnknown
{
    HRESULT Next(uint celt, char* rgelt, uint* pceltFetched);
    HRESULT Skip(uint celt);
    HRESULT Reset();
    HRESULT Clone(IEnumSubscription* ppenum);
    HRESULT GetCount(uint* pnCount);
}

@GUID("085FB2C0-0DF8-11D1-8F4B-00A0C905413F")
interface ISubscriptionMgr : IUnknown
{
    HRESULT DeleteSubscription(const(wchar)* pwszURL, HWND hwnd);
    HRESULT UpdateSubscription(const(wchar)* pwszURL);
    HRESULT UpdateAll();
    HRESULT IsSubscribed(const(wchar)* pwszURL, int* pfSubscribed);
    HRESULT GetSubscriptionInfo(const(wchar)* pwszURL, _tagSubscriptionInfo* pInfo);
    HRESULT GetDefaultInfo(SUBSCRIPTIONTYPE subType, _tagSubscriptionInfo* pInfo);
    HRESULT ShowSubscriptionProperties(const(wchar)* pwszURL, HWND hwnd);
    HRESULT CreateSubscription(HWND hwnd, const(wchar)* pwszURL, const(wchar)* pwszFriendlyName, uint dwFlags, 
                               SUBSCRIPTIONTYPE subsType, _tagSubscriptionInfo* pInfo);
}

@GUID("614BC270-AEDF-11D1-A1F9-00C04FC2FBE1")
interface ISubscriptionMgr2 : ISubscriptionMgr
{
    HRESULT GetItemFromURL(const(wchar)* pwszURL, ISubscriptionItem* ppSubscriptionItem);
    HRESULT GetItemFromCookie(const(GUID)* pSubscriptionCookie, ISubscriptionItem* ppSubscriptionItem);
    HRESULT GetSubscriptionRunState(uint dwNumCookies, char* pCookies, char* pdwRunState);
    HRESULT EnumSubscriptions(uint dwFlags, IEnumSubscription* ppEnumSubscriptions);
    HRESULT UpdateItems(uint dwFlags, uint dwNumCookies, char* pCookies);
    HRESULT AbortItems(uint dwNumCookies, char* pCookies);
    HRESULT AbortAll();
}


// GUIDs

const GUID CLSID_CSearchLanguageSupport = GUIDOF!CSearchLanguageSupport;
const GUID CLSID_CSearchManager         = GUIDOF!CSearchManager;
const GUID CLSID_CSearchRoot            = GUIDOF!CSearchRoot;
const GUID CLSID_CSearchScopeRule       = GUIDOF!CSearchScopeRule;
const GUID CLSID_CompoundCondition      = GUIDOF!CompoundCondition;
const GUID CLSID_ConditionFactory       = GUIDOF!ConditionFactory;
const GUID CLSID_FilterRegistration     = GUIDOF!FilterRegistration;
const GUID CLSID_Interval               = GUIDOF!Interval;
const GUID CLSID_LeafCondition          = GUIDOF!LeafCondition;
const GUID CLSID_NegationCondition      = GUIDOF!NegationCondition;
const GUID CLSID_QueryParser            = GUIDOF!QueryParser;
const GUID CLSID_QueryParserManager     = GUIDOF!QueryParserManager;
const GUID CLSID_SubscriptionMgr        = GUIDOF!SubscriptionMgr;

const GUID IID_IAccessor                           = GUIDOF!IAccessor;
const GUID IID_IAlterIndex                         = GUIDOF!IAlterIndex;
const GUID IID_IAlterTable                         = GUIDOF!IAlterTable;
const GUID IID_IBindResource                       = GUIDOF!IBindResource;
const GUID IID_IChapteredRowset                    = GUIDOF!IChapteredRowset;
const GUID IID_IColumnMapper                       = GUIDOF!IColumnMapper;
const GUID IID_IColumnMapperCreator                = GUIDOF!IColumnMapperCreator;
const GUID IID_IColumnsInfo                        = GUIDOF!IColumnsInfo;
const GUID IID_IColumnsInfo2                       = GUIDOF!IColumnsInfo2;
const GUID IID_IColumnsRowset                      = GUIDOF!IColumnsRowset;
const GUID IID_ICommand                            = GUIDOF!ICommand;
const GUID IID_ICommandPersist                     = GUIDOF!ICommandPersist;
const GUID IID_ICommandPrepare                     = GUIDOF!ICommandPrepare;
const GUID IID_ICommandProperties                  = GUIDOF!ICommandProperties;
const GUID IID_ICommandStream                      = GUIDOF!ICommandStream;
const GUID IID_ICommandText                        = GUIDOF!ICommandText;
const GUID IID_ICommandWithParameters              = GUIDOF!ICommandWithParameters;
const GUID IID_ICondition                          = GUIDOF!ICondition;
const GUID IID_ICondition2                         = GUIDOF!ICondition2;
const GUID IID_IConditionFactory                   = GUIDOF!IConditionFactory;
const GUID IID_IConditionFactory2                  = GUIDOF!IConditionFactory2;
const GUID IID_IConditionGenerator                 = GUIDOF!IConditionGenerator;
const GUID IID_IConvertType                        = GUIDOF!IConvertType;
const GUID IID_ICreateRow                          = GUIDOF!ICreateRow;
const GUID IID_IDBAsynchNotify                     = GUIDOF!IDBAsynchNotify;
const GUID IID_IDBAsynchStatus                     = GUIDOF!IDBAsynchStatus;
const GUID IID_IDBBinderProperties                 = GUIDOF!IDBBinderProperties;
const GUID IID_IDBCreateCommand                    = GUIDOF!IDBCreateCommand;
const GUID IID_IDBCreateSession                    = GUIDOF!IDBCreateSession;
const GUID IID_IDBDataSourceAdmin                  = GUIDOF!IDBDataSourceAdmin;
const GUID IID_IDBInfo                             = GUIDOF!IDBInfo;
const GUID IID_IDBInitialize                       = GUIDOF!IDBInitialize;
const GUID IID_IDBProperties                       = GUIDOF!IDBProperties;
const GUID IID_IDBSchemaRowset                     = GUIDOF!IDBSchemaRowset;
const GUID IID_IEntity                             = GUIDOF!IEntity;
const GUID IID_IEnumItemProperties                 = GUIDOF!IEnumItemProperties;
const GUID IID_IEnumSearchRoots                    = GUIDOF!IEnumSearchRoots;
const GUID IID_IEnumSearchScopeRules               = GUIDOF!IEnumSearchScopeRules;
const GUID IID_IEnumSubscription                   = GUIDOF!IEnumSubscription;
const GUID IID_IErrorLookup                        = GUIDOF!IErrorLookup;
const GUID IID_IErrorRecords                       = GUIDOF!IErrorRecords;
const GUID IID_IGetDataSource                      = GUIDOF!IGetDataSource;
const GUID IID_IGetRow                             = GUIDOF!IGetRow;
const GUID IID_IGetSession                         = GUIDOF!IGetSession;
const GUID IID_IGetSourceRow                       = GUIDOF!IGetSourceRow;
const GUID IID_IIndexDefinition                    = GUIDOF!IIndexDefinition;
const GUID IID_IInterval                           = GUIDOF!IInterval;
const GUID IID_ILoadFilter                         = GUIDOF!ILoadFilter;
const GUID IID_ILoadFilterWithPrivateComActivation = GUIDOF!ILoadFilterWithPrivateComActivation;
const GUID IID_IMDDataset                          = GUIDOF!IMDDataset;
const GUID IID_IMDFind                             = GUIDOF!IMDFind;
const GUID IID_IMDRangeRowset                      = GUIDOF!IMDRangeRowset;
const GUID IID_IMetaData                           = GUIDOF!IMetaData;
const GUID IID_IMultipleResults                    = GUIDOF!IMultipleResults;
const GUID IID_INamedEntity                        = GUIDOF!INamedEntity;
const GUID IID_INamedEntityCollector               = GUIDOF!INamedEntityCollector;
const GUID IID_IObjectAccessControl                = GUIDOF!IObjectAccessControl;
const GUID IID_IOpLockStatus                       = GUIDOF!IOpLockStatus;
const GUID IID_IOpenRowset                         = GUIDOF!IOpenRowset;
const GUID IID_IParentRowset                       = GUIDOF!IParentRowset;
const GUID IID_IProtocolHandlerSite                = GUIDOF!IProtocolHandlerSite;
const GUID IID_IQueryParser                        = GUIDOF!IQueryParser;
const GUID IID_IQueryParserManager                 = GUIDOF!IQueryParserManager;
const GUID IID_IQuerySolution                      = GUIDOF!IQuerySolution;
const GUID IID_IRegisterProvider                   = GUIDOF!IRegisterProvider;
const GUID IID_IRelationship                       = GUIDOF!IRelationship;
const GUID IID_IRichChunk                          = GUIDOF!IRichChunk;
const GUID IID_IRow                                = GUIDOF!IRow;
const GUID IID_IRowChange                          = GUIDOF!IRowChange;
const GUID IID_IRowPosition                        = GUIDOF!IRowPosition;
const GUID IID_IRowPositionChange                  = GUIDOF!IRowPositionChange;
const GUID IID_IRowSchemaChange                    = GUIDOF!IRowSchemaChange;
const GUID IID_IRowset                             = GUIDOF!IRowset;
const GUID IID_IRowsetBookmark                     = GUIDOF!IRowsetBookmark;
const GUID IID_IRowsetChange                       = GUIDOF!IRowsetChange;
const GUID IID_IRowsetChapterMember                = GUIDOF!IRowsetChapterMember;
const GUID IID_IRowsetCurrentIndex                 = GUIDOF!IRowsetCurrentIndex;
const GUID IID_IRowsetEvents                       = GUIDOF!IRowsetEvents;
const GUID IID_IRowsetFind                         = GUIDOF!IRowsetFind;
const GUID IID_IRowsetIdentity                     = GUIDOF!IRowsetIdentity;
const GUID IID_IRowsetIndex                        = GUIDOF!IRowsetIndex;
const GUID IID_IRowsetInfo                         = GUIDOF!IRowsetInfo;
const GUID IID_IRowsetLocate                       = GUIDOF!IRowsetLocate;
const GUID IID_IRowsetNotify                       = GUIDOF!IRowsetNotify;
const GUID IID_IRowsetPrioritization               = GUIDOF!IRowsetPrioritization;
const GUID IID_IRowsetRefresh                      = GUIDOF!IRowsetRefresh;
const GUID IID_IRowsetResynch                      = GUIDOF!IRowsetResynch;
const GUID IID_IRowsetScroll                       = GUIDOF!IRowsetScroll;
const GUID IID_IRowsetUpdate                       = GUIDOF!IRowsetUpdate;
const GUID IID_IRowsetView                         = GUIDOF!IRowsetView;
const GUID IID_ISQLErrorInfo                       = GUIDOF!ISQLErrorInfo;
const GUID IID_ISchemaLocalizerSupport             = GUIDOF!ISchemaLocalizerSupport;
const GUID IID_ISchemaProvider                     = GUIDOF!ISchemaProvider;
const GUID IID_IScopedOperations                   = GUIDOF!IScopedOperations;
const GUID IID_ISearchCatalogManager               = GUIDOF!ISearchCatalogManager;
const GUID IID_ISearchCatalogManager2              = GUIDOF!ISearchCatalogManager2;
const GUID IID_ISearchCrawlScopeManager            = GUIDOF!ISearchCrawlScopeManager;
const GUID IID_ISearchCrawlScopeManager2           = GUIDOF!ISearchCrawlScopeManager2;
const GUID IID_ISearchItemsChangedSink             = GUIDOF!ISearchItemsChangedSink;
const GUID IID_ISearchLanguageSupport              = GUIDOF!ISearchLanguageSupport;
const GUID IID_ISearchManager                      = GUIDOF!ISearchManager;
const GUID IID_ISearchManager2                     = GUIDOF!ISearchManager2;
const GUID IID_ISearchNotifyInlineSite             = GUIDOF!ISearchNotifyInlineSite;
const GUID IID_ISearchPersistentItemsChangedSink   = GUIDOF!ISearchPersistentItemsChangedSink;
const GUID IID_ISearchProtocol                     = GUIDOF!ISearchProtocol;
const GUID IID_ISearchProtocol2                    = GUIDOF!ISearchProtocol2;
const GUID IID_ISearchProtocolThreadContext        = GUIDOF!ISearchProtocolThreadContext;
const GUID IID_ISearchQueryHelper                  = GUIDOF!ISearchQueryHelper;
const GUID IID_ISearchRoot                         = GUIDOF!ISearchRoot;
const GUID IID_ISearchScopeRule                    = GUIDOF!ISearchScopeRule;
const GUID IID_ISearchViewChangedSink              = GUIDOF!ISearchViewChangedSink;
const GUID IID_ISecurityInfo                       = GUIDOF!ISecurityInfo;
const GUID IID_ISessionProperties                  = GUIDOF!ISessionProperties;
const GUID IID_ISimpleCommandCreator               = GUIDOF!ISimpleCommandCreator;
const GUID IID_ISourcesRowset                      = GUIDOF!ISourcesRowset;
const GUID IID_IStemmer                            = GUIDOF!IStemmer;
const GUID IID_ISubscriptionItem                   = GUIDOF!ISubscriptionItem;
const GUID IID_ISubscriptionMgr                    = GUIDOF!ISubscriptionMgr;
const GUID IID_ISubscriptionMgr2                   = GUIDOF!ISubscriptionMgr2;
const GUID IID_ITableCreation                      = GUIDOF!ITableCreation;
const GUID IID_ITableDefinition                    = GUIDOF!ITableDefinition;
const GUID IID_ITableDefinitionWithConstraints     = GUIDOF!ITableDefinitionWithConstraints;
const GUID IID_ITokenCollection                    = GUIDOF!ITokenCollection;
const GUID IID_ITransactionJoin                    = GUIDOF!ITransactionJoin;
const GUID IID_ITransactionLocal                   = GUIDOF!ITransactionLocal;
const GUID IID_ITransactionObject                  = GUIDOF!ITransactionObject;
const GUID IID_ITrusteeAdmin                       = GUIDOF!ITrusteeAdmin;
const GUID IID_ITrusteeGroupAdmin                  = GUIDOF!ITrusteeGroupAdmin;
const GUID IID_IUrlAccessor                        = GUIDOF!IUrlAccessor;
const GUID IID_IUrlAccessor2                       = GUIDOF!IUrlAccessor2;
const GUID IID_IUrlAccessor3                       = GUIDOF!IUrlAccessor3;
const GUID IID_IUrlAccessor4                       = GUIDOF!IUrlAccessor4;
const GUID IID_IViewChapter                        = GUIDOF!IViewChapter;
const GUID IID_IViewFilter                         = GUIDOF!IViewFilter;
const GUID IID_IViewRowset                         = GUIDOF!IViewRowset;
const GUID IID_IViewSort                           = GUIDOF!IViewSort;
const GUID IID_IWordBreaker                        = GUIDOF!IWordBreaker;
const GUID IID_IWordFormSink                       = GUIDOF!IWordFormSink;
const GUID IID_IWordSink                           = GUIDOF!IWordSink;
