module windows.antimalware;

public import windows.core;
public import windows.com : HRESULT, IUnknown;
public import windows.systemservices : BOOL;

extern(Windows):


// Enums


enum : int
{
    AMSI_RESULT_CLEAN                  = 0x00000000,
    AMSI_RESULT_NOT_DETECTED           = 0x00000001,
    AMSI_RESULT_BLOCKED_BY_ADMIN_START = 0x00004000,
    AMSI_RESULT_BLOCKED_BY_ADMIN_END   = 0x00004fff,
    AMSI_RESULT_DETECTED               = 0x00008000,
}
alias AMSI_RESULT = int;

enum : int
{
    AMSI_ATTRIBUTE_APP_NAME               = 0x00000000,
    AMSI_ATTRIBUTE_CONTENT_NAME           = 0x00000001,
    AMSI_ATTRIBUTE_CONTENT_SIZE           = 0x00000002,
    AMSI_ATTRIBUTE_CONTENT_ADDRESS        = 0x00000003,
    AMSI_ATTRIBUTE_SESSION                = 0x00000004,
    AMSI_ATTRIBUTE_REDIRECT_CHAIN_SIZE    = 0x00000005,
    AMSI_ATTRIBUTE_REDIRECT_CHAIN_ADDRESS = 0x00000006,
    AMSI_ATTRIBUTE_ALL_SIZE               = 0x00000007,
    AMSI_ATTRIBUTE_ALL_ADDRESS            = 0x00000008,
    AMSI_ATTRIBUTE_QUIET                  = 0x00000009,
}
alias AMSI_ATTRIBUTE = int;

enum : int
{
    AMSI_UAC_REQUEST_TYPE_EXE          = 0x00000000,
    AMSI_UAC_REQUEST_TYPE_COM          = 0x00000001,
    AMSI_UAC_REQUEST_TYPE_MSI          = 0x00000002,
    AMSI_UAC_REQUEST_TYPE_AX           = 0x00000003,
    AMSI_UAC_REQUEST_TYPE_PACKAGED_APP = 0x00000004,
    AMSI_UAC_REQUEST_TYPE_MAX          = 0x00000005,
}
alias AMSI_UAC_REQUEST_TYPE = int;

enum : int
{
    AMSI_UAC_TRUST_STATE_TRUSTED   = 0x00000000,
    AMSI_UAC_TRUST_STATE_UNTRUSTED = 0x00000001,
    AMSI_UAC_TRUST_STATE_BLOCKED   = 0x00000002,
    AMSI_UAC_TRUST_STATE_MAX       = 0x00000003,
}
alias AMSI_UAC_TRUST_STATE = int;

enum : int
{
    AMSI_UAC_MSI_ACTION_INSTALL     = 0x00000000,
    AMSI_UAC_MSI_ACTION_UNINSTALL   = 0x00000001,
    AMSI_UAC_MSI_ACTION_UPDATE      = 0x00000002,
    AMSI_UAC_MSI_ACTION_MAINTENANCE = 0x00000003,
    AMSI_UAC_MSI_ACTION_MAX         = 0x00000004,
}
alias AMSI_UAC_MSI_ACTION = int;

// Structs


struct AMSI_UAC_REQUEST_EXE_INFO
{
    uint          ulLength;
    const(wchar)* lpwszApplicationName;
    const(wchar)* lpwszCommandLine;
    const(wchar)* lpwszDLLParameter;
}

struct AMSI_UAC_REQUEST_COM_INFO
{
    uint          ulLength;
    const(wchar)* lpwszServerBinary;
    const(wchar)* lpwszRequestor;
    GUID          Clsid;
}

struct AMSI_UAC_REQUEST_MSI_INFO
{
    uint                ulLength;
    AMSI_UAC_MSI_ACTION MsiAction;
    const(wchar)*       lpwszProductName;
    const(wchar)*       lpwszVersion;
    const(wchar)*       lpwszLanguage;
    const(wchar)*       lpwszManufacturer;
    const(wchar)*       lpwszPackagePath;
    const(wchar)*       lpwszPackageSource;
    uint                ulUpdates;
    ushort**            ppwszUpdates;
    ushort**            ppwszUpdateSources;
}

struct AMSI_UAC_REQUEST_AX_INFO
{
    uint          ulLength;
    const(wchar)* lpwszLocalInstallPath;
    const(wchar)* lpwszSourceURL;
}

struct AMSI_UAC_REQUEST_PACKAGED_APP_INFO
{
    uint          ulLength;
    const(wchar)* lpwszApplicationName;
    const(wchar)* lpwszCommandLine;
    const(wchar)* lpPackageFamilyName;
    const(wchar)* lpApplicationId;
}

struct AMSI_UAC_REQUEST_CONTEXT
{
    uint                 ulLength;
    uint                 ulRequestorProcessId;
    AMSI_UAC_TRUST_STATE UACTrustState;
    AMSI_UAC_REQUEST_TYPE Type;
    union RequestType
    {
        AMSI_UAC_REQUEST_EXE_INFO ExeInfo;
        AMSI_UAC_REQUEST_COM_INFO ComInfo;
        AMSI_UAC_REQUEST_MSI_INFO MsiInfo;
        AMSI_UAC_REQUEST_AX_INFO ActiveXInfo;
        AMSI_UAC_REQUEST_PACKAGED_APP_INFO PackagedAppInfo;
    }
    BOOL                 bAutoElevateRequest;
}

struct HAMSICONTEXT__
{
    int unused;
}

struct HAMSISESSION__
{
    int unused;
}

// Functions

@DllImport("Amsi")
HRESULT AmsiInitialize(const(wchar)* appName, ptrdiff_t* amsiContext);

@DllImport("Amsi")
void AmsiUninitialize(ptrdiff_t amsiContext);

@DllImport("Amsi")
HRESULT AmsiOpenSession(ptrdiff_t amsiContext, ptrdiff_t* amsiSession);

@DllImport("Amsi")
void AmsiCloseSession(ptrdiff_t amsiContext, ptrdiff_t amsiSession);

@DllImport("Amsi")
HRESULT AmsiScanBuffer(ptrdiff_t amsiContext, char* buffer, uint length, const(wchar)* contentName, 
                       ptrdiff_t amsiSession, AMSI_RESULT* result);

@DllImport("Amsi")
HRESULT AmsiScanString(ptrdiff_t amsiContext, const(wchar)* string, const(wchar)* contentName, 
                       ptrdiff_t amsiSession, AMSI_RESULT* result);


// Interfaces

@GUID("FDB00E52-A214-4AA1-8FBA-4357BB0072EC")
struct CAntimalware;

@GUID("3E47F2E5-81D4-4D3B-897F-545096770373")
interface IAmsiStream : IUnknown
{
    HRESULT GetAttribute(AMSI_ATTRIBUTE attribute, uint dataSize, ubyte* data, uint* retData);
    HRESULT Read(ulong position, uint size, ubyte* buffer, uint* readSize);
}

@GUID("B2CABFE3-FE04-42B1-A5DF-08D483D4D125")
interface IAntimalwareProvider : IUnknown
{
    HRESULT Scan(IAmsiStream stream, AMSI_RESULT* result);
    void    CloseSession(ulong session);
    HRESULT DisplayName(ushort** displayName);
}

@GUID("B2CABFE4-FE04-42B1-A5DF-08D483D4D125")
interface IAntimalwareUacProvider : IUnknown
{
    HRESULT UacScan(AMSI_UAC_REQUEST_CONTEXT* context, AMSI_RESULT* result);
    HRESULT DisplayName(ushort** displayName);
}

@GUID("82D29C2E-F062-44E6-B5C9-3D9A2F24A2DF")
interface IAntimalware : IUnknown
{
    HRESULT Scan(IAmsiStream stream, AMSI_RESULT* result, IAntimalwareProvider* provider);
    void    CloseSession(ulong session);
}


// GUIDs

const GUID CLSID_CAntimalware = GUIDOF!CAntimalware;

const GUID IID_IAmsiStream             = GUIDOF!IAmsiStream;
const GUID IID_IAntimalware            = GUIDOF!IAntimalware;
const GUID IID_IAntimalwareProvider    = GUIDOF!IAntimalwareProvider;
const GUID IID_IAntimalwareUacProvider = GUIDOF!IAntimalwareUacProvider;
